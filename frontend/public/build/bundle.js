
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_rest_props(props, keys) {
        const rest = {};
        keys = new Set(keys);
        for (const k in props)
            if (!keys.has(k) && k[0] !== '$')
                rest[k] = props[k];
        return rest;
    }
    function compute_slots(slots) {
        const result = {};
        for (const key in slots) {
            result[key] = true;
        }
        return result;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function stop_propagation(fn) {
        return function (event) {
            event.stopPropagation();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function self$1(fn) {
        return function (event) {
            // @ts-ignore
            if (event.target === this)
                fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    /**
     * List of attributes that should always be set through the attr method,
     * because updating them through the property setter doesn't work reliably.
     * In the example of `width`/`height`, the problem is that the setter only
     * accepts numeric values, but the attribute can also be set to a string like `50%`.
     * If this list becomes too big, rethink this approach.
     */
    const always_set_through_set_attribute = ['width', 'height'];
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function set_svg_attributes(node, attributes) {
        for (const key in attributes) {
            attr(node, key, attributes[key]);
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value == null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    /**
     * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
     * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
     * it can be called from an external module).
     *
     * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
     *
     * https://svelte.dev/docs#run-time-svelte-onmount
     */
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    /**
     * Schedules a callback to run immediately after the component has been updated.
     *
     * The first time the callback runs will be after the initial `onMount`
     */
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    /**
     * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
     * Event dispatchers are functions that can take two arguments: `name` and `detail`.
     *
     * Component events created with `createEventDispatcher` create a
     * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
     * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
     * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
     * property and can contain any type of data.
     *
     * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
     */
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }
    /**
     * Associates an arbitrary `context` object with the current component and the specified `key`
     * and returns that object. The context is then available to children of the component
     * (including slotted content) with `getContext`.
     *
     * Like lifecycle functions, this must be called during component initialisation.
     *
     * https://svelte.dev/docs#run-time-svelte-setcontext
     */
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
        return context;
    }
    /**
     * Retrieves the context that belongs to the closest parent component with the specified `key`.
     * Must be called during component initialisation.
     *
     * https://svelte.dev/docs#run-time-svelte-getcontext
     */
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    let render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = /* @__PURE__ */ Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        // Do not reenter flush while dirty components are updated, as this can
        // result in an infinite loop. Instead, let the inner flush handle it.
        // Reentrancy is ok afterwards for bindings etc.
        if (flushidx !== 0) {
            return;
        }
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            try {
                while (flushidx < dirty_components.length) {
                    const component = dirty_components[flushidx];
                    flushidx++;
                    set_current_component(component);
                    update(component.$$);
                }
            }
            catch (e) {
                // reset dirty state to not end up in a deadlocked state and then rethrow
                dirty_components.length = 0;
                flushidx = 0;
                throw e;
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    /**
     * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
     */
    function flush_render_callbacks(fns) {
        const filtered = [];
        const targets = [];
        render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
        targets.forEach((c) => c());
        render_callbacks = filtered;
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        const updates = [];
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                // defer updates until all the DOM shuffling is done
                updates.push(() => block.p(child_ctx, dirty));
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        run_all(updates);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
                // if the component was destroyed immediately
                // it will update the `$$.on_destroy` reference to `null`.
                // the destructured on_destroy may still reference to the old array
                if (component.$$.on_destroy) {
                    component.$$.on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            flush_render_callbacks($$.after_update);
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init$1(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: [],
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            if (!is_function(callback)) {
                return noop;
            }
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        if (has_stop_immediate_propagation)
            modifiers.push('stopImmediatePropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    function construct_svelte_component_dev(component, props) {
        const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';
        try {
            const instance = new component(props);
            if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {
                throw new Error(error_message);
            }
            return instance;
        }
        catch (err) {
            const { message } = err;
            if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {
                throw new Error(error_message);
            }
            else {
                throw err;
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=} start
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0 && stop) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    /* node_modules/carbon-components-svelte/src/icons/WarningFilled.svelte generated by Svelte v3.59.2 */

    const file$k = "node_modules/carbon-components-svelte/src/icons/WarningFilled.svelte";

    // (24:2) {#if title}
    function create_if_block$h(ctx) {
    	let title_1;
    	let t;

    	const block = {
    		c: function create() {
    			title_1 = svg_element("title");
    			t = text(/*title*/ ctx[1]);
    			add_location(title_1, file$k, 23, 13, 549);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, title_1, anchor);
    			append_dev(title_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(title_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(24:2) {#if title}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let if_block = /*title*/ ctx[1] && create_if_block$h(ctx);

    	let svg_levels = [
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{ viewBox: "0 0 32 32" },
    		{ fill: "currentColor" },
    		{ preserveAspectRatio: "xMidYMid meet" },
    		{ width: /*size*/ ctx[0] },
    		{ height: /*size*/ ctx[0] },
    		/*attributes*/ ctx[2],
    		/*$$restProps*/ ctx[3]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			if (if_block) if_block.c();
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M16,2C8.3,2,2,8.3,2,16s6.3,14,14,14s14-6.3,14-14C30,8.3,23.7,2,16,2z M14.9,8h2.2v11h-2.2V8z M16,25\tc-0.8,0-1.5-0.7-1.5-1.5S15.2,22,16,22c0.8,0,1.5,0.7,1.5,1.5S16.8,25,16,25z");
    			add_location(path0, file$k, 24, 2, 579);
    			attr_dev(path1, "fill", "none");
    			attr_dev(path1, "d", "M17.5,23.5c0,0.8-0.7,1.5-1.5,1.5c-0.8,0-1.5-0.7-1.5-1.5S15.2,22,16,22\tC16.8,22,17.5,22.7,17.5,23.5z M17.1,8h-2.2v11h2.2V8z");
    			attr_dev(path1, "data-icon-path", "inner-path");
    			attr_dev(path1, "opacity", "0");
    			add_location(path1, file$k, 26, 10, 777);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$k, 13, 0, 338);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			if (if_block) if_block.m(svg, null);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*title*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$h(ctx);
    					if_block.c();
    					if_block.m(svg, path0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{ viewBox: "0 0 32 32" },
    				{ fill: "currentColor" },
    				{ preserveAspectRatio: "xMidYMid meet" },
    				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
    				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
    				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
    				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let labelled;
    	let attributes;
    	const omit_props_names = ["size","title"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('WarningFilled', slots, []);
    	let { size = 16 } = $$props;
    	let { title = undefined } = $$props;

    	$$self.$$set = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
    		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
    	};

    	$$self.$capture_state = () => ({ size, title, labelled, attributes });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
    		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
    		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
    		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
    		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

    		$$invalidate(2, attributes = {
    			"aria-hidden": labelled ? undefined : true,
    			role: labelled ? "img" : undefined,
    			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
    		});
    	};

    	$$props = exclude_internal_props($$props);
    	return [size, title, attributes, $$restProps, labelled];
    }

    class WarningFilled extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$l, create_fragment$l, safe_not_equal, { size: 0, title: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "WarningFilled",
    			options,
    			id: create_fragment$l.name
    		});
    	}

    	get size() {
    		throw new Error("<WarningFilled>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<WarningFilled>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<WarningFilled>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<WarningFilled>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var WarningFilled$1 = WarningFilled;

    /* node_modules/carbon-components-svelte/src/icons/WarningAltFilled.svelte generated by Svelte v3.59.2 */

    const file$j = "node_modules/carbon-components-svelte/src/icons/WarningAltFilled.svelte";

    // (24:2) {#if title}
    function create_if_block$g(ctx) {
    	let title_1;
    	let t;

    	const block = {
    		c: function create() {
    			title_1 = svg_element("title");
    			t = text(/*title*/ ctx[1]);
    			add_location(title_1, file$j, 23, 13, 549);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, title_1, anchor);
    			append_dev(title_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(title_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(24:2) {#if title}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;
    	let if_block = /*title*/ ctx[1] && create_if_block$g(ctx);

    	let svg_levels = [
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{ viewBox: "0 0 32 32" },
    		{ fill: "currentColor" },
    		{ preserveAspectRatio: "xMidYMid meet" },
    		{ width: /*size*/ ctx[0] },
    		{ height: /*size*/ ctx[0] },
    		/*attributes*/ ctx[2],
    		/*$$restProps*/ ctx[3]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			if (if_block) if_block.c();
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(path0, "fill", "none");
    			attr_dev(path0, "d", "M16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Zm-1.125-5h2.25V12h-2.25Z");
    			attr_dev(path0, "data-icon-path", "inner-path");
    			add_location(path0, file$j, 24, 2, 579);
    			attr_dev(path1, "d", "M16.002,6.1714h-.004L4.6487,27.9966,4.6506,28H27.3494l.0019-.0034ZM14.875,12h2.25v9h-2.25ZM16,26a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,16,26Z");
    			add_location(path1, file$j, 27, 39, 722);
    			attr_dev(path2, "d", "M29,30H3a1,1,0,0,1-.8872-1.4614l13-25a1,1,0,0,1,1.7744,0l13,25A1,1,0,0,1,29,30ZM4.6507,28H27.3493l.002-.0033L16.002,6.1714h-.004L4.6487,27.9967Z");
    			add_location(path2, file$j, 29, 10, 886);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$j, 13, 0, 338);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			if (if_block) if_block.m(svg, null);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*title*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					if_block.m(svg, path0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{ viewBox: "0 0 32 32" },
    				{ fill: "currentColor" },
    				{ preserveAspectRatio: "xMidYMid meet" },
    				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
    				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
    				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
    				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let labelled;
    	let attributes;
    	const omit_props_names = ["size","title"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('WarningAltFilled', slots, []);
    	let { size = 16 } = $$props;
    	let { title = undefined } = $$props;

    	$$self.$$set = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
    		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
    	};

    	$$self.$capture_state = () => ({ size, title, labelled, attributes });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
    		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
    		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
    		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
    		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

    		$$invalidate(2, attributes = {
    			"aria-hidden": labelled ? undefined : true,
    			role: labelled ? "img" : undefined,
    			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
    		});
    	};

    	$$props = exclude_internal_props($$props);
    	return [size, title, attributes, $$restProps, labelled];
    }

    class WarningAltFilled extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$k, create_fragment$k, safe_not_equal, { size: 0, title: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "WarningAltFilled",
    			options,
    			id: create_fragment$k.name
    		});
    	}

    	get size() {
    		throw new Error("<WarningAltFilled>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<WarningAltFilled>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<WarningAltFilled>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<WarningAltFilled>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var WarningAltFilled$1 = WarningAltFilled;

    /* node_modules/carbon-components-svelte/src/icons/Close.svelte generated by Svelte v3.59.2 */

    const file$i = "node_modules/carbon-components-svelte/src/icons/Close.svelte";

    // (24:2) {#if title}
    function create_if_block$f(ctx) {
    	let title_1;
    	let t;

    	const block = {
    		c: function create() {
    			title_1 = svg_element("title");
    			t = text(/*title*/ ctx[1]);
    			add_location(title_1, file$i, 23, 13, 549);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, title_1, anchor);
    			append_dev(title_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(title_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(24:2) {#if title}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let svg;
    	let path;
    	let if_block = /*title*/ ctx[1] && create_if_block$f(ctx);

    	let svg_levels = [
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{ viewBox: "0 0 32 32" },
    		{ fill: "currentColor" },
    		{ preserveAspectRatio: "xMidYMid meet" },
    		{ width: /*size*/ ctx[0] },
    		{ height: /*size*/ ctx[0] },
    		/*attributes*/ ctx[2],
    		/*$$restProps*/ ctx[3]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			if (if_block) if_block.c();
    			path = svg_element("path");
    			attr_dev(path, "d", "M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z");
    			add_location(path, file$i, 24, 2, 579);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$i, 13, 0, 338);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			if (if_block) if_block.m(svg, null);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*title*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$f(ctx);
    					if_block.c();
    					if_block.m(svg, path);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{ viewBox: "0 0 32 32" },
    				{ fill: "currentColor" },
    				{ preserveAspectRatio: "xMidYMid meet" },
    				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
    				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
    				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
    				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let labelled;
    	let attributes;
    	const omit_props_names = ["size","title"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Close', slots, []);
    	let { size = 16 } = $$props;
    	let { title = undefined } = $$props;

    	$$self.$$set = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
    		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
    	};

    	$$self.$capture_state = () => ({ size, title, labelled, attributes });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
    		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
    		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
    		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
    		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

    		$$invalidate(2, attributes = {
    			"aria-hidden": labelled ? undefined : true,
    			role: labelled ? "img" : undefined,
    			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
    		});
    	};

    	$$props = exclude_internal_props($$props);
    	return [size, title, attributes, $$restProps, labelled];
    }

    class Close extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$j, create_fragment$j, safe_not_equal, { size: 0, title: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Close",
    			options,
    			id: create_fragment$j.name
    		});
    	}

    	get size() {
    		throw new Error("<Close>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Close>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<Close>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Close>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Close$1 = Close;

    /* node_modules/carbon-components-svelte/src/icons/IconSearch.svelte generated by Svelte v3.59.2 */

    const file$h = "node_modules/carbon-components-svelte/src/icons/IconSearch.svelte";

    // (24:2) {#if title}
    function create_if_block$e(ctx) {
    	let title_1;
    	let t;

    	const block = {
    		c: function create() {
    			title_1 = svg_element("title");
    			t = text(/*title*/ ctx[1]);
    			add_location(title_1, file$h, 23, 13, 549);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, title_1, anchor);
    			append_dev(title_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(title_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(24:2) {#if title}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let svg;
    	let path;
    	let if_block = /*title*/ ctx[1] && create_if_block$e(ctx);

    	let svg_levels = [
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{ viewBox: "0 0 32 32" },
    		{ fill: "currentColor" },
    		{ preserveAspectRatio: "xMidYMid meet" },
    		{ width: /*size*/ ctx[0] },
    		{ height: /*size*/ ctx[0] },
    		/*attributes*/ ctx[2],
    		/*$$restProps*/ ctx[3]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			if (if_block) if_block.c();
    			path = svg_element("path");
    			attr_dev(path, "d", "M29,27.5859l-7.5521-7.5521a11.0177,11.0177,0,1,0-1.4141,1.4141L27.5859,29ZM4,13a9,9,0,1,1,9,9A9.01,9.01,0,0,1,4,13Z");
    			add_location(path, file$h, 24, 2, 579);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$h, 13, 0, 338);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			if (if_block) if_block.m(svg, null);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*title*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$e(ctx);
    					if_block.c();
    					if_block.m(svg, path);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{ viewBox: "0 0 32 32" },
    				{ fill: "currentColor" },
    				{ preserveAspectRatio: "xMidYMid meet" },
    				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
    				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
    				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
    				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let labelled;
    	let attributes;
    	const omit_props_names = ["size","title"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('IconSearch', slots, []);
    	let { size = 16 } = $$props;
    	let { title = undefined } = $$props;

    	$$self.$$set = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
    		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
    	};

    	$$self.$capture_state = () => ({ size, title, labelled, attributes });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
    		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
    		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
    		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
    		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

    		$$invalidate(2, attributes = {
    			"aria-hidden": labelled ? undefined : true,
    			role: labelled ? "img" : undefined,
    			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
    		});
    	};

    	$$props = exclude_internal_props($$props);
    	return [size, title, attributes, $$restProps, labelled];
    }

    class IconSearch extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$i, create_fragment$i, safe_not_equal, { size: 0, title: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "IconSearch",
    			options,
    			id: create_fragment$i.name
    		});
    	}

    	get size() {
    		throw new Error("<IconSearch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<IconSearch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<IconSearch>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<IconSearch>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var IconSearch$1 = IconSearch;

    /* node_modules/carbon-components-svelte/src/Search/SearchSkeleton.svelte generated by Svelte v3.59.2 */

    const file$g = "node_modules/carbon-components-svelte/src/Search/SearchSkeleton.svelte";

    function create_fragment$h(ctx) {
    	let div1;
    	let span;
    	let t;
    	let div0;
    	let mounted;
    	let dispose;
    	let div1_levels = [/*$$restProps*/ ctx[1]];
    	let div_data_1 = {};

    	for (let i = 0; i < div1_levels.length; i += 1) {
    		div_data_1 = assign(div_data_1, div1_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			span = element("span");
    			t = space();
    			div0 = element("div");
    			toggle_class(span, "bx--label", true);
    			add_location(span, file$g, 20, 2, 428);
    			toggle_class(div0, "bx--search-input", true);
    			add_location(div0, file$g, 21, 2, 469);
    			set_attributes(div1, div_data_1);
    			toggle_class(div1, "bx--skeleton", true);
    			toggle_class(div1, "bx--search--sm", /*size*/ ctx[0] === 'sm');
    			toggle_class(div1, "bx--search--lg", /*size*/ ctx[0] === 'lg');
    			toggle_class(div1, "bx--search--xl", /*size*/ ctx[0] === 'xl');
    			add_location(div1, file$g, 9, 0, 189);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, span);
    			append_dev(div1, t);
    			append_dev(div1, div0);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div1, "click", /*click_handler*/ ctx[2], false, false, false, false),
    					listen_dev(div1, "mouseover", /*mouseover_handler*/ ctx[3], false, false, false, false),
    					listen_dev(div1, "mouseenter", /*mouseenter_handler*/ ctx[4], false, false, false, false),
    					listen_dev(div1, "mouseleave", /*mouseleave_handler*/ ctx[5], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			set_attributes(div1, div_data_1 = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
    			toggle_class(div1, "bx--skeleton", true);
    			toggle_class(div1, "bx--search--sm", /*size*/ ctx[0] === 'sm');
    			toggle_class(div1, "bx--search--lg", /*size*/ ctx[0] === 'lg');
    			toggle_class(div1, "bx--search--xl", /*size*/ ctx[0] === 'xl');
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	const omit_props_names = ["size"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SearchSkeleton', slots, []);
    	let { size = "xl" } = $$props;

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mouseover_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mouseenter_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mouseleave_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
    	};

    	$$self.$capture_state = () => ({ size });

    	$$self.$inject_state = $$new_props => {
    		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		size,
    		$$restProps,
    		click_handler,
    		mouseover_handler,
    		mouseenter_handler,
    		mouseleave_handler
    	];
    }

    class SearchSkeleton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$h, create_fragment$h, safe_not_equal, { size: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SearchSkeleton",
    			options,
    			id: create_fragment$h.name
    		});
    	}

    	get size() {
    		throw new Error("<SearchSkeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<SearchSkeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var SearchSkeleton$1 = SearchSkeleton;

    /* node_modules/carbon-components-svelte/src/Search/Search.svelte generated by Svelte v3.59.2 */
    const file$f = "node_modules/carbon-components-svelte/src/Search/Search.svelte";
    const get_labelText_slot_changes$2 = dirty => ({});
    const get_labelText_slot_context$2 = ctx => ({});

    // (91:0) {:else}
    function create_else_block$6(ctx) {
    	let div1;
    	let div0;
    	let switch_instance0;
    	let t0;
    	let label;
    	let label_id_value;
    	let t1;
    	let input;
    	let input_autofocus_value;
    	let t2;
    	let button;
    	let switch_instance1;
    	let div1_aria_labelledby_value;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*icon*/ ctx[14];

    	function switch_props(ctx) {
    		return {
    			props: { class: "bx--search-magnifier-icon" },
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance0 = construct_svelte_component_dev(switch_value, switch_props());
    	}

    	const labelText_slot_template = /*#slots*/ ctx[20].labelText;
    	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[19], get_labelText_slot_context$2);
    	const labelText_slot_or_fallback = labelText_slot || fallback_block$2(ctx);

    	let input_levels = [
    		{ type: "text" },
    		{ role: "searchbox" },
    		{
    			autofocus: input_autofocus_value = /*autofocus*/ ctx[11] === true ? true : undefined
    		},
    		{ autocomplete: /*autocomplete*/ ctx[10] },
    		{ disabled: /*disabled*/ ctx[7] },
    		{ id: /*id*/ ctx[15] },
    		{ placeholder: /*placeholder*/ ctx[9] },
    		/*$$restProps*/ ctx[18]
    	];

    	let input_data = {};

    	for (let i = 0; i < input_levels.length; i += 1) {
    		input_data = assign(input_data, input_levels[i]);
    	}

    	var switch_value_1 = Close$1;

    	function switch_props_1(ctx) {
    		return {
    			props: { size: /*size*/ ctx[3] === 'xl' ? 20 : 16 },
    			$$inline: true
    		};
    	}

    	if (switch_value_1) {
    		switch_instance1 = construct_svelte_component_dev(switch_value_1, switch_props_1(ctx));
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (switch_instance0) create_component(switch_instance0.$$.fragment);
    			t0 = space();
    			label = element("label");
    			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
    			t1 = space();
    			input = element("input");
    			t2 = space();
    			button = element("button");
    			if (switch_instance1) create_component(switch_instance1.$$.fragment);
    			toggle_class(div0, "bx--search-magnifier", true);
    			add_location(div0, file$f, 105, 4, 2656);
    			attr_dev(label, "id", label_id_value = "" + (/*id*/ ctx[15] + "-search"));
    			attr_dev(label, "for", /*id*/ ctx[15]);
    			toggle_class(label, "bx--label", true);
    			add_location(label, file$f, 114, 4, 2905);
    			set_attributes(input, input_data);
    			toggle_class(input, "bx--search-input", true);
    			add_location(input, file$f, 120, 4, 3089);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "aria-label", /*closeButtonLabelText*/ ctx[12]);
    			button.disabled = /*disabled*/ ctx[7];
    			toggle_class(button, "bx--search-close", true);
    			toggle_class(button, "bx--search-close--hidden", /*value*/ ctx[2] === '');
    			add_location(button, file$f, 154, 4, 3867);
    			attr_dev(div1, "role", "search");
    			attr_dev(div1, "aria-labelledby", div1_aria_labelledby_value = "" + (/*id*/ ctx[15] + "-search"));
    			attr_dev(div1, "class", /*searchClass*/ ctx[4]);
    			toggle_class(div1, "bx--search", true);
    			toggle_class(div1, "bx--search--light", /*light*/ ctx[6]);
    			toggle_class(div1, "bx--search--disabled", /*disabled*/ ctx[7]);
    			toggle_class(div1, "bx--search--sm", /*size*/ ctx[3] === 'sm');
    			toggle_class(div1, "bx--search--lg", /*size*/ ctx[3] === 'lg');
    			toggle_class(div1, "bx--search--xl", /*size*/ ctx[3] === 'xl');
    			toggle_class(div1, "bx--search--expandable", /*expandable*/ ctx[8]);
    			toggle_class(div1, "bx--search--expanded", /*expanded*/ ctx[0]);
    			add_location(div1, file$f, 91, 2, 2171);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			if (switch_instance0) mount_component(switch_instance0, div0, null);
    			/*div0_binding*/ ctx[33](div0);
    			append_dev(div1, t0);
    			append_dev(div1, label);

    			if (labelText_slot_or_fallback) {
    				labelText_slot_or_fallback.m(label, null);
    			}

    			append_dev(div1, t1);
    			append_dev(div1, input);
    			if (input.autofocus) input.focus();
    			/*input_binding*/ ctx[35](input);
    			set_input_value(input, /*value*/ ctx[2]);
    			append_dev(div1, t2);
    			append_dev(div1, button);
    			if (switch_instance1) mount_component(switch_instance1, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler_2*/ ctx[34], false, false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[36]),
    					listen_dev(input, "change", /*change_handler*/ ctx[22], false, false, false, false),
    					listen_dev(input, "input", /*input_handler*/ ctx[23], false, false, false, false),
    					listen_dev(input, "focus", /*focus_handler*/ ctx[24], false, false, false, false),
    					listen_dev(input, "focus", /*focus_handler_1*/ ctx[37], false, false, false, false),
    					listen_dev(input, "blur", /*blur_handler*/ ctx[25], false, false, false, false),
    					listen_dev(input, "blur", /*blur_handler_1*/ ctx[38], false, false, false, false),
    					listen_dev(input, "keydown", /*keydown_handler*/ ctx[26], false, false, false, false),
    					listen_dev(input, "keydown", /*keydown_handler_1*/ ctx[39], false, false, false, false),
    					listen_dev(input, "keyup", /*keyup_handler*/ ctx[27], false, false, false, false),
    					listen_dev(input, "paste", /*paste_handler*/ ctx[28], false, false, false, false),
    					listen_dev(button, "click", /*click_handler_1*/ ctx[21], false, false, false, false),
    					listen_dev(button, "click", /*click_handler_3*/ ctx[40], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*icon*/ 16384 && switch_value !== (switch_value = /*icon*/ ctx[14])) {
    				if (switch_instance0) {
    					group_outros();
    					const old_component = switch_instance0;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance0 = construct_svelte_component_dev(switch_value, switch_props());
    					create_component(switch_instance0.$$.fragment);
    					transition_in(switch_instance0.$$.fragment, 1);
    					mount_component(switch_instance0, div0, null);
    				} else {
    					switch_instance0 = null;
    				}
    			}

    			if (labelText_slot) {
    				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 524288)) {
    					update_slot_base(
    						labelText_slot,
    						labelText_slot_template,
    						ctx,
    						/*$$scope*/ ctx[19],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
    						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[19], dirty, get_labelText_slot_changes$2),
    						get_labelText_slot_context$2
    					);
    				}
    			} else {
    				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 8192)) {
    					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
    				}
    			}

    			if (!current || dirty[0] & /*id*/ 32768 && label_id_value !== (label_id_value = "" + (/*id*/ ctx[15] + "-search"))) {
    				attr_dev(label, "id", label_id_value);
    			}

    			if (!current || dirty[0] & /*id*/ 32768) {
    				attr_dev(label, "for", /*id*/ ctx[15]);
    			}

    			set_attributes(input, input_data = get_spread_update(input_levels, [
    				{ type: "text" },
    				{ role: "searchbox" },
    				(!current || dirty[0] & /*autofocus*/ 2048 && input_autofocus_value !== (input_autofocus_value = /*autofocus*/ ctx[11] === true ? true : undefined)) && { autofocus: input_autofocus_value },
    				(!current || dirty[0] & /*autocomplete*/ 1024) && { autocomplete: /*autocomplete*/ ctx[10] },
    				(!current || dirty[0] & /*disabled*/ 128) && { disabled: /*disabled*/ ctx[7] },
    				(!current || dirty[0] & /*id*/ 32768) && { id: /*id*/ ctx[15] },
    				(!current || dirty[0] & /*placeholder*/ 512) && { placeholder: /*placeholder*/ ctx[9] },
    				dirty[0] & /*$$restProps*/ 262144 && /*$$restProps*/ ctx[18]
    			]));

    			if (dirty[0] & /*value*/ 4 && input.value !== /*value*/ ctx[2]) {
    				set_input_value(input, /*value*/ ctx[2]);
    			}

    			toggle_class(input, "bx--search-input", true);
    			const switch_instance1_changes = {};
    			if (dirty[0] & /*size*/ 8) switch_instance1_changes.size = /*size*/ ctx[3] === 'xl' ? 20 : 16;

    			if (switch_value_1 !== (switch_value_1 = Close$1)) {
    				if (switch_instance1) {
    					group_outros();
    					const old_component = switch_instance1;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value_1) {
    					switch_instance1 = construct_svelte_component_dev(switch_value_1, switch_props_1(ctx));
    					create_component(switch_instance1.$$.fragment);
    					transition_in(switch_instance1.$$.fragment, 1);
    					mount_component(switch_instance1, button, null);
    				} else {
    					switch_instance1 = null;
    				}
    			} else if (switch_value_1) {
    				switch_instance1.$set(switch_instance1_changes);
    			}

    			if (!current || dirty[0] & /*closeButtonLabelText*/ 4096) {
    				attr_dev(button, "aria-label", /*closeButtonLabelText*/ ctx[12]);
    			}

    			if (!current || dirty[0] & /*disabled*/ 128) {
    				prop_dev(button, "disabled", /*disabled*/ ctx[7]);
    			}

    			if (!current || dirty[0] & /*value*/ 4) {
    				toggle_class(button, "bx--search-close--hidden", /*value*/ ctx[2] === '');
    			}

    			if (!current || dirty[0] & /*id*/ 32768 && div1_aria_labelledby_value !== (div1_aria_labelledby_value = "" + (/*id*/ ctx[15] + "-search"))) {
    				attr_dev(div1, "aria-labelledby", div1_aria_labelledby_value);
    			}

    			if (!current || dirty[0] & /*searchClass*/ 16) {
    				attr_dev(div1, "class", /*searchClass*/ ctx[4]);
    			}

    			if (!current || dirty[0] & /*searchClass*/ 16) {
    				toggle_class(div1, "bx--search", true);
    			}

    			if (!current || dirty[0] & /*searchClass, light*/ 80) {
    				toggle_class(div1, "bx--search--light", /*light*/ ctx[6]);
    			}

    			if (!current || dirty[0] & /*searchClass, disabled*/ 144) {
    				toggle_class(div1, "bx--search--disabled", /*disabled*/ ctx[7]);
    			}

    			if (!current || dirty[0] & /*searchClass, size*/ 24) {
    				toggle_class(div1, "bx--search--sm", /*size*/ ctx[3] === 'sm');
    			}

    			if (!current || dirty[0] & /*searchClass, size*/ 24) {
    				toggle_class(div1, "bx--search--lg", /*size*/ ctx[3] === 'lg');
    			}

    			if (!current || dirty[0] & /*searchClass, size*/ 24) {
    				toggle_class(div1, "bx--search--xl", /*size*/ ctx[3] === 'xl');
    			}

    			if (!current || dirty[0] & /*searchClass, expandable*/ 272) {
    				toggle_class(div1, "bx--search--expandable", /*expandable*/ ctx[8]);
    			}

    			if (!current || dirty[0] & /*searchClass, expanded*/ 17) {
    				toggle_class(div1, "bx--search--expanded", /*expanded*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance0) transition_in(switch_instance0.$$.fragment, local);
    			transition_in(labelText_slot_or_fallback, local);
    			if (switch_instance1) transition_in(switch_instance1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance0) transition_out(switch_instance0.$$.fragment, local);
    			transition_out(labelText_slot_or_fallback, local);
    			if (switch_instance1) transition_out(switch_instance1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (switch_instance0) destroy_component(switch_instance0);
    			/*div0_binding*/ ctx[33](null);
    			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
    			/*input_binding*/ ctx[35](null);
    			if (switch_instance1) destroy_component(switch_instance1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(91:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (82:0) {#if skeleton}
    function create_if_block$d(ctx) {
    	let searchskeleton;
    	let current;
    	const searchskeleton_spread_levels = [{ size: /*size*/ ctx[3] }, /*$$restProps*/ ctx[18]];
    	let searchskeleton_props = {};

    	for (let i = 0; i < searchskeleton_spread_levels.length; i += 1) {
    		searchskeleton_props = assign(searchskeleton_props, searchskeleton_spread_levels[i]);
    	}

    	searchskeleton = new SearchSkeleton$1({
    			props: searchskeleton_props,
    			$$inline: true
    		});

    	searchskeleton.$on("click", /*click_handler*/ ctx[29]);
    	searchskeleton.$on("mouseover", /*mouseover_handler*/ ctx[30]);
    	searchskeleton.$on("mouseenter", /*mouseenter_handler*/ ctx[31]);
    	searchskeleton.$on("mouseleave", /*mouseleave_handler*/ ctx[32]);

    	const block = {
    		c: function create() {
    			create_component(searchskeleton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(searchskeleton, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const searchskeleton_changes = (dirty[0] & /*size, $$restProps*/ 262152)
    			? get_spread_update(searchskeleton_spread_levels, [
    					dirty[0] & /*size*/ 8 && { size: /*size*/ ctx[3] },
    					dirty[0] & /*$$restProps*/ 262144 && get_spread_object(/*$$restProps*/ ctx[18])
    				])
    			: {};

    			searchskeleton.$set(searchskeleton_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(searchskeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(searchskeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(searchskeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(82:0) {#if skeleton}",
    		ctx
    	});

    	return block;
    }

    // (116:29)          
    function fallback_block$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*labelText*/ ctx[13]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*labelText*/ 8192) set_data_dev(t, /*labelText*/ ctx[13]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$2.name,
    		type: "fallback",
    		source: "(116:29)          ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$d, create_else_block$6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*skeleton*/ ctx[5]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"value","size","searchClass","skeleton","light","disabled","expandable","expanded","placeholder","autocomplete","autofocus","closeButtonLabelText","labelText","icon","id","ref"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Search', slots, ['labelText']);
    	let { value = "" } = $$props;
    	let { size = "xl" } = $$props;
    	let { searchClass = "" } = $$props;
    	let { skeleton = false } = $$props;
    	let { light = false } = $$props;
    	let { disabled = false } = $$props;
    	let { expandable = false } = $$props;
    	let { expanded = false } = $$props;
    	let { placeholder = "Search..." } = $$props;
    	let { autocomplete = "off" } = $$props;
    	let { autofocus = false } = $$props;
    	let { closeButtonLabelText = "Clear search input" } = $$props;
    	let { labelText = "" } = $$props;
    	let { icon = IconSearch$1 } = $$props;
    	let { id = "ccs-" + Math.random().toString(36) } = $$props;
    	let { ref = null } = $$props;
    	const dispatch = createEventDispatcher();
    	let searchRef = null;

    	function click_handler_1(event) {
    		bubble.call(this, $$self, event);
    	}

    	function change_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function input_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function focus_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function blur_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keydown_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keyup_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function paste_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mouseover_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mouseenter_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mouseleave_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			searchRef = $$value;
    			$$invalidate(16, searchRef);
    		});
    	}

    	const click_handler_2 = () => {
    		if (expandable) $$invalidate(0, expanded = true);
    	};

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			ref = $$value;
    			$$invalidate(1, ref);
    		});
    	}

    	function input_input_handler() {
    		value = this.value;
    		$$invalidate(2, value);
    	}

    	const focus_handler_1 = () => {
    		if (expandable) $$invalidate(0, expanded = true);
    	};

    	const blur_handler_1 = () => {
    		if (expanded && value.trim().length === 0) {
    			$$invalidate(0, expanded = false);
    		}
    	};

    	const keydown_handler_1 = ({ key }) => {
    		if (key === 'Escape') {
    			$$invalidate(2, value = '');
    			dispatch('clear');
    		}
    	};

    	const click_handler_3 = () => {
    		$$invalidate(2, value = '');
    		ref.focus();
    		dispatch('clear');
    	};

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(18, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('value' in $$new_props) $$invalidate(2, value = $$new_props.value);
    		if ('size' in $$new_props) $$invalidate(3, size = $$new_props.size);
    		if ('searchClass' in $$new_props) $$invalidate(4, searchClass = $$new_props.searchClass);
    		if ('skeleton' in $$new_props) $$invalidate(5, skeleton = $$new_props.skeleton);
    		if ('light' in $$new_props) $$invalidate(6, light = $$new_props.light);
    		if ('disabled' in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
    		if ('expandable' in $$new_props) $$invalidate(8, expandable = $$new_props.expandable);
    		if ('expanded' in $$new_props) $$invalidate(0, expanded = $$new_props.expanded);
    		if ('placeholder' in $$new_props) $$invalidate(9, placeholder = $$new_props.placeholder);
    		if ('autocomplete' in $$new_props) $$invalidate(10, autocomplete = $$new_props.autocomplete);
    		if ('autofocus' in $$new_props) $$invalidate(11, autofocus = $$new_props.autofocus);
    		if ('closeButtonLabelText' in $$new_props) $$invalidate(12, closeButtonLabelText = $$new_props.closeButtonLabelText);
    		if ('labelText' in $$new_props) $$invalidate(13, labelText = $$new_props.labelText);
    		if ('icon' in $$new_props) $$invalidate(14, icon = $$new_props.icon);
    		if ('id' in $$new_props) $$invalidate(15, id = $$new_props.id);
    		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
    		if ('$$scope' in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		value,
    		size,
    		searchClass,
    		skeleton,
    		light,
    		disabled,
    		expandable,
    		expanded,
    		placeholder,
    		autocomplete,
    		autofocus,
    		closeButtonLabelText,
    		labelText,
    		icon,
    		id,
    		ref,
    		createEventDispatcher,
    		Close: Close$1,
    		IconSearch: IconSearch$1,
    		SearchSkeleton: SearchSkeleton$1,
    		dispatch,
    		searchRef
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('value' in $$props) $$invalidate(2, value = $$new_props.value);
    		if ('size' in $$props) $$invalidate(3, size = $$new_props.size);
    		if ('searchClass' in $$props) $$invalidate(4, searchClass = $$new_props.searchClass);
    		if ('skeleton' in $$props) $$invalidate(5, skeleton = $$new_props.skeleton);
    		if ('light' in $$props) $$invalidate(6, light = $$new_props.light);
    		if ('disabled' in $$props) $$invalidate(7, disabled = $$new_props.disabled);
    		if ('expandable' in $$props) $$invalidate(8, expandable = $$new_props.expandable);
    		if ('expanded' in $$props) $$invalidate(0, expanded = $$new_props.expanded);
    		if ('placeholder' in $$props) $$invalidate(9, placeholder = $$new_props.placeholder);
    		if ('autocomplete' in $$props) $$invalidate(10, autocomplete = $$new_props.autocomplete);
    		if ('autofocus' in $$props) $$invalidate(11, autofocus = $$new_props.autofocus);
    		if ('closeButtonLabelText' in $$props) $$invalidate(12, closeButtonLabelText = $$new_props.closeButtonLabelText);
    		if ('labelText' in $$props) $$invalidate(13, labelText = $$new_props.labelText);
    		if ('icon' in $$props) $$invalidate(14, icon = $$new_props.icon);
    		if ('id' in $$props) $$invalidate(15, id = $$new_props.id);
    		if ('ref' in $$props) $$invalidate(1, ref = $$new_props.ref);
    		if ('searchRef' in $$props) $$invalidate(16, searchRef = $$new_props.searchRef);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*expanded, ref*/ 3) {
    			if (expanded && ref) ref.focus();
    		}

    		if ($$self.$$.dirty[0] & /*expanded*/ 1) {
    			dispatch(expanded ? "expand" : "collapse");
    		}
    	};

    	return [
    		expanded,
    		ref,
    		value,
    		size,
    		searchClass,
    		skeleton,
    		light,
    		disabled,
    		expandable,
    		placeholder,
    		autocomplete,
    		autofocus,
    		closeButtonLabelText,
    		labelText,
    		icon,
    		id,
    		searchRef,
    		dispatch,
    		$$restProps,
    		$$scope,
    		slots,
    		click_handler_1,
    		change_handler,
    		input_handler,
    		focus_handler,
    		blur_handler,
    		keydown_handler,
    		keyup_handler,
    		paste_handler,
    		click_handler,
    		mouseover_handler,
    		mouseenter_handler,
    		mouseleave_handler,
    		div0_binding,
    		click_handler_2,
    		input_binding,
    		input_input_handler,
    		focus_handler_1,
    		blur_handler_1,
    		keydown_handler_1,
    		click_handler_3
    	];
    }

    class Search extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$g,
    			create_fragment$g,
    			safe_not_equal,
    			{
    				value: 2,
    				size: 3,
    				searchClass: 4,
    				skeleton: 5,
    				light: 6,
    				disabled: 7,
    				expandable: 8,
    				expanded: 0,
    				placeholder: 9,
    				autocomplete: 10,
    				autofocus: 11,
    				closeButtonLabelText: 12,
    				labelText: 13,
    				icon: 14,
    				id: 15,
    				ref: 1
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Search",
    			options,
    			id: create_fragment$g.name
    		});
    	}

    	get value() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get searchClass() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set searchClass(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get skeleton() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set skeleton(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get light() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set light(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get expandable() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set expandable(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get expanded() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set expanded(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get autocomplete() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set autocomplete(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get autofocus() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set autofocus(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeButtonLabelText() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeButtonLabelText(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelText() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelText(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ref() {
    		throw new Error("<Search>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ref(value) {
    		throw new Error("<Search>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Search$1 = Search;

    /* node_modules/carbon-components-svelte/src/icons/EditOff.svelte generated by Svelte v3.59.2 */

    const file$e = "node_modules/carbon-components-svelte/src/icons/EditOff.svelte";

    // (24:2) {#if title}
    function create_if_block$c(ctx) {
    	let title_1;
    	let t;

    	const block = {
    		c: function create() {
    			title_1 = svg_element("title");
    			t = text(/*title*/ ctx[1]);
    			add_location(title_1, file$e, 23, 13, 549);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, title_1, anchor);
    			append_dev(title_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(title_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(24:2) {#if title}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let svg;
    	let path;
    	let if_block = /*title*/ ctx[1] && create_if_block$c(ctx);

    	let svg_levels = [
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{ viewBox: "0 0 32 32" },
    		{ fill: "currentColor" },
    		{ preserveAspectRatio: "xMidYMid meet" },
    		{ width: /*size*/ ctx[0] },
    		{ height: /*size*/ ctx[0] },
    		/*attributes*/ ctx[2],
    		/*$$restProps*/ ctx[3]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			if (if_block) if_block.c();
    			path = svg_element("path");
    			attr_dev(path, "d", "M30 28.6L3.4 2 2 3.4l10.1 10.1L4 21.6V28h6.4l8.1-8.1L28.6 30 30 28.6zM9.6 26H6v-3.6l7.5-7.5 3.6 3.6L9.6 26zM29.4 6.2L29.4 6.2l-3.6-3.6c-.8-.8-2-.8-2.8 0l0 0 0 0-8 8 1.4 1.4L20 8.4l3.6 3.6L20 15.6l1.4 1.4 8-8C30.2 8.2 30.2 7 29.4 6.2L29.4 6.2zM25 10.6L21.4 7l3-3L28 7.6 25 10.6z");
    			add_location(path, file$e, 24, 2, 579);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$e, 13, 0, 338);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			if (if_block) if_block.m(svg, null);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*title*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$c(ctx);
    					if_block.c();
    					if_block.m(svg, path);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{ viewBox: "0 0 32 32" },
    				{ fill: "currentColor" },
    				{ preserveAspectRatio: "xMidYMid meet" },
    				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
    				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
    				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
    				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let labelled;
    	let attributes;
    	const omit_props_names = ["size","title"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditOff', slots, []);
    	let { size = 16 } = $$props;
    	let { title = undefined } = $$props;

    	$$self.$$set = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
    		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
    	};

    	$$self.$capture_state = () => ({ size, title, labelled, attributes });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
    		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
    		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
    		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
    		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

    		$$invalidate(2, attributes = {
    			"aria-hidden": labelled ? undefined : true,
    			role: labelled ? "img" : undefined,
    			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
    		});
    	};

    	$$props = exclude_internal_props($$props);
    	return [size, title, attributes, $$restProps, labelled];
    }

    class EditOff extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$f, create_fragment$f, safe_not_equal, { size: 0, title: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditOff",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get size() {
    		throw new Error("<EditOff>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<EditOff>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<EditOff>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<EditOff>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var EditOff$1 = EditOff;

    /* node_modules/carbon-components-svelte/src/TextInput/TextInput.svelte generated by Svelte v3.59.2 */
    const file$d = "node_modules/carbon-components-svelte/src/TextInput/TextInput.svelte";
    const get_labelText_slot_changes_1 = dirty => ({});
    const get_labelText_slot_context_1 = ctx => ({});
    const get_labelText_slot_changes$1 = dirty => ({});
    const get_labelText_slot_context$1 = ctx => ({});

    // (117:2) {#if inline}
    function create_if_block_10(ctx) {
    	let div;
    	let t;
    	let current;
    	let if_block0 = /*labelText*/ ctx[9] && create_if_block_12(ctx);
    	let if_block1 = !/*isFluid*/ ctx[22] && /*helperText*/ ctx[6] && create_if_block_11(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			toggle_class(div, "bx--text-input__label-helper-wrapper", true);
    			add_location(div, file$d, 117, 4, 2963);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*labelText*/ ctx[9]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*labelText*/ 512) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_12(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div, t);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (!/*isFluid*/ ctx[22] && /*helperText*/ ctx[6]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_11(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(117:2) {#if inline}",
    		ctx
    	});

    	return block;
    }

    // (119:6) {#if labelText}
    function create_if_block_12(ctx) {
    	let label;
    	let current;
    	const labelText_slot_template = /*#slots*/ ctx[28].labelText;
    	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[27], get_labelText_slot_context$1);
    	const labelText_slot_or_fallback = labelText_slot || fallback_block_1(ctx);

    	const block = {
    		c: function create() {
    			label = element("label");
    			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
    			attr_dev(label, "for", /*id*/ ctx[7]);
    			toggle_class(label, "bx--label", true);
    			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
    			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
    			toggle_class(label, "bx--label--inline", /*inline*/ ctx[16]);
    			toggle_class(label, "bx--label--inline--sm", /*size*/ ctx[2] === 'sm');
    			toggle_class(label, "bx--label--inline--xl", /*size*/ ctx[2] === 'xl');
    			add_location(label, file$d, 119, 8, 3051);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);

    			if (labelText_slot_or_fallback) {
    				labelText_slot_or_fallback.m(label, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (labelText_slot) {
    				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 134217728)) {
    					update_slot_base(
    						labelText_slot,
    						labelText_slot_template,
    						ctx,
    						/*$$scope*/ ctx[27],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[27])
    						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[27], dirty, get_labelText_slot_changes$1),
    						get_labelText_slot_context$1
    					);
    				}
    			} else {
    				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 512)) {
    					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
    				}
    			}

    			if (!current || dirty[0] & /*id*/ 128) {
    				attr_dev(label, "for", /*id*/ ctx[7]);
    			}

    			if (!current || dirty[0] & /*hideLabel*/ 1024) {
    				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
    			}

    			if (!current || dirty[0] & /*disabled*/ 32) {
    				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
    			}

    			if (!current || dirty[0] & /*inline*/ 65536) {
    				toggle_class(label, "bx--label--inline", /*inline*/ ctx[16]);
    			}

    			if (!current || dirty[0] & /*size*/ 4) {
    				toggle_class(label, "bx--label--inline--sm", /*size*/ ctx[2] === 'sm');
    			}

    			if (!current || dirty[0] & /*size*/ 4) {
    				toggle_class(label, "bx--label--inline--xl", /*size*/ ctx[2] === 'xl');
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labelText_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labelText_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12.name,
    		type: "if",
    		source: "(119:6) {#if labelText}",
    		ctx
    	});

    	return block;
    }

    // (129:33)              
    function fallback_block_1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*labelText*/ ctx[9]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*labelText*/ 512) set_data_dev(t, /*labelText*/ ctx[9]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block_1.name,
    		type: "fallback",
    		source: "(129:33)              ",
    		ctx
    	});

    	return block;
    }

    // (134:6) {#if !isFluid && helperText}
    function create_if_block_11(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*helperText*/ ctx[6]);
    			toggle_class(div, "bx--form__helper-text", true);
    			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
    			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[16]);
    			add_location(div, file$d, 134, 8, 3528);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*helperText*/ 64) set_data_dev(t, /*helperText*/ ctx[6]);

    			if (dirty[0] & /*disabled*/ 32) {
    				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
    			}

    			if (dirty[0] & /*inline*/ 65536) {
    				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[16]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(134:6) {#if !isFluid && helperText}",
    		ctx
    	});

    	return block;
    }

    // (145:2) {#if !inline && (labelText || $$slots.labelText)}
    function create_if_block_9(ctx) {
    	let label;
    	let current;
    	const labelText_slot_template = /*#slots*/ ctx[28].labelText;
    	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[27], get_labelText_slot_context_1);
    	const labelText_slot_or_fallback = labelText_slot || fallback_block$1(ctx);

    	const block = {
    		c: function create() {
    			label = element("label");
    			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
    			attr_dev(label, "for", /*id*/ ctx[7]);
    			toggle_class(label, "bx--label", true);
    			toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
    			toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
    			toggle_class(label, "bx--label--inline", /*inline*/ ctx[16]);
    			toggle_class(label, "bx--label--inline-sm", /*inline*/ ctx[16] && /*size*/ ctx[2] === 'sm');
    			toggle_class(label, "bx--label--inline-xl", /*inline*/ ctx[16] && /*size*/ ctx[2] === 'xl');
    			add_location(label, file$d, 145, 4, 3833);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);

    			if (labelText_slot_or_fallback) {
    				labelText_slot_or_fallback.m(label, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (labelText_slot) {
    				if (labelText_slot.p && (!current || dirty[0] & /*$$scope*/ 134217728)) {
    					update_slot_base(
    						labelText_slot,
    						labelText_slot_template,
    						ctx,
    						/*$$scope*/ ctx[27],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[27])
    						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[27], dirty, get_labelText_slot_changes_1),
    						get_labelText_slot_context_1
    					);
    				}
    			} else {
    				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty[0] & /*labelText*/ 512)) {
    					labelText_slot_or_fallback.p(ctx, !current ? [-1, -1] : dirty);
    				}
    			}

    			if (!current || dirty[0] & /*id*/ 128) {
    				attr_dev(label, "for", /*id*/ ctx[7]);
    			}

    			if (!current || dirty[0] & /*hideLabel*/ 1024) {
    				toggle_class(label, "bx--visually-hidden", /*hideLabel*/ ctx[10]);
    			}

    			if (!current || dirty[0] & /*disabled*/ 32) {
    				toggle_class(label, "bx--label--disabled", /*disabled*/ ctx[5]);
    			}

    			if (!current || dirty[0] & /*inline*/ 65536) {
    				toggle_class(label, "bx--label--inline", /*inline*/ ctx[16]);
    			}

    			if (!current || dirty[0] & /*inline, size*/ 65540) {
    				toggle_class(label, "bx--label--inline-sm", /*inline*/ ctx[16] && /*size*/ ctx[2] === 'sm');
    			}

    			if (!current || dirty[0] & /*inline, size*/ 65540) {
    				toggle_class(label, "bx--label--inline-xl", /*inline*/ ctx[16] && /*size*/ ctx[2] === 'xl');
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labelText_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labelText_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(145:2) {#if !inline && (labelText || $$slots.labelText)}",
    		ctx
    	});

    	return block;
    }

    // (155:29)          
    function fallback_block$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*labelText*/ ctx[9]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*labelText*/ 512) set_data_dev(t, /*labelText*/ ctx[9]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$1.name,
    		type: "fallback",
    		source: "(155:29)          ",
    		ctx
    	});

    	return block;
    }

    // (172:6) {:else}
    function create_else_block$5(ctx) {
    	let t;
    	let if_block1_anchor;
    	let current;
    	let if_block0 = /*invalid*/ ctx[11] && create_if_block_8(ctx);
    	let if_block1 = !/*invalid*/ ctx[11] && /*warn*/ ctx[13] && create_if_block_7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*invalid*/ ctx[11]) {
    				if (if_block0) {
    					if (dirty[0] & /*invalid*/ 2048) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_8(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t.parentNode, t);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (!/*invalid*/ ctx[11] && /*warn*/ ctx[13]) {
    				if (if_block1) {
    					if (dirty[0] & /*invalid, warn*/ 10240) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_7(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(172:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (170:6) {#if readonly}
    function create_if_block_6(ctx) {
    	let editoff;
    	let current;

    	editoff = new EditOff$1({
    			props: { class: "bx--text-input__readonly-icon" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(editoff.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(editoff, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editoff.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editoff.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(editoff, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(170:6) {#if readonly}",
    		ctx
    	});

    	return block;
    }

    // (173:8) {#if invalid}
    function create_if_block_8(ctx) {
    	let warningfilled;
    	let current;

    	warningfilled = new WarningFilled$1({
    			props: { class: "bx--text-input__invalid-icon" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(warningfilled.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(warningfilled, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(warningfilled.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(warningfilled.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(warningfilled, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(173:8) {#if invalid}",
    		ctx
    	});

    	return block;
    }

    // (176:8) {#if !invalid && warn}
    function create_if_block_7(ctx) {
    	let warningaltfilled;
    	let current;

    	warningaltfilled = new WarningAltFilled$1({
    			props: {
    				class: "bx--text-input__invalid-icon\n            bx--text-input__invalid-icon--warning"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(warningaltfilled.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(warningaltfilled, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(warningaltfilled.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(warningaltfilled.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(warningaltfilled, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(176:8) {#if !invalid && warn}",
    		ctx
    	});

    	return block;
    }

    // (217:6) {#if isFluid}
    function create_if_block_5(ctx) {
    	let hr;

    	const block = {
    		c: function create() {
    			hr = element("hr");
    			toggle_class(hr, "bx--text-input__divider", true);
    			add_location(hr, file$d, 217, 8, 5971);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, hr, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(hr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(217:6) {#if isFluid}",
    		ctx
    	});

    	return block;
    }

    // (220:6) {#if isFluid && !inline && invalid}
    function create_if_block_4(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*invalidText*/ ctx[12]);
    			attr_dev(div, "id", /*errorId*/ ctx[19]);
    			toggle_class(div, "bx--form-requirement", true);
    			add_location(div, file$d, 220, 8, 6079);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*invalidText*/ 4096) set_data_dev(t, /*invalidText*/ ctx[12]);

    			if (dirty[0] & /*errorId*/ 524288) {
    				attr_dev(div, "id", /*errorId*/ ctx[19]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(220:6) {#if isFluid && !inline && invalid}",
    		ctx
    	});

    	return block;
    }

    // (225:6) {#if isFluid && !inline && warn}
    function create_if_block_3$1(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*warnText*/ ctx[14]);
    			attr_dev(div, "id", /*warnId*/ ctx[18]);
    			toggle_class(div, "bx--form-requirement", true);
    			add_location(div, file$d, 225, 8, 6234);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*warnText*/ 16384) set_data_dev(t, /*warnText*/ ctx[14]);

    			if (dirty[0] & /*warnId*/ 262144) {
    				attr_dev(div, "id", /*warnId*/ ctx[18]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(225:6) {#if isFluid && !inline && warn}",
    		ctx
    	});

    	return block;
    }

    // (229:4) {#if !invalid && !warn && !isFluid && !inline && helperText}
    function create_if_block_2$2(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*helperText*/ ctx[6]);
    			attr_dev(div, "id", /*helperId*/ ctx[20]);
    			toggle_class(div, "bx--form__helper-text", true);
    			toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
    			toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[16]);
    			add_location(div, file$d, 229, 6, 6400);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*helperText*/ 64) set_data_dev(t, /*helperText*/ ctx[6]);

    			if (dirty[0] & /*helperId*/ 1048576) {
    				attr_dev(div, "id", /*helperId*/ ctx[20]);
    			}

    			if (dirty[0] & /*disabled*/ 32) {
    				toggle_class(div, "bx--form__helper-text--disabled", /*disabled*/ ctx[5]);
    			}

    			if (dirty[0] & /*inline*/ 65536) {
    				toggle_class(div, "bx--form__helper-text--inline", /*inline*/ ctx[16]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(229:4) {#if !invalid && !warn && !isFluid && !inline && helperText}",
    		ctx
    	});

    	return block;
    }

    // (239:4) {#if !isFluid && invalid}
    function create_if_block_1$4(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*invalidText*/ ctx[12]);
    			attr_dev(div, "id", /*errorId*/ ctx[19]);
    			toggle_class(div, "bx--form-requirement", true);
    			add_location(div, file$d, 239, 6, 6676);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*invalidText*/ 4096) set_data_dev(t, /*invalidText*/ ctx[12]);

    			if (dirty[0] & /*errorId*/ 524288) {
    				attr_dev(div, "id", /*errorId*/ ctx[19]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(239:4) {#if !isFluid && invalid}",
    		ctx
    	});

    	return block;
    }

    // (244:4) {#if !isFluid && !invalid && warn}
    function create_if_block$b(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*warnText*/ ctx[14]);
    			attr_dev(div, "id", /*warnId*/ ctx[18]);
    			toggle_class(div, "bx--form-requirement", true);
    			add_location(div, file$d, 244, 6, 6823);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*warnText*/ 16384) set_data_dev(t, /*warnText*/ ctx[14]);

    			if (dirty[0] & /*warnId*/ 262144) {
    				attr_dev(div, "id", /*warnId*/ ctx[18]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(244:4) {#if !isFluid && !invalid && warn}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let div2;
    	let t0;
    	let t1;
    	let div1;
    	let div0;
    	let current_block_type_index;
    	let if_block2;
    	let t2;
    	let input;
    	let input_data_invalid_value;
    	let input_aria_invalid_value;
    	let input_data_warn_value;
    	let input_aria_describedby_value;
    	let t3;
    	let t4;
    	let t5;
    	let div0_data_invalid_value;
    	let div0_data_warn_value;
    	let t6;
    	let t7;
    	let t8;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*inline*/ ctx[16] && create_if_block_10(ctx);
    	let if_block1 = !/*inline*/ ctx[16] && (/*labelText*/ ctx[9] || /*$$slots*/ ctx[26].labelText) && create_if_block_9(ctx);
    	const if_block_creators = [create_if_block_6, create_else_block$5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*readonly*/ ctx[17]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	let input_levels = [
    		{
    			"data-invalid": input_data_invalid_value = /*error*/ ctx[21] || undefined
    		},
    		{
    			"aria-invalid": input_aria_invalid_value = /*error*/ ctx[21] || undefined
    		},
    		{
    			"data-warn": input_data_warn_value = /*warn*/ ctx[13] || undefined
    		},
    		{
    			"aria-describedby": input_aria_describedby_value = /*error*/ ctx[21]
    			? /*errorId*/ ctx[19]
    			: /*warn*/ ctx[13]
    				? /*warnId*/ ctx[18]
    				: /*helperText*/ ctx[6] ? /*helperId*/ ctx[20] : undefined
    		},
    		{ disabled: /*disabled*/ ctx[5] },
    		{ id: /*id*/ ctx[7] },
    		{ name: /*name*/ ctx[8] },
    		{ placeholder: /*placeholder*/ ctx[3] },
    		{ required: /*required*/ ctx[15] },
    		{ readOnly: /*readonly*/ ctx[17] },
    		/*$$restProps*/ ctx[25]
    	];

    	let input_data = {};

    	for (let i = 0; i < input_levels.length; i += 1) {
    		input_data = assign(input_data, input_levels[i]);
    	}

    	let if_block3 = /*isFluid*/ ctx[22] && create_if_block_5(ctx);
    	let if_block4 = /*isFluid*/ ctx[22] && !/*inline*/ ctx[16] && /*invalid*/ ctx[11] && create_if_block_4(ctx);
    	let if_block5 = /*isFluid*/ ctx[22] && !/*inline*/ ctx[16] && /*warn*/ ctx[13] && create_if_block_3$1(ctx);
    	let if_block6 = !/*invalid*/ ctx[11] && !/*warn*/ ctx[13] && !/*isFluid*/ ctx[22] && !/*inline*/ ctx[16] && /*helperText*/ ctx[6] && create_if_block_2$2(ctx);
    	let if_block7 = !/*isFluid*/ ctx[22] && /*invalid*/ ctx[11] && create_if_block_1$4(ctx);
    	let if_block8 = !/*isFluid*/ ctx[22] && !/*invalid*/ ctx[11] && /*warn*/ ctx[13] && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			div1 = element("div");
    			div0 = element("div");
    			if_block2.c();
    			t2 = space();
    			input = element("input");
    			t3 = space();
    			if (if_block3) if_block3.c();
    			t4 = space();
    			if (if_block4) if_block4.c();
    			t5 = space();
    			if (if_block5) if_block5.c();
    			t6 = space();
    			if (if_block6) if_block6.c();
    			t7 = space();
    			if (if_block7) if_block7.c();
    			t8 = space();
    			if (if_block8) if_block8.c();
    			set_attributes(input, input_data);
    			toggle_class(input, "bx--text-input", true);
    			toggle_class(input, "bx--text-input--light", /*light*/ ctx[4]);
    			toggle_class(input, "bx--text-input--invalid", /*error*/ ctx[21]);
    			toggle_class(input, "bx--text-input--warning", /*warn*/ ctx[13]);
    			toggle_class(input, "bx--text-input--sm", /*size*/ ctx[2] === 'sm');
    			toggle_class(input, "bx--text-input--xl", /*size*/ ctx[2] === 'xl');
    			add_location(input, file$d, 182, 6, 4979);
    			attr_dev(div0, "data-invalid", div0_data_invalid_value = /*error*/ ctx[21] || undefined);
    			attr_dev(div0, "data-warn", div0_data_warn_value = /*warn*/ ctx[13] || undefined);
    			toggle_class(div0, "bx--text-input__field-wrapper", true);
    			toggle_class(div0, "bx--text-input__field-wrapper--warning", !/*invalid*/ ctx[11] && /*warn*/ ctx[13]);
    			add_location(div0, file$d, 163, 4, 4368);
    			toggle_class(div1, "bx--text-input__field-outer-wrapper", true);
    			toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[16]);
    			add_location(div1, file$d, 159, 2, 4235);
    			toggle_class(div2, "bx--form-item", true);
    			toggle_class(div2, "bx--text-input-wrapper", true);
    			toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[16]);
    			toggle_class(div2, "bx--text-input-wrapper--light", /*light*/ ctx[4]);
    			toggle_class(div2, "bx--text-input-wrapper--readonly", /*readonly*/ ctx[17]);
    			add_location(div2, file$d, 105, 0, 2656);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			if (if_block0) if_block0.m(div2, null);
    			append_dev(div2, t0);
    			if (if_block1) if_block1.m(div2, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			if_blocks[current_block_type_index].m(div0, null);
    			append_dev(div0, t2);
    			append_dev(div0, input);
    			if (input.autofocus) input.focus();
    			/*input_binding*/ ctx[38](input);
    			set_input_value(input, /*value*/ ctx[0]);
    			append_dev(div0, t3);
    			if (if_block3) if_block3.m(div0, null);
    			append_dev(div0, t4);
    			if (if_block4) if_block4.m(div0, null);
    			append_dev(div0, t5);
    			if (if_block5) if_block5.m(div0, null);
    			append_dev(div1, t6);
    			if (if_block6) if_block6.m(div1, null);
    			append_dev(div1, t7);
    			if (if_block7) if_block7.m(div1, null);
    			append_dev(div1, t8);
    			if (if_block8) if_block8.m(div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[39]),
    					listen_dev(input, "change", /*onChange*/ ctx[24], false, false, false, false),
    					listen_dev(input, "input", /*onInput*/ ctx[23], false, false, false, false),
    					listen_dev(input, "keydown", /*keydown_handler*/ ctx[33], false, false, false, false),
    					listen_dev(input, "keyup", /*keyup_handler*/ ctx[34], false, false, false, false),
    					listen_dev(input, "focus", /*focus_handler*/ ctx[35], false, false, false, false),
    					listen_dev(input, "blur", /*blur_handler*/ ctx[36], false, false, false, false),
    					listen_dev(input, "paste", /*paste_handler*/ ctx[37], false, false, false, false),
    					listen_dev(div2, "click", /*click_handler*/ ctx[29], false, false, false, false),
    					listen_dev(div2, "mouseover", /*mouseover_handler*/ ctx[30], false, false, false, false),
    					listen_dev(div2, "mouseenter", /*mouseenter_handler*/ ctx[31], false, false, false, false),
    					listen_dev(div2, "mouseleave", /*mouseleave_handler*/ ctx[32], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*inline*/ ctx[16]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*inline*/ 65536) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_10(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div2, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (!/*inline*/ ctx[16] && (/*labelText*/ ctx[9] || /*$$slots*/ ctx[26].labelText)) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*inline, labelText, $$slots*/ 67174912) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_9(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div2, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks[current_block_type_index];

    				if (!if_block2) {
    					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block2.c();
    				} else {
    					if_block2.p(ctx, dirty);
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(div0, t2);
    			}

    			set_attributes(input, input_data = get_spread_update(input_levels, [
    				(!current || dirty[0] & /*error*/ 2097152 && input_data_invalid_value !== (input_data_invalid_value = /*error*/ ctx[21] || undefined)) && { "data-invalid": input_data_invalid_value },
    				(!current || dirty[0] & /*error*/ 2097152 && input_aria_invalid_value !== (input_aria_invalid_value = /*error*/ ctx[21] || undefined)) && { "aria-invalid": input_aria_invalid_value },
    				(!current || dirty[0] & /*warn*/ 8192 && input_data_warn_value !== (input_data_warn_value = /*warn*/ ctx[13] || undefined)) && { "data-warn": input_data_warn_value },
    				(!current || dirty[0] & /*error, errorId, warn, warnId, helperText, helperId*/ 3940416 && input_aria_describedby_value !== (input_aria_describedby_value = /*error*/ ctx[21]
    				? /*errorId*/ ctx[19]
    				: /*warn*/ ctx[13]
    					? /*warnId*/ ctx[18]
    					: /*helperText*/ ctx[6] ? /*helperId*/ ctx[20] : undefined)) && {
    					"aria-describedby": input_aria_describedby_value
    				},
    				(!current || dirty[0] & /*disabled*/ 32) && { disabled: /*disabled*/ ctx[5] },
    				(!current || dirty[0] & /*id*/ 128) && { id: /*id*/ ctx[7] },
    				(!current || dirty[0] & /*name*/ 256) && { name: /*name*/ ctx[8] },
    				(!current || dirty[0] & /*placeholder*/ 8) && { placeholder: /*placeholder*/ ctx[3] },
    				(!current || dirty[0] & /*required*/ 32768) && { required: /*required*/ ctx[15] },
    				(!current || dirty[0] & /*readonly*/ 131072) && { readOnly: /*readonly*/ ctx[17] },
    				dirty[0] & /*$$restProps*/ 33554432 && /*$$restProps*/ ctx[25]
    			]));

    			if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
    				set_input_value(input, /*value*/ ctx[0]);
    			}

    			toggle_class(input, "bx--text-input", true);
    			toggle_class(input, "bx--text-input--light", /*light*/ ctx[4]);
    			toggle_class(input, "bx--text-input--invalid", /*error*/ ctx[21]);
    			toggle_class(input, "bx--text-input--warning", /*warn*/ ctx[13]);
    			toggle_class(input, "bx--text-input--sm", /*size*/ ctx[2] === 'sm');
    			toggle_class(input, "bx--text-input--xl", /*size*/ ctx[2] === 'xl');

    			if (/*isFluid*/ ctx[22]) {
    				if (if_block3) ; else {
    					if_block3 = create_if_block_5(ctx);
    					if_block3.c();
    					if_block3.m(div0, t4);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*isFluid*/ ctx[22] && !/*inline*/ ctx[16] && /*invalid*/ ctx[11]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_4(ctx);
    					if_block4.c();
    					if_block4.m(div0, t5);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*isFluid*/ ctx[22] && !/*inline*/ ctx[16] && /*warn*/ ctx[13]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_3$1(ctx);
    					if_block5.c();
    					if_block5.m(div0, null);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (!current || dirty[0] & /*error*/ 2097152 && div0_data_invalid_value !== (div0_data_invalid_value = /*error*/ ctx[21] || undefined)) {
    				attr_dev(div0, "data-invalid", div0_data_invalid_value);
    			}

    			if (!current || dirty[0] & /*warn*/ 8192 && div0_data_warn_value !== (div0_data_warn_value = /*warn*/ ctx[13] || undefined)) {
    				attr_dev(div0, "data-warn", div0_data_warn_value);
    			}

    			if (!current || dirty[0] & /*invalid, warn*/ 10240) {
    				toggle_class(div0, "bx--text-input__field-wrapper--warning", !/*invalid*/ ctx[11] && /*warn*/ ctx[13]);
    			}

    			if (!/*invalid*/ ctx[11] && !/*warn*/ ctx[13] && !/*isFluid*/ ctx[22] && !/*inline*/ ctx[16] && /*helperText*/ ctx[6]) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_2$2(ctx);
    					if_block6.c();
    					if_block6.m(div1, t7);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (!/*isFluid*/ ctx[22] && /*invalid*/ ctx[11]) {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_1$4(ctx);
    					if_block7.c();
    					if_block7.m(div1, t8);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (!/*isFluid*/ ctx[22] && !/*invalid*/ ctx[11] && /*warn*/ ctx[13]) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block$b(ctx);
    					if_block8.c();
    					if_block8.m(div1, null);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (!current || dirty[0] & /*inline*/ 65536) {
    				toggle_class(div1, "bx--text-input__field-outer-wrapper--inline", /*inline*/ ctx[16]);
    			}

    			if (!current || dirty[0] & /*inline*/ 65536) {
    				toggle_class(div2, "bx--text-input-wrapper--inline", /*inline*/ ctx[16]);
    			}

    			if (!current || dirty[0] & /*light*/ 16) {
    				toggle_class(div2, "bx--text-input-wrapper--light", /*light*/ ctx[4]);
    			}

    			if (!current || dirty[0] & /*readonly*/ 131072) {
    				toggle_class(div2, "bx--text-input-wrapper--readonly", /*readonly*/ ctx[17]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if_blocks[current_block_type_index].d();
    			/*input_binding*/ ctx[38](null);
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			if (if_block6) if_block6.d();
    			if (if_block7) if_block7.d();
    			if (if_block8) if_block8.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let isFluid;
    	let error;
    	let helperId;
    	let errorId;
    	let warnId;

    	const omit_props_names = [
    		"size","value","placeholder","light","disabled","helperText","id","name","labelText","hideLabel","invalid","invalidText","warn","warnText","ref","required","inline","readonly"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TextInput', slots, ['labelText']);
    	const $$slots = compute_slots(slots);
    	let { size = undefined } = $$props;
    	let { value = "" } = $$props;
    	let { placeholder = "" } = $$props;
    	let { light = false } = $$props;
    	let { disabled = false } = $$props;
    	let { helperText = "" } = $$props;
    	let { id = "ccs-" + Math.random().toString(36) } = $$props;
    	let { name = undefined } = $$props;
    	let { labelText = "" } = $$props;
    	let { hideLabel = false } = $$props;
    	let { invalid = false } = $$props;
    	let { invalidText = "" } = $$props;
    	let { warn = false } = $$props;
    	let { warnText = "" } = $$props;
    	let { ref = null } = $$props;
    	let { required = false } = $$props;
    	let { inline = false } = $$props;
    	let { readonly = false } = $$props;
    	const ctx = getContext("Form");
    	const dispatch = createEventDispatcher();

    	function parse(raw) {
    		if ($$restProps.type !== "number") return raw;
    		return raw != "" ? Number(raw) : null;
    	}

    	/** @type {(e: Event) => void} */
    	const onInput = e => {
    		$$invalidate(0, value = parse(e.target.value));
    		dispatch("input", value);
    	};

    	/** @type {(e: Event) => void} */
    	const onChange = e => {
    		dispatch("change", parse(e.target.value));
    	};

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mouseover_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mouseenter_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mouseleave_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keydown_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keyup_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function focus_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function blur_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function paste_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			ref = $$value;
    			$$invalidate(1, ref);
    		});
    	}

    	function input_input_handler() {
    		value = this.value;
    		$$invalidate(0, value);
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(25, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
    		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
    		if ('placeholder' in $$new_props) $$invalidate(3, placeholder = $$new_props.placeholder);
    		if ('light' in $$new_props) $$invalidate(4, light = $$new_props.light);
    		if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
    		if ('helperText' in $$new_props) $$invalidate(6, helperText = $$new_props.helperText);
    		if ('id' in $$new_props) $$invalidate(7, id = $$new_props.id);
    		if ('name' in $$new_props) $$invalidate(8, name = $$new_props.name);
    		if ('labelText' in $$new_props) $$invalidate(9, labelText = $$new_props.labelText);
    		if ('hideLabel' in $$new_props) $$invalidate(10, hideLabel = $$new_props.hideLabel);
    		if ('invalid' in $$new_props) $$invalidate(11, invalid = $$new_props.invalid);
    		if ('invalidText' in $$new_props) $$invalidate(12, invalidText = $$new_props.invalidText);
    		if ('warn' in $$new_props) $$invalidate(13, warn = $$new_props.warn);
    		if ('warnText' in $$new_props) $$invalidate(14, warnText = $$new_props.warnText);
    		if ('ref' in $$new_props) $$invalidate(1, ref = $$new_props.ref);
    		if ('required' in $$new_props) $$invalidate(15, required = $$new_props.required);
    		if ('inline' in $$new_props) $$invalidate(16, inline = $$new_props.inline);
    		if ('readonly' in $$new_props) $$invalidate(17, readonly = $$new_props.readonly);
    		if ('$$scope' in $$new_props) $$invalidate(27, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		size,
    		value,
    		placeholder,
    		light,
    		disabled,
    		helperText,
    		id,
    		name,
    		labelText,
    		hideLabel,
    		invalid,
    		invalidText,
    		warn,
    		warnText,
    		ref,
    		required,
    		inline,
    		readonly,
    		createEventDispatcher,
    		getContext,
    		WarningFilled: WarningFilled$1,
    		WarningAltFilled: WarningAltFilled$1,
    		EditOff: EditOff$1,
    		ctx,
    		dispatch,
    		parse,
    		onInput,
    		onChange,
    		warnId,
    		errorId,
    		helperId,
    		error,
    		isFluid
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('size' in $$props) $$invalidate(2, size = $$new_props.size);
    		if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
    		if ('placeholder' in $$props) $$invalidate(3, placeholder = $$new_props.placeholder);
    		if ('light' in $$props) $$invalidate(4, light = $$new_props.light);
    		if ('disabled' in $$props) $$invalidate(5, disabled = $$new_props.disabled);
    		if ('helperText' in $$props) $$invalidate(6, helperText = $$new_props.helperText);
    		if ('id' in $$props) $$invalidate(7, id = $$new_props.id);
    		if ('name' in $$props) $$invalidate(8, name = $$new_props.name);
    		if ('labelText' in $$props) $$invalidate(9, labelText = $$new_props.labelText);
    		if ('hideLabel' in $$props) $$invalidate(10, hideLabel = $$new_props.hideLabel);
    		if ('invalid' in $$props) $$invalidate(11, invalid = $$new_props.invalid);
    		if ('invalidText' in $$props) $$invalidate(12, invalidText = $$new_props.invalidText);
    		if ('warn' in $$props) $$invalidate(13, warn = $$new_props.warn);
    		if ('warnText' in $$props) $$invalidate(14, warnText = $$new_props.warnText);
    		if ('ref' in $$props) $$invalidate(1, ref = $$new_props.ref);
    		if ('required' in $$props) $$invalidate(15, required = $$new_props.required);
    		if ('inline' in $$props) $$invalidate(16, inline = $$new_props.inline);
    		if ('readonly' in $$props) $$invalidate(17, readonly = $$new_props.readonly);
    		if ('warnId' in $$props) $$invalidate(18, warnId = $$new_props.warnId);
    		if ('errorId' in $$props) $$invalidate(19, errorId = $$new_props.errorId);
    		if ('helperId' in $$props) $$invalidate(20, helperId = $$new_props.helperId);
    		if ('error' in $$props) $$invalidate(21, error = $$new_props.error);
    		if ('isFluid' in $$props) $$invalidate(22, isFluid = $$new_props.isFluid);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*invalid, readonly*/ 133120) {
    			$$invalidate(21, error = invalid && !readonly);
    		}

    		if ($$self.$$.dirty[0] & /*id*/ 128) {
    			$$invalidate(20, helperId = `helper-${id}`);
    		}

    		if ($$self.$$.dirty[0] & /*id*/ 128) {
    			$$invalidate(19, errorId = `error-${id}`);
    		}

    		if ($$self.$$.dirty[0] & /*id*/ 128) {
    			$$invalidate(18, warnId = `warn-${id}`);
    		}
    	};

    	$$invalidate(22, isFluid = !!ctx && ctx.isFluid);

    	return [
    		value,
    		ref,
    		size,
    		placeholder,
    		light,
    		disabled,
    		helperText,
    		id,
    		name,
    		labelText,
    		hideLabel,
    		invalid,
    		invalidText,
    		warn,
    		warnText,
    		required,
    		inline,
    		readonly,
    		warnId,
    		errorId,
    		helperId,
    		error,
    		isFluid,
    		onInput,
    		onChange,
    		$$restProps,
    		$$slots,
    		$$scope,
    		slots,
    		click_handler,
    		mouseover_handler,
    		mouseenter_handler,
    		mouseleave_handler,
    		keydown_handler,
    		keyup_handler,
    		focus_handler,
    		blur_handler,
    		paste_handler,
    		input_binding,
    		input_input_handler
    	];
    }

    class TextInput extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$e,
    			create_fragment$e,
    			safe_not_equal,
    			{
    				size: 2,
    				value: 0,
    				placeholder: 3,
    				light: 4,
    				disabled: 5,
    				helperText: 6,
    				id: 7,
    				name: 8,
    				labelText: 9,
    				hideLabel: 10,
    				invalid: 11,
    				invalidText: 12,
    				warn: 13,
    				warnText: 14,
    				ref: 1,
    				required: 15,
    				inline: 16,
    				readonly: 17
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TextInput",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get size() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get light() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set light(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get helperText() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set helperText(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get name() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelText() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelText(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideLabel() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideLabel(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get invalid() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set invalid(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get invalidText() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set invalidText(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get warn() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set warn(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get warnText() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set warnText(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ref() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ref(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get required() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set required(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inline() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inline(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readonly() {
    		throw new Error("<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readonly(value) {
    		throw new Error("<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var TextInput$1 = TextInput;

    /* node_modules/carbon-components-svelte/src/TextInput/TextInputSkeleton.svelte generated by Svelte v3.59.2 */

    const file$c = "node_modules/carbon-components-svelte/src/TextInput/TextInputSkeleton.svelte";

    // (15:2) {#if !hideLabel}
    function create_if_block$a(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			toggle_class(span, "bx--label", true);
    			toggle_class(span, "bx--skeleton", true);
    			add_location(span, file$c, 15, 4, 293);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(15:2) {#if !hideLabel}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let div1;
    	let t;
    	let div0;
    	let mounted;
    	let dispose;
    	let if_block = !/*hideLabel*/ ctx[0] && create_if_block$a(ctx);
    	let div1_levels = [/*$$restProps*/ ctx[1]];
    	let div_data_1 = {};

    	for (let i = 0; i < div1_levels.length; i += 1) {
    		div_data_1 = assign(div_data_1, div1_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t = space();
    			div0 = element("div");
    			toggle_class(div0, "bx--skeleton", true);
    			toggle_class(div0, "bx--text-input", true);
    			add_location(div0, file$c, 17, 2, 370);
    			set_attributes(div1, div_data_1);
    			toggle_class(div1, "bx--form-item", true);
    			add_location(div1, file$c, 6, 0, 155);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t);
    			append_dev(div1, div0);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div1, "click", /*click_handler*/ ctx[2], false, false, false, false),
    					listen_dev(div1, "mouseover", /*mouseover_handler*/ ctx[3], false, false, false, false),
    					listen_dev(div1, "mouseenter", /*mouseenter_handler*/ ctx[4], false, false, false, false),
    					listen_dev(div1, "mouseleave", /*mouseleave_handler*/ ctx[5], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*hideLabel*/ ctx[0]) {
    				if (if_block) ; else {
    					if_block = create_if_block$a(ctx);
    					if_block.c();
    					if_block.m(div1, t);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			set_attributes(div1, div_data_1 = get_spread_update(div1_levels, [dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]]));
    			toggle_class(div1, "bx--form-item", true);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	const omit_props_names = ["hideLabel"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TextInputSkeleton', slots, []);
    	let { hideLabel = false } = $$props;

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mouseover_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mouseenter_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function mouseleave_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('hideLabel' in $$new_props) $$invalidate(0, hideLabel = $$new_props.hideLabel);
    	};

    	$$self.$capture_state = () => ({ hideLabel });

    	$$self.$inject_state = $$new_props => {
    		if ('hideLabel' in $$props) $$invalidate(0, hideLabel = $$new_props.hideLabel);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		hideLabel,
    		$$restProps,
    		click_handler,
    		mouseover_handler,
    		mouseenter_handler,
    		mouseleave_handler
    	];
    }

    class TextInputSkeleton extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$d, create_fragment$d, safe_not_equal, { hideLabel: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TextInputSkeleton",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get hideLabel() {
    		throw new Error("<TextInputSkeleton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideLabel(value) {
    		throw new Error("<TextInputSkeleton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var TextInputSkeleton$1 = TextInputSkeleton;

    /* node_modules/carbon-components-svelte/src/icons/CaretDown.svelte generated by Svelte v3.59.2 */

    const file$b = "node_modules/carbon-components-svelte/src/icons/CaretDown.svelte";

    // (24:2) {#if title}
    function create_if_block$9(ctx) {
    	let title_1;
    	let t;

    	const block = {
    		c: function create() {
    			title_1 = svg_element("title");
    			t = text(/*title*/ ctx[1]);
    			add_location(title_1, file$b, 23, 13, 549);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, title_1, anchor);
    			append_dev(title_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(title_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(24:2) {#if title}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let svg;
    	let path;
    	let if_block = /*title*/ ctx[1] && create_if_block$9(ctx);

    	let svg_levels = [
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		{ viewBox: "0 0 32 32" },
    		{ fill: "currentColor" },
    		{ preserveAspectRatio: "xMidYMid meet" },
    		{ width: /*size*/ ctx[0] },
    		{ height: /*size*/ ctx[0] },
    		/*attributes*/ ctx[2],
    		/*$$restProps*/ ctx[3]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			if (if_block) if_block.c();
    			path = svg_element("path");
    			attr_dev(path, "d", "M24 12L16 22 8 12z");
    			add_location(path, file$b, 24, 2, 579);
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$b, 13, 0, 338);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			if (if_block) if_block.m(svg, null);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*title*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$9(ctx);
    					if_block.c();
    					if_block.m(svg, path);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				{ viewBox: "0 0 32 32" },
    				{ fill: "currentColor" },
    				{ preserveAspectRatio: "xMidYMid meet" },
    				dirty & /*size*/ 1 && { width: /*size*/ ctx[0] },
    				dirty & /*size*/ 1 && { height: /*size*/ ctx[0] },
    				dirty & /*attributes*/ 4 && /*attributes*/ ctx[2],
    				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let labelled;
    	let attributes;
    	const omit_props_names = ["size","title"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CaretDown', slots, []);
    	let { size = 16 } = $$props;
    	let { title = undefined } = $$props;

    	$$self.$$set = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('size' in $$new_props) $$invalidate(0, size = $$new_props.size);
    		if ('title' in $$new_props) $$invalidate(1, title = $$new_props.title);
    	};

    	$$self.$capture_state = () => ({ size, title, labelled, attributes });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(5, $$props = assign(assign({}, $$props), $$new_props));
    		if ('size' in $$props) $$invalidate(0, size = $$new_props.size);
    		if ('title' in $$props) $$invalidate(1, title = $$new_props.title);
    		if ('labelled' in $$props) $$invalidate(4, labelled = $$new_props.labelled);
    		if ('attributes' in $$props) $$invalidate(2, attributes = $$new_props.attributes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		$$invalidate(4, labelled = $$props["aria-label"] || $$props["aria-labelledby"] || title);

    		$$invalidate(2, attributes = {
    			"aria-hidden": labelled ? undefined : true,
    			role: labelled ? "img" : undefined,
    			focusable: Number($$props["tabindex"]) === 0 ? true : undefined
    		});
    	};

    	$$props = exclude_internal_props($$props);
    	return [size, title, attributes, $$restProps, labelled];
    }

    class CaretDown extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$c, create_fragment$c, safe_not_equal, { size: 0, title: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CaretDown",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get size() {
    		throw new Error("<CaretDown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<CaretDown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<CaretDown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<CaretDown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var CaretDown$1 = CaretDown;

    /* node_modules/carbon-components-svelte/src/TreeView/TreeViewNode.svelte generated by Svelte v3.59.2 */
    const file$a = "node_modules/carbon-components-svelte/src/TreeView/TreeViewNode.svelte";

    function create_fragment$b(ctx) {
    	let li;
    	let div;
    	let switch_instance;
    	let t0;
    	let t1;
    	let li_tabindex_value;
    	let li_aria_current_value;
    	let li_aria_selected_value;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*icon*/ ctx[3];

    	function switch_props(ctx) {
    		return {
    			props: { class: "bx--tree-node__icon" },
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			div = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			t0 = space();
    			t1 = text(/*text*/ ctx[1]);
    			toggle_class(div, "bx--tree-node__label", true);
    			add_location(div, file$a, 116, 2, 3052);
    			attr_dev(li, "role", "treeitem");
    			attr_dev(li, "id", /*id*/ ctx[0]);
    			attr_dev(li, "tabindex", li_tabindex_value = /*disabled*/ ctx[2] ? undefined : -1);
    			attr_dev(li, "aria-current", li_aria_current_value = /*id*/ ctx[0] === /*$activeNodeId*/ ctx[7] || undefined);

    			attr_dev(li, "aria-selected", li_aria_selected_value = /*disabled*/ ctx[2]
    			? undefined
    			: /*$selectedNodeIds*/ ctx[8].includes(/*id*/ ctx[0]));

    			attr_dev(li, "aria-disabled", /*disabled*/ ctx[2]);
    			toggle_class(li, "bx--tree-node", true);
    			toggle_class(li, "bx--tree-leaf-node", true);
    			toggle_class(li, "bx--tree-node--active", /*id*/ ctx[0] === /*$activeNodeId*/ ctx[7]);
    			toggle_class(li, "bx--tree-node--selected", /*$selectedNodeIds*/ ctx[8].includes(/*id*/ ctx[0]));
    			toggle_class(li, "bx--tree-node--disabled", /*disabled*/ ctx[2]);
    			toggle_class(li, "bx--tree-node--with-icon", /*icon*/ ctx[3]);
    			add_location(li, file$a, 78, 0, 1969);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, div);
    			if (switch_instance) mount_component(switch_instance, div, null);
    			append_dev(div, t0);
    			append_dev(div, t1);
    			/*div_binding*/ ctx[14](div);
    			/*li_binding*/ ctx[15](li);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(li, "click", stop_propagation(/*click_handler*/ ctx[16]), false, false, true, false),
    					listen_dev(li, "keydown", /*keydown_handler*/ ctx[17], false, false, false, false),
    					listen_dev(li, "focus", /*focus_handler*/ ctx[18], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*icon*/ 8 && switch_value !== (switch_value = /*icon*/ ctx[3])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div, t0);
    				} else {
    					switch_instance = null;
    				}
    			}

    			if (!current || dirty & /*text*/ 2) set_data_dev(t1, /*text*/ ctx[1]);

    			if (!current || dirty & /*id*/ 1) {
    				attr_dev(li, "id", /*id*/ ctx[0]);
    			}

    			if (!current || dirty & /*disabled*/ 4 && li_tabindex_value !== (li_tabindex_value = /*disabled*/ ctx[2] ? undefined : -1)) {
    				attr_dev(li, "tabindex", li_tabindex_value);
    			}

    			if (!current || dirty & /*id, $activeNodeId*/ 129 && li_aria_current_value !== (li_aria_current_value = /*id*/ ctx[0] === /*$activeNodeId*/ ctx[7] || undefined)) {
    				attr_dev(li, "aria-current", li_aria_current_value);
    			}

    			if (!current || dirty & /*disabled, $selectedNodeIds, id*/ 261 && li_aria_selected_value !== (li_aria_selected_value = /*disabled*/ ctx[2]
    			? undefined
    			: /*$selectedNodeIds*/ ctx[8].includes(/*id*/ ctx[0]))) {
    				attr_dev(li, "aria-selected", li_aria_selected_value);
    			}

    			if (!current || dirty & /*disabled*/ 4) {
    				attr_dev(li, "aria-disabled", /*disabled*/ ctx[2]);
    			}

    			if (!current || dirty & /*id, $activeNodeId*/ 129) {
    				toggle_class(li, "bx--tree-node--active", /*id*/ ctx[0] === /*$activeNodeId*/ ctx[7]);
    			}

    			if (!current || dirty & /*$selectedNodeIds, id*/ 257) {
    				toggle_class(li, "bx--tree-node--selected", /*$selectedNodeIds*/ ctx[8].includes(/*id*/ ctx[0]));
    			}

    			if (!current || dirty & /*disabled*/ 4) {
    				toggle_class(li, "bx--tree-node--disabled", /*disabled*/ ctx[2]);
    			}

    			if (!current || dirty & /*icon*/ 8) {
    				toggle_class(li, "bx--tree-node--with-icon", /*icon*/ ctx[3]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (switch_instance) destroy_component(switch_instance);
    			/*div_binding*/ ctx[14](null);
    			/*li_binding*/ ctx[15](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function computeTreeLeafDepth(node) {
    	let depth = 0;
    	if (node == null) return depth;
    	let parentNode = node.parentNode;

    	while (parentNode != null && parentNode.getAttribute("role") !== "tree") {
    		parentNode = parentNode.parentNode;
    		if (parentNode.tagName === "LI") depth++;
    	}

    	return depth;
    }

    /**
     * Finds the nearest parent tree node
     * @param {HTMLElement} node
     * @returns {null | HTMLElement}
     */
    function findParentTreeNode(node) {
    	if (node.classList.contains("bx--tree-parent-node")) return node;
    	if (node.classList.contains("bx--tree")) return null;
    	return findParentTreeNode(node.parentNode);
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let node;
    	let $activeNodeId;
    	let $selectedNodeIds;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TreeViewNode', slots, []);
    	let { leaf = false } = $$props;
    	let { id = "" } = $$props;
    	let { text = "" } = $$props;
    	let { disabled = false } = $$props;
    	let { icon = undefined } = $$props;
    	let ref = null;
    	let refLabel = null;
    	let prevActiveId = undefined;
    	const { activeNodeId, selectedNodeIds, clickNode, selectNode, focusNode } = getContext("TreeView");
    	validate_store(activeNodeId, 'activeNodeId');
    	component_subscribe($$self, activeNodeId, value => $$invalidate(7, $activeNodeId = value));
    	validate_store(selectedNodeIds, 'selectedNodeIds');
    	component_subscribe($$self, selectedNodeIds, value => $$invalidate(8, $selectedNodeIds = value));
    	const offset = () => computeTreeLeafDepth(refLabel) + (leaf && icon ? 2 : 2.5);

    	afterUpdate(() => {
    		if (id === $activeNodeId && prevActiveId !== $activeNodeId) {
    			if (!$selectedNodeIds.includes(id)) selectNode(node);
    		}

    		prevActiveId = $activeNodeId;
    	});

    	const writable_props = ['leaf', 'id', 'text', 'disabled', 'icon'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TreeViewNode> was created with unknown prop '${key}'`);
    	});

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refLabel = $$value;
    			$$invalidate(4, refLabel);
    		});
    	}

    	function li_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			ref = $$value;
    			$$invalidate(5, ref);
    		});
    	}

    	const click_handler = () => {
    		if (disabled) return;
    		clickNode(node);
    	};

    	const keydown_handler = e => {
    		if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'Enter') {
    			e.stopPropagation();
    		}

    		if (e.key === 'ArrowLeft') {
    			const parentNode = findParentTreeNode(ref.parentNode);
    			if (parentNode) parentNode.focus();
    		}

    		if (e.key === 'Enter' || e.key === ' ') {
    			e.preventDefault();
    			if (disabled) return;
    			clickNode(node);
    		}
    	};

    	const focus_handler = () => {
    		focusNode(node);
    	};

    	$$self.$$set = $$props => {
    		if ('leaf' in $$props) $$invalidate(13, leaf = $$props.leaf);
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ('icon' in $$props) $$invalidate(3, icon = $$props.icon);
    	};

    	$$self.$capture_state = () => ({
    		computeTreeLeafDepth,
    		findParentTreeNode,
    		leaf,
    		id,
    		text,
    		disabled,
    		icon,
    		afterUpdate,
    		getContext,
    		ref,
    		refLabel,
    		prevActiveId,
    		activeNodeId,
    		selectedNodeIds,
    		clickNode,
    		selectNode,
    		focusNode,
    		offset,
    		node,
    		$activeNodeId,
    		$selectedNodeIds
    	});

    	$$self.$inject_state = $$props => {
    		if ('leaf' in $$props) $$invalidate(13, leaf = $$props.leaf);
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('text' in $$props) $$invalidate(1, text = $$props.text);
    		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
    		if ('icon' in $$props) $$invalidate(3, icon = $$props.icon);
    		if ('ref' in $$props) $$invalidate(5, ref = $$props.ref);
    		if ('refLabel' in $$props) $$invalidate(4, refLabel = $$props.refLabel);
    		if ('prevActiveId' in $$props) prevActiveId = $$props.prevActiveId;
    		if ('node' in $$props) $$invalidate(6, node = $$props.node);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*id, text, leaf*/ 8195) {
    			$$invalidate(6, node = { id, text, expanded: false, leaf });
    		}

    		if ($$self.$$.dirty & /*refLabel*/ 16) {
    			if (refLabel) {
    				$$invalidate(4, refLabel.style.marginLeft = `-${offset()}rem`, refLabel);
    				$$invalidate(4, refLabel.style.paddingLeft = `${offset()}rem`, refLabel);
    			}
    		}
    	};

    	return [
    		id,
    		text,
    		disabled,
    		icon,
    		refLabel,
    		ref,
    		node,
    		$activeNodeId,
    		$selectedNodeIds,
    		activeNodeId,
    		selectedNodeIds,
    		clickNode,
    		focusNode,
    		leaf,
    		div_binding,
    		li_binding,
    		click_handler,
    		keydown_handler,
    		focus_handler
    	];
    }

    class TreeViewNode extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			leaf: 13,
    			id: 0,
    			text: 1,
    			disabled: 2,
    			icon: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TreeViewNode",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get leaf() {
    		throw new Error("<TreeViewNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set leaf(value) {
    		throw new Error("<TreeViewNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<TreeViewNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<TreeViewNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<TreeViewNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<TreeViewNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<TreeViewNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<TreeViewNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon() {
    		throw new Error("<TreeViewNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<TreeViewNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var TreeViewNode$1 = TreeViewNode;

    /* node_modules/carbon-components-svelte/src/TreeView/TreeViewNodeList.svelte generated by Svelte v3.59.2 */
    const file$9 = "node_modules/carbon-components-svelte/src/TreeView/TreeViewNodeList.svelte";

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[30] = list[i];
    	return child_ctx;
    }

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[30] = list[i];
    	return child_ctx;
    }

    // (74:0) {:else}
    function create_else_block_1$1(ctx) {
    	let li;
    	let div;
    	let span0;
    	let caretdown;
    	let t0;
    	let span1;
    	let switch_instance;
    	let t1;
    	let t2;
    	let t3;
    	let li_tabindex_value;
    	let li_aria_current_value;
    	let li_aria_selected_value;
    	let current;
    	let mounted;
    	let dispose;

    	caretdown = new CaretDown$1({
    			props: {
    				class: "bx--tree-parent-node__toggle-icon " + (/*expanded*/ ctx[7] && 'bx--tree-parent-node__toggle-icon--expanded')
    			},
    			$$inline: true
    		});

    	var switch_value = /*icon*/ ctx[5];

    	function switch_props(ctx) {
    		return {
    			props: { class: "bx--tree-node__icon" },
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    	}

    	let if_block = /*expanded*/ ctx[7] && create_if_block_2$1(ctx);

    	const block = {
    		c: function create() {
    			li = element("li");
    			div = element("div");
    			span0 = element("span");
    			create_component(caretdown.$$.fragment);
    			t0 = space();
    			span1 = element("span");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			t1 = space();
    			t2 = text(/*text*/ ctx[3]);
    			t3 = space();
    			if (if_block) if_block.c();
    			attr_dev(span0, "disabled", /*disabled*/ ctx[4]);
    			toggle_class(span0, "bx--tree-parent-node__toggle", true);
    			add_location(span0, file$9, 135, 6, 3583);
    			toggle_class(span1, "bx--tree-node__label__details", true);
    			add_location(span1, file$9, 150, 6, 4022);
    			toggle_class(div, "bx--tree-node__label", true);
    			add_location(div, file$9, 133, 4, 3449);
    			attr_dev(li, "role", "treeitem");
    			attr_dev(li, "id", /*id*/ ctx[2]);
    			attr_dev(li, "tabindex", li_tabindex_value = /*disabled*/ ctx[4] ? undefined : -1);
    			attr_dev(li, "aria-current", li_aria_current_value = /*id*/ ctx[2] === /*$activeNodeId*/ ctx[11] || undefined);

    			attr_dev(li, "aria-selected", li_aria_selected_value = /*disabled*/ ctx[4]
    			? undefined
    			: /*$selectedNodeIds*/ ctx[12].includes(/*id*/ ctx[2]));

    			attr_dev(li, "aria-disabled", /*disabled*/ ctx[4]);
    			attr_dev(li, "aria-expanded", /*expanded*/ ctx[7]);
    			toggle_class(li, "bx--tree-node", true);
    			toggle_class(li, "bx--tree-parent-node", true);
    			toggle_class(li, "bx--tree-node--active", /*id*/ ctx[2] === /*$activeNodeId*/ ctx[11]);
    			toggle_class(li, "bx--tree-node--selected", /*$selectedNodeIds*/ ctx[12].includes(/*id*/ ctx[2]));
    			toggle_class(li, "bx--tree-node--disabled", /*disabled*/ ctx[4]);
    			toggle_class(li, "bx--tree-node--with-icon", /*icon*/ ctx[5]);
    			add_location(li, file$9, 75, 2, 1881);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, div);
    			append_dev(div, span0);
    			mount_component(caretdown, span0, null);
    			append_dev(div, t0);
    			append_dev(div, span1);
    			if (switch_instance) mount_component(switch_instance, span1, null);
    			append_dev(span1, t1);
    			append_dev(span1, t2);
    			/*div_binding*/ ctx[22](div);
    			append_dev(li, t3);
    			if (if_block) if_block.m(li, null);
    			/*li_binding*/ ctx[23](li);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(span0, "click", /*click_handler*/ ctx[21], false, false, false, false),
    					listen_dev(li, "click", stop_propagation(/*click_handler_1*/ ctx[24]), false, false, true, false),
    					listen_dev(li, "keydown", /*keydown_handler*/ ctx[25], false, false, false, false),
    					listen_dev(li, "focus", /*focus_handler*/ ctx[26], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const caretdown_changes = {};
    			if (dirty[0] & /*expanded*/ 128) caretdown_changes.class = "bx--tree-parent-node__toggle-icon " + (/*expanded*/ ctx[7] && 'bx--tree-parent-node__toggle-icon--expanded');
    			caretdown.$set(caretdown_changes);

    			if (!current || dirty[0] & /*disabled*/ 16) {
    				attr_dev(span0, "disabled", /*disabled*/ ctx[4]);
    			}

    			if (dirty[0] & /*icon*/ 32 && switch_value !== (switch_value = /*icon*/ ctx[5])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = construct_svelte_component_dev(switch_value, switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, span1, t1);
    				} else {
    					switch_instance = null;
    				}
    			}

    			if (!current || dirty[0] & /*text*/ 8) set_data_dev(t2, /*text*/ ctx[3]);

    			if (/*expanded*/ ctx[7]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*expanded*/ 128) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_2$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(li, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty[0] & /*id*/ 4) {
    				attr_dev(li, "id", /*id*/ ctx[2]);
    			}

    			if (!current || dirty[0] & /*disabled*/ 16 && li_tabindex_value !== (li_tabindex_value = /*disabled*/ ctx[4] ? undefined : -1)) {
    				attr_dev(li, "tabindex", li_tabindex_value);
    			}

    			if (!current || dirty[0] & /*id, $activeNodeId*/ 2052 && li_aria_current_value !== (li_aria_current_value = /*id*/ ctx[2] === /*$activeNodeId*/ ctx[11] || undefined)) {
    				attr_dev(li, "aria-current", li_aria_current_value);
    			}

    			if (!current || dirty[0] & /*disabled, $selectedNodeIds, id*/ 4116 && li_aria_selected_value !== (li_aria_selected_value = /*disabled*/ ctx[4]
    			? undefined
    			: /*$selectedNodeIds*/ ctx[12].includes(/*id*/ ctx[2]))) {
    				attr_dev(li, "aria-selected", li_aria_selected_value);
    			}

    			if (!current || dirty[0] & /*disabled*/ 16) {
    				attr_dev(li, "aria-disabled", /*disabled*/ ctx[4]);
    			}

    			if (!current || dirty[0] & /*expanded*/ 128) {
    				attr_dev(li, "aria-expanded", /*expanded*/ ctx[7]);
    			}

    			if (!current || dirty[0] & /*id, $activeNodeId*/ 2052) {
    				toggle_class(li, "bx--tree-node--active", /*id*/ ctx[2] === /*$activeNodeId*/ ctx[11]);
    			}

    			if (!current || dirty[0] & /*$selectedNodeIds, id*/ 4100) {
    				toggle_class(li, "bx--tree-node--selected", /*$selectedNodeIds*/ ctx[12].includes(/*id*/ ctx[2]));
    			}

    			if (!current || dirty[0] & /*disabled*/ 16) {
    				toggle_class(li, "bx--tree-node--disabled", /*disabled*/ ctx[4]);
    			}

    			if (!current || dirty[0] & /*icon*/ 32) {
    				toggle_class(li, "bx--tree-node--with-icon", /*icon*/ ctx[5]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(caretdown.$$.fragment, local);
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(caretdown.$$.fragment, local);
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			destroy_component(caretdown);
    			if (switch_instance) destroy_component(switch_instance);
    			/*div_binding*/ ctx[22](null);
    			if (if_block) if_block.d();
    			/*li_binding*/ ctx[23](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(74:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (66:0) {#if root}
    function create_if_block$8(ctx) {
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_1_anchor;
    	let current;
    	let each_value = /*children*/ ctx[0];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*child*/ ctx[30].id;
    	validate_each_keys(ctx, each_value, get_each_context$3, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$3(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$3(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*children*/ 1) {
    				each_value = /*children*/ ctx[0];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$3, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block$3, each_1_anchor, get_each_context$3);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d(detaching);
    			}

    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(66:0) {#if root}",
    		ctx
    	});

    	return block;
    }

    // (156:4) {#if expanded}
    function create_if_block_2$1(ctx) {
    	let ul;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value_1 = /*children*/ ctx[0];
    	validate_each_argument(each_value_1);
    	const get_key = ctx => /*child*/ ctx[30].id;
    	validate_each_keys(ctx, each_value_1, get_each_context_1$3, get_key);

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		let child_ctx = get_each_context_1$3(ctx, each_value_1, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_1$3(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "role", "group");
    			toggle_class(ul, "bx--tree-node__children", true);
    			add_location(ul, file$9, 156, 6, 4210);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(ul, null);
    				}
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*children*/ 1) {
    				each_value_1 = /*children*/ ctx[0];
    				validate_each_argument(each_value_1);
    				group_outros();
    				validate_each_keys(ctx, each_value_1, get_each_context_1$3, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, ul, outro_and_destroy_block, create_each_block_1$3, null, get_each_context_1$3);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(156:4) {#if expanded}",
    		ctx
    	});

    	return block;
    }

    // (161:10) {:else}
    function create_else_block_2$1(ctx) {
    	let treeviewnode;
    	let current;
    	const treeviewnode_spread_levels = [{ leaf: true }, /*child*/ ctx[30]];
    	let treeviewnode_props = {};

    	for (let i = 0; i < treeviewnode_spread_levels.length; i += 1) {
    		treeviewnode_props = assign(treeviewnode_props, treeviewnode_spread_levels[i]);
    	}

    	treeviewnode = new TreeViewNode$1({
    			props: treeviewnode_props,
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(treeviewnode.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(treeviewnode, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const treeviewnode_changes = (dirty[0] & /*children*/ 1)
    			? get_spread_update(treeviewnode_spread_levels, [treeviewnode_spread_levels[0], get_spread_object(/*child*/ ctx[30])])
    			: {};

    			treeviewnode.$set(treeviewnode_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(treeviewnode.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(treeviewnode.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(treeviewnode, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$1.name,
    		type: "else",
    		source: "(161:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (159:10) {#if Array.isArray(child.children)}
    function create_if_block_3(ctx) {
    	let treeviewnodelist;
    	let current;
    	const treeviewnodelist_spread_levels = [/*child*/ ctx[30]];
    	let treeviewnodelist_props = {};

    	for (let i = 0; i < treeviewnodelist_spread_levels.length; i += 1) {
    		treeviewnodelist_props = assign(treeviewnodelist_props, treeviewnodelist_spread_levels[i]);
    	}

    	treeviewnodelist = new TreeViewNodeList({
    			props: treeviewnodelist_props,
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(treeviewnodelist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(treeviewnodelist, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const treeviewnodelist_changes = (dirty[0] & /*children*/ 1)
    			? get_spread_update(treeviewnodelist_spread_levels, [get_spread_object(/*child*/ ctx[30])])
    			: {};

    			treeviewnodelist.$set(treeviewnodelist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(treeviewnodelist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(treeviewnodelist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(treeviewnodelist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(159:10) {#if Array.isArray(child.children)}",
    		ctx
    	});

    	return block;
    }

    // (158:8) {#each children as child (child.id)}
    function create_each_block_1$3(key_1, ctx) {
    	let first;
    	let show_if;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_3, create_else_block_2$1];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (dirty[0] & /*children*/ 1) show_if = null;
    		if (show_if == null) show_if = !!Array.isArray(/*child*/ ctx[30].children);
    		if (show_if) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_2(ctx, [-1, -1]);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			if_block.c();
    			if_block_anchor = empty();
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(158:8) {#each children as child (child.id)}",
    		ctx
    	});

    	return block;
    }

    // (70:4) {:else}
    function create_else_block$4(ctx) {
    	let treeviewnode;
    	let current;
    	const treeviewnode_spread_levels = [{ leaf: true }, /*child*/ ctx[30]];
    	let treeviewnode_props = {};

    	for (let i = 0; i < treeviewnode_spread_levels.length; i += 1) {
    		treeviewnode_props = assign(treeviewnode_props, treeviewnode_spread_levels[i]);
    	}

    	treeviewnode = new TreeViewNode$1({
    			props: treeviewnode_props,
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(treeviewnode.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(treeviewnode, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const treeviewnode_changes = (dirty[0] & /*children*/ 1)
    			? get_spread_update(treeviewnode_spread_levels, [treeviewnode_spread_levels[0], get_spread_object(/*child*/ ctx[30])])
    			: {};

    			treeviewnode.$set(treeviewnode_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(treeviewnode.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(treeviewnode.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(treeviewnode, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(70:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (68:4) {#if Array.isArray(child.children)}
    function create_if_block_1$3(ctx) {
    	let treeviewnodelist;
    	let current;
    	const treeviewnodelist_spread_levels = [/*child*/ ctx[30]];
    	let treeviewnodelist_props = {};

    	for (let i = 0; i < treeviewnodelist_spread_levels.length; i += 1) {
    		treeviewnodelist_props = assign(treeviewnodelist_props, treeviewnodelist_spread_levels[i]);
    	}

    	treeviewnodelist = new TreeViewNodeList({
    			props: treeviewnodelist_props,
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(treeviewnodelist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(treeviewnodelist, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const treeviewnodelist_changes = (dirty[0] & /*children*/ 1)
    			? get_spread_update(treeviewnodelist_spread_levels, [get_spread_object(/*child*/ ctx[30])])
    			: {};

    			treeviewnodelist.$set(treeviewnodelist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(treeviewnodelist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(treeviewnodelist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(treeviewnodelist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(68:4) {#if Array.isArray(child.children)}",
    		ctx
    	});

    	return block;
    }

    // (67:2) {#each children as child (child.id)}
    function create_each_block$3(key_1, ctx) {
    	let first;
    	let show_if;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$3, create_else_block$4];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (dirty[0] & /*children*/ 1) show_if = null;
    		if (show_if == null) show_if = !!Array.isArray(/*child*/ ctx[30].children);
    		if (show_if) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx, [-1, -1]);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			if_block.c();
    			if_block_anchor = empty();
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx, dirty);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(67:2) {#each children as child (child.id)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$8, create_else_block_1$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*root*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let parent;
    	let node;
    	let expanded;
    	let $expandedNodeIds;
    	let $activeNodeId;
    	let $selectedNodeIds;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TreeViewNodeList', slots, []);
    	let { children = [] } = $$props;
    	let { root = false } = $$props;
    	let { id = "" } = $$props;
    	let { text = "" } = $$props;
    	let { disabled = false } = $$props;
    	let { icon = undefined } = $$props;
    	let ref = null;
    	let refLabel = null;
    	let prevActiveId = undefined;
    	const { activeNodeId, selectedNodeIds, expandedNodeIds, clickNode, selectNode, expandNode, focusNode, toggleNode } = getContext("TreeView");
    	validate_store(activeNodeId, 'activeNodeId');
    	component_subscribe($$self, activeNodeId, value => $$invalidate(11, $activeNodeId = value));
    	validate_store(selectedNodeIds, 'selectedNodeIds');
    	component_subscribe($$self, selectedNodeIds, value => $$invalidate(12, $selectedNodeIds = value));
    	validate_store(expandedNodeIds, 'expandedNodeIds');
    	component_subscribe($$self, expandedNodeIds, value => $$invalidate(20, $expandedNodeIds = value));

    	const offset = () => {
    		const depth = computeTreeLeafDepth(refLabel);
    		if (parent) return depth + 1;
    		if (icon) return depth + 2;
    		return depth + 2.5;
    	};

    	afterUpdate(() => {
    		if (id === $activeNodeId && prevActiveId !== $activeNodeId) {
    			if (!$selectedNodeIds.includes(id)) selectNode(node);
    		}

    		prevActiveId = $activeNodeId;
    	});

    	const writable_props = ['children', 'root', 'id', 'text', 'disabled', 'icon'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TreeViewNodeList> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		if (disabled) return;
    		$$invalidate(7, expanded = !expanded);
    		expandNode(node, expanded);
    		toggleNode(node);
    	};

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			refLabel = $$value;
    			$$invalidate(6, refLabel);
    		});
    	}

    	function li_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			ref = $$value;
    			$$invalidate(9, ref);
    		});
    	}

    	const click_handler_1 = () => {
    		if (disabled) return;
    		clickNode(node);
    	};

    	const keydown_handler = e => {
    		if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'Enter') {
    			e.stopPropagation();
    		}

    		if (parent && e.key === 'ArrowLeft') {
    			$$invalidate(7, expanded = false);
    			expandNode(node, false);
    			toggleNode(node);
    		}

    		if (parent && e.key === 'ArrowRight') {
    			if (expanded) {
    				ref.lastChild.firstElementChild?.focus();
    			} else {
    				$$invalidate(7, expanded = true);
    				expandNode(node, true);
    				toggleNode(node);
    			}
    		}

    		if (e.key === 'Enter' || e.key === ' ') {
    			e.preventDefault();
    			if (disabled) return;
    			$$invalidate(7, expanded = !expanded);
    			toggleNode(node);
    			clickNode(node);
    			expandNode(node, expanded);
    			ref.focus();
    		}
    	};

    	const focus_handler = () => {
    		focusNode(node);
    	};

    	$$self.$$set = $$props => {
    		if ('children' in $$props) $$invalidate(0, children = $$props.children);
    		if ('root' in $$props) $$invalidate(1, root = $$props.root);
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    		if ('text' in $$props) $$invalidate(3, text = $$props.text);
    		if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
    		if ('icon' in $$props) $$invalidate(5, icon = $$props.icon);
    	};

    	$$self.$capture_state = () => ({
    		children,
    		root,
    		id,
    		text,
    		disabled,
    		icon,
    		afterUpdate,
    		getContext,
    		CaretDown: CaretDown$1,
    		TreeViewNode: TreeViewNode$1,
    		computeTreeLeafDepth,
    		ref,
    		refLabel,
    		prevActiveId,
    		activeNodeId,
    		selectedNodeIds,
    		expandedNodeIds,
    		clickNode,
    		selectNode,
    		expandNode,
    		focusNode,
    		toggleNode,
    		offset,
    		expanded,
    		parent,
    		node,
    		$expandedNodeIds,
    		$activeNodeId,
    		$selectedNodeIds
    	});

    	$$self.$inject_state = $$props => {
    		if ('children' in $$props) $$invalidate(0, children = $$props.children);
    		if ('root' in $$props) $$invalidate(1, root = $$props.root);
    		if ('id' in $$props) $$invalidate(2, id = $$props.id);
    		if ('text' in $$props) $$invalidate(3, text = $$props.text);
    		if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
    		if ('icon' in $$props) $$invalidate(5, icon = $$props.icon);
    		if ('ref' in $$props) $$invalidate(9, ref = $$props.ref);
    		if ('refLabel' in $$props) $$invalidate(6, refLabel = $$props.refLabel);
    		if ('prevActiveId' in $$props) prevActiveId = $$props.prevActiveId;
    		if ('expanded' in $$props) $$invalidate(7, expanded = $$props.expanded);
    		if ('parent' in $$props) $$invalidate(8, parent = $$props.parent);
    		if ('node' in $$props) $$invalidate(10, node = $$props.node);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*children*/ 1) {
    			$$invalidate(8, parent = Array.isArray(children));
    		}

    		if ($$self.$$.dirty[0] & /*$expandedNodeIds, id*/ 1048580) {
    			$$invalidate(7, expanded = $expandedNodeIds.includes(id));
    		}

    		if ($$self.$$.dirty[0] & /*id, text, expanded, parent*/ 396) {
    			$$invalidate(10, node = { id, text, expanded, leaf: !parent });
    		}

    		if ($$self.$$.dirty[0] & /*refLabel*/ 64) {
    			if (refLabel) {
    				$$invalidate(6, refLabel.style.marginLeft = `-${offset()}rem`, refLabel);
    				$$invalidate(6, refLabel.style.paddingLeft = `${offset()}rem`, refLabel);
    			}
    		}
    	};

    	return [
    		children,
    		root,
    		id,
    		text,
    		disabled,
    		icon,
    		refLabel,
    		expanded,
    		parent,
    		ref,
    		node,
    		$activeNodeId,
    		$selectedNodeIds,
    		activeNodeId,
    		selectedNodeIds,
    		expandedNodeIds,
    		clickNode,
    		expandNode,
    		focusNode,
    		toggleNode,
    		$expandedNodeIds,
    		click_handler,
    		div_binding,
    		li_binding,
    		click_handler_1,
    		keydown_handler,
    		focus_handler
    	];
    }

    class TreeViewNodeList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(
    			this,
    			options,
    			instance$a,
    			create_fragment$a,
    			safe_not_equal,
    			{
    				children: 0,
    				root: 1,
    				id: 2,
    				text: 3,
    				disabled: 4,
    				icon: 5
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TreeViewNodeList",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get children() {
    		throw new Error("<TreeViewNodeList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set children(value) {
    		throw new Error("<TreeViewNodeList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get root() {
    		throw new Error("<TreeViewNodeList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set root(value) {
    		throw new Error("<TreeViewNodeList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<TreeViewNodeList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<TreeViewNodeList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<TreeViewNodeList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<TreeViewNodeList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<TreeViewNodeList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<TreeViewNodeList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon() {
    		throw new Error("<TreeViewNodeList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<TreeViewNodeList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var TreeViewNodeList$1 = TreeViewNodeList;

    /* node_modules/carbon-components-svelte/src/TreeView/TreeView.svelte generated by Svelte v3.59.2 */
    const file$8 = "node_modules/carbon-components-svelte/src/TreeView/TreeView.svelte";
    const get_labelText_slot_changes = dirty => ({});
    const get_labelText_slot_context = ctx => ({});

    // (184:0) {#if !hideLabel}
    function create_if_block$7(ctx) {
    	let label;
    	let current;
    	const labelText_slot_template = /*#slots*/ ctx[17].labelText;
    	const labelText_slot = create_slot(labelText_slot_template, ctx, /*$$scope*/ ctx[16], get_labelText_slot_context);
    	const labelText_slot_or_fallback = labelText_slot || fallback_block(ctx);

    	const block = {
    		c: function create() {
    			label = element("label");
    			if (labelText_slot_or_fallback) labelText_slot_or_fallback.c();
    			attr_dev(label, "id", /*labelId*/ ctx[6]);
    			toggle_class(label, "bx--label", true);
    			add_location(label, file$8, 185, 2, 4911);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);

    			if (labelText_slot_or_fallback) {
    				labelText_slot_or_fallback.m(label, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (labelText_slot) {
    				if (labelText_slot.p && (!current || dirty & /*$$scope*/ 65536)) {
    					update_slot_base(
    						labelText_slot,
    						labelText_slot_template,
    						ctx,
    						/*$$scope*/ ctx[16],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[16])
    						: get_slot_changes(labelText_slot_template, /*$$scope*/ ctx[16], dirty, get_labelText_slot_changes),
    						get_labelText_slot_context
    					);
    				}
    			} else {
    				if (labelText_slot_or_fallback && labelText_slot_or_fallback.p && (!current || dirty & /*labelText*/ 8)) {
    					labelText_slot_or_fallback.p(ctx, !current ? -1 : dirty);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(labelText_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(labelText_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (labelText_slot_or_fallback) labelText_slot_or_fallback.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(184:0) {#if !hideLabel}",
    		ctx
    	});

    	return block;
    }

    // (187:27) {labelText}
    function fallback_block(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*labelText*/ ctx[3]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*labelText*/ 8) set_data_dev(t, /*labelText*/ ctx[3]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(187:27) {labelText}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let t;
    	let ul;
    	let treeviewnodelist;
    	let ul_aria_label_value;
    	let ul_aria_labelledby_value;
    	let ul_aria_multiselectable_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = !/*hideLabel*/ ctx[4] && create_if_block$7(ctx);

    	treeviewnodelist = new TreeViewNodeList$1({
    			props: {
    				root: true,
    				children: /*children*/ ctx[1]
    			},
    			$$inline: true
    		});

    	let ul_levels = [
    		/*$$restProps*/ ctx[8],
    		{ role: "tree" },
    		{
    			"aria-label": ul_aria_label_value = /*hideLabel*/ ctx[4] ? /*labelText*/ ctx[3] : undefined
    		},
    		{
    			"aria-labelledby": ul_aria_labelledby_value = !/*hideLabel*/ ctx[4] ? /*labelId*/ ctx[6] : undefined
    		},
    		{
    			"aria-multiselectable": ul_aria_multiselectable_value = /*selectedIds*/ ctx[0].length > 1 || undefined
    		}
    	];

    	let ul_data = {};

    	for (let i = 0; i < ul_levels.length; i += 1) {
    		ul_data = assign(ul_data, ul_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t = space();
    			ul = element("ul");
    			create_component(treeviewnodelist.$$.fragment);
    			set_attributes(ul, ul_data);
    			toggle_class(ul, "bx--tree", true);
    			toggle_class(ul, "bx--tree--default", /*size*/ ctx[2] === 'default');
    			toggle_class(ul, "bx--tree--compact", /*size*/ ctx[2] === 'compact');
    			add_location(ul, file$8, 191, 0, 5097);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, ul, anchor);
    			mount_component(treeviewnodelist, ul, null);
    			/*ul_binding*/ ctx[19](ul);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(ul, "keydown", /*keydown_handler*/ ctx[18], false, false, false, false),
    					listen_dev(ul, "keydown", stop_propagation(/*handleKeyDown*/ ctx[7]), false, false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*hideLabel*/ ctx[4]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*hideLabel*/ 16) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$7(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t.parentNode, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const treeviewnodelist_changes = {};
    			if (dirty & /*children*/ 2) treeviewnodelist_changes.children = /*children*/ ctx[1];
    			treeviewnodelist.$set(treeviewnodelist_changes);

    			set_attributes(ul, ul_data = get_spread_update(ul_levels, [
    				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8],
    				{ role: "tree" },
    				(!current || dirty & /*hideLabel, labelText*/ 24 && ul_aria_label_value !== (ul_aria_label_value = /*hideLabel*/ ctx[4] ? /*labelText*/ ctx[3] : undefined)) && { "aria-label": ul_aria_label_value },
    				(!current || dirty & /*hideLabel*/ 16 && ul_aria_labelledby_value !== (ul_aria_labelledby_value = !/*hideLabel*/ ctx[4] ? /*labelId*/ ctx[6] : undefined)) && {
    					"aria-labelledby": ul_aria_labelledby_value
    				},
    				(!current || dirty & /*selectedIds*/ 1 && ul_aria_multiselectable_value !== (ul_aria_multiselectable_value = /*selectedIds*/ ctx[0].length > 1 || undefined)) && {
    					"aria-multiselectable": ul_aria_multiselectable_value
    				}
    			]));

    			toggle_class(ul, "bx--tree", true);
    			toggle_class(ul, "bx--tree--default", /*size*/ ctx[2] === 'default');
    			toggle_class(ul, "bx--tree--compact", /*size*/ ctx[2] === 'compact');
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(treeviewnodelist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(treeviewnodelist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(ul);
    			destroy_component(treeviewnodelist);
    			/*ul_binding*/ ctx[19](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let nodes;
    	let nodeIds;

    	const omit_props_names = [
    		"children","activeId","selectedIds","expandedIds","size","labelText","hideLabel","expandAll","collapseAll","expandNodes","collapseNodes"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TreeView', slots, ['labelText']);
    	let { children = [] } = $$props;
    	let { activeId = "" } = $$props;
    	let { selectedIds = [] } = $$props;
    	let { expandedIds = [] } = $$props;
    	let { size = "default" } = $$props;
    	let { labelText = "" } = $$props;
    	let { hideLabel = false } = $$props;

    	function expandAll() {
    		$$invalidate(10, expandedIds = [...nodeIds]);
    	}

    	function collapseAll() {
    		$$invalidate(10, expandedIds = []);
    	}

    	function expandNodes(filterNode = node => false) {
    		$$invalidate(10, expandedIds = nodes.filter(node => filterNode(node) || node.children?.some(child => filterNode(child) && child.children)).map(node => node.id));
    	}

    	function collapseNodes(filterNode = node => true) {
    		$$invalidate(10, expandedIds = nodes.filter(node => expandedIds.includes(node.id) && !filterNode(node)).map(node => node.id));
    	}

    	const dispatch = createEventDispatcher();
    	const labelId = `label-${Math.random().toString(36)}`;
    	const activeNodeId = writable(activeId);
    	const selectedNodeIds = writable(selectedIds);
    	const expandedNodeIds = writable(expandedIds);
    	let ref = null;
    	let treeWalker = null;

    	setContext("TreeView", {
    		activeNodeId,
    		selectedNodeIds,
    		expandedNodeIds,
    		clickNode: node => {
    			$$invalidate(9, activeId = node.id);
    			$$invalidate(0, selectedIds = [node.id]);
    			dispatch("select", node);
    		},
    		selectNode: node => {
    			$$invalidate(0, selectedIds = [node.id]);
    		},
    		expandNode: (node, expanded) => {
    			if (expanded) {
    				$$invalidate(10, expandedIds = [...expandedIds, node.id]);
    			} else {
    				$$invalidate(10, expandedIds = expandedIds.filter(_id => _id !== node.id));
    			}
    		},
    		focusNode: node => dispatch("focus", node),
    		toggleNode: node => dispatch("toggle", node)
    	});

    	function handleKeyDown(e) {
    		if (e.key === "ArrowUp" || e.key === "ArrowDown") e.preventDefault();
    		treeWalker.currentNode = e.target;
    		let node = null;
    		if (e.key === "ArrowUp") node = treeWalker.previousNode();
    		if (e.key === "ArrowDown") node = treeWalker.nextNode();

    		if (node && node !== e.target) {
    			node.tabIndex = "0";
    			node.focus();
    		}
    	}

    	onMount(() => {
    		const firstFocusableNode = ref.querySelector("li.bx--tree-node:not(.bx--tree-node--disabled)");

    		if (firstFocusableNode != null) {
    			firstFocusableNode.tabIndex = "0";
    		}
    	});

    	/**
     * @param {Array<TreeNode & { children?: TreeNode[] }>} children
     */
    	function traverse(children) {
    		let nodes = [];

    		children.forEach(node => {
    			nodes.push(node);

    			if (Array.isArray(node.children)) {
    				nodes = [...nodes, ...traverse(node.children)];
    			}
    		});

    		return nodes;
    	}

    	function keydown_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function ul_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			ref = $$value;
    			$$invalidate(5, ref);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('children' in $$new_props) $$invalidate(1, children = $$new_props.children);
    		if ('activeId' in $$new_props) $$invalidate(9, activeId = $$new_props.activeId);
    		if ('selectedIds' in $$new_props) $$invalidate(0, selectedIds = $$new_props.selectedIds);
    		if ('expandedIds' in $$new_props) $$invalidate(10, expandedIds = $$new_props.expandedIds);
    		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
    		if ('labelText' in $$new_props) $$invalidate(3, labelText = $$new_props.labelText);
    		if ('hideLabel' in $$new_props) $$invalidate(4, hideLabel = $$new_props.hideLabel);
    		if ('$$scope' in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		children,
    		activeId,
    		selectedIds,
    		expandedIds,
    		size,
    		labelText,
    		hideLabel,
    		expandAll,
    		collapseAll,
    		expandNodes,
    		collapseNodes,
    		createEventDispatcher,
    		setContext,
    		onMount,
    		writable,
    		TreeViewNodeList: TreeViewNodeList$1,
    		dispatch,
    		labelId,
    		activeNodeId,
    		selectedNodeIds,
    		expandedNodeIds,
    		ref,
    		treeWalker,
    		handleKeyDown,
    		traverse,
    		nodes,
    		nodeIds
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('children' in $$props) $$invalidate(1, children = $$new_props.children);
    		if ('activeId' in $$props) $$invalidate(9, activeId = $$new_props.activeId);
    		if ('selectedIds' in $$props) $$invalidate(0, selectedIds = $$new_props.selectedIds);
    		if ('expandedIds' in $$props) $$invalidate(10, expandedIds = $$new_props.expandedIds);
    		if ('size' in $$props) $$invalidate(2, size = $$new_props.size);
    		if ('labelText' in $$props) $$invalidate(3, labelText = $$new_props.labelText);
    		if ('hideLabel' in $$props) $$invalidate(4, hideLabel = $$new_props.hideLabel);
    		if ('ref' in $$props) $$invalidate(5, ref = $$new_props.ref);
    		if ('treeWalker' in $$props) treeWalker = $$new_props.treeWalker;
    		if ('nodes' in $$props) $$invalidate(15, nodes = $$new_props.nodes);
    		if ('nodeIds' in $$props) nodeIds = $$new_props.nodeIds;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*children*/ 2) {
    			$$invalidate(15, nodes = traverse(children));
    		}

    		if ($$self.$$.dirty & /*nodes*/ 32768) {
    			nodeIds = nodes.map(node => node.id);
    		}

    		if ($$self.$$.dirty & /*activeId*/ 512) {
    			activeNodeId.set(activeId);
    		}

    		if ($$self.$$.dirty & /*selectedIds*/ 1) {
    			selectedNodeIds.set(selectedIds);
    		}

    		if ($$self.$$.dirty & /*expandedIds*/ 1024) {
    			expandedNodeIds.set(expandedIds);
    		}

    		if ($$self.$$.dirty & /*ref*/ 32) {
    			if (ref) {
    				treeWalker = document.createTreeWalker(ref, NodeFilter.SHOW_ELEMENT, {
    					acceptNode: node => {
    						if (node.classList.contains("bx--tree-node--disabled")) return NodeFilter.FILTER_REJECT;
    						if (node.matches("li.bx--tree-node")) return NodeFilter.FILTER_ACCEPT;
    						return NodeFilter.FILTER_SKIP;
    					}
    				});
    			}
    		}
    	};

    	return [
    		selectedIds,
    		children,
    		size,
    		labelText,
    		hideLabel,
    		ref,
    		labelId,
    		handleKeyDown,
    		$$restProps,
    		activeId,
    		expandedIds,
    		expandAll,
    		collapseAll,
    		expandNodes,
    		collapseNodes,
    		nodes,
    		$$scope,
    		slots,
    		keydown_handler,
    		ul_binding
    	];
    }

    class TreeView extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			children: 1,
    			activeId: 9,
    			selectedIds: 0,
    			expandedIds: 10,
    			size: 2,
    			labelText: 3,
    			hideLabel: 4,
    			expandAll: 11,
    			collapseAll: 12,
    			expandNodes: 13,
    			collapseNodes: 14
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TreeView",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get children() {
    		throw new Error("<TreeView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set children(value) {
    		throw new Error("<TreeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeId() {
    		throw new Error("<TreeView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeId(value) {
    		throw new Error("<TreeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedIds() {
    		throw new Error("<TreeView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedIds(value) {
    		throw new Error("<TreeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get expandedIds() {
    		throw new Error("<TreeView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set expandedIds(value) {
    		throw new Error("<TreeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<TreeView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<TreeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelText() {
    		throw new Error("<TreeView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelText(value) {
    		throw new Error("<TreeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideLabel() {
    		throw new Error("<TreeView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideLabel(value) {
    		throw new Error("<TreeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get expandAll() {
    		return this.$$.ctx[11];
    	}

    	set expandAll(value) {
    		throw new Error("<TreeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get collapseAll() {
    		return this.$$.ctx[12];
    	}

    	set collapseAll(value) {
    		throw new Error("<TreeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get expandNodes() {
    		return this.$$.ctx[13];
    	}

    	set expandNodes(value) {
    		throw new Error("<TreeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get collapseNodes() {
    		return this.$$.ctx[14];
    	}

    	set collapseNodes(value) {
    		throw new Error("<TreeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var Tree = TreeView;

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    var jquery = {exports: {}};

    /*!
     * jQuery JavaScript Library v3.7.0
     * https://jquery.com/
     *
     * Copyright OpenJS Foundation and other contributors
     * Released under the MIT license
     * https://jquery.org/license
     *
     * Date: 2023-05-11T18:29Z
     */

    (function (module) {
    	( function( global, factory ) {

    		{

    			// For CommonJS and CommonJS-like environments where a proper `window`
    			// is present, execute the factory and get jQuery.
    			// For environments that do not have a `window` with a `document`
    			// (such as Node.js), expose a factory as module.exports.
    			// This accentuates the need for the creation of a real `window`.
    			// e.g. var jQuery = require("jquery")(window);
    			// See ticket trac-14549 for more info.
    			module.exports = global.document ?
    				factory( global, true ) :
    				function( w ) {
    					if ( !w.document ) {
    						throw new Error( "jQuery requires a window with a document" );
    					}
    					return factory( w );
    				};
    		}

    	// Pass this if window is not defined yet
    	} )( typeof window !== "undefined" ? window : commonjsGlobal, function( window, noGlobal ) {

    	var arr = [];

    	var getProto = Object.getPrototypeOf;

    	var slice = arr.slice;

    	var flat = arr.flat ? function( array ) {
    		return arr.flat.call( array );
    	} : function( array ) {
    		return arr.concat.apply( [], array );
    	};


    	var push = arr.push;

    	var indexOf = arr.indexOf;

    	var class2type = {};

    	var toString = class2type.toString;

    	var hasOwn = class2type.hasOwnProperty;

    	var fnToString = hasOwn.toString;

    	var ObjectFunctionString = fnToString.call( Object );

    	var support = {};

    	var isFunction = function isFunction( obj ) {

    			// Support: Chrome <=57, Firefox <=52
    			// In some browsers, typeof returns "function" for HTML <object> elements
    			// (i.e., `typeof document.createElement( "object" ) === "function"`).
    			// We don't want to classify *any* DOM node as a function.
    			// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
    			// Plus for old WebKit, typeof returns "function" for HTML collections
    			// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
    			return typeof obj === "function" && typeof obj.nodeType !== "number" &&
    				typeof obj.item !== "function";
    		};


    	var isWindow = function isWindow( obj ) {
    			return obj != null && obj === obj.window;
    		};


    	var document = window.document;



    		var preservedScriptAttributes = {
    			type: true,
    			src: true,
    			nonce: true,
    			noModule: true
    		};

    		function DOMEval( code, node, doc ) {
    			doc = doc || document;

    			var i, val,
    				script = doc.createElement( "script" );

    			script.text = code;
    			if ( node ) {
    				for ( i in preservedScriptAttributes ) {

    					// Support: Firefox 64+, Edge 18+
    					// Some browsers don't support the "nonce" property on scripts.
    					// On the other hand, just using `getAttribute` is not enough as
    					// the `nonce` attribute is reset to an empty string whenever it
    					// becomes browsing-context connected.
    					// See https://github.com/whatwg/html/issues/2369
    					// See https://html.spec.whatwg.org/#nonce-attributes
    					// The `node.getAttribute` check was added for the sake of
    					// `jQuery.globalEval` so that it can fake a nonce-containing node
    					// via an object.
    					val = node[ i ] || node.getAttribute && node.getAttribute( i );
    					if ( val ) {
    						script.setAttribute( i, val );
    					}
    				}
    			}
    			doc.head.appendChild( script ).parentNode.removeChild( script );
    		}


    	function toType( obj ) {
    		if ( obj == null ) {
    			return obj + "";
    		}

    		// Support: Android <=2.3 only (functionish RegExp)
    		return typeof obj === "object" || typeof obj === "function" ?
    			class2type[ toString.call( obj ) ] || "object" :
    			typeof obj;
    	}
    	/* global Symbol */
    	// Defining this global in .eslintrc.json would create a danger of using the global
    	// unguarded in another place, it seems safer to define global only for this module



    	var version = "3.7.0",

    		rhtmlSuffix = /HTML$/i,

    		// Define a local copy of jQuery
    		jQuery = function( selector, context ) {

    			// The jQuery object is actually just the init constructor 'enhanced'
    			// Need init if jQuery is called (just allow error to be thrown if not included)
    			return new jQuery.fn.init( selector, context );
    		};

    	jQuery.fn = jQuery.prototype = {

    		// The current version of jQuery being used
    		jquery: version,

    		constructor: jQuery,

    		// The default length of a jQuery object is 0
    		length: 0,

    		toArray: function() {
    			return slice.call( this );
    		},

    		// Get the Nth element in the matched element set OR
    		// Get the whole matched element set as a clean array
    		get: function( num ) {

    			// Return all the elements in a clean array
    			if ( num == null ) {
    				return slice.call( this );
    			}

    			// Return just the one element from the set
    			return num < 0 ? this[ num + this.length ] : this[ num ];
    		},

    		// Take an array of elements and push it onto the stack
    		// (returning the new matched element set)
    		pushStack: function( elems ) {

    			// Build a new jQuery matched element set
    			var ret = jQuery.merge( this.constructor(), elems );

    			// Add the old object onto the stack (as a reference)
    			ret.prevObject = this;

    			// Return the newly-formed element set
    			return ret;
    		},

    		// Execute a callback for every element in the matched set.
    		each: function( callback ) {
    			return jQuery.each( this, callback );
    		},

    		map: function( callback ) {
    			return this.pushStack( jQuery.map( this, function( elem, i ) {
    				return callback.call( elem, i, elem );
    			} ) );
    		},

    		slice: function() {
    			return this.pushStack( slice.apply( this, arguments ) );
    		},

    		first: function() {
    			return this.eq( 0 );
    		},

    		last: function() {
    			return this.eq( -1 );
    		},

    		even: function() {
    			return this.pushStack( jQuery.grep( this, function( _elem, i ) {
    				return ( i + 1 ) % 2;
    			} ) );
    		},

    		odd: function() {
    			return this.pushStack( jQuery.grep( this, function( _elem, i ) {
    				return i % 2;
    			} ) );
    		},

    		eq: function( i ) {
    			var len = this.length,
    				j = +i + ( i < 0 ? len : 0 );
    			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
    		},

    		end: function() {
    			return this.prevObject || this.constructor();
    		},

    		// For internal use only.
    		// Behaves like an Array's method, not like a jQuery method.
    		push: push,
    		sort: arr.sort,
    		splice: arr.splice
    	};

    	jQuery.extend = jQuery.fn.extend = function() {
    		var options, name, src, copy, copyIsArray, clone,
    			target = arguments[ 0 ] || {},
    			i = 1,
    			length = arguments.length,
    			deep = false;

    		// Handle a deep copy situation
    		if ( typeof target === "boolean" ) {
    			deep = target;

    			// Skip the boolean and the target
    			target = arguments[ i ] || {};
    			i++;
    		}

    		// Handle case when target is a string or something (possible in deep copy)
    		if ( typeof target !== "object" && !isFunction( target ) ) {
    			target = {};
    		}

    		// Extend jQuery itself if only one argument is passed
    		if ( i === length ) {
    			target = this;
    			i--;
    		}

    		for ( ; i < length; i++ ) {

    			// Only deal with non-null/undefined values
    			if ( ( options = arguments[ i ] ) != null ) {

    				// Extend the base object
    				for ( name in options ) {
    					copy = options[ name ];

    					// Prevent Object.prototype pollution
    					// Prevent never-ending loop
    					if ( name === "__proto__" || target === copy ) {
    						continue;
    					}

    					// Recurse if we're merging plain objects or arrays
    					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
    						( copyIsArray = Array.isArray( copy ) ) ) ) {
    						src = target[ name ];

    						// Ensure proper type for the source value
    						if ( copyIsArray && !Array.isArray( src ) ) {
    							clone = [];
    						} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
    							clone = {};
    						} else {
    							clone = src;
    						}
    						copyIsArray = false;

    						// Never move original objects, clone them
    						target[ name ] = jQuery.extend( deep, clone, copy );

    					// Don't bring in undefined values
    					} else if ( copy !== undefined ) {
    						target[ name ] = copy;
    					}
    				}
    			}
    		}

    		// Return the modified object
    		return target;
    	};

    	jQuery.extend( {

    		// Unique for each copy of jQuery on the page
    		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

    		// Assume jQuery is ready without the ready module
    		isReady: true,

    		error: function( msg ) {
    			throw new Error( msg );
    		},

    		noop: function() {},

    		isPlainObject: function( obj ) {
    			var proto, Ctor;

    			// Detect obvious negatives
    			// Use toString instead of jQuery.type to catch host objects
    			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
    				return false;
    			}

    			proto = getProto( obj );

    			// Objects with no prototype (e.g., `Object.create( null )`) are plain
    			if ( !proto ) {
    				return true;
    			}

    			// Objects with prototype are plain iff they were constructed by a global Object function
    			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
    			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
    		},

    		isEmptyObject: function( obj ) {
    			var name;

    			for ( name in obj ) {
    				return false;
    			}
    			return true;
    		},

    		// Evaluates a script in a provided context; falls back to the global one
    		// if not specified.
    		globalEval: function( code, options, doc ) {
    			DOMEval( code, { nonce: options && options.nonce }, doc );
    		},

    		each: function( obj, callback ) {
    			var length, i = 0;

    			if ( isArrayLike( obj ) ) {
    				length = obj.length;
    				for ( ; i < length; i++ ) {
    					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
    						break;
    					}
    				}
    			} else {
    				for ( i in obj ) {
    					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
    						break;
    					}
    				}
    			}

    			return obj;
    		},


    		// Retrieve the text value of an array of DOM nodes
    		text: function( elem ) {
    			var node,
    				ret = "",
    				i = 0,
    				nodeType = elem.nodeType;

    			if ( !nodeType ) {

    				// If no nodeType, this is expected to be an array
    				while ( ( node = elem[ i++ ] ) ) {

    					// Do not traverse comment nodes
    					ret += jQuery.text( node );
    				}
    			} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
    				return elem.textContent;
    			} else if ( nodeType === 3 || nodeType === 4 ) {
    				return elem.nodeValue;
    			}

    			// Do not include comment or processing instruction nodes

    			return ret;
    		},

    		// results is for internal usage only
    		makeArray: function( arr, results ) {
    			var ret = results || [];

    			if ( arr != null ) {
    				if ( isArrayLike( Object( arr ) ) ) {
    					jQuery.merge( ret,
    						typeof arr === "string" ?
    							[ arr ] : arr
    					);
    				} else {
    					push.call( ret, arr );
    				}
    			}

    			return ret;
    		},

    		inArray: function( elem, arr, i ) {
    			return arr == null ? -1 : indexOf.call( arr, elem, i );
    		},

    		isXMLDoc: function( elem ) {
    			var namespace = elem && elem.namespaceURI,
    				docElem = elem && ( elem.ownerDocument || elem ).documentElement;

    			// Assume HTML when documentElement doesn't yet exist, such as inside
    			// document fragments.
    			return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || "HTML" );
    		},

    		// Support: Android <=4.0 only, PhantomJS 1 only
    		// push.apply(_, arraylike) throws on ancient WebKit
    		merge: function( first, second ) {
    			var len = +second.length,
    				j = 0,
    				i = first.length;

    			for ( ; j < len; j++ ) {
    				first[ i++ ] = second[ j ];
    			}

    			first.length = i;

    			return first;
    		},

    		grep: function( elems, callback, invert ) {
    			var callbackInverse,
    				matches = [],
    				i = 0,
    				length = elems.length,
    				callbackExpect = !invert;

    			// Go through the array, only saving the items
    			// that pass the validator function
    			for ( ; i < length; i++ ) {
    				callbackInverse = !callback( elems[ i ], i );
    				if ( callbackInverse !== callbackExpect ) {
    					matches.push( elems[ i ] );
    				}
    			}

    			return matches;
    		},

    		// arg is for internal usage only
    		map: function( elems, callback, arg ) {
    			var length, value,
    				i = 0,
    				ret = [];

    			// Go through the array, translating each of the items to their new values
    			if ( isArrayLike( elems ) ) {
    				length = elems.length;
    				for ( ; i < length; i++ ) {
    					value = callback( elems[ i ], i, arg );

    					if ( value != null ) {
    						ret.push( value );
    					}
    				}

    			// Go through every key on the object,
    			} else {
    				for ( i in elems ) {
    					value = callback( elems[ i ], i, arg );

    					if ( value != null ) {
    						ret.push( value );
    					}
    				}
    			}

    			// Flatten any nested arrays
    			return flat( ret );
    		},

    		// A global GUID counter for objects
    		guid: 1,

    		// jQuery.support is not used in Core but other projects attach their
    		// properties to it so it needs to exist.
    		support: support
    	} );

    	if ( typeof Symbol === "function" ) {
    		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
    	}

    	// Populate the class2type map
    	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
    		function( _i, name ) {
    			class2type[ "[object " + name + "]" ] = name.toLowerCase();
    		} );

    	function isArrayLike( obj ) {

    		// Support: real iOS 8.2 only (not reproducible in simulator)
    		// `in` check used to prevent JIT error (gh-2145)
    		// hasOwn isn't used here due to false negatives
    		// regarding Nodelist length in IE
    		var length = !!obj && "length" in obj && obj.length,
    			type = toType( obj );

    		if ( isFunction( obj ) || isWindow( obj ) ) {
    			return false;
    		}

    		return type === "array" || length === 0 ||
    			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
    	}


    	function nodeName( elem, name ) {

    		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

    	}
    	var pop = arr.pop;


    	var sort = arr.sort;


    	var splice = arr.splice;


    	var whitespace = "[\\x20\\t\\r\\n\\f]";


    	var rtrimCSS = new RegExp(
    		"^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$",
    		"g"
    	);




    	// Note: an element does not contain itself
    	jQuery.contains = function( a, b ) {
    		var bup = b && b.parentNode;

    		return a === bup || !!( bup && bup.nodeType === 1 && (

    			// Support: IE 9 - 11+
    			// IE doesn't have `contains` on SVG.
    			a.contains ?
    				a.contains( bup ) :
    				a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
    		) );
    	};




    	// CSS string/identifier serialization
    	// https://drafts.csswg.org/cssom/#common-serializing-idioms
    	var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

    	function fcssescape( ch, asCodePoint ) {
    		if ( asCodePoint ) {

    			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
    			if ( ch === "\0" ) {
    				return "\uFFFD";
    			}

    			// Control characters and (dependent upon position) numbers get escaped as code points
    			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
    		}

    		// Other potentially-special ASCII characters get backslash-escaped
    		return "\\" + ch;
    	}

    	jQuery.escapeSelector = function( sel ) {
    		return ( sel + "" ).replace( rcssescape, fcssescape );
    	};




    	var preferredDoc = document,
    		pushNative = push;

    	( function() {

    	var i,
    		Expr,
    		outermostContext,
    		sortInput,
    		hasDuplicate,
    		push = pushNative,

    		// Local document vars
    		document,
    		documentElement,
    		documentIsHTML,
    		rbuggyQSA,
    		matches,

    		// Instance-specific data
    		expando = jQuery.expando,
    		dirruns = 0,
    		done = 0,
    		classCache = createCache(),
    		tokenCache = createCache(),
    		compilerCache = createCache(),
    		nonnativeSelectorCache = createCache(),
    		sortOrder = function( a, b ) {
    			if ( a === b ) {
    				hasDuplicate = true;
    			}
    			return 0;
    		},

    		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" +
    			"loop|multiple|open|readonly|required|scoped",

    		// Regular expressions

    		// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
    		identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
    			"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

    		// Attribute selectors: https://www.w3.org/TR/selectors/#attribute-selectors
    		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

    			// Operator (capture 2)
    			"*([*^$|!~]?=)" + whitespace +

    			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
    			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
    			whitespace + "*\\]",

    		pseudos = ":(" + identifier + ")(?:\\((" +

    			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
    			// 1. quoted (capture 3; capture 4 or capture 5)
    			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

    			// 2. simple (capture 6)
    			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

    			// 3. anything else (capture 2)
    			".*" +
    			")\\)|)",

    		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    		rwhitespace = new RegExp( whitespace + "+", "g" ),

    		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
    		rleadingCombinator = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" +
    			whitespace + "*" ),
    		rdescend = new RegExp( whitespace + "|>" ),

    		rpseudo = new RegExp( pseudos ),
    		ridentifier = new RegExp( "^" + identifier + "$" ),

    		matchExpr = {
    			ID: new RegExp( "^#(" + identifier + ")" ),
    			CLASS: new RegExp( "^\\.(" + identifier + ")" ),
    			TAG: new RegExp( "^(" + identifier + "|[*])" ),
    			ATTR: new RegExp( "^" + attributes ),
    			PSEUDO: new RegExp( "^" + pseudos ),
    			CHILD: new RegExp(
    				"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
    					whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
    					whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
    			bool: new RegExp( "^(?:" + booleans + ")$", "i" ),

    			// For use in libraries implementing .is()
    			// We use this for POS matching in `select`
    			needsContext: new RegExp( "^" + whitespace +
    				"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
    				"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
    		},

    		rinputs = /^(?:input|select|textarea|button)$/i,
    		rheader = /^h\d$/i,

    		// Easily-parseable/retrievable ID or TAG or CLASS selectors
    		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

    		rsibling = /[+~]/,

    		// CSS escapes
    		// https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    		runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace +
    			"?|\\\\([^\\r\\n\\f])", "g" ),
    		funescape = function( escape, nonHex ) {
    			var high = "0x" + escape.slice( 1 ) - 0x10000;

    			if ( nonHex ) {

    				// Strip the backslash prefix from a non-hex escape sequence
    				return nonHex;
    			}

    			// Replace a hexadecimal escape sequence with the encoded Unicode code point
    			// Support: IE <=11+
    			// For values outside the Basic Multilingual Plane (BMP), manually construct a
    			// surrogate pair
    			return high < 0 ?
    				String.fromCharCode( high + 0x10000 ) :
    				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
    		},

    		// Used for iframes; see `setDocument`.
    		// Support: IE 9 - 11+, Edge 12 - 18+
    		// Removing the function wrapper causes a "Permission Denied"
    		// error in IE/Edge.
    		unloadHandler = function() {
    			setDocument();
    		},

    		inDisabledFieldset = addCombinator(
    			function( elem ) {
    				return elem.disabled === true && nodeName( elem, "fieldset" );
    			},
    			{ dir: "parentNode", next: "legend" }
    		);

    	// Support: IE <=9 only
    	// Accessing document.activeElement can throw unexpectedly
    	// https://bugs.jquery.com/ticket/13393
    	function safeActiveElement() {
    		try {
    			return document.activeElement;
    		} catch ( err ) { }
    	}

    	// Optimize for push.apply( _, NodeList )
    	try {
    		push.apply(
    			( arr = slice.call( preferredDoc.childNodes ) ),
    			preferredDoc.childNodes
    		);

    		// Support: Android <=4.0
    		// Detect silently failing push.apply
    		// eslint-disable-next-line no-unused-expressions
    		arr[ preferredDoc.childNodes.length ].nodeType;
    	} catch ( e ) {
    		push = {
    			apply: function( target, els ) {
    				pushNative.apply( target, slice.call( els ) );
    			},
    			call: function( target ) {
    				pushNative.apply( target, slice.call( arguments, 1 ) );
    			}
    		};
    	}

    	function find( selector, context, results, seed ) {
    		var m, i, elem, nid, match, groups, newSelector,
    			newContext = context && context.ownerDocument,

    			// nodeType defaults to 9, since context defaults to document
    			nodeType = context ? context.nodeType : 9;

    		results = results || [];

    		// Return early from calls with invalid selector or context
    		if ( typeof selector !== "string" || !selector ||
    			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

    			return results;
    		}

    		// Try to shortcut find operations (as opposed to filters) in HTML documents
    		if ( !seed ) {
    			setDocument( context );
    			context = context || document;

    			if ( documentIsHTML ) {

    				// If the selector is sufficiently simple, try using a "get*By*" DOM method
    				// (excepting DocumentFragment context, where the methods don't exist)
    				if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

    					// ID selector
    					if ( ( m = match[ 1 ] ) ) {

    						// Document context
    						if ( nodeType === 9 ) {
    							if ( ( elem = context.getElementById( m ) ) ) {

    								// Support: IE 9 only
    								// getElementById can match elements by name instead of ID
    								if ( elem.id === m ) {
    									push.call( results, elem );
    									return results;
    								}
    							} else {
    								return results;
    							}

    						// Element context
    						} else {

    							// Support: IE 9 only
    							// getElementById can match elements by name instead of ID
    							if ( newContext && ( elem = newContext.getElementById( m ) ) &&
    								find.contains( context, elem ) &&
    								elem.id === m ) {

    								push.call( results, elem );
    								return results;
    							}
    						}

    					// Type selector
    					} else if ( match[ 2 ] ) {
    						push.apply( results, context.getElementsByTagName( selector ) );
    						return results;

    					// Class selector
    					} else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {
    						push.apply( results, context.getElementsByClassName( m ) );
    						return results;
    					}
    				}

    				// Take advantage of querySelectorAll
    				if ( !nonnativeSelectorCache[ selector + " " ] &&
    					( !rbuggyQSA || !rbuggyQSA.test( selector ) ) ) {

    					newSelector = selector;
    					newContext = context;

    					// qSA considers elements outside a scoping root when evaluating child or
    					// descendant combinators, which is not what we want.
    					// In such cases, we work around the behavior by prefixing every selector in the
    					// list with an ID selector referencing the scope context.
    					// The technique has to be used as well when a leading combinator is used
    					// as such selectors are not recognized by querySelectorAll.
    					// Thanks to Andrew Dupont for this technique.
    					if ( nodeType === 1 &&
    						( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {

    						// Expand context for sibling selectors
    						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
    							context;

    						// We can use :scope instead of the ID hack if the browser
    						// supports it & if we're not changing the context.
    						// Support: IE 11+, Edge 17 - 18+
    						// IE/Edge sometimes throw a "Permission denied" error when
    						// strict-comparing two documents; shallow comparisons work.
    						// eslint-disable-next-line eqeqeq
    						if ( newContext != context || !support.scope ) {

    							// Capture the context ID, setting it first if necessary
    							if ( ( nid = context.getAttribute( "id" ) ) ) {
    								nid = jQuery.escapeSelector( nid );
    							} else {
    								context.setAttribute( "id", ( nid = expando ) );
    							}
    						}

    						// Prefix every selector in the list
    						groups = tokenize( selector );
    						i = groups.length;
    						while ( i-- ) {
    							groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
    								toSelector( groups[ i ] );
    						}
    						newSelector = groups.join( "," );
    					}

    					try {
    						push.apply( results,
    							newContext.querySelectorAll( newSelector )
    						);
    						return results;
    					} catch ( qsaError ) {
    						nonnativeSelectorCache( selector, true );
    					} finally {
    						if ( nid === expando ) {
    							context.removeAttribute( "id" );
    						}
    					}
    				}
    			}
    		}

    		// All others
    		return select( selector.replace( rtrimCSS, "$1" ), context, results, seed );
    	}

    	/**
    	 * Create key-value caches of limited size
    	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
    	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
    	 *	deleting the oldest entry
    	 */
    	function createCache() {
    		var keys = [];

    		function cache( key, value ) {

    			// Use (key + " ") to avoid collision with native prototype properties
    			// (see https://github.com/jquery/sizzle/issues/157)
    			if ( keys.push( key + " " ) > Expr.cacheLength ) {

    				// Only keep the most recent entries
    				delete cache[ keys.shift() ];
    			}
    			return ( cache[ key + " " ] = value );
    		}
    		return cache;
    	}

    	/**
    	 * Mark a function for special use by jQuery selector module
    	 * @param {Function} fn The function to mark
    	 */
    	function markFunction( fn ) {
    		fn[ expando ] = true;
    		return fn;
    	}

    	/**
    	 * Support testing using an element
    	 * @param {Function} fn Passed the created element and returns a boolean result
    	 */
    	function assert( fn ) {
    		var el = document.createElement( "fieldset" );

    		try {
    			return !!fn( el );
    		} catch ( e ) {
    			return false;
    		} finally {

    			// Remove from its parent by default
    			if ( el.parentNode ) {
    				el.parentNode.removeChild( el );
    			}

    			// release memory in IE
    			el = null;
    		}
    	}

    	/**
    	 * Returns a function to use in pseudos for input types
    	 * @param {String} type
    	 */
    	function createInputPseudo( type ) {
    		return function( elem ) {
    			return nodeName( elem, "input" ) && elem.type === type;
    		};
    	}

    	/**
    	 * Returns a function to use in pseudos for buttons
    	 * @param {String} type
    	 */
    	function createButtonPseudo( type ) {
    		return function( elem ) {
    			return ( nodeName( elem, "input" ) || nodeName( elem, "button" ) ) &&
    				elem.type === type;
    		};
    	}

    	/**
    	 * Returns a function to use in pseudos for :enabled/:disabled
    	 * @param {Boolean} disabled true for :disabled; false for :enabled
    	 */
    	function createDisabledPseudo( disabled ) {

    		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
    		return function( elem ) {

    			// Only certain elements can match :enabled or :disabled
    			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
    			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
    			if ( "form" in elem ) {

    				// Check for inherited disabledness on relevant non-disabled elements:
    				// * listed form-associated elements in a disabled fieldset
    				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
    				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
    				// * option elements in a disabled optgroup
    				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
    				// All such elements have a "form" property.
    				if ( elem.parentNode && elem.disabled === false ) {

    					// Option elements defer to a parent optgroup if present
    					if ( "label" in elem ) {
    						if ( "label" in elem.parentNode ) {
    							return elem.parentNode.disabled === disabled;
    						} else {
    							return elem.disabled === disabled;
    						}
    					}

    					// Support: IE 6 - 11+
    					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
    					return elem.isDisabled === disabled ||

    						// Where there is no isDisabled, check manually
    						elem.isDisabled !== !disabled &&
    							inDisabledFieldset( elem ) === disabled;
    				}

    				return elem.disabled === disabled;

    			// Try to winnow out elements that can't be disabled before trusting the disabled property.
    			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
    			// even exist on them, let alone have a boolean value.
    			} else if ( "label" in elem ) {
    				return elem.disabled === disabled;
    			}

    			// Remaining elements are neither :enabled nor :disabled
    			return false;
    		};
    	}

    	/**
    	 * Returns a function to use in pseudos for positionals
    	 * @param {Function} fn
    	 */
    	function createPositionalPseudo( fn ) {
    		return markFunction( function( argument ) {
    			argument = +argument;
    			return markFunction( function( seed, matches ) {
    				var j,
    					matchIndexes = fn( [], seed.length, argument ),
    					i = matchIndexes.length;

    				// Match elements found at the specified indexes
    				while ( i-- ) {
    					if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
    						seed[ j ] = !( matches[ j ] = seed[ j ] );
    					}
    				}
    			} );
    		} );
    	}

    	/**
    	 * Checks a node for validity as a jQuery selector context
    	 * @param {Element|Object=} context
    	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
    	 */
    	function testContext( context ) {
    		return context && typeof context.getElementsByTagName !== "undefined" && context;
    	}

    	/**
    	 * Sets document-related variables once based on the current document
    	 * @param {Element|Object} [node] An element or document object to use to set the document
    	 * @returns {Object} Returns the current document
    	 */
    	function setDocument( node ) {
    		var subWindow,
    			doc = node ? node.ownerDocument || node : preferredDoc;

    		// Return early if doc is invalid or already selected
    		// Support: IE 11+, Edge 17 - 18+
    		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    		// two documents; shallow comparisons work.
    		// eslint-disable-next-line eqeqeq
    		if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
    			return document;
    		}

    		// Update global variables
    		document = doc;
    		documentElement = document.documentElement;
    		documentIsHTML = !jQuery.isXMLDoc( document );

    		// Support: iOS 7 only, IE 9 - 11+
    		// Older browsers didn't support unprefixed `matches`.
    		matches = documentElement.matches ||
    			documentElement.webkitMatchesSelector ||
    			documentElement.msMatchesSelector;

    		// Support: IE 9 - 11+, Edge 12 - 18+
    		// Accessing iframe documents after unload throws "permission denied" errors (see trac-13936)
    		// Support: IE 11+, Edge 17 - 18+
    		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    		// two documents; shallow comparisons work.
    		// eslint-disable-next-line eqeqeq
    		if ( preferredDoc != document &&
    			( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

    			// Support: IE 9 - 11+, Edge 12 - 18+
    			subWindow.addEventListener( "unload", unloadHandler );
    		}

    		// Support: IE <10
    		// Check if getElementById returns elements by name
    		// The broken getElementById methods don't pick up programmatically-set names,
    		// so use a roundabout getElementsByName test
    		support.getById = assert( function( el ) {
    			documentElement.appendChild( el ).id = jQuery.expando;
    			return !document.getElementsByName ||
    				!document.getElementsByName( jQuery.expando ).length;
    		} );

    		// Support: IE 9 only
    		// Check to see if it's possible to do matchesSelector
    		// on a disconnected node.
    		support.disconnectedMatch = assert( function( el ) {
    			return matches.call( el, "*" );
    		} );

    		// Support: IE 9 - 11+, Edge 12 - 18+
    		// IE/Edge don't support the :scope pseudo-class.
    		support.scope = assert( function() {
    			return document.querySelectorAll( ":scope" );
    		} );

    		// Support: Chrome 105 - 111 only, Safari 15.4 - 16.3 only
    		// Make sure the `:has()` argument is parsed unforgivingly.
    		// We include `*` in the test to detect buggy implementations that are
    		// _selectively_ forgiving (specifically when the list includes at least
    		// one valid selector).
    		// Note that we treat complete lack of support for `:has()` as if it were
    		// spec-compliant support, which is fine because use of `:has()` in such
    		// environments will fail in the qSA path and fall back to jQuery traversal
    		// anyway.
    		support.cssHas = assert( function() {
    			try {
    				document.querySelector( ":has(*,:jqfake)" );
    				return false;
    			} catch ( e ) {
    				return true;
    			}
    		} );

    		// ID filter and find
    		if ( support.getById ) {
    			Expr.filter.ID = function( id ) {
    				var attrId = id.replace( runescape, funescape );
    				return function( elem ) {
    					return elem.getAttribute( "id" ) === attrId;
    				};
    			};
    			Expr.find.ID = function( id, context ) {
    				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
    					var elem = context.getElementById( id );
    					return elem ? [ elem ] : [];
    				}
    			};
    		} else {
    			Expr.filter.ID =  function( id ) {
    				var attrId = id.replace( runescape, funescape );
    				return function( elem ) {
    					var node = typeof elem.getAttributeNode !== "undefined" &&
    						elem.getAttributeNode( "id" );
    					return node && node.value === attrId;
    				};
    			};

    			// Support: IE 6 - 7 only
    			// getElementById is not reliable as a find shortcut
    			Expr.find.ID = function( id, context ) {
    				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
    					var node, i, elems,
    						elem = context.getElementById( id );

    					if ( elem ) {

    						// Verify the id attribute
    						node = elem.getAttributeNode( "id" );
    						if ( node && node.value === id ) {
    							return [ elem ];
    						}

    						// Fall back on getElementsByName
    						elems = context.getElementsByName( id );
    						i = 0;
    						while ( ( elem = elems[ i++ ] ) ) {
    							node = elem.getAttributeNode( "id" );
    							if ( node && node.value === id ) {
    								return [ elem ];
    							}
    						}
    					}

    					return [];
    				}
    			};
    		}

    		// Tag
    		Expr.find.TAG = function( tag, context ) {
    			if ( typeof context.getElementsByTagName !== "undefined" ) {
    				return context.getElementsByTagName( tag );

    			// DocumentFragment nodes don't have gEBTN
    			} else {
    				return context.querySelectorAll( tag );
    			}
    		};

    		// Class
    		Expr.find.CLASS = function( className, context ) {
    			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
    				return context.getElementsByClassName( className );
    			}
    		};

    		/* QSA/matchesSelector
    		---------------------------------------------------------------------- */

    		// QSA and matchesSelector support

    		rbuggyQSA = [];

    		// Build QSA regex
    		// Regex strategy adopted from Diego Perini
    		assert( function( el ) {

    			var input;

    			documentElement.appendChild( el ).innerHTML =
    				"<a id='" + expando + "' href='' disabled='disabled'></a>" +
    				"<select id='" + expando + "-\r\\' disabled='disabled'>" +
    				"<option selected=''></option></select>";

    			// Support: iOS <=7 - 8 only
    			// Boolean attributes and "value" are not treated correctly in some XML documents
    			if ( !el.querySelectorAll( "[selected]" ).length ) {
    				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
    			}

    			// Support: iOS <=7 - 8 only
    			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
    				rbuggyQSA.push( "~=" );
    			}

    			// Support: iOS 8 only
    			// https://bugs.webkit.org/show_bug.cgi?id=136851
    			// In-page `selector#id sibling-combinator selector` fails
    			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
    				rbuggyQSA.push( ".#.+[+~]" );
    			}

    			// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
    			// In some of the document kinds, these selectors wouldn't work natively.
    			// This is probably OK but for backwards compatibility we want to maintain
    			// handling them through jQuery traversal in jQuery 3.x.
    			if ( !el.querySelectorAll( ":checked" ).length ) {
    				rbuggyQSA.push( ":checked" );
    			}

    			// Support: Windows 8 Native Apps
    			// The type and name attributes are restricted during .innerHTML assignment
    			input = document.createElement( "input" );
    			input.setAttribute( "type", "hidden" );
    			el.appendChild( input ).setAttribute( "name", "D" );

    			// Support: IE 9 - 11+
    			// IE's :disabled selector does not pick up the children of disabled fieldsets
    			// Support: Chrome <=105+, Firefox <=104+, Safari <=15.4+
    			// In some of the document kinds, these selectors wouldn't work natively.
    			// This is probably OK but for backwards compatibility we want to maintain
    			// handling them through jQuery traversal in jQuery 3.x.
    			documentElement.appendChild( el ).disabled = true;
    			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
    				rbuggyQSA.push( ":enabled", ":disabled" );
    			}

    			// Support: IE 11+, Edge 15 - 18+
    			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
    			// Adding a temporary attribute to the document before the selection works
    			// around the issue.
    			// Interestingly, IE 10 & older don't seem to have the issue.
    			input = document.createElement( "input" );
    			input.setAttribute( "name", "" );
    			el.appendChild( input );
    			if ( !el.querySelectorAll( "[name='']" ).length ) {
    				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
    					whitespace + "*(?:''|\"\")" );
    			}
    		} );

    		if ( !support.cssHas ) {

    			// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+
    			// Our regular `try-catch` mechanism fails to detect natively-unsupported
    			// pseudo-classes inside `:has()` (such as `:has(:contains("Foo"))`)
    			// in browsers that parse the `:has()` argument as a forgiving selector list.
    			// https://drafts.csswg.org/selectors/#relational now requires the argument
    			// to be parsed unforgivingly, but browsers have not yet fully adjusted.
    			rbuggyQSA.push( ":has" );
    		}

    		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );

    		/* Sorting
    		---------------------------------------------------------------------- */

    		// Document order sorting
    		sortOrder = function( a, b ) {

    			// Flag for duplicate removal
    			if ( a === b ) {
    				hasDuplicate = true;
    				return 0;
    			}

    			// Sort on method existence if only one input has compareDocumentPosition
    			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
    			if ( compare ) {
    				return compare;
    			}

    			// Calculate position if both inputs belong to the same document
    			// Support: IE 11+, Edge 17 - 18+
    			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    			// two documents; shallow comparisons work.
    			// eslint-disable-next-line eqeqeq
    			compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
    				a.compareDocumentPosition( b ) :

    				// Otherwise we know they are disconnected
    				1;

    			// Disconnected nodes
    			if ( compare & 1 ||
    				( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

    				// Choose the first element that is related to our preferred document
    				// Support: IE 11+, Edge 17 - 18+
    				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    				// two documents; shallow comparisons work.
    				// eslint-disable-next-line eqeqeq
    				if ( a === document || a.ownerDocument == preferredDoc &&
    					find.contains( preferredDoc, a ) ) {
    					return -1;
    				}

    				// Support: IE 11+, Edge 17 - 18+
    				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    				// two documents; shallow comparisons work.
    				// eslint-disable-next-line eqeqeq
    				if ( b === document || b.ownerDocument == preferredDoc &&
    					find.contains( preferredDoc, b ) ) {
    					return 1;
    				}

    				// Maintain original order
    				return sortInput ?
    					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
    					0;
    			}

    			return compare & 4 ? -1 : 1;
    		};

    		return document;
    	}

    	find.matches = function( expr, elements ) {
    		return find( expr, null, null, elements );
    	};

    	find.matchesSelector = function( elem, expr ) {
    		setDocument( elem );

    		if ( documentIsHTML &&
    			!nonnativeSelectorCache[ expr + " " ] &&
    			( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {

    			try {
    				var ret = matches.call( elem, expr );

    				// IE 9's matchesSelector returns false on disconnected nodes
    				if ( ret || support.disconnectedMatch ||

    						// As well, disconnected nodes are said to be in a document
    						// fragment in IE 9
    						elem.document && elem.document.nodeType !== 11 ) {
    					return ret;
    				}
    			} catch ( e ) {
    				nonnativeSelectorCache( expr, true );
    			}
    		}

    		return find( expr, document, null, [ elem ] ).length > 0;
    	};

    	find.contains = function( context, elem ) {

    		// Set document vars if needed
    		// Support: IE 11+, Edge 17 - 18+
    		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    		// two documents; shallow comparisons work.
    		// eslint-disable-next-line eqeqeq
    		if ( ( context.ownerDocument || context ) != document ) {
    			setDocument( context );
    		}
    		return jQuery.contains( context, elem );
    	};


    	find.attr = function( elem, name ) {

    		// Set document vars if needed
    		// Support: IE 11+, Edge 17 - 18+
    		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    		// two documents; shallow comparisons work.
    		// eslint-disable-next-line eqeqeq
    		if ( ( elem.ownerDocument || elem ) != document ) {
    			setDocument( elem );
    		}

    		var fn = Expr.attrHandle[ name.toLowerCase() ],

    			// Don't get fooled by Object.prototype properties (see trac-13807)
    			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
    				fn( elem, name, !documentIsHTML ) :
    				undefined;

    		if ( val !== undefined ) {
    			return val;
    		}

    		return elem.getAttribute( name );
    	};

    	find.error = function( msg ) {
    		throw new Error( "Syntax error, unrecognized expression: " + msg );
    	};

    	/**
    	 * Document sorting and removing duplicates
    	 * @param {ArrayLike} results
    	 */
    	jQuery.uniqueSort = function( results ) {
    		var elem,
    			duplicates = [],
    			j = 0,
    			i = 0;

    		// Unless we *know* we can detect duplicates, assume their presence
    		//
    		// Support: Android <=4.0+
    		// Testing for detecting duplicates is unpredictable so instead assume we can't
    		// depend on duplicate detection in all browsers without a stable sort.
    		hasDuplicate = !support.sortStable;
    		sortInput = !support.sortStable && slice.call( results, 0 );
    		sort.call( results, sortOrder );

    		if ( hasDuplicate ) {
    			while ( ( elem = results[ i++ ] ) ) {
    				if ( elem === results[ i ] ) {
    					j = duplicates.push( i );
    				}
    			}
    			while ( j-- ) {
    				splice.call( results, duplicates[ j ], 1 );
    			}
    		}

    		// Clear input after sorting to release objects
    		// See https://github.com/jquery/sizzle/pull/225
    		sortInput = null;

    		return results;
    	};

    	jQuery.fn.uniqueSort = function() {
    		return this.pushStack( jQuery.uniqueSort( slice.apply( this ) ) );
    	};

    	Expr = jQuery.expr = {

    		// Can be adjusted by the user
    		cacheLength: 50,

    		createPseudo: markFunction,

    		match: matchExpr,

    		attrHandle: {},

    		find: {},

    		relative: {
    			">": { dir: "parentNode", first: true },
    			" ": { dir: "parentNode" },
    			"+": { dir: "previousSibling", first: true },
    			"~": { dir: "previousSibling" }
    		},

    		preFilter: {
    			ATTR: function( match ) {
    				match[ 1 ] = match[ 1 ].replace( runescape, funescape );

    				// Move the given value to match[3] whether quoted or unquoted
    				match[ 3 ] = ( match[ 3 ] || match[ 4 ] || match[ 5 ] || "" )
    					.replace( runescape, funescape );

    				if ( match[ 2 ] === "~=" ) {
    					match[ 3 ] = " " + match[ 3 ] + " ";
    				}

    				return match.slice( 0, 4 );
    			},

    			CHILD: function( match ) {

    				/* matches from matchExpr["CHILD"]
    					1 type (only|nth|...)
    					2 what (child|of-type)
    					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
    					4 xn-component of xn+y argument ([+-]?\d*n|)
    					5 sign of xn-component
    					6 x of xn-component
    					7 sign of y-component
    					8 y of y-component
    				*/
    				match[ 1 ] = match[ 1 ].toLowerCase();

    				if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

    					// nth-* requires argument
    					if ( !match[ 3 ] ) {
    						find.error( match[ 0 ] );
    					}

    					// numeric x and y parameters for Expr.filter.CHILD
    					// remember that false/true cast respectively to 0/1
    					match[ 4 ] = +( match[ 4 ] ?
    						match[ 5 ] + ( match[ 6 ] || 1 ) :
    						2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" )
    					);
    					match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

    				// other types prohibit arguments
    				} else if ( match[ 3 ] ) {
    					find.error( match[ 0 ] );
    				}

    				return match;
    			},

    			PSEUDO: function( match ) {
    				var excess,
    					unquoted = !match[ 6 ] && match[ 2 ];

    				if ( matchExpr.CHILD.test( match[ 0 ] ) ) {
    					return null;
    				}

    				// Accept quoted arguments as-is
    				if ( match[ 3 ] ) {
    					match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

    				// Strip excess characters from unquoted arguments
    				} else if ( unquoted && rpseudo.test( unquoted ) &&

    					// Get excess from tokenize (recursively)
    					( excess = tokenize( unquoted, true ) ) &&

    					// advance to the next closing parenthesis
    					( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

    					// excess is a negative index
    					match[ 0 ] = match[ 0 ].slice( 0, excess );
    					match[ 2 ] = unquoted.slice( 0, excess );
    				}

    				// Return only captures needed by the pseudo filter method (type and argument)
    				return match.slice( 0, 3 );
    			}
    		},

    		filter: {

    			TAG: function( nodeNameSelector ) {
    				var expectedNodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
    				return nodeNameSelector === "*" ?
    					function() {
    						return true;
    					} :
    					function( elem ) {
    						return nodeName( elem, expectedNodeName );
    					};
    			},

    			CLASS: function( className ) {
    				var pattern = classCache[ className + " " ];

    				return pattern ||
    					( pattern = new RegExp( "(^|" + whitespace + ")" + className +
    						"(" + whitespace + "|$)" ) ) &&
    					classCache( className, function( elem ) {
    						return pattern.test(
    							typeof elem.className === "string" && elem.className ||
    								typeof elem.getAttribute !== "undefined" &&
    									elem.getAttribute( "class" ) ||
    								""
    						);
    					} );
    			},

    			ATTR: function( name, operator, check ) {
    				return function( elem ) {
    					var result = find.attr( elem, name );

    					if ( result == null ) {
    						return operator === "!=";
    					}
    					if ( !operator ) {
    						return true;
    					}

    					result += "";

    					if ( operator === "=" ) {
    						return result === check;
    					}
    					if ( operator === "!=" ) {
    						return result !== check;
    					}
    					if ( operator === "^=" ) {
    						return check && result.indexOf( check ) === 0;
    					}
    					if ( operator === "*=" ) {
    						return check && result.indexOf( check ) > -1;
    					}
    					if ( operator === "$=" ) {
    						return check && result.slice( -check.length ) === check;
    					}
    					if ( operator === "~=" ) {
    						return ( " " + result.replace( rwhitespace, " " ) + " " )
    							.indexOf( check ) > -1;
    					}
    					if ( operator === "|=" ) {
    						return result === check || result.slice( 0, check.length + 1 ) === check + "-";
    					}

    					return false;
    				};
    			},

    			CHILD: function( type, what, _argument, first, last ) {
    				var simple = type.slice( 0, 3 ) !== "nth",
    					forward = type.slice( -4 ) !== "last",
    					ofType = what === "of-type";

    				return first === 1 && last === 0 ?

    					// Shortcut for :nth-*(n)
    					function( elem ) {
    						return !!elem.parentNode;
    					} :

    					function( elem, _context, xml ) {
    						var cache, outerCache, node, nodeIndex, start,
    							dir = simple !== forward ? "nextSibling" : "previousSibling",
    							parent = elem.parentNode,
    							name = ofType && elem.nodeName.toLowerCase(),
    							useCache = !xml && !ofType,
    							diff = false;

    						if ( parent ) {

    							// :(first|last|only)-(child|of-type)
    							if ( simple ) {
    								while ( dir ) {
    									node = elem;
    									while ( ( node = node[ dir ] ) ) {
    										if ( ofType ?
    											nodeName( node, name ) :
    											node.nodeType === 1 ) {

    											return false;
    										}
    									}

    									// Reverse direction for :only-* (if we haven't yet done so)
    									start = dir = type === "only" && !start && "nextSibling";
    								}
    								return true;
    							}

    							start = [ forward ? parent.firstChild : parent.lastChild ];

    							// non-xml :nth-child(...) stores cache data on `parent`
    							if ( forward && useCache ) {

    								// Seek `elem` from a previously-cached index
    								outerCache = parent[ expando ] || ( parent[ expando ] = {} );
    								cache = outerCache[ type ] || [];
    								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
    								diff = nodeIndex && cache[ 2 ];
    								node = nodeIndex && parent.childNodes[ nodeIndex ];

    								while ( ( node = ++nodeIndex && node && node[ dir ] ||

    									// Fallback to seeking `elem` from the start
    									( diff = nodeIndex = 0 ) || start.pop() ) ) {

    									// When found, cache indexes on `parent` and break
    									if ( node.nodeType === 1 && ++diff && node === elem ) {
    										outerCache[ type ] = [ dirruns, nodeIndex, diff ];
    										break;
    									}
    								}

    							} else {

    								// Use previously-cached element index if available
    								if ( useCache ) {
    									outerCache = elem[ expando ] || ( elem[ expando ] = {} );
    									cache = outerCache[ type ] || [];
    									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
    									diff = nodeIndex;
    								}

    								// xml :nth-child(...)
    								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
    								if ( diff === false ) {

    									// Use the same loop as above to seek `elem` from the start
    									while ( ( node = ++nodeIndex && node && node[ dir ] ||
    										( diff = nodeIndex = 0 ) || start.pop() ) ) {

    										if ( ( ofType ?
    											nodeName( node, name ) :
    											node.nodeType === 1 ) &&
    											++diff ) {

    											// Cache the index of each encountered element
    											if ( useCache ) {
    												outerCache = node[ expando ] ||
    													( node[ expando ] = {} );
    												outerCache[ type ] = [ dirruns, diff ];
    											}

    											if ( node === elem ) {
    												break;
    											}
    										}
    									}
    								}
    							}

    							// Incorporate the offset, then check against cycle size
    							diff -= last;
    							return diff === first || ( diff % first === 0 && diff / first >= 0 );
    						}
    					};
    			},

    			PSEUDO: function( pseudo, argument ) {

    				// pseudo-class names are case-insensitive
    				// https://www.w3.org/TR/selectors/#pseudo-classes
    				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
    				// Remember that setFilters inherits from pseudos
    				var args,
    					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
    						find.error( "unsupported pseudo: " + pseudo );

    				// The user may use createPseudo to indicate that
    				// arguments are needed to create the filter function
    				// just as jQuery does
    				if ( fn[ expando ] ) {
    					return fn( argument );
    				}

    				// But maintain support for old signatures
    				if ( fn.length > 1 ) {
    					args = [ pseudo, pseudo, "", argument ];
    					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
    						markFunction( function( seed, matches ) {
    							var idx,
    								matched = fn( seed, argument ),
    								i = matched.length;
    							while ( i-- ) {
    								idx = indexOf.call( seed, matched[ i ] );
    								seed[ idx ] = !( matches[ idx ] = matched[ i ] );
    							}
    						} ) :
    						function( elem ) {
    							return fn( elem, 0, args );
    						};
    				}

    				return fn;
    			}
    		},

    		pseudos: {

    			// Potentially complex pseudos
    			not: markFunction( function( selector ) {

    				// Trim the selector passed to compile
    				// to avoid treating leading and trailing
    				// spaces as combinators
    				var input = [],
    					results = [],
    					matcher = compile( selector.replace( rtrimCSS, "$1" ) );

    				return matcher[ expando ] ?
    					markFunction( function( seed, matches, _context, xml ) {
    						var elem,
    							unmatched = matcher( seed, null, xml, [] ),
    							i = seed.length;

    						// Match elements unmatched by `matcher`
    						while ( i-- ) {
    							if ( ( elem = unmatched[ i ] ) ) {
    								seed[ i ] = !( matches[ i ] = elem );
    							}
    						}
    					} ) :
    					function( elem, _context, xml ) {
    						input[ 0 ] = elem;
    						matcher( input, null, xml, results );

    						// Don't keep the element
    						// (see https://github.com/jquery/sizzle/issues/299)
    						input[ 0 ] = null;
    						return !results.pop();
    					};
    			} ),

    			has: markFunction( function( selector ) {
    				return function( elem ) {
    					return find( selector, elem ).length > 0;
    				};
    			} ),

    			contains: markFunction( function( text ) {
    				text = text.replace( runescape, funescape );
    				return function( elem ) {
    					return ( elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;
    				};
    			} ),

    			// "Whether an element is represented by a :lang() selector
    			// is based solely on the element's language value
    			// being equal to the identifier C,
    			// or beginning with the identifier C immediately followed by "-".
    			// The matching of C against the element's language value is performed case-insensitively.
    			// The identifier C does not have to be a valid language name."
    			// https://www.w3.org/TR/selectors/#lang-pseudo
    			lang: markFunction( function( lang ) {

    				// lang value must be a valid identifier
    				if ( !ridentifier.test( lang || "" ) ) {
    					find.error( "unsupported lang: " + lang );
    				}
    				lang = lang.replace( runescape, funescape ).toLowerCase();
    				return function( elem ) {
    					var elemLang;
    					do {
    						if ( ( elemLang = documentIsHTML ?
    							elem.lang :
    							elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

    							elemLang = elemLang.toLowerCase();
    							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
    						}
    					} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
    					return false;
    				};
    			} ),

    			// Miscellaneous
    			target: function( elem ) {
    				var hash = window.location && window.location.hash;
    				return hash && hash.slice( 1 ) === elem.id;
    			},

    			root: function( elem ) {
    				return elem === documentElement;
    			},

    			focus: function( elem ) {
    				return elem === safeActiveElement() &&
    					document.hasFocus() &&
    					!!( elem.type || elem.href || ~elem.tabIndex );
    			},

    			// Boolean properties
    			enabled: createDisabledPseudo( false ),
    			disabled: createDisabledPseudo( true ),

    			checked: function( elem ) {

    				// In CSS3, :checked should return both checked and selected elements
    				// https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
    				return ( nodeName( elem, "input" ) && !!elem.checked ) ||
    					( nodeName( elem, "option" ) && !!elem.selected );
    			},

    			selected: function( elem ) {

    				// Support: IE <=11+
    				// Accessing the selectedIndex property
    				// forces the browser to treat the default option as
    				// selected when in an optgroup.
    				if ( elem.parentNode ) {
    					// eslint-disable-next-line no-unused-expressions
    					elem.parentNode.selectedIndex;
    				}

    				return elem.selected === true;
    			},

    			// Contents
    			empty: function( elem ) {

    				// https://www.w3.org/TR/selectors/#empty-pseudo
    				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
    				//   but not by others (comment: 8; processing instruction: 7; etc.)
    				// nodeType < 6 works because attributes (2) do not appear as children
    				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
    					if ( elem.nodeType < 6 ) {
    						return false;
    					}
    				}
    				return true;
    			},

    			parent: function( elem ) {
    				return !Expr.pseudos.empty( elem );
    			},

    			// Element/input types
    			header: function( elem ) {
    				return rheader.test( elem.nodeName );
    			},

    			input: function( elem ) {
    				return rinputs.test( elem.nodeName );
    			},

    			button: function( elem ) {
    				return nodeName( elem, "input" ) && elem.type === "button" ||
    					nodeName( elem, "button" );
    			},

    			text: function( elem ) {
    				var attr;
    				return nodeName( elem, "input" ) && elem.type === "text" &&

    					// Support: IE <10 only
    					// New HTML5 attribute values (e.g., "search") appear
    					// with elem.type === "text"
    					( ( attr = elem.getAttribute( "type" ) ) == null ||
    						attr.toLowerCase() === "text" );
    			},

    			// Position-in-collection
    			first: createPositionalPseudo( function() {
    				return [ 0 ];
    			} ),

    			last: createPositionalPseudo( function( _matchIndexes, length ) {
    				return [ length - 1 ];
    			} ),

    			eq: createPositionalPseudo( function( _matchIndexes, length, argument ) {
    				return [ argument < 0 ? argument + length : argument ];
    			} ),

    			even: createPositionalPseudo( function( matchIndexes, length ) {
    				var i = 0;
    				for ( ; i < length; i += 2 ) {
    					matchIndexes.push( i );
    				}
    				return matchIndexes;
    			} ),

    			odd: createPositionalPseudo( function( matchIndexes, length ) {
    				var i = 1;
    				for ( ; i < length; i += 2 ) {
    					matchIndexes.push( i );
    				}
    				return matchIndexes;
    			} ),

    			lt: createPositionalPseudo( function( matchIndexes, length, argument ) {
    				var i;

    				if ( argument < 0 ) {
    					i = argument + length;
    				} else if ( argument > length ) {
    					i = length;
    				} else {
    					i = argument;
    				}

    				for ( ; --i >= 0; ) {
    					matchIndexes.push( i );
    				}
    				return matchIndexes;
    			} ),

    			gt: createPositionalPseudo( function( matchIndexes, length, argument ) {
    				var i = argument < 0 ? argument + length : argument;
    				for ( ; ++i < length; ) {
    					matchIndexes.push( i );
    				}
    				return matchIndexes;
    			} )
    		}
    	};

    	Expr.pseudos.nth = Expr.pseudos.eq;

    	// Add button/input type pseudos
    	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
    		Expr.pseudos[ i ] = createInputPseudo( i );
    	}
    	for ( i in { submit: true, reset: true } ) {
    		Expr.pseudos[ i ] = createButtonPseudo( i );
    	}

    	// Easy API for creating new setFilters
    	function setFilters() {}
    	setFilters.prototype = Expr.filters = Expr.pseudos;
    	Expr.setFilters = new setFilters();

    	function tokenize( selector, parseOnly ) {
    		var matched, match, tokens, type,
    			soFar, groups, preFilters,
    			cached = tokenCache[ selector + " " ];

    		if ( cached ) {
    			return parseOnly ? 0 : cached.slice( 0 );
    		}

    		soFar = selector;
    		groups = [];
    		preFilters = Expr.preFilter;

    		while ( soFar ) {

    			// Comma and first run
    			if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
    				if ( match ) {

    					// Don't consume trailing commas as valid
    					soFar = soFar.slice( match[ 0 ].length ) || soFar;
    				}
    				groups.push( ( tokens = [] ) );
    			}

    			matched = false;

    			// Combinators
    			if ( ( match = rleadingCombinator.exec( soFar ) ) ) {
    				matched = match.shift();
    				tokens.push( {
    					value: matched,

    					// Cast descendant combinators to space
    					type: match[ 0 ].replace( rtrimCSS, " " )
    				} );
    				soFar = soFar.slice( matched.length );
    			}

    			// Filters
    			for ( type in Expr.filter ) {
    				if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
    					( match = preFilters[ type ]( match ) ) ) ) {
    					matched = match.shift();
    					tokens.push( {
    						value: matched,
    						type: type,
    						matches: match
    					} );
    					soFar = soFar.slice( matched.length );
    				}
    			}

    			if ( !matched ) {
    				break;
    			}
    		}

    		// Return the length of the invalid excess
    		// if we're just parsing
    		// Otherwise, throw an error or return tokens
    		if ( parseOnly ) {
    			return soFar.length;
    		}

    		return soFar ?
    			find.error( selector ) :

    			// Cache the tokens
    			tokenCache( selector, groups ).slice( 0 );
    	}

    	function toSelector( tokens ) {
    		var i = 0,
    			len = tokens.length,
    			selector = "";
    		for ( ; i < len; i++ ) {
    			selector += tokens[ i ].value;
    		}
    		return selector;
    	}

    	function addCombinator( matcher, combinator, base ) {
    		var dir = combinator.dir,
    			skip = combinator.next,
    			key = skip || dir,
    			checkNonElements = base && key === "parentNode",
    			doneName = done++;

    		return combinator.first ?

    			// Check against closest ancestor/preceding element
    			function( elem, context, xml ) {
    				while ( ( elem = elem[ dir ] ) ) {
    					if ( elem.nodeType === 1 || checkNonElements ) {
    						return matcher( elem, context, xml );
    					}
    				}
    				return false;
    			} :

    			// Check against all ancestor/preceding elements
    			function( elem, context, xml ) {
    				var oldCache, outerCache,
    					newCache = [ dirruns, doneName ];

    				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
    				if ( xml ) {
    					while ( ( elem = elem[ dir ] ) ) {
    						if ( elem.nodeType === 1 || checkNonElements ) {
    							if ( matcher( elem, context, xml ) ) {
    								return true;
    							}
    						}
    					}
    				} else {
    					while ( ( elem = elem[ dir ] ) ) {
    						if ( elem.nodeType === 1 || checkNonElements ) {
    							outerCache = elem[ expando ] || ( elem[ expando ] = {} );

    							if ( skip && nodeName( elem, skip ) ) {
    								elem = elem[ dir ] || elem;
    							} else if ( ( oldCache = outerCache[ key ] ) &&
    								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

    								// Assign to newCache so results back-propagate to previous elements
    								return ( newCache[ 2 ] = oldCache[ 2 ] );
    							} else {

    								// Reuse newcache so results back-propagate to previous elements
    								outerCache[ key ] = newCache;

    								// A match means we're done; a fail means we have to keep checking
    								if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
    									return true;
    								}
    							}
    						}
    					}
    				}
    				return false;
    			};
    	}

    	function elementMatcher( matchers ) {
    		return matchers.length > 1 ?
    			function( elem, context, xml ) {
    				var i = matchers.length;
    				while ( i-- ) {
    					if ( !matchers[ i ]( elem, context, xml ) ) {
    						return false;
    					}
    				}
    				return true;
    			} :
    			matchers[ 0 ];
    	}

    	function multipleContexts( selector, contexts, results ) {
    		var i = 0,
    			len = contexts.length;
    		for ( ; i < len; i++ ) {
    			find( selector, contexts[ i ], results );
    		}
    		return results;
    	}

    	function condense( unmatched, map, filter, context, xml ) {
    		var elem,
    			newUnmatched = [],
    			i = 0,
    			len = unmatched.length,
    			mapped = map != null;

    		for ( ; i < len; i++ ) {
    			if ( ( elem = unmatched[ i ] ) ) {
    				if ( !filter || filter( elem, context, xml ) ) {
    					newUnmatched.push( elem );
    					if ( mapped ) {
    						map.push( i );
    					}
    				}
    			}
    		}

    		return newUnmatched;
    	}

    	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
    		if ( postFilter && !postFilter[ expando ] ) {
    			postFilter = setMatcher( postFilter );
    		}
    		if ( postFinder && !postFinder[ expando ] ) {
    			postFinder = setMatcher( postFinder, postSelector );
    		}
    		return markFunction( function( seed, results, context, xml ) {
    			var temp, i, elem, matcherOut,
    				preMap = [],
    				postMap = [],
    				preexisting = results.length,

    				// Get initial elements from seed or context
    				elems = seed ||
    					multipleContexts( selector || "*",
    						context.nodeType ? [ context ] : context, [] ),

    				// Prefilter to get matcher input, preserving a map for seed-results synchronization
    				matcherIn = preFilter && ( seed || !selector ) ?
    					condense( elems, preMap, preFilter, context, xml ) :
    					elems;

    			if ( matcher ) {

    				// If we have a postFinder, or filtered seed, or non-seed postFilter
    				// or preexisting results,
    				matcherOut = postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

    					// ...intermediate processing is necessary
    					[] :

    					// ...otherwise use results directly
    					results;

    				// Find primary matches
    				matcher( matcherIn, matcherOut, context, xml );
    			} else {
    				matcherOut = matcherIn;
    			}

    			// Apply postFilter
    			if ( postFilter ) {
    				temp = condense( matcherOut, postMap );
    				postFilter( temp, [], context, xml );

    				// Un-match failing elements by moving them back to matcherIn
    				i = temp.length;
    				while ( i-- ) {
    					if ( ( elem = temp[ i ] ) ) {
    						matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
    					}
    				}
    			}

    			if ( seed ) {
    				if ( postFinder || preFilter ) {
    					if ( postFinder ) {

    						// Get the final matcherOut by condensing this intermediate into postFinder contexts
    						temp = [];
    						i = matcherOut.length;
    						while ( i-- ) {
    							if ( ( elem = matcherOut[ i ] ) ) {

    								// Restore matcherIn since elem is not yet a final match
    								temp.push( ( matcherIn[ i ] = elem ) );
    							}
    						}
    						postFinder( null, ( matcherOut = [] ), temp, xml );
    					}

    					// Move matched elements from seed to results to keep them synchronized
    					i = matcherOut.length;
    					while ( i-- ) {
    						if ( ( elem = matcherOut[ i ] ) &&
    							( temp = postFinder ? indexOf.call( seed, elem ) : preMap[ i ] ) > -1 ) {

    							seed[ temp ] = !( results[ temp ] = elem );
    						}
    					}
    				}

    			// Add elements to results, through postFinder if defined
    			} else {
    				matcherOut = condense(
    					matcherOut === results ?
    						matcherOut.splice( preexisting, matcherOut.length ) :
    						matcherOut
    				);
    				if ( postFinder ) {
    					postFinder( null, results, matcherOut, xml );
    				} else {
    					push.apply( results, matcherOut );
    				}
    			}
    		} );
    	}

    	function matcherFromTokens( tokens ) {
    		var checkContext, matcher, j,
    			len = tokens.length,
    			leadingRelative = Expr.relative[ tokens[ 0 ].type ],
    			implicitRelative = leadingRelative || Expr.relative[ " " ],
    			i = leadingRelative ? 1 : 0,

    			// The foundational matcher ensures that elements are reachable from top-level context(s)
    			matchContext = addCombinator( function( elem ) {
    				return elem === checkContext;
    			}, implicitRelative, true ),
    			matchAnyContext = addCombinator( function( elem ) {
    				return indexOf.call( checkContext, elem ) > -1;
    			}, implicitRelative, true ),
    			matchers = [ function( elem, context, xml ) {

    				// Support: IE 11+, Edge 17 - 18+
    				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    				// two documents; shallow comparisons work.
    				// eslint-disable-next-line eqeqeq
    				var ret = ( !leadingRelative && ( xml || context != outermostContext ) ) || (
    					( checkContext = context ).nodeType ?
    						matchContext( elem, context, xml ) :
    						matchAnyContext( elem, context, xml ) );

    				// Avoid hanging onto element
    				// (see https://github.com/jquery/sizzle/issues/299)
    				checkContext = null;
    				return ret;
    			} ];

    		for ( ; i < len; i++ ) {
    			if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
    				matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
    			} else {
    				matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

    				// Return special upon seeing a positional matcher
    				if ( matcher[ expando ] ) {

    					// Find the next relative operator (if any) for proper handling
    					j = ++i;
    					for ( ; j < len; j++ ) {
    						if ( Expr.relative[ tokens[ j ].type ] ) {
    							break;
    						}
    					}
    					return setMatcher(
    						i > 1 && elementMatcher( matchers ),
    						i > 1 && toSelector(

    							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
    							tokens.slice( 0, i - 1 )
    								.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
    						).replace( rtrimCSS, "$1" ),
    						matcher,
    						i < j && matcherFromTokens( tokens.slice( i, j ) ),
    						j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
    						j < len && toSelector( tokens )
    					);
    				}
    				matchers.push( matcher );
    			}
    		}

    		return elementMatcher( matchers );
    	}

    	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
    		var bySet = setMatchers.length > 0,
    			byElement = elementMatchers.length > 0,
    			superMatcher = function( seed, context, xml, results, outermost ) {
    				var elem, j, matcher,
    					matchedCount = 0,
    					i = "0",
    					unmatched = seed && [],
    					setMatched = [],
    					contextBackup = outermostContext,

    					// We must always have either seed elements or outermost context
    					elems = seed || byElement && Expr.find.TAG( "*", outermost ),

    					// Use integer dirruns iff this is the outermost matcher
    					dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
    					len = elems.length;

    				if ( outermost ) {

    					// Support: IE 11+, Edge 17 - 18+
    					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    					// two documents; shallow comparisons work.
    					// eslint-disable-next-line eqeqeq
    					outermostContext = context == document || context || outermost;
    				}

    				// Add elements passing elementMatchers directly to results
    				// Support: iOS <=7 - 9 only
    				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching
    				// elements by id. (see trac-14142)
    				for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
    					if ( byElement && elem ) {
    						j = 0;

    						// Support: IE 11+, Edge 17 - 18+
    						// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
    						// two documents; shallow comparisons work.
    						// eslint-disable-next-line eqeqeq
    						if ( !context && elem.ownerDocument != document ) {
    							setDocument( elem );
    							xml = !documentIsHTML;
    						}
    						while ( ( matcher = elementMatchers[ j++ ] ) ) {
    							if ( matcher( elem, context || document, xml ) ) {
    								push.call( results, elem );
    								break;
    							}
    						}
    						if ( outermost ) {
    							dirruns = dirrunsUnique;
    						}
    					}

    					// Track unmatched elements for set filters
    					if ( bySet ) {

    						// They will have gone through all possible matchers
    						if ( ( elem = !matcher && elem ) ) {
    							matchedCount--;
    						}

    						// Lengthen the array for every element, matched or not
    						if ( seed ) {
    							unmatched.push( elem );
    						}
    					}
    				}

    				// `i` is now the count of elements visited above, and adding it to `matchedCount`
    				// makes the latter nonnegative.
    				matchedCount += i;

    				// Apply set filters to unmatched elements
    				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
    				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
    				// no element matchers and no seed.
    				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
    				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
    				// numerically zero.
    				if ( bySet && i !== matchedCount ) {
    					j = 0;
    					while ( ( matcher = setMatchers[ j++ ] ) ) {
    						matcher( unmatched, setMatched, context, xml );
    					}

    					if ( seed ) {

    						// Reintegrate element matches to eliminate the need for sorting
    						if ( matchedCount > 0 ) {
    							while ( i-- ) {
    								if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
    									setMatched[ i ] = pop.call( results );
    								}
    							}
    						}

    						// Discard index placeholder values to get only actual matches
    						setMatched = condense( setMatched );
    					}

    					// Add matches to results
    					push.apply( results, setMatched );

    					// Seedless set matches succeeding multiple successful matchers stipulate sorting
    					if ( outermost && !seed && setMatched.length > 0 &&
    						( matchedCount + setMatchers.length ) > 1 ) {

    						jQuery.uniqueSort( results );
    					}
    				}

    				// Override manipulation of globals by nested matchers
    				if ( outermost ) {
    					dirruns = dirrunsUnique;
    					outermostContext = contextBackup;
    				}

    				return unmatched;
    			};

    		return bySet ?
    			markFunction( superMatcher ) :
    			superMatcher;
    	}

    	function compile( selector, match /* Internal Use Only */ ) {
    		var i,
    			setMatchers = [],
    			elementMatchers = [],
    			cached = compilerCache[ selector + " " ];

    		if ( !cached ) {

    			// Generate a function of recursive functions that can be used to check each element
    			if ( !match ) {
    				match = tokenize( selector );
    			}
    			i = match.length;
    			while ( i-- ) {
    				cached = matcherFromTokens( match[ i ] );
    				if ( cached[ expando ] ) {
    					setMatchers.push( cached );
    				} else {
    					elementMatchers.push( cached );
    				}
    			}

    			// Cache the compiled function
    			cached = compilerCache( selector,
    				matcherFromGroupMatchers( elementMatchers, setMatchers ) );

    			// Save selector and tokenization
    			cached.selector = selector;
    		}
    		return cached;
    	}

    	/**
    	 * A low-level selection function that works with jQuery's compiled
    	 *  selector functions
    	 * @param {String|Function} selector A selector or a pre-compiled
    	 *  selector function built with jQuery selector compile
    	 * @param {Element} context
    	 * @param {Array} [results]
    	 * @param {Array} [seed] A set of elements to match against
    	 */
    	function select( selector, context, results, seed ) {
    		var i, tokens, token, type, find,
    			compiled = typeof selector === "function" && selector,
    			match = !seed && tokenize( ( selector = compiled.selector || selector ) );

    		results = results || [];

    		// Try to minimize operations if there is only one selector in the list and no seed
    		// (the latter of which guarantees us context)
    		if ( match.length === 1 ) {

    			// Reduce context if the leading compound selector is an ID
    			tokens = match[ 0 ] = match[ 0 ].slice( 0 );
    			if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
    					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

    				context = ( Expr.find.ID(
    					token.matches[ 0 ].replace( runescape, funescape ),
    					context
    				) || [] )[ 0 ];
    				if ( !context ) {
    					return results;

    				// Precompiled matchers will still verify ancestry, so step up a level
    				} else if ( compiled ) {
    					context = context.parentNode;
    				}

    				selector = selector.slice( tokens.shift().value.length );
    			}

    			// Fetch a seed set for right-to-left matching
    			i = matchExpr.needsContext.test( selector ) ? 0 : tokens.length;
    			while ( i-- ) {
    				token = tokens[ i ];

    				// Abort if we hit a combinator
    				if ( Expr.relative[ ( type = token.type ) ] ) {
    					break;
    				}
    				if ( ( find = Expr.find[ type ] ) ) {

    					// Search, expanding context for leading sibling combinators
    					if ( ( seed = find(
    						token.matches[ 0 ].replace( runescape, funescape ),
    						rsibling.test( tokens[ 0 ].type ) &&
    							testContext( context.parentNode ) || context
    					) ) ) {

    						// If seed is empty or no tokens remain, we can return early
    						tokens.splice( i, 1 );
    						selector = seed.length && toSelector( tokens );
    						if ( !selector ) {
    							push.apply( results, seed );
    							return results;
    						}

    						break;
    					}
    				}
    			}
    		}

    		// Compile and execute a filtering function if one is not provided
    		// Provide `match` to avoid retokenization if we modified the selector above
    		( compiled || compile( selector, match ) )(
    			seed,
    			context,
    			!documentIsHTML,
    			results,
    			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
    		);
    		return results;
    	}

    	// One-time assignments

    	// Support: Android <=4.0 - 4.1+
    	// Sort stability
    	support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

    	// Initialize against the default document
    	setDocument();

    	// Support: Android <=4.0 - 4.1+
    	// Detached nodes confoundingly follow *each other*
    	support.sortDetached = assert( function( el ) {

    		// Should return 1, but returns 4 (following)
    		return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
    	} );

    	jQuery.find = find;

    	// Deprecated
    	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
    	jQuery.unique = jQuery.uniqueSort;

    	// These have always been private, but they used to be documented
    	// as part of Sizzle so let's maintain them in the 3.x line
    	// for backwards compatibility purposes.
    	find.compile = compile;
    	find.select = select;
    	find.setDocument = setDocument;

    	find.escape = jQuery.escapeSelector;
    	find.getText = jQuery.text;
    	find.isXML = jQuery.isXMLDoc;
    	find.selectors = jQuery.expr;
    	find.support = jQuery.support;
    	find.uniqueSort = jQuery.uniqueSort;

    		/* eslint-enable */

    	} )();


    	var dir = function( elem, dir, until ) {
    		var matched = [],
    			truncate = until !== undefined;

    		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
    			if ( elem.nodeType === 1 ) {
    				if ( truncate && jQuery( elem ).is( until ) ) {
    					break;
    				}
    				matched.push( elem );
    			}
    		}
    		return matched;
    	};


    	var siblings = function( n, elem ) {
    		var matched = [];

    		for ( ; n; n = n.nextSibling ) {
    			if ( n.nodeType === 1 && n !== elem ) {
    				matched.push( n );
    			}
    		}

    		return matched;
    	};


    	var rneedsContext = jQuery.expr.match.needsContext;

    	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



    	// Implement the identical functionality for filter and not
    	function winnow( elements, qualifier, not ) {
    		if ( isFunction( qualifier ) ) {
    			return jQuery.grep( elements, function( elem, i ) {
    				return !!qualifier.call( elem, i, elem ) !== not;
    			} );
    		}

    		// Single element
    		if ( qualifier.nodeType ) {
    			return jQuery.grep( elements, function( elem ) {
    				return ( elem === qualifier ) !== not;
    			} );
    		}

    		// Arraylike of elements (jQuery, arguments, Array)
    		if ( typeof qualifier !== "string" ) {
    			return jQuery.grep( elements, function( elem ) {
    				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
    			} );
    		}

    		// Filtered directly for both simple and complex selectors
    		return jQuery.filter( qualifier, elements, not );
    	}

    	jQuery.filter = function( expr, elems, not ) {
    		var elem = elems[ 0 ];

    		if ( not ) {
    			expr = ":not(" + expr + ")";
    		}

    		if ( elems.length === 1 && elem.nodeType === 1 ) {
    			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
    		}

    		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
    			return elem.nodeType === 1;
    		} ) );
    	};

    	jQuery.fn.extend( {
    		find: function( selector ) {
    			var i, ret,
    				len = this.length,
    				self = this;

    			if ( typeof selector !== "string" ) {
    				return this.pushStack( jQuery( selector ).filter( function() {
    					for ( i = 0; i < len; i++ ) {
    						if ( jQuery.contains( self[ i ], this ) ) {
    							return true;
    						}
    					}
    				} ) );
    			}

    			ret = this.pushStack( [] );

    			for ( i = 0; i < len; i++ ) {
    				jQuery.find( selector, self[ i ], ret );
    			}

    			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
    		},
    		filter: function( selector ) {
    			return this.pushStack( winnow( this, selector || [], false ) );
    		},
    		not: function( selector ) {
    			return this.pushStack( winnow( this, selector || [], true ) );
    		},
    		is: function( selector ) {
    			return !!winnow(
    				this,

    				// If this is a positional/relative selector, check membership in the returned set
    				// so $("p:first").is("p:last") won't return true for a doc with two "p".
    				typeof selector === "string" && rneedsContext.test( selector ) ?
    					jQuery( selector ) :
    					selector || [],
    				false
    			).length;
    		}
    	} );


    	// Initialize a jQuery object


    	// A central reference to the root jQuery(document)
    	var rootjQuery,

    		// A simple way to check for HTML strings
    		// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
    		// Strict HTML recognition (trac-11290: must start with <)
    		// Shortcut simple #id case for speed
    		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

    		init = jQuery.fn.init = function( selector, context, root ) {
    			var match, elem;

    			// HANDLE: $(""), $(null), $(undefined), $(false)
    			if ( !selector ) {
    				return this;
    			}

    			// Method init() accepts an alternate rootjQuery
    			// so migrate can support jQuery.sub (gh-2101)
    			root = root || rootjQuery;

    			// Handle HTML strings
    			if ( typeof selector === "string" ) {
    				if ( selector[ 0 ] === "<" &&
    					selector[ selector.length - 1 ] === ">" &&
    					selector.length >= 3 ) {

    					// Assume that strings that start and end with <> are HTML and skip the regex check
    					match = [ null, selector, null ];

    				} else {
    					match = rquickExpr.exec( selector );
    				}

    				// Match html or make sure no context is specified for #id
    				if ( match && ( match[ 1 ] || !context ) ) {

    					// HANDLE: $(html) -> $(array)
    					if ( match[ 1 ] ) {
    						context = context instanceof jQuery ? context[ 0 ] : context;

    						// Option to run scripts is true for back-compat
    						// Intentionally let the error be thrown if parseHTML is not present
    						jQuery.merge( this, jQuery.parseHTML(
    							match[ 1 ],
    							context && context.nodeType ? context.ownerDocument || context : document,
    							true
    						) );

    						// HANDLE: $(html, props)
    						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
    							for ( match in context ) {

    								// Properties of context are called as methods if possible
    								if ( isFunction( this[ match ] ) ) {
    									this[ match ]( context[ match ] );

    								// ...and otherwise set as attributes
    								} else {
    									this.attr( match, context[ match ] );
    								}
    							}
    						}

    						return this;

    					// HANDLE: $(#id)
    					} else {
    						elem = document.getElementById( match[ 2 ] );

    						if ( elem ) {

    							// Inject the element directly into the jQuery object
    							this[ 0 ] = elem;
    							this.length = 1;
    						}
    						return this;
    					}

    				// HANDLE: $(expr, $(...))
    				} else if ( !context || context.jquery ) {
    					return ( context || root ).find( selector );

    				// HANDLE: $(expr, context)
    				// (which is just equivalent to: $(context).find(expr)
    				} else {
    					return this.constructor( context ).find( selector );
    				}

    			// HANDLE: $(DOMElement)
    			} else if ( selector.nodeType ) {
    				this[ 0 ] = selector;
    				this.length = 1;
    				return this;

    			// HANDLE: $(function)
    			// Shortcut for document ready
    			} else if ( isFunction( selector ) ) {
    				return root.ready !== undefined ?
    					root.ready( selector ) :

    					// Execute immediately if ready is not present
    					selector( jQuery );
    			}

    			return jQuery.makeArray( selector, this );
    		};

    	// Give the init function the jQuery prototype for later instantiation
    	init.prototype = jQuery.fn;

    	// Initialize central reference
    	rootjQuery = jQuery( document );


    	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

    		// Methods guaranteed to produce a unique set when starting from a unique set
    		guaranteedUnique = {
    			children: true,
    			contents: true,
    			next: true,
    			prev: true
    		};

    	jQuery.fn.extend( {
    		has: function( target ) {
    			var targets = jQuery( target, this ),
    				l = targets.length;

    			return this.filter( function() {
    				var i = 0;
    				for ( ; i < l; i++ ) {
    					if ( jQuery.contains( this, targets[ i ] ) ) {
    						return true;
    					}
    				}
    			} );
    		},

    		closest: function( selectors, context ) {
    			var cur,
    				i = 0,
    				l = this.length,
    				matched = [],
    				targets = typeof selectors !== "string" && jQuery( selectors );

    			// Positional selectors never match, since there's no _selection_ context
    			if ( !rneedsContext.test( selectors ) ) {
    				for ( ; i < l; i++ ) {
    					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

    						// Always skip document fragments
    						if ( cur.nodeType < 11 && ( targets ?
    							targets.index( cur ) > -1 :

    							// Don't pass non-elements to jQuery#find
    							cur.nodeType === 1 &&
    								jQuery.find.matchesSelector( cur, selectors ) ) ) {

    							matched.push( cur );
    							break;
    						}
    					}
    				}
    			}

    			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
    		},

    		// Determine the position of an element within the set
    		index: function( elem ) {

    			// No argument, return index in parent
    			if ( !elem ) {
    				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
    			}

    			// Index in selector
    			if ( typeof elem === "string" ) {
    				return indexOf.call( jQuery( elem ), this[ 0 ] );
    			}

    			// Locate the position of the desired element
    			return indexOf.call( this,

    				// If it receives a jQuery object, the first element is used
    				elem.jquery ? elem[ 0 ] : elem
    			);
    		},

    		add: function( selector, context ) {
    			return this.pushStack(
    				jQuery.uniqueSort(
    					jQuery.merge( this.get(), jQuery( selector, context ) )
    				)
    			);
    		},

    		addBack: function( selector ) {
    			return this.add( selector == null ?
    				this.prevObject : this.prevObject.filter( selector )
    			);
    		}
    	} );

    	function sibling( cur, dir ) {
    		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
    		return cur;
    	}

    	jQuery.each( {
    		parent: function( elem ) {
    			var parent = elem.parentNode;
    			return parent && parent.nodeType !== 11 ? parent : null;
    		},
    		parents: function( elem ) {
    			return dir( elem, "parentNode" );
    		},
    		parentsUntil: function( elem, _i, until ) {
    			return dir( elem, "parentNode", until );
    		},
    		next: function( elem ) {
    			return sibling( elem, "nextSibling" );
    		},
    		prev: function( elem ) {
    			return sibling( elem, "previousSibling" );
    		},
    		nextAll: function( elem ) {
    			return dir( elem, "nextSibling" );
    		},
    		prevAll: function( elem ) {
    			return dir( elem, "previousSibling" );
    		},
    		nextUntil: function( elem, _i, until ) {
    			return dir( elem, "nextSibling", until );
    		},
    		prevUntil: function( elem, _i, until ) {
    			return dir( elem, "previousSibling", until );
    		},
    		siblings: function( elem ) {
    			return siblings( ( elem.parentNode || {} ).firstChild, elem );
    		},
    		children: function( elem ) {
    			return siblings( elem.firstChild );
    		},
    		contents: function( elem ) {
    			if ( elem.contentDocument != null &&

    				// Support: IE 11+
    				// <object> elements with no `data` attribute has an object
    				// `contentDocument` with a `null` prototype.
    				getProto( elem.contentDocument ) ) {

    				return elem.contentDocument;
    			}

    			// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
    			// Treat the template element as a regular one in browsers that
    			// don't support it.
    			if ( nodeName( elem, "template" ) ) {
    				elem = elem.content || elem;
    			}

    			return jQuery.merge( [], elem.childNodes );
    		}
    	}, function( name, fn ) {
    		jQuery.fn[ name ] = function( until, selector ) {
    			var matched = jQuery.map( this, fn, until );

    			if ( name.slice( -5 ) !== "Until" ) {
    				selector = until;
    			}

    			if ( selector && typeof selector === "string" ) {
    				matched = jQuery.filter( selector, matched );
    			}

    			if ( this.length > 1 ) {

    				// Remove duplicates
    				if ( !guaranteedUnique[ name ] ) {
    					jQuery.uniqueSort( matched );
    				}

    				// Reverse order for parents* and prev-derivatives
    				if ( rparentsprev.test( name ) ) {
    					matched.reverse();
    				}
    			}

    			return this.pushStack( matched );
    		};
    	} );
    	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



    	// Convert String-formatted options into Object-formatted ones
    	function createOptions( options ) {
    		var object = {};
    		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
    			object[ flag ] = true;
    		} );
    		return object;
    	}

    	/*
    	 * Create a callback list using the following parameters:
    	 *
    	 *	options: an optional list of space-separated options that will change how
    	 *			the callback list behaves or a more traditional option object
    	 *
    	 * By default a callback list will act like an event callback list and can be
    	 * "fired" multiple times.
    	 *
    	 * Possible options:
    	 *
    	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
    	 *
    	 *	memory:			will keep track of previous values and will call any callback added
    	 *					after the list has been fired right away with the latest "memorized"
    	 *					values (like a Deferred)
    	 *
    	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
    	 *
    	 *	stopOnFalse:	interrupt callings when a callback returns false
    	 *
    	 */
    	jQuery.Callbacks = function( options ) {

    		// Convert options from String-formatted to Object-formatted if needed
    		// (we check in cache first)
    		options = typeof options === "string" ?
    			createOptions( options ) :
    			jQuery.extend( {}, options );

    		var // Flag to know if list is currently firing
    			firing,

    			// Last fire value for non-forgettable lists
    			memory,

    			// Flag to know if list was already fired
    			fired,

    			// Flag to prevent firing
    			locked,

    			// Actual callback list
    			list = [],

    			// Queue of execution data for repeatable lists
    			queue = [],

    			// Index of currently firing callback (modified by add/remove as needed)
    			firingIndex = -1,

    			// Fire callbacks
    			fire = function() {

    				// Enforce single-firing
    				locked = locked || options.once;

    				// Execute callbacks for all pending executions,
    				// respecting firingIndex overrides and runtime changes
    				fired = firing = true;
    				for ( ; queue.length; firingIndex = -1 ) {
    					memory = queue.shift();
    					while ( ++firingIndex < list.length ) {

    						// Run callback and check for early termination
    						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
    							options.stopOnFalse ) {

    							// Jump to end and forget the data so .add doesn't re-fire
    							firingIndex = list.length;
    							memory = false;
    						}
    					}
    				}

    				// Forget the data if we're done with it
    				if ( !options.memory ) {
    					memory = false;
    				}

    				firing = false;

    				// Clean up if we're done firing for good
    				if ( locked ) {

    					// Keep an empty list if we have data for future add calls
    					if ( memory ) {
    						list = [];

    					// Otherwise, this object is spent
    					} else {
    						list = "";
    					}
    				}
    			},

    			// Actual Callbacks object
    			self = {

    				// Add a callback or a collection of callbacks to the list
    				add: function() {
    					if ( list ) {

    						// If we have memory from a past run, we should fire after adding
    						if ( memory && !firing ) {
    							firingIndex = list.length - 1;
    							queue.push( memory );
    						}

    						( function add( args ) {
    							jQuery.each( args, function( _, arg ) {
    								if ( isFunction( arg ) ) {
    									if ( !options.unique || !self.has( arg ) ) {
    										list.push( arg );
    									}
    								} else if ( arg && arg.length && toType( arg ) !== "string" ) {

    									// Inspect recursively
    									add( arg );
    								}
    							} );
    						} )( arguments );

    						if ( memory && !firing ) {
    							fire();
    						}
    					}
    					return this;
    				},

    				// Remove a callback from the list
    				remove: function() {
    					jQuery.each( arguments, function( _, arg ) {
    						var index;
    						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
    							list.splice( index, 1 );

    							// Handle firing indexes
    							if ( index <= firingIndex ) {
    								firingIndex--;
    							}
    						}
    					} );
    					return this;
    				},

    				// Check if a given callback is in the list.
    				// If no argument is given, return whether or not list has callbacks attached.
    				has: function( fn ) {
    					return fn ?
    						jQuery.inArray( fn, list ) > -1 :
    						list.length > 0;
    				},

    				// Remove all callbacks from the list
    				empty: function() {
    					if ( list ) {
    						list = [];
    					}
    					return this;
    				},

    				// Disable .fire and .add
    				// Abort any current/pending executions
    				// Clear all callbacks and values
    				disable: function() {
    					locked = queue = [];
    					list = memory = "";
    					return this;
    				},
    				disabled: function() {
    					return !list;
    				},

    				// Disable .fire
    				// Also disable .add unless we have memory (since it would have no effect)
    				// Abort any pending executions
    				lock: function() {
    					locked = queue = [];
    					if ( !memory && !firing ) {
    						list = memory = "";
    					}
    					return this;
    				},
    				locked: function() {
    					return !!locked;
    				},

    				// Call all callbacks with the given context and arguments
    				fireWith: function( context, args ) {
    					if ( !locked ) {
    						args = args || [];
    						args = [ context, args.slice ? args.slice() : args ];
    						queue.push( args );
    						if ( !firing ) {
    							fire();
    						}
    					}
    					return this;
    				},

    				// Call all the callbacks with the given arguments
    				fire: function() {
    					self.fireWith( this, arguments );
    					return this;
    				},

    				// To know if the callbacks have already been called at least once
    				fired: function() {
    					return !!fired;
    				}
    			};

    		return self;
    	};


    	function Identity( v ) {
    		return v;
    	}
    	function Thrower( ex ) {
    		throw ex;
    	}

    	function adoptValue( value, resolve, reject, noValue ) {
    		var method;

    		try {

    			// Check for promise aspect first to privilege synchronous behavior
    			if ( value && isFunction( ( method = value.promise ) ) ) {
    				method.call( value ).done( resolve ).fail( reject );

    			// Other thenables
    			} else if ( value && isFunction( ( method = value.then ) ) ) {
    				method.call( value, resolve, reject );

    			// Other non-thenables
    			} else {

    				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
    				// * false: [ value ].slice( 0 ) => resolve( value )
    				// * true: [ value ].slice( 1 ) => resolve()
    				resolve.apply( undefined, [ value ].slice( noValue ) );
    			}

    		// For Promises/A+, convert exceptions into rejections
    		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
    		// Deferred#then to conditionally suppress rejection.
    		} catch ( value ) {

    			// Support: Android 4.0 only
    			// Strict mode functions invoked without .call/.apply get global-object context
    			reject.apply( undefined, [ value ] );
    		}
    	}

    	jQuery.extend( {

    		Deferred: function( func ) {
    			var tuples = [

    					// action, add listener, callbacks,
    					// ... .then handlers, argument index, [final state]
    					[ "notify", "progress", jQuery.Callbacks( "memory" ),
    						jQuery.Callbacks( "memory" ), 2 ],
    					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
    						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
    					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
    						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
    				],
    				state = "pending",
    				promise = {
    					state: function() {
    						return state;
    					},
    					always: function() {
    						deferred.done( arguments ).fail( arguments );
    						return this;
    					},
    					"catch": function( fn ) {
    						return promise.then( null, fn );
    					},

    					// Keep pipe for back-compat
    					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
    						var fns = arguments;

    						return jQuery.Deferred( function( newDefer ) {
    							jQuery.each( tuples, function( _i, tuple ) {

    								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
    								var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

    								// deferred.progress(function() { bind to newDefer or newDefer.notify })
    								// deferred.done(function() { bind to newDefer or newDefer.resolve })
    								// deferred.fail(function() { bind to newDefer or newDefer.reject })
    								deferred[ tuple[ 1 ] ]( function() {
    									var returned = fn && fn.apply( this, arguments );
    									if ( returned && isFunction( returned.promise ) ) {
    										returned.promise()
    											.progress( newDefer.notify )
    											.done( newDefer.resolve )
    											.fail( newDefer.reject );
    									} else {
    										newDefer[ tuple[ 0 ] + "With" ](
    											this,
    											fn ? [ returned ] : arguments
    										);
    									}
    								} );
    							} );
    							fns = null;
    						} ).promise();
    					},
    					then: function( onFulfilled, onRejected, onProgress ) {
    						var maxDepth = 0;
    						function resolve( depth, deferred, handler, special ) {
    							return function() {
    								var that = this,
    									args = arguments,
    									mightThrow = function() {
    										var returned, then;

    										// Support: Promises/A+ section 2.3.3.3.3
    										// https://promisesaplus.com/#point-59
    										// Ignore double-resolution attempts
    										if ( depth < maxDepth ) {
    											return;
    										}

    										returned = handler.apply( that, args );

    										// Support: Promises/A+ section 2.3.1
    										// https://promisesaplus.com/#point-48
    										if ( returned === deferred.promise() ) {
    											throw new TypeError( "Thenable self-resolution" );
    										}

    										// Support: Promises/A+ sections 2.3.3.1, 3.5
    										// https://promisesaplus.com/#point-54
    										// https://promisesaplus.com/#point-75
    										// Retrieve `then` only once
    										then = returned &&

    											// Support: Promises/A+ section 2.3.4
    											// https://promisesaplus.com/#point-64
    											// Only check objects and functions for thenability
    											( typeof returned === "object" ||
    												typeof returned === "function" ) &&
    											returned.then;

    										// Handle a returned thenable
    										if ( isFunction( then ) ) {

    											// Special processors (notify) just wait for resolution
    											if ( special ) {
    												then.call(
    													returned,
    													resolve( maxDepth, deferred, Identity, special ),
    													resolve( maxDepth, deferred, Thrower, special )
    												);

    											// Normal processors (resolve) also hook into progress
    											} else {

    												// ...and disregard older resolution values
    												maxDepth++;

    												then.call(
    													returned,
    													resolve( maxDepth, deferred, Identity, special ),
    													resolve( maxDepth, deferred, Thrower, special ),
    													resolve( maxDepth, deferred, Identity,
    														deferred.notifyWith )
    												);
    											}

    										// Handle all other returned values
    										} else {

    											// Only substitute handlers pass on context
    											// and multiple values (non-spec behavior)
    											if ( handler !== Identity ) {
    												that = undefined;
    												args = [ returned ];
    											}

    											// Process the value(s)
    											// Default process is resolve
    											( special || deferred.resolveWith )( that, args );
    										}
    									},

    									// Only normal processors (resolve) catch and reject exceptions
    									process = special ?
    										mightThrow :
    										function() {
    											try {
    												mightThrow();
    											} catch ( e ) {

    												if ( jQuery.Deferred.exceptionHook ) {
    													jQuery.Deferred.exceptionHook( e,
    														process.error );
    												}

    												// Support: Promises/A+ section 2.3.3.3.4.1
    												// https://promisesaplus.com/#point-61
    												// Ignore post-resolution exceptions
    												if ( depth + 1 >= maxDepth ) {

    													// Only substitute handlers pass on context
    													// and multiple values (non-spec behavior)
    													if ( handler !== Thrower ) {
    														that = undefined;
    														args = [ e ];
    													}

    													deferred.rejectWith( that, args );
    												}
    											}
    										};

    								// Support: Promises/A+ section 2.3.3.3.1
    								// https://promisesaplus.com/#point-57
    								// Re-resolve promises immediately to dodge false rejection from
    								// subsequent errors
    								if ( depth ) {
    									process();
    								} else {

    									// Call an optional hook to record the error, in case of exception
    									// since it's otherwise lost when execution goes async
    									if ( jQuery.Deferred.getErrorHook ) {
    										process.error = jQuery.Deferred.getErrorHook();

    									// The deprecated alias of the above. While the name suggests
    									// returning the stack, not an error instance, jQuery just passes
    									// it directly to `console.warn` so both will work; an instance
    									// just better cooperates with source maps.
    									} else if ( jQuery.Deferred.getStackHook ) {
    										process.error = jQuery.Deferred.getStackHook();
    									}
    									window.setTimeout( process );
    								}
    							};
    						}

    						return jQuery.Deferred( function( newDefer ) {

    							// progress_handlers.add( ... )
    							tuples[ 0 ][ 3 ].add(
    								resolve(
    									0,
    									newDefer,
    									isFunction( onProgress ) ?
    										onProgress :
    										Identity,
    									newDefer.notifyWith
    								)
    							);

    							// fulfilled_handlers.add( ... )
    							tuples[ 1 ][ 3 ].add(
    								resolve(
    									0,
    									newDefer,
    									isFunction( onFulfilled ) ?
    										onFulfilled :
    										Identity
    								)
    							);

    							// rejected_handlers.add( ... )
    							tuples[ 2 ][ 3 ].add(
    								resolve(
    									0,
    									newDefer,
    									isFunction( onRejected ) ?
    										onRejected :
    										Thrower
    								)
    							);
    						} ).promise();
    					},

    					// Get a promise for this deferred
    					// If obj is provided, the promise aspect is added to the object
    					promise: function( obj ) {
    						return obj != null ? jQuery.extend( obj, promise ) : promise;
    					}
    				},
    				deferred = {};

    			// Add list-specific methods
    			jQuery.each( tuples, function( i, tuple ) {
    				var list = tuple[ 2 ],
    					stateString = tuple[ 5 ];

    				// promise.progress = list.add
    				// promise.done = list.add
    				// promise.fail = list.add
    				promise[ tuple[ 1 ] ] = list.add;

    				// Handle state
    				if ( stateString ) {
    					list.add(
    						function() {

    							// state = "resolved" (i.e., fulfilled)
    							// state = "rejected"
    							state = stateString;
    						},

    						// rejected_callbacks.disable
    						// fulfilled_callbacks.disable
    						tuples[ 3 - i ][ 2 ].disable,

    						// rejected_handlers.disable
    						// fulfilled_handlers.disable
    						tuples[ 3 - i ][ 3 ].disable,

    						// progress_callbacks.lock
    						tuples[ 0 ][ 2 ].lock,

    						// progress_handlers.lock
    						tuples[ 0 ][ 3 ].lock
    					);
    				}

    				// progress_handlers.fire
    				// fulfilled_handlers.fire
    				// rejected_handlers.fire
    				list.add( tuple[ 3 ].fire );

    				// deferred.notify = function() { deferred.notifyWith(...) }
    				// deferred.resolve = function() { deferred.resolveWith(...) }
    				// deferred.reject = function() { deferred.rejectWith(...) }
    				deferred[ tuple[ 0 ] ] = function() {
    					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
    					return this;
    				};

    				// deferred.notifyWith = list.fireWith
    				// deferred.resolveWith = list.fireWith
    				// deferred.rejectWith = list.fireWith
    				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
    			} );

    			// Make the deferred a promise
    			promise.promise( deferred );

    			// Call given func if any
    			if ( func ) {
    				func.call( deferred, deferred );
    			}

    			// All done!
    			return deferred;
    		},

    		// Deferred helper
    		when: function( singleValue ) {
    			var

    				// count of uncompleted subordinates
    				remaining = arguments.length,

    				// count of unprocessed arguments
    				i = remaining,

    				// subordinate fulfillment data
    				resolveContexts = Array( i ),
    				resolveValues = slice.call( arguments ),

    				// the primary Deferred
    				primary = jQuery.Deferred(),

    				// subordinate callback factory
    				updateFunc = function( i ) {
    					return function( value ) {
    						resolveContexts[ i ] = this;
    						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
    						if ( !( --remaining ) ) {
    							primary.resolveWith( resolveContexts, resolveValues );
    						}
    					};
    				};

    			// Single- and empty arguments are adopted like Promise.resolve
    			if ( remaining <= 1 ) {
    				adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
    					!remaining );

    				// Use .then() to unwrap secondary thenables (cf. gh-3000)
    				if ( primary.state() === "pending" ||
    					isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

    					return primary.then();
    				}
    			}

    			// Multiple arguments are aggregated like Promise.all array elements
    			while ( i-- ) {
    				adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
    			}

    			return primary.promise();
    		}
    	} );


    	// These usually indicate a programmer mistake during development,
    	// warn about them ASAP rather than swallowing them by default.
    	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

    	// If `jQuery.Deferred.getErrorHook` is defined, `asyncError` is an error
    	// captured before the async barrier to get the original error cause
    	// which may otherwise be hidden.
    	jQuery.Deferred.exceptionHook = function( error, asyncError ) {

    		// Support: IE 8 - 9 only
    		// Console exists when dev tools are open, which can happen at any time
    		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
    			window.console.warn( "jQuery.Deferred exception: " + error.message,
    				error.stack, asyncError );
    		}
    	};




    	jQuery.readyException = function( error ) {
    		window.setTimeout( function() {
    			throw error;
    		} );
    	};




    	// The deferred used on DOM ready
    	var readyList = jQuery.Deferred();

    	jQuery.fn.ready = function( fn ) {

    		readyList
    			.then( fn )

    			// Wrap jQuery.readyException in a function so that the lookup
    			// happens at the time of error handling instead of callback
    			// registration.
    			.catch( function( error ) {
    				jQuery.readyException( error );
    			} );

    		return this;
    	};

    	jQuery.extend( {

    		// Is the DOM ready to be used? Set to true once it occurs.
    		isReady: false,

    		// A counter to track how many items to wait for before
    		// the ready event fires. See trac-6781
    		readyWait: 1,

    		// Handle when the DOM is ready
    		ready: function( wait ) {

    			// Abort if there are pending holds or we're already ready
    			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
    				return;
    			}

    			// Remember that the DOM is ready
    			jQuery.isReady = true;

    			// If a normal DOM Ready event fired, decrement, and wait if need be
    			if ( wait !== true && --jQuery.readyWait > 0 ) {
    				return;
    			}

    			// If there are functions bound, to execute
    			readyList.resolveWith( document, [ jQuery ] );
    		}
    	} );

    	jQuery.ready.then = readyList.then;

    	// The ready event handler and self cleanup method
    	function completed() {
    		document.removeEventListener( "DOMContentLoaded", completed );
    		window.removeEventListener( "load", completed );
    		jQuery.ready();
    	}

    	// Catch cases where $(document).ready() is called
    	// after the browser event has already occurred.
    	// Support: IE <=9 - 10 only
    	// Older IE sometimes signals "interactive" too soon
    	if ( document.readyState === "complete" ||
    		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

    		// Handle it asynchronously to allow scripts the opportunity to delay ready
    		window.setTimeout( jQuery.ready );

    	} else {

    		// Use the handy event callback
    		document.addEventListener( "DOMContentLoaded", completed );

    		// A fallback to window.onload, that will always work
    		window.addEventListener( "load", completed );
    	}




    	// Multifunctional method to get and set values of a collection
    	// The value/s can optionally be executed if it's a function
    	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
    		var i = 0,
    			len = elems.length,
    			bulk = key == null;

    		// Sets many values
    		if ( toType( key ) === "object" ) {
    			chainable = true;
    			for ( i in key ) {
    				access( elems, fn, i, key[ i ], true, emptyGet, raw );
    			}

    		// Sets one value
    		} else if ( value !== undefined ) {
    			chainable = true;

    			if ( !isFunction( value ) ) {
    				raw = true;
    			}

    			if ( bulk ) {

    				// Bulk operations run against the entire set
    				if ( raw ) {
    					fn.call( elems, value );
    					fn = null;

    				// ...except when executing function values
    				} else {
    					bulk = fn;
    					fn = function( elem, _key, value ) {
    						return bulk.call( jQuery( elem ), value );
    					};
    				}
    			}

    			if ( fn ) {
    				for ( ; i < len; i++ ) {
    					fn(
    						elems[ i ], key, raw ?
    							value :
    							value.call( elems[ i ], i, fn( elems[ i ], key ) )
    					);
    				}
    			}
    		}

    		if ( chainable ) {
    			return elems;
    		}

    		// Gets
    		if ( bulk ) {
    			return fn.call( elems );
    		}

    		return len ? fn( elems[ 0 ], key ) : emptyGet;
    	};


    	// Matches dashed string for camelizing
    	var rmsPrefix = /^-ms-/,
    		rdashAlpha = /-([a-z])/g;

    	// Used by camelCase as callback to replace()
    	function fcamelCase( _all, letter ) {
    		return letter.toUpperCase();
    	}

    	// Convert dashed to camelCase; used by the css and data modules
    	// Support: IE <=9 - 11, Edge 12 - 15
    	// Microsoft forgot to hump their vendor prefix (trac-9572)
    	function camelCase( string ) {
    		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
    	}
    	var acceptData = function( owner ) {

    		// Accepts only:
    		//  - Node
    		//    - Node.ELEMENT_NODE
    		//    - Node.DOCUMENT_NODE
    		//  - Object
    		//    - Any
    		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
    	};




    	function Data() {
    		this.expando = jQuery.expando + Data.uid++;
    	}

    	Data.uid = 1;

    	Data.prototype = {

    		cache: function( owner ) {

    			// Check if the owner object already has a cache
    			var value = owner[ this.expando ];

    			// If not, create one
    			if ( !value ) {
    				value = {};

    				// We can accept data for non-element nodes in modern browsers,
    				// but we should not, see trac-8335.
    				// Always return an empty object.
    				if ( acceptData( owner ) ) {

    					// If it is a node unlikely to be stringify-ed or looped over
    					// use plain assignment
    					if ( owner.nodeType ) {
    						owner[ this.expando ] = value;

    					// Otherwise secure it in a non-enumerable property
    					// configurable must be true to allow the property to be
    					// deleted when data is removed
    					} else {
    						Object.defineProperty( owner, this.expando, {
    							value: value,
    							configurable: true
    						} );
    					}
    				}
    			}

    			return value;
    		},
    		set: function( owner, data, value ) {
    			var prop,
    				cache = this.cache( owner );

    			// Handle: [ owner, key, value ] args
    			// Always use camelCase key (gh-2257)
    			if ( typeof data === "string" ) {
    				cache[ camelCase( data ) ] = value;

    			// Handle: [ owner, { properties } ] args
    			} else {

    				// Copy the properties one-by-one to the cache object
    				for ( prop in data ) {
    					cache[ camelCase( prop ) ] = data[ prop ];
    				}
    			}
    			return cache;
    		},
    		get: function( owner, key ) {
    			return key === undefined ?
    				this.cache( owner ) :

    				// Always use camelCase key (gh-2257)
    				owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
    		},
    		access: function( owner, key, value ) {

    			// In cases where either:
    			//
    			//   1. No key was specified
    			//   2. A string key was specified, but no value provided
    			//
    			// Take the "read" path and allow the get method to determine
    			// which value to return, respectively either:
    			//
    			//   1. The entire cache object
    			//   2. The data stored at the key
    			//
    			if ( key === undefined ||
    					( ( key && typeof key === "string" ) && value === undefined ) ) {

    				return this.get( owner, key );
    			}

    			// When the key is not a string, or both a key and value
    			// are specified, set or extend (existing objects) with either:
    			//
    			//   1. An object of properties
    			//   2. A key and value
    			//
    			this.set( owner, key, value );

    			// Since the "set" path can have two possible entry points
    			// return the expected data based on which path was taken[*]
    			return value !== undefined ? value : key;
    		},
    		remove: function( owner, key ) {
    			var i,
    				cache = owner[ this.expando ];

    			if ( cache === undefined ) {
    				return;
    			}

    			if ( key !== undefined ) {

    				// Support array or space separated string of keys
    				if ( Array.isArray( key ) ) {

    					// If key is an array of keys...
    					// We always set camelCase keys, so remove that.
    					key = key.map( camelCase );
    				} else {
    					key = camelCase( key );

    					// If a key with the spaces exists, use it.
    					// Otherwise, create an array by matching non-whitespace
    					key = key in cache ?
    						[ key ] :
    						( key.match( rnothtmlwhite ) || [] );
    				}

    				i = key.length;

    				while ( i-- ) {
    					delete cache[ key[ i ] ];
    				}
    			}

    			// Remove the expando if there's no more data
    			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

    				// Support: Chrome <=35 - 45
    				// Webkit & Blink performance suffers when deleting properties
    				// from DOM nodes, so set to undefined instead
    				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
    				if ( owner.nodeType ) {
    					owner[ this.expando ] = undefined;
    				} else {
    					delete owner[ this.expando ];
    				}
    			}
    		},
    		hasData: function( owner ) {
    			var cache = owner[ this.expando ];
    			return cache !== undefined && !jQuery.isEmptyObject( cache );
    		}
    	};
    	var dataPriv = new Data();

    	var dataUser = new Data();



    	//	Implementation Summary
    	//
    	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
    	//	2. Improve the module's maintainability by reducing the storage
    	//		paths to a single mechanism.
    	//	3. Use the same single mechanism to support "private" and "user" data.
    	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
    	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
    	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

    	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    		rmultiDash = /[A-Z]/g;

    	function getData( data ) {
    		if ( data === "true" ) {
    			return true;
    		}

    		if ( data === "false" ) {
    			return false;
    		}

    		if ( data === "null" ) {
    			return null;
    		}

    		// Only convert to a number if it doesn't change the string
    		if ( data === +data + "" ) {
    			return +data;
    		}

    		if ( rbrace.test( data ) ) {
    			return JSON.parse( data );
    		}

    		return data;
    	}

    	function dataAttr( elem, key, data ) {
    		var name;

    		// If nothing was found internally, try to fetch any
    		// data from the HTML5 data-* attribute
    		if ( data === undefined && elem.nodeType === 1 ) {
    			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
    			data = elem.getAttribute( name );

    			if ( typeof data === "string" ) {
    				try {
    					data = getData( data );
    				} catch ( e ) {}

    				// Make sure we set the data so it isn't changed later
    				dataUser.set( elem, key, data );
    			} else {
    				data = undefined;
    			}
    		}
    		return data;
    	}

    	jQuery.extend( {
    		hasData: function( elem ) {
    			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
    		},

    		data: function( elem, name, data ) {
    			return dataUser.access( elem, name, data );
    		},

    		removeData: function( elem, name ) {
    			dataUser.remove( elem, name );
    		},

    		// TODO: Now that all calls to _data and _removeData have been replaced
    		// with direct calls to dataPriv methods, these can be deprecated.
    		_data: function( elem, name, data ) {
    			return dataPriv.access( elem, name, data );
    		},

    		_removeData: function( elem, name ) {
    			dataPriv.remove( elem, name );
    		}
    	} );

    	jQuery.fn.extend( {
    		data: function( key, value ) {
    			var i, name, data,
    				elem = this[ 0 ],
    				attrs = elem && elem.attributes;

    			// Gets all values
    			if ( key === undefined ) {
    				if ( this.length ) {
    					data = dataUser.get( elem );

    					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
    						i = attrs.length;
    						while ( i-- ) {

    							// Support: IE 11 only
    							// The attrs elements can be null (trac-14894)
    							if ( attrs[ i ] ) {
    								name = attrs[ i ].name;
    								if ( name.indexOf( "data-" ) === 0 ) {
    									name = camelCase( name.slice( 5 ) );
    									dataAttr( elem, name, data[ name ] );
    								}
    							}
    						}
    						dataPriv.set( elem, "hasDataAttrs", true );
    					}
    				}

    				return data;
    			}

    			// Sets multiple values
    			if ( typeof key === "object" ) {
    				return this.each( function() {
    					dataUser.set( this, key );
    				} );
    			}

    			return access( this, function( value ) {
    				var data;

    				// The calling jQuery object (element matches) is not empty
    				// (and therefore has an element appears at this[ 0 ]) and the
    				// `value` parameter was not undefined. An empty jQuery object
    				// will result in `undefined` for elem = this[ 0 ] which will
    				// throw an exception if an attempt to read a data cache is made.
    				if ( elem && value === undefined ) {

    					// Attempt to get data from the cache
    					// The key will always be camelCased in Data
    					data = dataUser.get( elem, key );
    					if ( data !== undefined ) {
    						return data;
    					}

    					// Attempt to "discover" the data in
    					// HTML5 custom data-* attrs
    					data = dataAttr( elem, key );
    					if ( data !== undefined ) {
    						return data;
    					}

    					// We tried really hard, but the data doesn't exist.
    					return;
    				}

    				// Set the data...
    				this.each( function() {

    					// We always store the camelCased key
    					dataUser.set( this, key, value );
    				} );
    			}, null, value, arguments.length > 1, null, true );
    		},

    		removeData: function( key ) {
    			return this.each( function() {
    				dataUser.remove( this, key );
    			} );
    		}
    	} );


    	jQuery.extend( {
    		queue: function( elem, type, data ) {
    			var queue;

    			if ( elem ) {
    				type = ( type || "fx" ) + "queue";
    				queue = dataPriv.get( elem, type );

    				// Speed up dequeue by getting out quickly if this is just a lookup
    				if ( data ) {
    					if ( !queue || Array.isArray( data ) ) {
    						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
    					} else {
    						queue.push( data );
    					}
    				}
    				return queue || [];
    			}
    		},

    		dequeue: function( elem, type ) {
    			type = type || "fx";

    			var queue = jQuery.queue( elem, type ),
    				startLength = queue.length,
    				fn = queue.shift(),
    				hooks = jQuery._queueHooks( elem, type ),
    				next = function() {
    					jQuery.dequeue( elem, type );
    				};

    			// If the fx queue is dequeued, always remove the progress sentinel
    			if ( fn === "inprogress" ) {
    				fn = queue.shift();
    				startLength--;
    			}

    			if ( fn ) {

    				// Add a progress sentinel to prevent the fx queue from being
    				// automatically dequeued
    				if ( type === "fx" ) {
    					queue.unshift( "inprogress" );
    				}

    				// Clear up the last queue stop function
    				delete hooks.stop;
    				fn.call( elem, next, hooks );
    			}

    			if ( !startLength && hooks ) {
    				hooks.empty.fire();
    			}
    		},

    		// Not public - generate a queueHooks object, or return the current one
    		_queueHooks: function( elem, type ) {
    			var key = type + "queueHooks";
    			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
    				empty: jQuery.Callbacks( "once memory" ).add( function() {
    					dataPriv.remove( elem, [ type + "queue", key ] );
    				} )
    			} );
    		}
    	} );

    	jQuery.fn.extend( {
    		queue: function( type, data ) {
    			var setter = 2;

    			if ( typeof type !== "string" ) {
    				data = type;
    				type = "fx";
    				setter--;
    			}

    			if ( arguments.length < setter ) {
    				return jQuery.queue( this[ 0 ], type );
    			}

    			return data === undefined ?
    				this :
    				this.each( function() {
    					var queue = jQuery.queue( this, type, data );

    					// Ensure a hooks for this queue
    					jQuery._queueHooks( this, type );

    					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
    						jQuery.dequeue( this, type );
    					}
    				} );
    		},
    		dequeue: function( type ) {
    			return this.each( function() {
    				jQuery.dequeue( this, type );
    			} );
    		},
    		clearQueue: function( type ) {
    			return this.queue( type || "fx", [] );
    		},

    		// Get a promise resolved when queues of a certain type
    		// are emptied (fx is the type by default)
    		promise: function( type, obj ) {
    			var tmp,
    				count = 1,
    				defer = jQuery.Deferred(),
    				elements = this,
    				i = this.length,
    				resolve = function() {
    					if ( !( --count ) ) {
    						defer.resolveWith( elements, [ elements ] );
    					}
    				};

    			if ( typeof type !== "string" ) {
    				obj = type;
    				type = undefined;
    			}
    			type = type || "fx";

    			while ( i-- ) {
    				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
    				if ( tmp && tmp.empty ) {
    					count++;
    					tmp.empty.add( resolve );
    				}
    			}
    			resolve();
    			return defer.promise( obj );
    		}
    	} );
    	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

    	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


    	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

    	var documentElement = document.documentElement;



    		var isAttached = function( elem ) {
    				return jQuery.contains( elem.ownerDocument, elem );
    			},
    			composed = { composed: true };

    		// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
    		// Check attachment across shadow DOM boundaries when possible (gh-3504)
    		// Support: iOS 10.0-10.2 only
    		// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
    		// leading to errors. We need to check for `getRootNode`.
    		if ( documentElement.getRootNode ) {
    			isAttached = function( elem ) {
    				return jQuery.contains( elem.ownerDocument, elem ) ||
    					elem.getRootNode( composed ) === elem.ownerDocument;
    			};
    		}
    	var isHiddenWithinTree = function( elem, el ) {

    			// isHiddenWithinTree might be called from jQuery#filter function;
    			// in that case, element will be second argument
    			elem = el || elem;

    			// Inline style trumps all
    			return elem.style.display === "none" ||
    				elem.style.display === "" &&

    				// Otherwise, check computed style
    				// Support: Firefox <=43 - 45
    				// Disconnected elements can have computed display: none, so first confirm that elem is
    				// in the document.
    				isAttached( elem ) &&

    				jQuery.css( elem, "display" ) === "none";
    		};



    	function adjustCSS( elem, prop, valueParts, tween ) {
    		var adjusted, scale,
    			maxIterations = 20,
    			currentValue = tween ?
    				function() {
    					return tween.cur();
    				} :
    				function() {
    					return jQuery.css( elem, prop, "" );
    				},
    			initial = currentValue(),
    			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

    			// Starting value computation is required for potential unit mismatches
    			initialInUnit = elem.nodeType &&
    				( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
    				rcssNum.exec( jQuery.css( elem, prop ) );

    		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

    			// Support: Firefox <=54
    			// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
    			initial = initial / 2;

    			// Trust units reported by jQuery.css
    			unit = unit || initialInUnit[ 3 ];

    			// Iteratively approximate from a nonzero starting point
    			initialInUnit = +initial || 1;

    			while ( maxIterations-- ) {

    				// Evaluate and update our best guess (doubling guesses that zero out).
    				// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
    				jQuery.style( elem, prop, initialInUnit + unit );
    				if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
    					maxIterations = 0;
    				}
    				initialInUnit = initialInUnit / scale;

    			}

    			initialInUnit = initialInUnit * 2;
    			jQuery.style( elem, prop, initialInUnit + unit );

    			// Make sure we update the tween properties later on
    			valueParts = valueParts || [];
    		}

    		if ( valueParts ) {
    			initialInUnit = +initialInUnit || +initial || 0;

    			// Apply relative offset (+=/-=) if specified
    			adjusted = valueParts[ 1 ] ?
    				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
    				+valueParts[ 2 ];
    			if ( tween ) {
    				tween.unit = unit;
    				tween.start = initialInUnit;
    				tween.end = adjusted;
    			}
    		}
    		return adjusted;
    	}


    	var defaultDisplayMap = {};

    	function getDefaultDisplay( elem ) {
    		var temp,
    			doc = elem.ownerDocument,
    			nodeName = elem.nodeName,
    			display = defaultDisplayMap[ nodeName ];

    		if ( display ) {
    			return display;
    		}

    		temp = doc.body.appendChild( doc.createElement( nodeName ) );
    		display = jQuery.css( temp, "display" );

    		temp.parentNode.removeChild( temp );

    		if ( display === "none" ) {
    			display = "block";
    		}
    		defaultDisplayMap[ nodeName ] = display;

    		return display;
    	}

    	function showHide( elements, show ) {
    		var display, elem,
    			values = [],
    			index = 0,
    			length = elements.length;

    		// Determine new display value for elements that need to change
    		for ( ; index < length; index++ ) {
    			elem = elements[ index ];
    			if ( !elem.style ) {
    				continue;
    			}

    			display = elem.style.display;
    			if ( show ) {

    				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
    				// check is required in this first loop unless we have a nonempty display value (either
    				// inline or about-to-be-restored)
    				if ( display === "none" ) {
    					values[ index ] = dataPriv.get( elem, "display" ) || null;
    					if ( !values[ index ] ) {
    						elem.style.display = "";
    					}
    				}
    				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
    					values[ index ] = getDefaultDisplay( elem );
    				}
    			} else {
    				if ( display !== "none" ) {
    					values[ index ] = "none";

    					// Remember what we're overwriting
    					dataPriv.set( elem, "display", display );
    				}
    			}
    		}

    		// Set the display of the elements in a second loop to avoid constant reflow
    		for ( index = 0; index < length; index++ ) {
    			if ( values[ index ] != null ) {
    				elements[ index ].style.display = values[ index ];
    			}
    		}

    		return elements;
    	}

    	jQuery.fn.extend( {
    		show: function() {
    			return showHide( this, true );
    		},
    		hide: function() {
    			return showHide( this );
    		},
    		toggle: function( state ) {
    			if ( typeof state === "boolean" ) {
    				return state ? this.show() : this.hide();
    			}

    			return this.each( function() {
    				if ( isHiddenWithinTree( this ) ) {
    					jQuery( this ).show();
    				} else {
    					jQuery( this ).hide();
    				}
    			} );
    		}
    	} );
    	var rcheckableType = ( /^(?:checkbox|radio)$/i );

    	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

    	var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



    	( function() {
    		var fragment = document.createDocumentFragment(),
    			div = fragment.appendChild( document.createElement( "div" ) ),
    			input = document.createElement( "input" );

    		// Support: Android 4.0 - 4.3 only
    		// Check state lost if the name is set (trac-11217)
    		// Support: Windows Web Apps (WWA)
    		// `name` and `type` must use .setAttribute for WWA (trac-14901)
    		input.setAttribute( "type", "radio" );
    		input.setAttribute( "checked", "checked" );
    		input.setAttribute( "name", "t" );

    		div.appendChild( input );

    		// Support: Android <=4.1 only
    		// Older WebKit doesn't clone checked state correctly in fragments
    		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

    		// Support: IE <=11 only
    		// Make sure textarea (and checkbox) defaultValue is properly cloned
    		div.innerHTML = "<textarea>x</textarea>";
    		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

    		// Support: IE <=9 only
    		// IE <=9 replaces <option> tags with their contents when inserted outside of
    		// the select element.
    		div.innerHTML = "<option></option>";
    		support.option = !!div.lastChild;
    	} )();


    	// We have to close these tags to support XHTML (trac-13200)
    	var wrapMap = {

    		// XHTML parsers do not magically insert elements in the
    		// same way that tag soup parsers do. So we cannot shorten
    		// this by omitting <tbody> or other required elements.
    		thead: [ 1, "<table>", "</table>" ],
    		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
    		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
    		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

    		_default: [ 0, "", "" ]
    	};

    	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    	wrapMap.th = wrapMap.td;

    	// Support: IE <=9 only
    	if ( !support.option ) {
    		wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
    	}


    	function getAll( context, tag ) {

    		// Support: IE <=9 - 11 only
    		// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
    		var ret;

    		if ( typeof context.getElementsByTagName !== "undefined" ) {
    			ret = context.getElementsByTagName( tag || "*" );

    		} else if ( typeof context.querySelectorAll !== "undefined" ) {
    			ret = context.querySelectorAll( tag || "*" );

    		} else {
    			ret = [];
    		}

    		if ( tag === undefined || tag && nodeName( context, tag ) ) {
    			return jQuery.merge( [ context ], ret );
    		}

    		return ret;
    	}


    	// Mark scripts as having already been evaluated
    	function setGlobalEval( elems, refElements ) {
    		var i = 0,
    			l = elems.length;

    		for ( ; i < l; i++ ) {
    			dataPriv.set(
    				elems[ i ],
    				"globalEval",
    				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
    			);
    		}
    	}


    	var rhtml = /<|&#?\w+;/;

    	function buildFragment( elems, context, scripts, selection, ignored ) {
    		var elem, tmp, tag, wrap, attached, j,
    			fragment = context.createDocumentFragment(),
    			nodes = [],
    			i = 0,
    			l = elems.length;

    		for ( ; i < l; i++ ) {
    			elem = elems[ i ];

    			if ( elem || elem === 0 ) {

    				// Add nodes directly
    				if ( toType( elem ) === "object" ) {

    					// Support: Android <=4.0 only, PhantomJS 1 only
    					// push.apply(_, arraylike) throws on ancient WebKit
    					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

    				// Convert non-html into a text node
    				} else if ( !rhtml.test( elem ) ) {
    					nodes.push( context.createTextNode( elem ) );

    				// Convert html into DOM nodes
    				} else {
    					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

    					// Deserialize a standard representation
    					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
    					wrap = wrapMap[ tag ] || wrapMap._default;
    					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

    					// Descend through wrappers to the right content
    					j = wrap[ 0 ];
    					while ( j-- ) {
    						tmp = tmp.lastChild;
    					}

    					// Support: Android <=4.0 only, PhantomJS 1 only
    					// push.apply(_, arraylike) throws on ancient WebKit
    					jQuery.merge( nodes, tmp.childNodes );

    					// Remember the top-level container
    					tmp = fragment.firstChild;

    					// Ensure the created nodes are orphaned (trac-12392)
    					tmp.textContent = "";
    				}
    			}
    		}

    		// Remove wrapper from fragment
    		fragment.textContent = "";

    		i = 0;
    		while ( ( elem = nodes[ i++ ] ) ) {

    			// Skip elements already in the context collection (trac-4087)
    			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
    				if ( ignored ) {
    					ignored.push( elem );
    				}
    				continue;
    			}

    			attached = isAttached( elem );

    			// Append to fragment
    			tmp = getAll( fragment.appendChild( elem ), "script" );

    			// Preserve script evaluation history
    			if ( attached ) {
    				setGlobalEval( tmp );
    			}

    			// Capture executables
    			if ( scripts ) {
    				j = 0;
    				while ( ( elem = tmp[ j++ ] ) ) {
    					if ( rscriptType.test( elem.type || "" ) ) {
    						scripts.push( elem );
    					}
    				}
    			}
    		}

    		return fragment;
    	}


    	var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

    	function returnTrue() {
    		return true;
    	}

    	function returnFalse() {
    		return false;
    	}

    	function on( elem, types, selector, data, fn, one ) {
    		var origFn, type;

    		// Types can be a map of types/handlers
    		if ( typeof types === "object" ) {

    			// ( types-Object, selector, data )
    			if ( typeof selector !== "string" ) {

    				// ( types-Object, data )
    				data = data || selector;
    				selector = undefined;
    			}
    			for ( type in types ) {
    				on( elem, type, selector, data, types[ type ], one );
    			}
    			return elem;
    		}

    		if ( data == null && fn == null ) {

    			// ( types, fn )
    			fn = selector;
    			data = selector = undefined;
    		} else if ( fn == null ) {
    			if ( typeof selector === "string" ) {

    				// ( types, selector, fn )
    				fn = data;
    				data = undefined;
    			} else {

    				// ( types, data, fn )
    				fn = data;
    				data = selector;
    				selector = undefined;
    			}
    		}
    		if ( fn === false ) {
    			fn = returnFalse;
    		} else if ( !fn ) {
    			return elem;
    		}

    		if ( one === 1 ) {
    			origFn = fn;
    			fn = function( event ) {

    				// Can use an empty set, since event contains the info
    				jQuery().off( event );
    				return origFn.apply( this, arguments );
    			};

    			// Use same guid so caller can remove using origFn
    			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
    		}
    		return elem.each( function() {
    			jQuery.event.add( this, types, fn, data, selector );
    		} );
    	}

    	/*
    	 * Helper functions for managing events -- not part of the public interface.
    	 * Props to Dean Edwards' addEvent library for many of the ideas.
    	 */
    	jQuery.event = {

    		global: {},

    		add: function( elem, types, handler, data, selector ) {

    			var handleObjIn, eventHandle, tmp,
    				events, t, handleObj,
    				special, handlers, type, namespaces, origType,
    				elemData = dataPriv.get( elem );

    			// Only attach events to objects that accept data
    			if ( !acceptData( elem ) ) {
    				return;
    			}

    			// Caller can pass in an object of custom data in lieu of the handler
    			if ( handler.handler ) {
    				handleObjIn = handler;
    				handler = handleObjIn.handler;
    				selector = handleObjIn.selector;
    			}

    			// Ensure that invalid selectors throw exceptions at attach time
    			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
    			if ( selector ) {
    				jQuery.find.matchesSelector( documentElement, selector );
    			}

    			// Make sure that the handler has a unique ID, used to find/remove it later
    			if ( !handler.guid ) {
    				handler.guid = jQuery.guid++;
    			}

    			// Init the element's event structure and main handler, if this is the first
    			if ( !( events = elemData.events ) ) {
    				events = elemData.events = Object.create( null );
    			}
    			if ( !( eventHandle = elemData.handle ) ) {
    				eventHandle = elemData.handle = function( e ) {

    					// Discard the second event of a jQuery.event.trigger() and
    					// when an event is called after a page has unloaded
    					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
    						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
    				};
    			}

    			// Handle multiple events separated by a space
    			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
    			t = types.length;
    			while ( t-- ) {
    				tmp = rtypenamespace.exec( types[ t ] ) || [];
    				type = origType = tmp[ 1 ];
    				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

    				// There *must* be a type, no attaching namespace-only handlers
    				if ( !type ) {
    					continue;
    				}

    				// If event changes its type, use the special event handlers for the changed type
    				special = jQuery.event.special[ type ] || {};

    				// If selector defined, determine special event api type, otherwise given type
    				type = ( selector ? special.delegateType : special.bindType ) || type;

    				// Update special based on newly reset type
    				special = jQuery.event.special[ type ] || {};

    				// handleObj is passed to all event handlers
    				handleObj = jQuery.extend( {
    					type: type,
    					origType: origType,
    					data: data,
    					handler: handler,
    					guid: handler.guid,
    					selector: selector,
    					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
    					namespace: namespaces.join( "." )
    				}, handleObjIn );

    				// Init the event handler queue if we're the first
    				if ( !( handlers = events[ type ] ) ) {
    					handlers = events[ type ] = [];
    					handlers.delegateCount = 0;

    					// Only use addEventListener if the special events handler returns false
    					if ( !special.setup ||
    						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

    						if ( elem.addEventListener ) {
    							elem.addEventListener( type, eventHandle );
    						}
    					}
    				}

    				if ( special.add ) {
    					special.add.call( elem, handleObj );

    					if ( !handleObj.handler.guid ) {
    						handleObj.handler.guid = handler.guid;
    					}
    				}

    				// Add to the element's handler list, delegates in front
    				if ( selector ) {
    					handlers.splice( handlers.delegateCount++, 0, handleObj );
    				} else {
    					handlers.push( handleObj );
    				}

    				// Keep track of which events have ever been used, for event optimization
    				jQuery.event.global[ type ] = true;
    			}

    		},

    		// Detach an event or set of events from an element
    		remove: function( elem, types, handler, selector, mappedTypes ) {

    			var j, origCount, tmp,
    				events, t, handleObj,
    				special, handlers, type, namespaces, origType,
    				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

    			if ( !elemData || !( events = elemData.events ) ) {
    				return;
    			}

    			// Once for each type.namespace in types; type may be omitted
    			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
    			t = types.length;
    			while ( t-- ) {
    				tmp = rtypenamespace.exec( types[ t ] ) || [];
    				type = origType = tmp[ 1 ];
    				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

    				// Unbind all events (on this namespace, if provided) for the element
    				if ( !type ) {
    					for ( type in events ) {
    						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
    					}
    					continue;
    				}

    				special = jQuery.event.special[ type ] || {};
    				type = ( selector ? special.delegateType : special.bindType ) || type;
    				handlers = events[ type ] || [];
    				tmp = tmp[ 2 ] &&
    					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

    				// Remove matching events
    				origCount = j = handlers.length;
    				while ( j-- ) {
    					handleObj = handlers[ j ];

    					if ( ( mappedTypes || origType === handleObj.origType ) &&
    						( !handler || handler.guid === handleObj.guid ) &&
    						( !tmp || tmp.test( handleObj.namespace ) ) &&
    						( !selector || selector === handleObj.selector ||
    							selector === "**" && handleObj.selector ) ) {
    						handlers.splice( j, 1 );

    						if ( handleObj.selector ) {
    							handlers.delegateCount--;
    						}
    						if ( special.remove ) {
    							special.remove.call( elem, handleObj );
    						}
    					}
    				}

    				// Remove generic event handler if we removed something and no more handlers exist
    				// (avoids potential for endless recursion during removal of special event handlers)
    				if ( origCount && !handlers.length ) {
    					if ( !special.teardown ||
    						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

    						jQuery.removeEvent( elem, type, elemData.handle );
    					}

    					delete events[ type ];
    				}
    			}

    			// Remove data and the expando if it's no longer used
    			if ( jQuery.isEmptyObject( events ) ) {
    				dataPriv.remove( elem, "handle events" );
    			}
    		},

    		dispatch: function( nativeEvent ) {

    			var i, j, ret, matched, handleObj, handlerQueue,
    				args = new Array( arguments.length ),

    				// Make a writable jQuery.Event from the native event object
    				event = jQuery.event.fix( nativeEvent ),

    				handlers = (
    					dataPriv.get( this, "events" ) || Object.create( null )
    				)[ event.type ] || [],
    				special = jQuery.event.special[ event.type ] || {};

    			// Use the fix-ed jQuery.Event rather than the (read-only) native event
    			args[ 0 ] = event;

    			for ( i = 1; i < arguments.length; i++ ) {
    				args[ i ] = arguments[ i ];
    			}

    			event.delegateTarget = this;

    			// Call the preDispatch hook for the mapped type, and let it bail if desired
    			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
    				return;
    			}

    			// Determine handlers
    			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

    			// Run delegates first; they may want to stop propagation beneath us
    			i = 0;
    			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
    				event.currentTarget = matched.elem;

    				j = 0;
    				while ( ( handleObj = matched.handlers[ j++ ] ) &&
    					!event.isImmediatePropagationStopped() ) {

    					// If the event is namespaced, then each handler is only invoked if it is
    					// specially universal or its namespaces are a superset of the event's.
    					if ( !event.rnamespace || handleObj.namespace === false ||
    						event.rnamespace.test( handleObj.namespace ) ) {

    						event.handleObj = handleObj;
    						event.data = handleObj.data;

    						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
    							handleObj.handler ).apply( matched.elem, args );

    						if ( ret !== undefined ) {
    							if ( ( event.result = ret ) === false ) {
    								event.preventDefault();
    								event.stopPropagation();
    							}
    						}
    					}
    				}
    			}

    			// Call the postDispatch hook for the mapped type
    			if ( special.postDispatch ) {
    				special.postDispatch.call( this, event );
    			}

    			return event.result;
    		},

    		handlers: function( event, handlers ) {
    			var i, handleObj, sel, matchedHandlers, matchedSelectors,
    				handlerQueue = [],
    				delegateCount = handlers.delegateCount,
    				cur = event.target;

    			// Find delegate handlers
    			if ( delegateCount &&

    				// Support: IE <=9
    				// Black-hole SVG <use> instance trees (trac-13180)
    				cur.nodeType &&

    				// Support: Firefox <=42
    				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
    				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
    				// Support: IE 11 only
    				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
    				!( event.type === "click" && event.button >= 1 ) ) {

    				for ( ; cur !== this; cur = cur.parentNode || this ) {

    					// Don't check non-elements (trac-13208)
    					// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
    					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
    						matchedHandlers = [];
    						matchedSelectors = {};
    						for ( i = 0; i < delegateCount; i++ ) {
    							handleObj = handlers[ i ];

    							// Don't conflict with Object.prototype properties (trac-13203)
    							sel = handleObj.selector + " ";

    							if ( matchedSelectors[ sel ] === undefined ) {
    								matchedSelectors[ sel ] = handleObj.needsContext ?
    									jQuery( sel, this ).index( cur ) > -1 :
    									jQuery.find( sel, this, null, [ cur ] ).length;
    							}
    							if ( matchedSelectors[ sel ] ) {
    								matchedHandlers.push( handleObj );
    							}
    						}
    						if ( matchedHandlers.length ) {
    							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
    						}
    					}
    				}
    			}

    			// Add the remaining (directly-bound) handlers
    			cur = this;
    			if ( delegateCount < handlers.length ) {
    				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
    			}

    			return handlerQueue;
    		},

    		addProp: function( name, hook ) {
    			Object.defineProperty( jQuery.Event.prototype, name, {
    				enumerable: true,
    				configurable: true,

    				get: isFunction( hook ) ?
    					function() {
    						if ( this.originalEvent ) {
    							return hook( this.originalEvent );
    						}
    					} :
    					function() {
    						if ( this.originalEvent ) {
    							return this.originalEvent[ name ];
    						}
    					},

    				set: function( value ) {
    					Object.defineProperty( this, name, {
    						enumerable: true,
    						configurable: true,
    						writable: true,
    						value: value
    					} );
    				}
    			} );
    		},

    		fix: function( originalEvent ) {
    			return originalEvent[ jQuery.expando ] ?
    				originalEvent :
    				new jQuery.Event( originalEvent );
    		},

    		special: {
    			load: {

    				// Prevent triggered image.load events from bubbling to window.load
    				noBubble: true
    			},
    			click: {

    				// Utilize native event to ensure correct state for checkable inputs
    				setup: function( data ) {

    					// For mutual compressibility with _default, replace `this` access with a local var.
    					// `|| data` is dead code meant only to preserve the variable through minification.
    					var el = this || data;

    					// Claim the first handler
    					if ( rcheckableType.test( el.type ) &&
    						el.click && nodeName( el, "input" ) ) {

    						// dataPriv.set( el, "click", ... )
    						leverageNative( el, "click", true );
    					}

    					// Return false to allow normal processing in the caller
    					return false;
    				},
    				trigger: function( data ) {

    					// For mutual compressibility with _default, replace `this` access with a local var.
    					// `|| data` is dead code meant only to preserve the variable through minification.
    					var el = this || data;

    					// Force setup before triggering a click
    					if ( rcheckableType.test( el.type ) &&
    						el.click && nodeName( el, "input" ) ) {

    						leverageNative( el, "click" );
    					}

    					// Return non-false to allow normal event-path propagation
    					return true;
    				},

    				// For cross-browser consistency, suppress native .click() on links
    				// Also prevent it if we're currently inside a leveraged native-event stack
    				_default: function( event ) {
    					var target = event.target;
    					return rcheckableType.test( target.type ) &&
    						target.click && nodeName( target, "input" ) &&
    						dataPriv.get( target, "click" ) ||
    						nodeName( target, "a" );
    				}
    			},

    			beforeunload: {
    				postDispatch: function( event ) {

    					// Support: Firefox 20+
    					// Firefox doesn't alert if the returnValue field is not set.
    					if ( event.result !== undefined && event.originalEvent ) {
    						event.originalEvent.returnValue = event.result;
    					}
    				}
    			}
    		}
    	};

    	// Ensure the presence of an event listener that handles manually-triggered
    	// synthetic events by interrupting progress until reinvoked in response to
    	// *native* events that it fires directly, ensuring that state changes have
    	// already occurred before other listeners are invoked.
    	function leverageNative( el, type, isSetup ) {

    		// Missing `isSetup` indicates a trigger call, which must force setup through jQuery.event.add
    		if ( !isSetup ) {
    			if ( dataPriv.get( el, type ) === undefined ) {
    				jQuery.event.add( el, type, returnTrue );
    			}
    			return;
    		}

    		// Register the controller as a special universal handler for all event namespaces
    		dataPriv.set( el, type, false );
    		jQuery.event.add( el, type, {
    			namespace: false,
    			handler: function( event ) {
    				var result,
    					saved = dataPriv.get( this, type );

    				if ( ( event.isTrigger & 1 ) && this[ type ] ) {

    					// Interrupt processing of the outer synthetic .trigger()ed event
    					if ( !saved ) {

    						// Store arguments for use when handling the inner native event
    						// There will always be at least one argument (an event object), so this array
    						// will not be confused with a leftover capture object.
    						saved = slice.call( arguments );
    						dataPriv.set( this, type, saved );

    						// Trigger the native event and capture its result
    						this[ type ]();
    						result = dataPriv.get( this, type );
    						dataPriv.set( this, type, false );

    						if ( saved !== result ) {

    							// Cancel the outer synthetic event
    							event.stopImmediatePropagation();
    							event.preventDefault();

    							return result;
    						}

    					// If this is an inner synthetic event for an event with a bubbling surrogate
    					// (focus or blur), assume that the surrogate already propagated from triggering
    					// the native event and prevent that from happening again here.
    					// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
    					// bubbling surrogate propagates *after* the non-bubbling base), but that seems
    					// less bad than duplication.
    					} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
    						event.stopPropagation();
    					}

    				// If this is a native event triggered above, everything is now in order
    				// Fire an inner synthetic event with the original arguments
    				} else if ( saved ) {

    					// ...and capture the result
    					dataPriv.set( this, type, jQuery.event.trigger(
    						saved[ 0 ],
    						saved.slice( 1 ),
    						this
    					) );

    					// Abort handling of the native event by all jQuery handlers while allowing
    					// native handlers on the same element to run. On target, this is achieved
    					// by stopping immediate propagation just on the jQuery event. However,
    					// the native event is re-wrapped by a jQuery one on each level of the
    					// propagation so the only way to stop it for jQuery is to stop it for
    					// everyone via native `stopPropagation()`. This is not a problem for
    					// focus/blur which don't bubble, but it does also stop click on checkboxes
    					// and radios. We accept this limitation.
    					event.stopPropagation();
    					event.isImmediatePropagationStopped = returnTrue;
    				}
    			}
    		} );
    	}

    	jQuery.removeEvent = function( elem, type, handle ) {

    		// This "if" is needed for plain objects
    		if ( elem.removeEventListener ) {
    			elem.removeEventListener( type, handle );
    		}
    	};

    	jQuery.Event = function( src, props ) {

    		// Allow instantiation without the 'new' keyword
    		if ( !( this instanceof jQuery.Event ) ) {
    			return new jQuery.Event( src, props );
    		}

    		// Event object
    		if ( src && src.type ) {
    			this.originalEvent = src;
    			this.type = src.type;

    			// Events bubbling up the document may have been marked as prevented
    			// by a handler lower down the tree; reflect the correct value.
    			this.isDefaultPrevented = src.defaultPrevented ||
    					src.defaultPrevented === undefined &&

    					// Support: Android <=2.3 only
    					src.returnValue === false ?
    				returnTrue :
    				returnFalse;

    			// Create target properties
    			// Support: Safari <=6 - 7 only
    			// Target should not be a text node (trac-504, trac-13143)
    			this.target = ( src.target && src.target.nodeType === 3 ) ?
    				src.target.parentNode :
    				src.target;

    			this.currentTarget = src.currentTarget;
    			this.relatedTarget = src.relatedTarget;

    		// Event type
    		} else {
    			this.type = src;
    		}

    		// Put explicitly provided properties onto the event object
    		if ( props ) {
    			jQuery.extend( this, props );
    		}

    		// Create a timestamp if incoming event doesn't have one
    		this.timeStamp = src && src.timeStamp || Date.now();

    		// Mark it as fixed
    		this[ jQuery.expando ] = true;
    	};

    	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    	jQuery.Event.prototype = {
    		constructor: jQuery.Event,
    		isDefaultPrevented: returnFalse,
    		isPropagationStopped: returnFalse,
    		isImmediatePropagationStopped: returnFalse,
    		isSimulated: false,

    		preventDefault: function() {
    			var e = this.originalEvent;

    			this.isDefaultPrevented = returnTrue;

    			if ( e && !this.isSimulated ) {
    				e.preventDefault();
    			}
    		},
    		stopPropagation: function() {
    			var e = this.originalEvent;

    			this.isPropagationStopped = returnTrue;

    			if ( e && !this.isSimulated ) {
    				e.stopPropagation();
    			}
    		},
    		stopImmediatePropagation: function() {
    			var e = this.originalEvent;

    			this.isImmediatePropagationStopped = returnTrue;

    			if ( e && !this.isSimulated ) {
    				e.stopImmediatePropagation();
    			}

    			this.stopPropagation();
    		}
    	};

    	// Includes all common event props including KeyEvent and MouseEvent specific props
    	jQuery.each( {
    		altKey: true,
    		bubbles: true,
    		cancelable: true,
    		changedTouches: true,
    		ctrlKey: true,
    		detail: true,
    		eventPhase: true,
    		metaKey: true,
    		pageX: true,
    		pageY: true,
    		shiftKey: true,
    		view: true,
    		"char": true,
    		code: true,
    		charCode: true,
    		key: true,
    		keyCode: true,
    		button: true,
    		buttons: true,
    		clientX: true,
    		clientY: true,
    		offsetX: true,
    		offsetY: true,
    		pointerId: true,
    		pointerType: true,
    		screenX: true,
    		screenY: true,
    		targetTouches: true,
    		toElement: true,
    		touches: true,
    		which: true
    	}, jQuery.event.addProp );

    	jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {

    		function focusMappedHandler( nativeEvent ) {
    			if ( document.documentMode ) {

    				// Support: IE 11+
    				// Attach a single focusin/focusout handler on the document while someone wants
    				// focus/blur. This is because the former are synchronous in IE while the latter
    				// are async. In other browsers, all those handlers are invoked synchronously.

    				// `handle` from private data would already wrap the event, but we need
    				// to change the `type` here.
    				var handle = dataPriv.get( this, "handle" ),
    					event = jQuery.event.fix( nativeEvent );
    				event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
    				event.isSimulated = true;

    				// First, handle focusin/focusout
    				handle( nativeEvent );

    				// ...then, handle focus/blur
    				//
    				// focus/blur don't bubble while focusin/focusout do; simulate the former by only
    				// invoking the handler at the lower level.
    				if ( event.target === event.currentTarget ) {

    					// The setup part calls `leverageNative`, which, in turn, calls
    					// `jQuery.event.add`, so event handle will already have been set
    					// by this point.
    					handle( event );
    				}
    			} else {

    				// For non-IE browsers, attach a single capturing handler on the document
    				// while someone wants focusin/focusout.
    				jQuery.event.simulate( delegateType, nativeEvent.target,
    					jQuery.event.fix( nativeEvent ) );
    			}
    		}

    		jQuery.event.special[ type ] = {

    			// Utilize native event if possible so blur/focus sequence is correct
    			setup: function() {

    				var attaches;

    				// Claim the first handler
    				// dataPriv.set( this, "focus", ... )
    				// dataPriv.set( this, "blur", ... )
    				leverageNative( this, type, true );

    				if ( document.documentMode ) {

    					// Support: IE 9 - 11+
    					// We use the same native handler for focusin & focus (and focusout & blur)
    					// so we need to coordinate setup & teardown parts between those events.
    					// Use `delegateType` as the key as `type` is already used by `leverageNative`.
    					attaches = dataPriv.get( this, delegateType );
    					if ( !attaches ) {
    						this.addEventListener( delegateType, focusMappedHandler );
    					}
    					dataPriv.set( this, delegateType, ( attaches || 0 ) + 1 );
    				} else {

    					// Return false to allow normal processing in the caller
    					return false;
    				}
    			},
    			trigger: function() {

    				// Force setup before trigger
    				leverageNative( this, type );

    				// Return non-false to allow normal event-path propagation
    				return true;
    			},

    			teardown: function() {
    				var attaches;

    				if ( document.documentMode ) {
    					attaches = dataPriv.get( this, delegateType ) - 1;
    					if ( !attaches ) {
    						this.removeEventListener( delegateType, focusMappedHandler );
    						dataPriv.remove( this, delegateType );
    					} else {
    						dataPriv.set( this, delegateType, attaches );
    					}
    				} else {

    					// Return false to indicate standard teardown should be applied
    					return false;
    				}
    			},

    			// Suppress native focus or blur if we're currently inside
    			// a leveraged native-event stack
    			_default: function( event ) {
    				return dataPriv.get( event.target, type );
    			},

    			delegateType: delegateType
    		};

    		// Support: Firefox <=44
    		// Firefox doesn't have focus(in | out) events
    		// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
    		//
    		// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
    		// focus(in | out) events fire after focus & blur events,
    		// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
    		// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
    		//
    		// Support: IE 9 - 11+
    		// To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
    		// attach a single handler for both events in IE.
    		jQuery.event.special[ delegateType ] = {
    			setup: function() {

    				// Handle: regular nodes (via `this.ownerDocument`), window
    				// (via `this.document`) & document (via `this`).
    				var doc = this.ownerDocument || this.document || this,
    					dataHolder = document.documentMode ? this : doc,
    					attaches = dataPriv.get( dataHolder, delegateType );

    				// Support: IE 9 - 11+
    				// We use the same native handler for focusin & focus (and focusout & blur)
    				// so we need to coordinate setup & teardown parts between those events.
    				// Use `delegateType` as the key as `type` is already used by `leverageNative`.
    				if ( !attaches ) {
    					if ( document.documentMode ) {
    						this.addEventListener( delegateType, focusMappedHandler );
    					} else {
    						doc.addEventListener( type, focusMappedHandler, true );
    					}
    				}
    				dataPriv.set( dataHolder, delegateType, ( attaches || 0 ) + 1 );
    			},
    			teardown: function() {
    				var doc = this.ownerDocument || this.document || this,
    					dataHolder = document.documentMode ? this : doc,
    					attaches = dataPriv.get( dataHolder, delegateType ) - 1;

    				if ( !attaches ) {
    					if ( document.documentMode ) {
    						this.removeEventListener( delegateType, focusMappedHandler );
    					} else {
    						doc.removeEventListener( type, focusMappedHandler, true );
    					}
    					dataPriv.remove( dataHolder, delegateType );
    				} else {
    					dataPriv.set( dataHolder, delegateType, attaches );
    				}
    			}
    		};
    	} );

    	// Create mouseenter/leave events using mouseover/out and event-time checks
    	// so that event delegation works in jQuery.
    	// Do the same for pointerenter/pointerleave and pointerover/pointerout
    	//
    	// Support: Safari 7 only
    	// Safari sends mouseenter too often; see:
    	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
    	// for the description of the bug (it existed in older Chrome versions as well).
    	jQuery.each( {
    		mouseenter: "mouseover",
    		mouseleave: "mouseout",
    		pointerenter: "pointerover",
    		pointerleave: "pointerout"
    	}, function( orig, fix ) {
    		jQuery.event.special[ orig ] = {
    			delegateType: fix,
    			bindType: fix,

    			handle: function( event ) {
    				var ret,
    					target = this,
    					related = event.relatedTarget,
    					handleObj = event.handleObj;

    				// For mouseenter/leave call the handler if related is outside the target.
    				// NB: No relatedTarget if the mouse left/entered the browser window
    				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
    					event.type = handleObj.origType;
    					ret = handleObj.handler.apply( this, arguments );
    					event.type = fix;
    				}
    				return ret;
    			}
    		};
    	} );

    	jQuery.fn.extend( {

    		on: function( types, selector, data, fn ) {
    			return on( this, types, selector, data, fn );
    		},
    		one: function( types, selector, data, fn ) {
    			return on( this, types, selector, data, fn, 1 );
    		},
    		off: function( types, selector, fn ) {
    			var handleObj, type;
    			if ( types && types.preventDefault && types.handleObj ) {

    				// ( event )  dispatched jQuery.Event
    				handleObj = types.handleObj;
    				jQuery( types.delegateTarget ).off(
    					handleObj.namespace ?
    						handleObj.origType + "." + handleObj.namespace :
    						handleObj.origType,
    					handleObj.selector,
    					handleObj.handler
    				);
    				return this;
    			}
    			if ( typeof types === "object" ) {

    				// ( types-object [, selector] )
    				for ( type in types ) {
    					this.off( type, selector, types[ type ] );
    				}
    				return this;
    			}
    			if ( selector === false || typeof selector === "function" ) {

    				// ( types [, fn] )
    				fn = selector;
    				selector = undefined;
    			}
    			if ( fn === false ) {
    				fn = returnFalse;
    			}
    			return this.each( function() {
    				jQuery.event.remove( this, types, fn, selector );
    			} );
    		}
    	} );


    	var

    		// Support: IE <=10 - 11, Edge 12 - 13 only
    		// In IE/Edge using regex groups here causes severe slowdowns.
    		// See https://connect.microsoft.com/IE/feedback/details/1736512/
    		rnoInnerhtml = /<script|<style|<link/i,

    		// checked="checked" or checked
    		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,

    		rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

    	// Prefer a tbody over its parent table for containing new rows
    	function manipulationTarget( elem, content ) {
    		if ( nodeName( elem, "table" ) &&
    			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

    			return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
    		}

    		return elem;
    	}

    	// Replace/restore the type attribute of script elements for safe DOM manipulation
    	function disableScript( elem ) {
    		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
    		return elem;
    	}
    	function restoreScript( elem ) {
    		if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
    			elem.type = elem.type.slice( 5 );
    		} else {
    			elem.removeAttribute( "type" );
    		}

    		return elem;
    	}

    	function cloneCopyEvent( src, dest ) {
    		var i, l, type, pdataOld, udataOld, udataCur, events;

    		if ( dest.nodeType !== 1 ) {
    			return;
    		}

    		// 1. Copy private data: events, handlers, etc.
    		if ( dataPriv.hasData( src ) ) {
    			pdataOld = dataPriv.get( src );
    			events = pdataOld.events;

    			if ( events ) {
    				dataPriv.remove( dest, "handle events" );

    				for ( type in events ) {
    					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
    						jQuery.event.add( dest, type, events[ type ][ i ] );
    					}
    				}
    			}
    		}

    		// 2. Copy user data
    		if ( dataUser.hasData( src ) ) {
    			udataOld = dataUser.access( src );
    			udataCur = jQuery.extend( {}, udataOld );

    			dataUser.set( dest, udataCur );
    		}
    	}

    	// Fix IE bugs, see support tests
    	function fixInput( src, dest ) {
    		var nodeName = dest.nodeName.toLowerCase();

    		// Fails to persist the checked state of a cloned checkbox or radio button.
    		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
    			dest.checked = src.checked;

    		// Fails to return the selected option to the default selected state when cloning options
    		} else if ( nodeName === "input" || nodeName === "textarea" ) {
    			dest.defaultValue = src.defaultValue;
    		}
    	}

    	function domManip( collection, args, callback, ignored ) {

    		// Flatten any nested arrays
    		args = flat( args );

    		var fragment, first, scripts, hasScripts, node, doc,
    			i = 0,
    			l = collection.length,
    			iNoClone = l - 1,
    			value = args[ 0 ],
    			valueIsFunction = isFunction( value );

    		// We can't cloneNode fragments that contain checked, in WebKit
    		if ( valueIsFunction ||
    				( l > 1 && typeof value === "string" &&
    					!support.checkClone && rchecked.test( value ) ) ) {
    			return collection.each( function( index ) {
    				var self = collection.eq( index );
    				if ( valueIsFunction ) {
    					args[ 0 ] = value.call( this, index, self.html() );
    				}
    				domManip( self, args, callback, ignored );
    			} );
    		}

    		if ( l ) {
    			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
    			first = fragment.firstChild;

    			if ( fragment.childNodes.length === 1 ) {
    				fragment = first;
    			}

    			// Require either new content or an interest in ignored elements to invoke the callback
    			if ( first || ignored ) {
    				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
    				hasScripts = scripts.length;

    				// Use the original fragment for the last item
    				// instead of the first because it can end up
    				// being emptied incorrectly in certain situations (trac-8070).
    				for ( ; i < l; i++ ) {
    					node = fragment;

    					if ( i !== iNoClone ) {
    						node = jQuery.clone( node, true, true );

    						// Keep references to cloned scripts for later restoration
    						if ( hasScripts ) {

    							// Support: Android <=4.0 only, PhantomJS 1 only
    							// push.apply(_, arraylike) throws on ancient WebKit
    							jQuery.merge( scripts, getAll( node, "script" ) );
    						}
    					}

    					callback.call( collection[ i ], node, i );
    				}

    				if ( hasScripts ) {
    					doc = scripts[ scripts.length - 1 ].ownerDocument;

    					// Reenable scripts
    					jQuery.map( scripts, restoreScript );

    					// Evaluate executable scripts on first document insertion
    					for ( i = 0; i < hasScripts; i++ ) {
    						node = scripts[ i ];
    						if ( rscriptType.test( node.type || "" ) &&
    							!dataPriv.access( node, "globalEval" ) &&
    							jQuery.contains( doc, node ) ) {

    							if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

    								// Optional AJAX dependency, but won't run scripts if not present
    								if ( jQuery._evalUrl && !node.noModule ) {
    									jQuery._evalUrl( node.src, {
    										nonce: node.nonce || node.getAttribute( "nonce" )
    									}, doc );
    								}
    							} else {

    								// Unwrap a CDATA section containing script contents. This shouldn't be
    								// needed as in XML documents they're already not visible when
    								// inspecting element contents and in HTML documents they have no
    								// meaning but we're preserving that logic for backwards compatibility.
    								// This will be removed completely in 4.0. See gh-4904.
    								DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
    							}
    						}
    					}
    				}
    			}
    		}

    		return collection;
    	}

    	function remove( elem, selector, keepData ) {
    		var node,
    			nodes = selector ? jQuery.filter( selector, elem ) : elem,
    			i = 0;

    		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
    			if ( !keepData && node.nodeType === 1 ) {
    				jQuery.cleanData( getAll( node ) );
    			}

    			if ( node.parentNode ) {
    				if ( keepData && isAttached( node ) ) {
    					setGlobalEval( getAll( node, "script" ) );
    				}
    				node.parentNode.removeChild( node );
    			}
    		}

    		return elem;
    	}

    	jQuery.extend( {
    		htmlPrefilter: function( html ) {
    			return html;
    		},

    		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
    			var i, l, srcElements, destElements,
    				clone = elem.cloneNode( true ),
    				inPage = isAttached( elem );

    			// Fix IE cloning issues
    			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
    					!jQuery.isXMLDoc( elem ) ) {

    				// We eschew jQuery#find here for performance reasons:
    				// https://jsperf.com/getall-vs-sizzle/2
    				destElements = getAll( clone );
    				srcElements = getAll( elem );

    				for ( i = 0, l = srcElements.length; i < l; i++ ) {
    					fixInput( srcElements[ i ], destElements[ i ] );
    				}
    			}

    			// Copy the events from the original to the clone
    			if ( dataAndEvents ) {
    				if ( deepDataAndEvents ) {
    					srcElements = srcElements || getAll( elem );
    					destElements = destElements || getAll( clone );

    					for ( i = 0, l = srcElements.length; i < l; i++ ) {
    						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
    					}
    				} else {
    					cloneCopyEvent( elem, clone );
    				}
    			}

    			// Preserve script evaluation history
    			destElements = getAll( clone, "script" );
    			if ( destElements.length > 0 ) {
    				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
    			}

    			// Return the cloned set
    			return clone;
    		},

    		cleanData: function( elems ) {
    			var data, elem, type,
    				special = jQuery.event.special,
    				i = 0;

    			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
    				if ( acceptData( elem ) ) {
    					if ( ( data = elem[ dataPriv.expando ] ) ) {
    						if ( data.events ) {
    							for ( type in data.events ) {
    								if ( special[ type ] ) {
    									jQuery.event.remove( elem, type );

    								// This is a shortcut to avoid jQuery.event.remove's overhead
    								} else {
    									jQuery.removeEvent( elem, type, data.handle );
    								}
    							}
    						}

    						// Support: Chrome <=35 - 45+
    						// Assign undefined instead of using delete, see Data#remove
    						elem[ dataPriv.expando ] = undefined;
    					}
    					if ( elem[ dataUser.expando ] ) {

    						// Support: Chrome <=35 - 45+
    						// Assign undefined instead of using delete, see Data#remove
    						elem[ dataUser.expando ] = undefined;
    					}
    				}
    			}
    		}
    	} );

    	jQuery.fn.extend( {
    		detach: function( selector ) {
    			return remove( this, selector, true );
    		},

    		remove: function( selector ) {
    			return remove( this, selector );
    		},

    		text: function( value ) {
    			return access( this, function( value ) {
    				return value === undefined ?
    					jQuery.text( this ) :
    					this.empty().each( function() {
    						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
    							this.textContent = value;
    						}
    					} );
    			}, null, value, arguments.length );
    		},

    		append: function() {
    			return domManip( this, arguments, function( elem ) {
    				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
    					var target = manipulationTarget( this, elem );
    					target.appendChild( elem );
    				}
    			} );
    		},

    		prepend: function() {
    			return domManip( this, arguments, function( elem ) {
    				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
    					var target = manipulationTarget( this, elem );
    					target.insertBefore( elem, target.firstChild );
    				}
    			} );
    		},

    		before: function() {
    			return domManip( this, arguments, function( elem ) {
    				if ( this.parentNode ) {
    					this.parentNode.insertBefore( elem, this );
    				}
    			} );
    		},

    		after: function() {
    			return domManip( this, arguments, function( elem ) {
    				if ( this.parentNode ) {
    					this.parentNode.insertBefore( elem, this.nextSibling );
    				}
    			} );
    		},

    		empty: function() {
    			var elem,
    				i = 0;

    			for ( ; ( elem = this[ i ] ) != null; i++ ) {
    				if ( elem.nodeType === 1 ) {

    					// Prevent memory leaks
    					jQuery.cleanData( getAll( elem, false ) );

    					// Remove any remaining nodes
    					elem.textContent = "";
    				}
    			}

    			return this;
    		},

    		clone: function( dataAndEvents, deepDataAndEvents ) {
    			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
    			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

    			return this.map( function() {
    				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
    			} );
    		},

    		html: function( value ) {
    			return access( this, function( value ) {
    				var elem = this[ 0 ] || {},
    					i = 0,
    					l = this.length;

    				if ( value === undefined && elem.nodeType === 1 ) {
    					return elem.innerHTML;
    				}

    				// See if we can take a shortcut and just use innerHTML
    				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
    					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

    					value = jQuery.htmlPrefilter( value );

    					try {
    						for ( ; i < l; i++ ) {
    							elem = this[ i ] || {};

    							// Remove element nodes and prevent memory leaks
    							if ( elem.nodeType === 1 ) {
    								jQuery.cleanData( getAll( elem, false ) );
    								elem.innerHTML = value;
    							}
    						}

    						elem = 0;

    					// If using innerHTML throws an exception, use the fallback method
    					} catch ( e ) {}
    				}

    				if ( elem ) {
    					this.empty().append( value );
    				}
    			}, null, value, arguments.length );
    		},

    		replaceWith: function() {
    			var ignored = [];

    			// Make the changes, replacing each non-ignored context element with the new content
    			return domManip( this, arguments, function( elem ) {
    				var parent = this.parentNode;

    				if ( jQuery.inArray( this, ignored ) < 0 ) {
    					jQuery.cleanData( getAll( this ) );
    					if ( parent ) {
    						parent.replaceChild( elem, this );
    					}
    				}

    			// Force callback invocation
    			}, ignored );
    		}
    	} );

    	jQuery.each( {
    		appendTo: "append",
    		prependTo: "prepend",
    		insertBefore: "before",
    		insertAfter: "after",
    		replaceAll: "replaceWith"
    	}, function( name, original ) {
    		jQuery.fn[ name ] = function( selector ) {
    			var elems,
    				ret = [],
    				insert = jQuery( selector ),
    				last = insert.length - 1,
    				i = 0;

    			for ( ; i <= last; i++ ) {
    				elems = i === last ? this : this.clone( true );
    				jQuery( insert[ i ] )[ original ]( elems );

    				// Support: Android <=4.0 only, PhantomJS 1 only
    				// .get() because push.apply(_, arraylike) throws on ancient WebKit
    				push.apply( ret, elems.get() );
    			}

    			return this.pushStack( ret );
    		};
    	} );
    	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

    	var rcustomProp = /^--/;


    	var getStyles = function( elem ) {

    			// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
    			// IE throws on elements created in popups
    			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    			var view = elem.ownerDocument.defaultView;

    			if ( !view || !view.opener ) {
    				view = window;
    			}

    			return view.getComputedStyle( elem );
    		};

    	var swap = function( elem, options, callback ) {
    		var ret, name,
    			old = {};

    		// Remember the old values, and insert the new ones
    		for ( name in options ) {
    			old[ name ] = elem.style[ name ];
    			elem.style[ name ] = options[ name ];
    		}

    		ret = callback.call( elem );

    		// Revert the old values
    		for ( name in options ) {
    			elem.style[ name ] = old[ name ];
    		}

    		return ret;
    	};


    	var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



    	( function() {

    		// Executing both pixelPosition & boxSizingReliable tests require only one layout
    		// so they're executed at the same time to save the second computation.
    		function computeStyleTests() {

    			// This is a singleton, we need to execute it only once
    			if ( !div ) {
    				return;
    			}

    			container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
    				"margin-top:1px;padding:0;border:0";
    			div.style.cssText =
    				"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
    				"margin:auto;border:1px;padding:1px;" +
    				"width:60%;top:1%";
    			documentElement.appendChild( container ).appendChild( div );

    			var divStyle = window.getComputedStyle( div );
    			pixelPositionVal = divStyle.top !== "1%";

    			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
    			reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

    			// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
    			// Some styles come back with percentage values, even though they shouldn't
    			div.style.right = "60%";
    			pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

    			// Support: IE 9 - 11 only
    			// Detect misreporting of content dimensions for box-sizing:border-box elements
    			boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

    			// Support: IE 9 only
    			// Detect overflow:scroll screwiness (gh-3699)
    			// Support: Chrome <=64
    			// Don't get tricked when zoom affects offsetWidth (gh-4029)
    			div.style.position = "absolute";
    			scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

    			documentElement.removeChild( container );

    			// Nullify the div so it wouldn't be stored in the memory and
    			// it will also be a sign that checks already performed
    			div = null;
    		}

    		function roundPixelMeasures( measure ) {
    			return Math.round( parseFloat( measure ) );
    		}

    		var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
    			reliableTrDimensionsVal, reliableMarginLeftVal,
    			container = document.createElement( "div" ),
    			div = document.createElement( "div" );

    		// Finish early in limited (non-browser) environments
    		if ( !div.style ) {
    			return;
    		}

    		// Support: IE <=9 - 11 only
    		// Style of cloned element affects source element cloned (trac-8908)
    		div.style.backgroundClip = "content-box";
    		div.cloneNode( true ).style.backgroundClip = "";
    		support.clearCloneStyle = div.style.backgroundClip === "content-box";

    		jQuery.extend( support, {
    			boxSizingReliable: function() {
    				computeStyleTests();
    				return boxSizingReliableVal;
    			},
    			pixelBoxStyles: function() {
    				computeStyleTests();
    				return pixelBoxStylesVal;
    			},
    			pixelPosition: function() {
    				computeStyleTests();
    				return pixelPositionVal;
    			},
    			reliableMarginLeft: function() {
    				computeStyleTests();
    				return reliableMarginLeftVal;
    			},
    			scrollboxSize: function() {
    				computeStyleTests();
    				return scrollboxSizeVal;
    			},

    			// Support: IE 9 - 11+, Edge 15 - 18+
    			// IE/Edge misreport `getComputedStyle` of table rows with width/height
    			// set in CSS while `offset*` properties report correct values.
    			// Behavior in IE 9 is more subtle than in newer versions & it passes
    			// some versions of this test; make sure not to make it pass there!
    			//
    			// Support: Firefox 70+
    			// Only Firefox includes border widths
    			// in computed dimensions. (gh-4529)
    			reliableTrDimensions: function() {
    				var table, tr, trChild, trStyle;
    				if ( reliableTrDimensionsVal == null ) {
    					table = document.createElement( "table" );
    					tr = document.createElement( "tr" );
    					trChild = document.createElement( "div" );

    					table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
    					tr.style.cssText = "border:1px solid";

    					// Support: Chrome 86+
    					// Height set through cssText does not get applied.
    					// Computed height then comes back as 0.
    					tr.style.height = "1px";
    					trChild.style.height = "9px";

    					// Support: Android 8 Chrome 86+
    					// In our bodyBackground.html iframe,
    					// display for all div elements is set to "inline",
    					// which causes a problem only in Android 8 Chrome 86.
    					// Ensuring the div is display: block
    					// gets around this issue.
    					trChild.style.display = "block";

    					documentElement
    						.appendChild( table )
    						.appendChild( tr )
    						.appendChild( trChild );

    					trStyle = window.getComputedStyle( tr );
    					reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
    						parseInt( trStyle.borderTopWidth, 10 ) +
    						parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

    					documentElement.removeChild( table );
    				}
    				return reliableTrDimensionsVal;
    			}
    		} );
    	} )();


    	function curCSS( elem, name, computed ) {
    		var width, minWidth, maxWidth, ret,
    			isCustomProp = rcustomProp.test( name ),

    			// Support: Firefox 51+
    			// Retrieving style before computed somehow
    			// fixes an issue with getting wrong values
    			// on detached elements
    			style = elem.style;

    		computed = computed || getStyles( elem );

    		// getPropertyValue is needed for:
    		//   .css('filter') (IE 9 only, trac-12537)
    		//   .css('--customProperty) (gh-3144)
    		if ( computed ) {

    			// Support: IE <=9 - 11+
    			// IE only supports `"float"` in `getPropertyValue`; in computed styles
    			// it's only available as `"cssFloat"`. We no longer modify properties
    			// sent to `.css()` apart from camelCasing, so we need to check both.
    			// Normally, this would create difference in behavior: if
    			// `getPropertyValue` returns an empty string, the value returned
    			// by `.css()` would be `undefined`. This is usually the case for
    			// disconnected elements. However, in IE even disconnected elements
    			// with no styles return `"none"` for `getPropertyValue( "float" )`
    			ret = computed.getPropertyValue( name ) || computed[ name ];

    			if ( isCustomProp && ret ) {

    				// Support: Firefox 105+, Chrome <=105+
    				// Spec requires trimming whitespace for custom properties (gh-4926).
    				// Firefox only trims leading whitespace. Chrome just collapses
    				// both leading & trailing whitespace to a single space.
    				//
    				// Fall back to `undefined` if empty string returned.
    				// This collapses a missing definition with property defined
    				// and set to an empty string but there's no standard API
    				// allowing us to differentiate them without a performance penalty
    				// and returning `undefined` aligns with older jQuery.
    				//
    				// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
    				// as whitespace while CSS does not, but this is not a problem
    				// because CSS preprocessing replaces them with U+000A LINE FEED
    				// (which *is* CSS whitespace)
    				// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
    				ret = ret.replace( rtrimCSS, "$1" ) || undefined;
    			}

    			if ( ret === "" && !isAttached( elem ) ) {
    				ret = jQuery.style( elem, name );
    			}

    			// A tribute to the "awesome hack by Dean Edwards"
    			// Android Browser returns percentage for some values,
    			// but width seems to be reliably pixels.
    			// This is against the CSSOM draft spec:
    			// https://drafts.csswg.org/cssom/#resolved-values
    			if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

    				// Remember the original values
    				width = style.width;
    				minWidth = style.minWidth;
    				maxWidth = style.maxWidth;

    				// Put in the new values to get a computed value out
    				style.minWidth = style.maxWidth = style.width = ret;
    				ret = computed.width;

    				// Revert the changed values
    				style.width = width;
    				style.minWidth = minWidth;
    				style.maxWidth = maxWidth;
    			}
    		}

    		return ret !== undefined ?

    			// Support: IE <=9 - 11 only
    			// IE returns zIndex value as an integer.
    			ret + "" :
    			ret;
    	}


    	function addGetHookIf( conditionFn, hookFn ) {

    		// Define the hook, we'll check on the first run if it's really needed.
    		return {
    			get: function() {
    				if ( conditionFn() ) {

    					// Hook not needed (or it's not possible to use it due
    					// to missing dependency), remove it.
    					delete this.get;
    					return;
    				}

    				// Hook needed; redefine it so that the support test is not executed again.
    				return ( this.get = hookFn ).apply( this, arguments );
    			}
    		};
    	}


    	var cssPrefixes = [ "Webkit", "Moz", "ms" ],
    		emptyStyle = document.createElement( "div" ).style,
    		vendorProps = {};

    	// Return a vendor-prefixed property or undefined
    	function vendorPropName( name ) {

    		// Check for vendor prefixed names
    		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
    			i = cssPrefixes.length;

    		while ( i-- ) {
    			name = cssPrefixes[ i ] + capName;
    			if ( name in emptyStyle ) {
    				return name;
    			}
    		}
    	}

    	// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
    	function finalPropName( name ) {
    		var final = jQuery.cssProps[ name ] || vendorProps[ name ];

    		if ( final ) {
    			return final;
    		}
    		if ( name in emptyStyle ) {
    			return name;
    		}
    		return vendorProps[ name ] = vendorPropName( name ) || name;
    	}


    	var

    		// Swappable if display is none or starts with table
    		// except "table", "table-cell", or "table-caption"
    		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
    		cssNormalTransform = {
    			letterSpacing: "0",
    			fontWeight: "400"
    		};

    	function setPositiveNumber( _elem, value, subtract ) {

    		// Any relative (+/-) values have already been
    		// normalized at this point
    		var matches = rcssNum.exec( value );
    		return matches ?

    			// Guard against undefined "subtract", e.g., when used as in cssHooks
    			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
    			value;
    	}

    	function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
    		var i = dimension === "width" ? 1 : 0,
    			extra = 0,
    			delta = 0,
    			marginDelta = 0;

    		// Adjustment may not be necessary
    		if ( box === ( isBorderBox ? "border" : "content" ) ) {
    			return 0;
    		}

    		for ( ; i < 4; i += 2 ) {

    			// Both box models exclude margin
    			// Count margin delta separately to only add it after scroll gutter adjustment.
    			// This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
    			if ( box === "margin" ) {
    				marginDelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
    			}

    			// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
    			if ( !isBorderBox ) {

    				// Add padding
    				delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

    				// For "border" or "margin", add border
    				if ( box !== "padding" ) {
    					delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

    				// But still keep track of it otherwise
    				} else {
    					extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
    				}

    			// If we get here with a border-box (content + padding + border), we're seeking "content" or
    			// "padding" or "margin"
    			} else {

    				// For "content", subtract padding
    				if ( box === "content" ) {
    					delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
    				}

    				// For "content" or "padding", subtract border
    				if ( box !== "margin" ) {
    					delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
    				}
    			}
    		}

    		// Account for positive content-box scroll gutter when requested by providing computedVal
    		if ( !isBorderBox && computedVal >= 0 ) {

    			// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
    			// Assuming integer scroll gutter, subtract the rest and round down
    			delta += Math.max( 0, Math.ceil(
    				elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
    				computedVal -
    				delta -
    				extra -
    				0.5

    			// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
    			// Use an explicit zero to avoid NaN (gh-3964)
    			) ) || 0;
    		}

    		return delta + marginDelta;
    	}

    	function getWidthOrHeight( elem, dimension, extra ) {

    		// Start with computed style
    		var styles = getStyles( elem ),

    			// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
    			// Fake content-box until we know it's needed to know the true value.
    			boxSizingNeeded = !support.boxSizingReliable() || extra,
    			isBorderBox = boxSizingNeeded &&
    				jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
    			valueIsBorderBox = isBorderBox,

    			val = curCSS( elem, dimension, styles ),
    			offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

    		// Support: Firefox <=54
    		// Return a confounding non-pixel value or feign ignorance, as appropriate.
    		if ( rnumnonpx.test( val ) ) {
    			if ( !extra ) {
    				return val;
    			}
    			val = "auto";
    		}


    		// Support: IE 9 - 11 only
    		// Use offsetWidth/offsetHeight for when box sizing is unreliable.
    		// In those cases, the computed value can be trusted to be border-box.
    		if ( ( !support.boxSizingReliable() && isBorderBox ||

    			// Support: IE 10 - 11+, Edge 15 - 18+
    			// IE/Edge misreport `getComputedStyle` of table rows with width/height
    			// set in CSS while `offset*` properties report correct values.
    			// Interestingly, in some cases IE 9 doesn't suffer from this issue.
    			!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

    			// Fall back to offsetWidth/offsetHeight when value is "auto"
    			// This happens for inline elements with no explicit setting (gh-3571)
    			val === "auto" ||

    			// Support: Android <=4.1 - 4.3 only
    			// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
    			!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

    			// Make sure the element is visible & connected
    			elem.getClientRects().length ) {

    			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

    			// Where available, offsetWidth/offsetHeight approximate border box dimensions.
    			// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
    			// retrieved value as a content box dimension.
    			valueIsBorderBox = offsetProp in elem;
    			if ( valueIsBorderBox ) {
    				val = elem[ offsetProp ];
    			}
    		}

    		// Normalize "" and auto
    		val = parseFloat( val ) || 0;

    		// Adjust for the element's box model
    		return ( val +
    			boxModelAdjustment(
    				elem,
    				dimension,
    				extra || ( isBorderBox ? "border" : "content" ),
    				valueIsBorderBox,
    				styles,

    				// Provide the current computed size to request scroll gutter calculation (gh-3589)
    				val
    			)
    		) + "px";
    	}

    	jQuery.extend( {

    		// Add in style property hooks for overriding the default
    		// behavior of getting and setting a style property
    		cssHooks: {
    			opacity: {
    				get: function( elem, computed ) {
    					if ( computed ) {

    						// We should always get a number back from opacity
    						var ret = curCSS( elem, "opacity" );
    						return ret === "" ? "1" : ret;
    					}
    				}
    			}
    		},

    		// Don't automatically add "px" to these possibly-unitless properties
    		cssNumber: {
    			animationIterationCount: true,
    			aspectRatio: true,
    			borderImageSlice: true,
    			columnCount: true,
    			flexGrow: true,
    			flexShrink: true,
    			fontWeight: true,
    			gridArea: true,
    			gridColumn: true,
    			gridColumnEnd: true,
    			gridColumnStart: true,
    			gridRow: true,
    			gridRowEnd: true,
    			gridRowStart: true,
    			lineHeight: true,
    			opacity: true,
    			order: true,
    			orphans: true,
    			scale: true,
    			widows: true,
    			zIndex: true,
    			zoom: true,

    			// SVG-related
    			fillOpacity: true,
    			floodOpacity: true,
    			stopOpacity: true,
    			strokeMiterlimit: true,
    			strokeOpacity: true
    		},

    		// Add in properties whose names you wish to fix before
    		// setting or getting the value
    		cssProps: {},

    		// Get and set the style property on a DOM Node
    		style: function( elem, name, value, extra ) {

    			// Don't set styles on text and comment nodes
    			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
    				return;
    			}

    			// Make sure that we're working with the right name
    			var ret, type, hooks,
    				origName = camelCase( name ),
    				isCustomProp = rcustomProp.test( name ),
    				style = elem.style;

    			// Make sure that we're working with the right name. We don't
    			// want to query the value if it is a CSS custom property
    			// since they are user-defined.
    			if ( !isCustomProp ) {
    				name = finalPropName( origName );
    			}

    			// Gets hook for the prefixed version, then unprefixed version
    			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

    			// Check if we're setting a value
    			if ( value !== undefined ) {
    				type = typeof value;

    				// Convert "+=" or "-=" to relative numbers (trac-7345)
    				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
    					value = adjustCSS( elem, name, ret );

    					// Fixes bug trac-9237
    					type = "number";
    				}

    				// Make sure that null and NaN values aren't set (trac-7116)
    				if ( value == null || value !== value ) {
    					return;
    				}

    				// If a number was passed in, add the unit (except for certain CSS properties)
    				// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
    				// "px" to a few hardcoded values.
    				if ( type === "number" && !isCustomProp ) {
    					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
    				}

    				// background-* props affect original clone's values
    				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
    					style[ name ] = "inherit";
    				}

    				// If a hook was provided, use that value, otherwise just set the specified value
    				if ( !hooks || !( "set" in hooks ) ||
    					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

    					if ( isCustomProp ) {
    						style.setProperty( name, value );
    					} else {
    						style[ name ] = value;
    					}
    				}

    			} else {

    				// If a hook was provided get the non-computed value from there
    				if ( hooks && "get" in hooks &&
    					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

    					return ret;
    				}

    				// Otherwise just get the value from the style object
    				return style[ name ];
    			}
    		},

    		css: function( elem, name, extra, styles ) {
    			var val, num, hooks,
    				origName = camelCase( name ),
    				isCustomProp = rcustomProp.test( name );

    			// Make sure that we're working with the right name. We don't
    			// want to modify the value if it is a CSS custom property
    			// since they are user-defined.
    			if ( !isCustomProp ) {
    				name = finalPropName( origName );
    			}

    			// Try prefixed name followed by the unprefixed name
    			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

    			// If a hook was provided get the computed value from there
    			if ( hooks && "get" in hooks ) {
    				val = hooks.get( elem, true, extra );
    			}

    			// Otherwise, if a way to get the computed value exists, use that
    			if ( val === undefined ) {
    				val = curCSS( elem, name, styles );
    			}

    			// Convert "normal" to computed value
    			if ( val === "normal" && name in cssNormalTransform ) {
    				val = cssNormalTransform[ name ];
    			}

    			// Make numeric if forced or a qualifier was provided and val looks numeric
    			if ( extra === "" || extra ) {
    				num = parseFloat( val );
    				return extra === true || isFinite( num ) ? num || 0 : val;
    			}

    			return val;
    		}
    	} );

    	jQuery.each( [ "height", "width" ], function( _i, dimension ) {
    		jQuery.cssHooks[ dimension ] = {
    			get: function( elem, computed, extra ) {
    				if ( computed ) {

    					// Certain elements can have dimension info if we invisibly show them
    					// but it must have a current display style that would benefit
    					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

    						// Support: Safari 8+
    						// Table columns in Safari have non-zero offsetWidth & zero
    						// getBoundingClientRect().width unless display is changed.
    						// Support: IE <=11 only
    						// Running getBoundingClientRect on a disconnected node
    						// in IE throws an error.
    						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
    						swap( elem, cssShow, function() {
    							return getWidthOrHeight( elem, dimension, extra );
    						} ) :
    						getWidthOrHeight( elem, dimension, extra );
    				}
    			},

    			set: function( elem, value, extra ) {
    				var matches,
    					styles = getStyles( elem ),

    					// Only read styles.position if the test has a chance to fail
    					// to avoid forcing a reflow.
    					scrollboxSizeBuggy = !support.scrollboxSize() &&
    						styles.position === "absolute",

    					// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
    					boxSizingNeeded = scrollboxSizeBuggy || extra,
    					isBorderBox = boxSizingNeeded &&
    						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
    					subtract = extra ?
    						boxModelAdjustment(
    							elem,
    							dimension,
    							extra,
    							isBorderBox,
    							styles
    						) :
    						0;

    				// Account for unreliable border-box dimensions by comparing offset* to computed and
    				// faking a content-box to get border and padding (gh-3699)
    				if ( isBorderBox && scrollboxSizeBuggy ) {
    					subtract -= Math.ceil(
    						elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
    						parseFloat( styles[ dimension ] ) -
    						boxModelAdjustment( elem, dimension, "border", false, styles ) -
    						0.5
    					);
    				}

    				// Convert to pixels if value adjustment is needed
    				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
    					( matches[ 3 ] || "px" ) !== "px" ) {

    					elem.style[ dimension ] = value;
    					value = jQuery.css( elem, dimension );
    				}

    				return setPositiveNumber( elem, value, subtract );
    			}
    		};
    	} );

    	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
    		function( elem, computed ) {
    			if ( computed ) {
    				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
    					elem.getBoundingClientRect().left -
    						swap( elem, { marginLeft: 0 }, function() {
    							return elem.getBoundingClientRect().left;
    						} )
    				) + "px";
    			}
    		}
    	);

    	// These hooks are used by animate to expand properties
    	jQuery.each( {
    		margin: "",
    		padding: "",
    		border: "Width"
    	}, function( prefix, suffix ) {
    		jQuery.cssHooks[ prefix + suffix ] = {
    			expand: function( value ) {
    				var i = 0,
    					expanded = {},

    					// Assumes a single number if not a string
    					parts = typeof value === "string" ? value.split( " " ) : [ value ];

    				for ( ; i < 4; i++ ) {
    					expanded[ prefix + cssExpand[ i ] + suffix ] =
    						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
    				}

    				return expanded;
    			}
    		};

    		if ( prefix !== "margin" ) {
    			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
    		}
    	} );

    	jQuery.fn.extend( {
    		css: function( name, value ) {
    			return access( this, function( elem, name, value ) {
    				var styles, len,
    					map = {},
    					i = 0;

    				if ( Array.isArray( name ) ) {
    					styles = getStyles( elem );
    					len = name.length;

    					for ( ; i < len; i++ ) {
    						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
    					}

    					return map;
    				}

    				return value !== undefined ?
    					jQuery.style( elem, name, value ) :
    					jQuery.css( elem, name );
    			}, name, value, arguments.length > 1 );
    		}
    	} );


    	function Tween( elem, options, prop, end, easing ) {
    		return new Tween.prototype.init( elem, options, prop, end, easing );
    	}
    	jQuery.Tween = Tween;

    	Tween.prototype = {
    		constructor: Tween,
    		init: function( elem, options, prop, end, easing, unit ) {
    			this.elem = elem;
    			this.prop = prop;
    			this.easing = easing || jQuery.easing._default;
    			this.options = options;
    			this.start = this.now = this.cur();
    			this.end = end;
    			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
    		},
    		cur: function() {
    			var hooks = Tween.propHooks[ this.prop ];

    			return hooks && hooks.get ?
    				hooks.get( this ) :
    				Tween.propHooks._default.get( this );
    		},
    		run: function( percent ) {
    			var eased,
    				hooks = Tween.propHooks[ this.prop ];

    			if ( this.options.duration ) {
    				this.pos = eased = jQuery.easing[ this.easing ](
    					percent, this.options.duration * percent, 0, 1, this.options.duration
    				);
    			} else {
    				this.pos = eased = percent;
    			}
    			this.now = ( this.end - this.start ) * eased + this.start;

    			if ( this.options.step ) {
    				this.options.step.call( this.elem, this.now, this );
    			}

    			if ( hooks && hooks.set ) {
    				hooks.set( this );
    			} else {
    				Tween.propHooks._default.set( this );
    			}
    			return this;
    		}
    	};

    	Tween.prototype.init.prototype = Tween.prototype;

    	Tween.propHooks = {
    		_default: {
    			get: function( tween ) {
    				var result;

    				// Use a property on the element directly when it is not a DOM element,
    				// or when there is no matching style property that exists.
    				if ( tween.elem.nodeType !== 1 ||
    					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
    					return tween.elem[ tween.prop ];
    				}

    				// Passing an empty string as a 3rd parameter to .css will automatically
    				// attempt a parseFloat and fallback to a string if the parse fails.
    				// Simple values such as "10px" are parsed to Float;
    				// complex values such as "rotate(1rad)" are returned as-is.
    				result = jQuery.css( tween.elem, tween.prop, "" );

    				// Empty strings, null, undefined and "auto" are converted to 0.
    				return !result || result === "auto" ? 0 : result;
    			},
    			set: function( tween ) {

    				// Use step hook for back compat.
    				// Use cssHook if its there.
    				// Use .style if available and use plain properties where available.
    				if ( jQuery.fx.step[ tween.prop ] ) {
    					jQuery.fx.step[ tween.prop ]( tween );
    				} else if ( tween.elem.nodeType === 1 && (
    					jQuery.cssHooks[ tween.prop ] ||
    						tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
    					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
    				} else {
    					tween.elem[ tween.prop ] = tween.now;
    				}
    			}
    		}
    	};

    	// Support: IE <=9 only
    	// Panic based approach to setting things on disconnected nodes
    	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    		set: function( tween ) {
    			if ( tween.elem.nodeType && tween.elem.parentNode ) {
    				tween.elem[ tween.prop ] = tween.now;
    			}
    		}
    	};

    	jQuery.easing = {
    		linear: function( p ) {
    			return p;
    		},
    		swing: function( p ) {
    			return 0.5 - Math.cos( p * Math.PI ) / 2;
    		},
    		_default: "swing"
    	};

    	jQuery.fx = Tween.prototype.init;

    	// Back compat <1.8 extension point
    	jQuery.fx.step = {};




    	var
    		fxNow, inProgress,
    		rfxtypes = /^(?:toggle|show|hide)$/,
    		rrun = /queueHooks$/;

    	function schedule() {
    		if ( inProgress ) {
    			if ( document.hidden === false && window.requestAnimationFrame ) {
    				window.requestAnimationFrame( schedule );
    			} else {
    				window.setTimeout( schedule, jQuery.fx.interval );
    			}

    			jQuery.fx.tick();
    		}
    	}

    	// Animations created synchronously will run synchronously
    	function createFxNow() {
    		window.setTimeout( function() {
    			fxNow = undefined;
    		} );
    		return ( fxNow = Date.now() );
    	}

    	// Generate parameters to create a standard animation
    	function genFx( type, includeWidth ) {
    		var which,
    			i = 0,
    			attrs = { height: type };

    		// If we include width, step value is 1 to do all cssExpand values,
    		// otherwise step value is 2 to skip over Left and Right
    		includeWidth = includeWidth ? 1 : 0;
    		for ( ; i < 4; i += 2 - includeWidth ) {
    			which = cssExpand[ i ];
    			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
    		}

    		if ( includeWidth ) {
    			attrs.opacity = attrs.width = type;
    		}

    		return attrs;
    	}

    	function createTween( value, prop, animation ) {
    		var tween,
    			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
    			index = 0,
    			length = collection.length;
    		for ( ; index < length; index++ ) {
    			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

    				// We're done with this property
    				return tween;
    			}
    		}
    	}

    	function defaultPrefilter( elem, props, opts ) {
    		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
    			isBox = "width" in props || "height" in props,
    			anim = this,
    			orig = {},
    			style = elem.style,
    			hidden = elem.nodeType && isHiddenWithinTree( elem ),
    			dataShow = dataPriv.get( elem, "fxshow" );

    		// Queue-skipping animations hijack the fx hooks
    		if ( !opts.queue ) {
    			hooks = jQuery._queueHooks( elem, "fx" );
    			if ( hooks.unqueued == null ) {
    				hooks.unqueued = 0;
    				oldfire = hooks.empty.fire;
    				hooks.empty.fire = function() {
    					if ( !hooks.unqueued ) {
    						oldfire();
    					}
    				};
    			}
    			hooks.unqueued++;

    			anim.always( function() {

    				// Ensure the complete handler is called before this completes
    				anim.always( function() {
    					hooks.unqueued--;
    					if ( !jQuery.queue( elem, "fx" ).length ) {
    						hooks.empty.fire();
    					}
    				} );
    			} );
    		}

    		// Detect show/hide animations
    		for ( prop in props ) {
    			value = props[ prop ];
    			if ( rfxtypes.test( value ) ) {
    				delete props[ prop ];
    				toggle = toggle || value === "toggle";
    				if ( value === ( hidden ? "hide" : "show" ) ) {

    					// Pretend to be hidden if this is a "show" and
    					// there is still data from a stopped show/hide
    					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
    						hidden = true;

    					// Ignore all other no-op show/hide data
    					} else {
    						continue;
    					}
    				}
    				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
    			}
    		}

    		// Bail out if this is a no-op like .hide().hide()
    		propTween = !jQuery.isEmptyObject( props );
    		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
    			return;
    		}

    		// Restrict "overflow" and "display" styles during box animations
    		if ( isBox && elem.nodeType === 1 ) {

    			// Support: IE <=9 - 11, Edge 12 - 15
    			// Record all 3 overflow attributes because IE does not infer the shorthand
    			// from identically-valued overflowX and overflowY and Edge just mirrors
    			// the overflowX value there.
    			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

    			// Identify a display type, preferring old show/hide data over the CSS cascade
    			restoreDisplay = dataShow && dataShow.display;
    			if ( restoreDisplay == null ) {
    				restoreDisplay = dataPriv.get( elem, "display" );
    			}
    			display = jQuery.css( elem, "display" );
    			if ( display === "none" ) {
    				if ( restoreDisplay ) {
    					display = restoreDisplay;
    				} else {

    					// Get nonempty value(s) by temporarily forcing visibility
    					showHide( [ elem ], true );
    					restoreDisplay = elem.style.display || restoreDisplay;
    					display = jQuery.css( elem, "display" );
    					showHide( [ elem ] );
    				}
    			}

    			// Animate inline elements as inline-block
    			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
    				if ( jQuery.css( elem, "float" ) === "none" ) {

    					// Restore the original display value at the end of pure show/hide animations
    					if ( !propTween ) {
    						anim.done( function() {
    							style.display = restoreDisplay;
    						} );
    						if ( restoreDisplay == null ) {
    							display = style.display;
    							restoreDisplay = display === "none" ? "" : display;
    						}
    					}
    					style.display = "inline-block";
    				}
    			}
    		}

    		if ( opts.overflow ) {
    			style.overflow = "hidden";
    			anim.always( function() {
    				style.overflow = opts.overflow[ 0 ];
    				style.overflowX = opts.overflow[ 1 ];
    				style.overflowY = opts.overflow[ 2 ];
    			} );
    		}

    		// Implement show/hide animations
    		propTween = false;
    		for ( prop in orig ) {

    			// General show/hide setup for this element animation
    			if ( !propTween ) {
    				if ( dataShow ) {
    					if ( "hidden" in dataShow ) {
    						hidden = dataShow.hidden;
    					}
    				} else {
    					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
    				}

    				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
    				if ( toggle ) {
    					dataShow.hidden = !hidden;
    				}

    				// Show elements before animating them
    				if ( hidden ) {
    					showHide( [ elem ], true );
    				}

    				/* eslint-disable no-loop-func */

    				anim.done( function() {

    					/* eslint-enable no-loop-func */

    					// The final step of a "hide" animation is actually hiding the element
    					if ( !hidden ) {
    						showHide( [ elem ] );
    					}
    					dataPriv.remove( elem, "fxshow" );
    					for ( prop in orig ) {
    						jQuery.style( elem, prop, orig[ prop ] );
    					}
    				} );
    			}

    			// Per-property setup
    			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
    			if ( !( prop in dataShow ) ) {
    				dataShow[ prop ] = propTween.start;
    				if ( hidden ) {
    					propTween.end = propTween.start;
    					propTween.start = 0;
    				}
    			}
    		}
    	}

    	function propFilter( props, specialEasing ) {
    		var index, name, easing, value, hooks;

    		// camelCase, specialEasing and expand cssHook pass
    		for ( index in props ) {
    			name = camelCase( index );
    			easing = specialEasing[ name ];
    			value = props[ index ];
    			if ( Array.isArray( value ) ) {
    				easing = value[ 1 ];
    				value = props[ index ] = value[ 0 ];
    			}

    			if ( index !== name ) {
    				props[ name ] = value;
    				delete props[ index ];
    			}

    			hooks = jQuery.cssHooks[ name ];
    			if ( hooks && "expand" in hooks ) {
    				value = hooks.expand( value );
    				delete props[ name ];

    				// Not quite $.extend, this won't overwrite existing keys.
    				// Reusing 'index' because we have the correct "name"
    				for ( index in value ) {
    					if ( !( index in props ) ) {
    						props[ index ] = value[ index ];
    						specialEasing[ index ] = easing;
    					}
    				}
    			} else {
    				specialEasing[ name ] = easing;
    			}
    		}
    	}

    	function Animation( elem, properties, options ) {
    		var result,
    			stopped,
    			index = 0,
    			length = Animation.prefilters.length,
    			deferred = jQuery.Deferred().always( function() {

    				// Don't match elem in the :animated selector
    				delete tick.elem;
    			} ),
    			tick = function() {
    				if ( stopped ) {
    					return false;
    				}
    				var currentTime = fxNow || createFxNow(),
    					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

    					// Support: Android 2.3 only
    					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
    					temp = remaining / animation.duration || 0,
    					percent = 1 - temp,
    					index = 0,
    					length = animation.tweens.length;

    				for ( ; index < length; index++ ) {
    					animation.tweens[ index ].run( percent );
    				}

    				deferred.notifyWith( elem, [ animation, percent, remaining ] );

    				// If there's more to do, yield
    				if ( percent < 1 && length ) {
    					return remaining;
    				}

    				// If this was an empty animation, synthesize a final progress notification
    				if ( !length ) {
    					deferred.notifyWith( elem, [ animation, 1, 0 ] );
    				}

    				// Resolve the animation and report its conclusion
    				deferred.resolveWith( elem, [ animation ] );
    				return false;
    			},
    			animation = deferred.promise( {
    				elem: elem,
    				props: jQuery.extend( {}, properties ),
    				opts: jQuery.extend( true, {
    					specialEasing: {},
    					easing: jQuery.easing._default
    				}, options ),
    				originalProperties: properties,
    				originalOptions: options,
    				startTime: fxNow || createFxNow(),
    				duration: options.duration,
    				tweens: [],
    				createTween: function( prop, end ) {
    					var tween = jQuery.Tween( elem, animation.opts, prop, end,
    						animation.opts.specialEasing[ prop ] || animation.opts.easing );
    					animation.tweens.push( tween );
    					return tween;
    				},
    				stop: function( gotoEnd ) {
    					var index = 0,

    						// If we are going to the end, we want to run all the tweens
    						// otherwise we skip this part
    						length = gotoEnd ? animation.tweens.length : 0;
    					if ( stopped ) {
    						return this;
    					}
    					stopped = true;
    					for ( ; index < length; index++ ) {
    						animation.tweens[ index ].run( 1 );
    					}

    					// Resolve when we played the last frame; otherwise, reject
    					if ( gotoEnd ) {
    						deferred.notifyWith( elem, [ animation, 1, 0 ] );
    						deferred.resolveWith( elem, [ animation, gotoEnd ] );
    					} else {
    						deferred.rejectWith( elem, [ animation, gotoEnd ] );
    					}
    					return this;
    				}
    			} ),
    			props = animation.props;

    		propFilter( props, animation.opts.specialEasing );

    		for ( ; index < length; index++ ) {
    			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
    			if ( result ) {
    				if ( isFunction( result.stop ) ) {
    					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
    						result.stop.bind( result );
    				}
    				return result;
    			}
    		}

    		jQuery.map( props, createTween, animation );

    		if ( isFunction( animation.opts.start ) ) {
    			animation.opts.start.call( elem, animation );
    		}

    		// Attach callbacks from options
    		animation
    			.progress( animation.opts.progress )
    			.done( animation.opts.done, animation.opts.complete )
    			.fail( animation.opts.fail )
    			.always( animation.opts.always );

    		jQuery.fx.timer(
    			jQuery.extend( tick, {
    				elem: elem,
    				anim: animation,
    				queue: animation.opts.queue
    			} )
    		);

    		return animation;
    	}

    	jQuery.Animation = jQuery.extend( Animation, {

    		tweeners: {
    			"*": [ function( prop, value ) {
    				var tween = this.createTween( prop, value );
    				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
    				return tween;
    			} ]
    		},

    		tweener: function( props, callback ) {
    			if ( isFunction( props ) ) {
    				callback = props;
    				props = [ "*" ];
    			} else {
    				props = props.match( rnothtmlwhite );
    			}

    			var prop,
    				index = 0,
    				length = props.length;

    			for ( ; index < length; index++ ) {
    				prop = props[ index ];
    				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
    				Animation.tweeners[ prop ].unshift( callback );
    			}
    		},

    		prefilters: [ defaultPrefilter ],

    		prefilter: function( callback, prepend ) {
    			if ( prepend ) {
    				Animation.prefilters.unshift( callback );
    			} else {
    				Animation.prefilters.push( callback );
    			}
    		}
    	} );

    	jQuery.speed = function( speed, easing, fn ) {
    		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
    			complete: fn || !fn && easing ||
    				isFunction( speed ) && speed,
    			duration: speed,
    			easing: fn && easing || easing && !isFunction( easing ) && easing
    		};

    		// Go to the end state if fx are off
    		if ( jQuery.fx.off ) {
    			opt.duration = 0;

    		} else {
    			if ( typeof opt.duration !== "number" ) {
    				if ( opt.duration in jQuery.fx.speeds ) {
    					opt.duration = jQuery.fx.speeds[ opt.duration ];

    				} else {
    					opt.duration = jQuery.fx.speeds._default;
    				}
    			}
    		}

    		// Normalize opt.queue - true/undefined/null -> "fx"
    		if ( opt.queue == null || opt.queue === true ) {
    			opt.queue = "fx";
    		}

    		// Queueing
    		opt.old = opt.complete;

    		opt.complete = function() {
    			if ( isFunction( opt.old ) ) {
    				opt.old.call( this );
    			}

    			if ( opt.queue ) {
    				jQuery.dequeue( this, opt.queue );
    			}
    		};

    		return opt;
    	};

    	jQuery.fn.extend( {
    		fadeTo: function( speed, to, easing, callback ) {

    			// Show any hidden elements after setting opacity to 0
    			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

    				// Animate to the value specified
    				.end().animate( { opacity: to }, speed, easing, callback );
    		},
    		animate: function( prop, speed, easing, callback ) {
    			var empty = jQuery.isEmptyObject( prop ),
    				optall = jQuery.speed( speed, easing, callback ),
    				doAnimation = function() {

    					// Operate on a copy of prop so per-property easing won't be lost
    					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

    					// Empty animations, or finishing resolves immediately
    					if ( empty || dataPriv.get( this, "finish" ) ) {
    						anim.stop( true );
    					}
    				};

    			doAnimation.finish = doAnimation;

    			return empty || optall.queue === false ?
    				this.each( doAnimation ) :
    				this.queue( optall.queue, doAnimation );
    		},
    		stop: function( type, clearQueue, gotoEnd ) {
    			var stopQueue = function( hooks ) {
    				var stop = hooks.stop;
    				delete hooks.stop;
    				stop( gotoEnd );
    			};

    			if ( typeof type !== "string" ) {
    				gotoEnd = clearQueue;
    				clearQueue = type;
    				type = undefined;
    			}
    			if ( clearQueue ) {
    				this.queue( type || "fx", [] );
    			}

    			return this.each( function() {
    				var dequeue = true,
    					index = type != null && type + "queueHooks",
    					timers = jQuery.timers,
    					data = dataPriv.get( this );

    				if ( index ) {
    					if ( data[ index ] && data[ index ].stop ) {
    						stopQueue( data[ index ] );
    					}
    				} else {
    					for ( index in data ) {
    						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
    							stopQueue( data[ index ] );
    						}
    					}
    				}

    				for ( index = timers.length; index--; ) {
    					if ( timers[ index ].elem === this &&
    						( type == null || timers[ index ].queue === type ) ) {

    						timers[ index ].anim.stop( gotoEnd );
    						dequeue = false;
    						timers.splice( index, 1 );
    					}
    				}

    				// Start the next in the queue if the last step wasn't forced.
    				// Timers currently will call their complete callbacks, which
    				// will dequeue but only if they were gotoEnd.
    				if ( dequeue || !gotoEnd ) {
    					jQuery.dequeue( this, type );
    				}
    			} );
    		},
    		finish: function( type ) {
    			if ( type !== false ) {
    				type = type || "fx";
    			}
    			return this.each( function() {
    				var index,
    					data = dataPriv.get( this ),
    					queue = data[ type + "queue" ],
    					hooks = data[ type + "queueHooks" ],
    					timers = jQuery.timers,
    					length = queue ? queue.length : 0;

    				// Enable finishing flag on private data
    				data.finish = true;

    				// Empty the queue first
    				jQuery.queue( this, type, [] );

    				if ( hooks && hooks.stop ) {
    					hooks.stop.call( this, true );
    				}

    				// Look for any active animations, and finish them
    				for ( index = timers.length; index--; ) {
    					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
    						timers[ index ].anim.stop( true );
    						timers.splice( index, 1 );
    					}
    				}

    				// Look for any animations in the old queue and finish them
    				for ( index = 0; index < length; index++ ) {
    					if ( queue[ index ] && queue[ index ].finish ) {
    						queue[ index ].finish.call( this );
    					}
    				}

    				// Turn off finishing flag
    				delete data.finish;
    			} );
    		}
    	} );

    	jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
    		var cssFn = jQuery.fn[ name ];
    		jQuery.fn[ name ] = function( speed, easing, callback ) {
    			return speed == null || typeof speed === "boolean" ?
    				cssFn.apply( this, arguments ) :
    				this.animate( genFx( name, true ), speed, easing, callback );
    		};
    	} );

    	// Generate shortcuts for custom animations
    	jQuery.each( {
    		slideDown: genFx( "show" ),
    		slideUp: genFx( "hide" ),
    		slideToggle: genFx( "toggle" ),
    		fadeIn: { opacity: "show" },
    		fadeOut: { opacity: "hide" },
    		fadeToggle: { opacity: "toggle" }
    	}, function( name, props ) {
    		jQuery.fn[ name ] = function( speed, easing, callback ) {
    			return this.animate( props, speed, easing, callback );
    		};
    	} );

    	jQuery.timers = [];
    	jQuery.fx.tick = function() {
    		var timer,
    			i = 0,
    			timers = jQuery.timers;

    		fxNow = Date.now();

    		for ( ; i < timers.length; i++ ) {
    			timer = timers[ i ];

    			// Run the timer and safely remove it when done (allowing for external removal)
    			if ( !timer() && timers[ i ] === timer ) {
    				timers.splice( i--, 1 );
    			}
    		}

    		if ( !timers.length ) {
    			jQuery.fx.stop();
    		}
    		fxNow = undefined;
    	};

    	jQuery.fx.timer = function( timer ) {
    		jQuery.timers.push( timer );
    		jQuery.fx.start();
    	};

    	jQuery.fx.interval = 13;
    	jQuery.fx.start = function() {
    		if ( inProgress ) {
    			return;
    		}

    		inProgress = true;
    		schedule();
    	};

    	jQuery.fx.stop = function() {
    		inProgress = null;
    	};

    	jQuery.fx.speeds = {
    		slow: 600,
    		fast: 200,

    		// Default speed
    		_default: 400
    	};


    	// Based off of the plugin by Clint Helfers, with permission.
    	jQuery.fn.delay = function( time, type ) {
    		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
    		type = type || "fx";

    		return this.queue( type, function( next, hooks ) {
    			var timeout = window.setTimeout( next, time );
    			hooks.stop = function() {
    				window.clearTimeout( timeout );
    			};
    		} );
    	};


    	( function() {
    		var input = document.createElement( "input" ),
    			select = document.createElement( "select" ),
    			opt = select.appendChild( document.createElement( "option" ) );

    		input.type = "checkbox";

    		// Support: Android <=4.3 only
    		// Default value for a checkbox should be "on"
    		support.checkOn = input.value !== "";

    		// Support: IE <=11 only
    		// Must access selectedIndex to make default options select
    		support.optSelected = opt.selected;

    		// Support: IE <=11 only
    		// An input loses its value after becoming a radio
    		input = document.createElement( "input" );
    		input.value = "t";
    		input.type = "radio";
    		support.radioValue = input.value === "t";
    	} )();


    	var boolHook,
    		attrHandle = jQuery.expr.attrHandle;

    	jQuery.fn.extend( {
    		attr: function( name, value ) {
    			return access( this, jQuery.attr, name, value, arguments.length > 1 );
    		},

    		removeAttr: function( name ) {
    			return this.each( function() {
    				jQuery.removeAttr( this, name );
    			} );
    		}
    	} );

    	jQuery.extend( {
    		attr: function( elem, name, value ) {
    			var ret, hooks,
    				nType = elem.nodeType;

    			// Don't get/set attributes on text, comment and attribute nodes
    			if ( nType === 3 || nType === 8 || nType === 2 ) {
    				return;
    			}

    			// Fallback to prop when attributes are not supported
    			if ( typeof elem.getAttribute === "undefined" ) {
    				return jQuery.prop( elem, name, value );
    			}

    			// Attribute hooks are determined by the lowercase version
    			// Grab necessary hook if one is defined
    			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
    				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
    					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
    			}

    			if ( value !== undefined ) {
    				if ( value === null ) {
    					jQuery.removeAttr( elem, name );
    					return;
    				}

    				if ( hooks && "set" in hooks &&
    					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
    					return ret;
    				}

    				elem.setAttribute( name, value + "" );
    				return value;
    			}

    			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
    				return ret;
    			}

    			ret = jQuery.find.attr( elem, name );

    			// Non-existent attributes return null, we normalize to undefined
    			return ret == null ? undefined : ret;
    		},

    		attrHooks: {
    			type: {
    				set: function( elem, value ) {
    					if ( !support.radioValue && value === "radio" &&
    						nodeName( elem, "input" ) ) {
    						var val = elem.value;
    						elem.setAttribute( "type", value );
    						if ( val ) {
    							elem.value = val;
    						}
    						return value;
    					}
    				}
    			}
    		},

    		removeAttr: function( elem, value ) {
    			var name,
    				i = 0,

    				// Attribute names can contain non-HTML whitespace characters
    				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
    				attrNames = value && value.match( rnothtmlwhite );

    			if ( attrNames && elem.nodeType === 1 ) {
    				while ( ( name = attrNames[ i++ ] ) ) {
    					elem.removeAttribute( name );
    				}
    			}
    		}
    	} );

    	// Hooks for boolean attributes
    	boolHook = {
    		set: function( elem, value, name ) {
    			if ( value === false ) {

    				// Remove boolean attributes when set to false
    				jQuery.removeAttr( elem, name );
    			} else {
    				elem.setAttribute( name, name );
    			}
    			return name;
    		}
    	};

    	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
    		var getter = attrHandle[ name ] || jQuery.find.attr;

    		attrHandle[ name ] = function( elem, name, isXML ) {
    			var ret, handle,
    				lowercaseName = name.toLowerCase();

    			if ( !isXML ) {

    				// Avoid an infinite loop by temporarily removing this function from the getter
    				handle = attrHandle[ lowercaseName ];
    				attrHandle[ lowercaseName ] = ret;
    				ret = getter( elem, name, isXML ) != null ?
    					lowercaseName :
    					null;
    				attrHandle[ lowercaseName ] = handle;
    			}
    			return ret;
    		};
    	} );




    	var rfocusable = /^(?:input|select|textarea|button)$/i,
    		rclickable = /^(?:a|area)$/i;

    	jQuery.fn.extend( {
    		prop: function( name, value ) {
    			return access( this, jQuery.prop, name, value, arguments.length > 1 );
    		},

    		removeProp: function( name ) {
    			return this.each( function() {
    				delete this[ jQuery.propFix[ name ] || name ];
    			} );
    		}
    	} );

    	jQuery.extend( {
    		prop: function( elem, name, value ) {
    			var ret, hooks,
    				nType = elem.nodeType;

    			// Don't get/set properties on text, comment and attribute nodes
    			if ( nType === 3 || nType === 8 || nType === 2 ) {
    				return;
    			}

    			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

    				// Fix name and attach hooks
    				name = jQuery.propFix[ name ] || name;
    				hooks = jQuery.propHooks[ name ];
    			}

    			if ( value !== undefined ) {
    				if ( hooks && "set" in hooks &&
    					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
    					return ret;
    				}

    				return ( elem[ name ] = value );
    			}

    			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
    				return ret;
    			}

    			return elem[ name ];
    		},

    		propHooks: {
    			tabIndex: {
    				get: function( elem ) {

    					// Support: IE <=9 - 11 only
    					// elem.tabIndex doesn't always return the
    					// correct value when it hasn't been explicitly set
    					// Use proper attribute retrieval (trac-12072)
    					var tabindex = jQuery.find.attr( elem, "tabindex" );

    					if ( tabindex ) {
    						return parseInt( tabindex, 10 );
    					}

    					if (
    						rfocusable.test( elem.nodeName ) ||
    						rclickable.test( elem.nodeName ) &&
    						elem.href
    					) {
    						return 0;
    					}

    					return -1;
    				}
    			}
    		},

    		propFix: {
    			"for": "htmlFor",
    			"class": "className"
    		}
    	} );

    	// Support: IE <=11 only
    	// Accessing the selectedIndex property
    	// forces the browser to respect setting selected
    	// on the option
    	// The getter ensures a default option is selected
    	// when in an optgroup
    	// eslint rule "no-unused-expressions" is disabled for this code
    	// since it considers such accessions noop
    	if ( !support.optSelected ) {
    		jQuery.propHooks.selected = {
    			get: function( elem ) {

    				/* eslint no-unused-expressions: "off" */

    				var parent = elem.parentNode;
    				if ( parent && parent.parentNode ) {
    					parent.parentNode.selectedIndex;
    				}
    				return null;
    			},
    			set: function( elem ) {

    				/* eslint no-unused-expressions: "off" */

    				var parent = elem.parentNode;
    				if ( parent ) {
    					parent.selectedIndex;

    					if ( parent.parentNode ) {
    						parent.parentNode.selectedIndex;
    					}
    				}
    			}
    		};
    	}

    	jQuery.each( [
    		"tabIndex",
    		"readOnly",
    		"maxLength",
    		"cellSpacing",
    		"cellPadding",
    		"rowSpan",
    		"colSpan",
    		"useMap",
    		"frameBorder",
    		"contentEditable"
    	], function() {
    		jQuery.propFix[ this.toLowerCase() ] = this;
    	} );




    		// Strip and collapse whitespace according to HTML spec
    		// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
    		function stripAndCollapse( value ) {
    			var tokens = value.match( rnothtmlwhite ) || [];
    			return tokens.join( " " );
    		}


    	function getClass( elem ) {
    		return elem.getAttribute && elem.getAttribute( "class" ) || "";
    	}

    	function classesToArray( value ) {
    		if ( Array.isArray( value ) ) {
    			return value;
    		}
    		if ( typeof value === "string" ) {
    			return value.match( rnothtmlwhite ) || [];
    		}
    		return [];
    	}

    	jQuery.fn.extend( {
    		addClass: function( value ) {
    			var classNames, cur, curValue, className, i, finalValue;

    			if ( isFunction( value ) ) {
    				return this.each( function( j ) {
    					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
    				} );
    			}

    			classNames = classesToArray( value );

    			if ( classNames.length ) {
    				return this.each( function() {
    					curValue = getClass( this );
    					cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

    					if ( cur ) {
    						for ( i = 0; i < classNames.length; i++ ) {
    							className = classNames[ i ];
    							if ( cur.indexOf( " " + className + " " ) < 0 ) {
    								cur += className + " ";
    							}
    						}

    						// Only assign if different to avoid unneeded rendering.
    						finalValue = stripAndCollapse( cur );
    						if ( curValue !== finalValue ) {
    							this.setAttribute( "class", finalValue );
    						}
    					}
    				} );
    			}

    			return this;
    		},

    		removeClass: function( value ) {
    			var classNames, cur, curValue, className, i, finalValue;

    			if ( isFunction( value ) ) {
    				return this.each( function( j ) {
    					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
    				} );
    			}

    			if ( !arguments.length ) {
    				return this.attr( "class", "" );
    			}

    			classNames = classesToArray( value );

    			if ( classNames.length ) {
    				return this.each( function() {
    					curValue = getClass( this );

    					// This expression is here for better compressibility (see addClass)
    					cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

    					if ( cur ) {
    						for ( i = 0; i < classNames.length; i++ ) {
    							className = classNames[ i ];

    							// Remove *all* instances
    							while ( cur.indexOf( " " + className + " " ) > -1 ) {
    								cur = cur.replace( " " + className + " ", " " );
    							}
    						}

    						// Only assign if different to avoid unneeded rendering.
    						finalValue = stripAndCollapse( cur );
    						if ( curValue !== finalValue ) {
    							this.setAttribute( "class", finalValue );
    						}
    					}
    				} );
    			}

    			return this;
    		},

    		toggleClass: function( value, stateVal ) {
    			var classNames, className, i, self,
    				type = typeof value,
    				isValidValue = type === "string" || Array.isArray( value );

    			if ( isFunction( value ) ) {
    				return this.each( function( i ) {
    					jQuery( this ).toggleClass(
    						value.call( this, i, getClass( this ), stateVal ),
    						stateVal
    					);
    				} );
    			}

    			if ( typeof stateVal === "boolean" && isValidValue ) {
    				return stateVal ? this.addClass( value ) : this.removeClass( value );
    			}

    			classNames = classesToArray( value );

    			return this.each( function() {
    				if ( isValidValue ) {

    					// Toggle individual class names
    					self = jQuery( this );

    					for ( i = 0; i < classNames.length; i++ ) {
    						className = classNames[ i ];

    						// Check each className given, space separated list
    						if ( self.hasClass( className ) ) {
    							self.removeClass( className );
    						} else {
    							self.addClass( className );
    						}
    					}

    				// Toggle whole class name
    				} else if ( value === undefined || type === "boolean" ) {
    					className = getClass( this );
    					if ( className ) {

    						// Store className if set
    						dataPriv.set( this, "__className__", className );
    					}

    					// If the element has a class name or if we're passed `false`,
    					// then remove the whole classname (if there was one, the above saved it).
    					// Otherwise bring back whatever was previously saved (if anything),
    					// falling back to the empty string if nothing was stored.
    					if ( this.setAttribute ) {
    						this.setAttribute( "class",
    							className || value === false ?
    								"" :
    								dataPriv.get( this, "__className__" ) || ""
    						);
    					}
    				}
    			} );
    		},

    		hasClass: function( selector ) {
    			var className, elem,
    				i = 0;

    			className = " " + selector + " ";
    			while ( ( elem = this[ i++ ] ) ) {
    				if ( elem.nodeType === 1 &&
    					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
    					return true;
    				}
    			}

    			return false;
    		}
    	} );




    	var rreturn = /\r/g;

    	jQuery.fn.extend( {
    		val: function( value ) {
    			var hooks, ret, valueIsFunction,
    				elem = this[ 0 ];

    			if ( !arguments.length ) {
    				if ( elem ) {
    					hooks = jQuery.valHooks[ elem.type ] ||
    						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

    					if ( hooks &&
    						"get" in hooks &&
    						( ret = hooks.get( elem, "value" ) ) !== undefined
    					) {
    						return ret;
    					}

    					ret = elem.value;

    					// Handle most common string cases
    					if ( typeof ret === "string" ) {
    						return ret.replace( rreturn, "" );
    					}

    					// Handle cases where value is null/undef or number
    					return ret == null ? "" : ret;
    				}

    				return;
    			}

    			valueIsFunction = isFunction( value );

    			return this.each( function( i ) {
    				var val;

    				if ( this.nodeType !== 1 ) {
    					return;
    				}

    				if ( valueIsFunction ) {
    					val = value.call( this, i, jQuery( this ).val() );
    				} else {
    					val = value;
    				}

    				// Treat null/undefined as ""; convert numbers to string
    				if ( val == null ) {
    					val = "";

    				} else if ( typeof val === "number" ) {
    					val += "";

    				} else if ( Array.isArray( val ) ) {
    					val = jQuery.map( val, function( value ) {
    						return value == null ? "" : value + "";
    					} );
    				}

    				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

    				// If set returns undefined, fall back to normal setting
    				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
    					this.value = val;
    				}
    			} );
    		}
    	} );

    	jQuery.extend( {
    		valHooks: {
    			option: {
    				get: function( elem ) {

    					var val = jQuery.find.attr( elem, "value" );
    					return val != null ?
    						val :

    						// Support: IE <=10 - 11 only
    						// option.text throws exceptions (trac-14686, trac-14858)
    						// Strip and collapse whitespace
    						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
    						stripAndCollapse( jQuery.text( elem ) );
    				}
    			},
    			select: {
    				get: function( elem ) {
    					var value, option, i,
    						options = elem.options,
    						index = elem.selectedIndex,
    						one = elem.type === "select-one",
    						values = one ? null : [],
    						max = one ? index + 1 : options.length;

    					if ( index < 0 ) {
    						i = max;

    					} else {
    						i = one ? index : 0;
    					}

    					// Loop through all the selected options
    					for ( ; i < max; i++ ) {
    						option = options[ i ];

    						// Support: IE <=9 only
    						// IE8-9 doesn't update selected after form reset (trac-2551)
    						if ( ( option.selected || i === index ) &&

    								// Don't return options that are disabled or in a disabled optgroup
    								!option.disabled &&
    								( !option.parentNode.disabled ||
    									!nodeName( option.parentNode, "optgroup" ) ) ) {

    							// Get the specific value for the option
    							value = jQuery( option ).val();

    							// We don't need an array for one selects
    							if ( one ) {
    								return value;
    							}

    							// Multi-Selects return an array
    							values.push( value );
    						}
    					}

    					return values;
    				},

    				set: function( elem, value ) {
    					var optionSet, option,
    						options = elem.options,
    						values = jQuery.makeArray( value ),
    						i = options.length;

    					while ( i-- ) {
    						option = options[ i ];

    						/* eslint-disable no-cond-assign */

    						if ( option.selected =
    							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
    						) {
    							optionSet = true;
    						}

    						/* eslint-enable no-cond-assign */
    					}

    					// Force browsers to behave consistently when non-matching value is set
    					if ( !optionSet ) {
    						elem.selectedIndex = -1;
    					}
    					return values;
    				}
    			}
    		}
    	} );

    	// Radios and checkboxes getter/setter
    	jQuery.each( [ "radio", "checkbox" ], function() {
    		jQuery.valHooks[ this ] = {
    			set: function( elem, value ) {
    				if ( Array.isArray( value ) ) {
    					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
    				}
    			}
    		};
    		if ( !support.checkOn ) {
    			jQuery.valHooks[ this ].get = function( elem ) {
    				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
    			};
    		}
    	} );




    	// Return jQuery for attributes-only inclusion
    	var location = window.location;

    	var nonce = { guid: Date.now() };

    	var rquery = ( /\?/ );



    	// Cross-browser xml parsing
    	jQuery.parseXML = function( data ) {
    		var xml, parserErrorElem;
    		if ( !data || typeof data !== "string" ) {
    			return null;
    		}

    		// Support: IE 9 - 11 only
    		// IE throws on parseFromString with invalid input.
    		try {
    			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
    		} catch ( e ) {}

    		parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
    		if ( !xml || parserErrorElem ) {
    			jQuery.error( "Invalid XML: " + (
    				parserErrorElem ?
    					jQuery.map( parserErrorElem.childNodes, function( el ) {
    						return el.textContent;
    					} ).join( "\n" ) :
    					data
    			) );
    		}
    		return xml;
    	};


    	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    		stopPropagationCallback = function( e ) {
    			e.stopPropagation();
    		};

    	jQuery.extend( jQuery.event, {

    		trigger: function( event, data, elem, onlyHandlers ) {

    			var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
    				eventPath = [ elem || document ],
    				type = hasOwn.call( event, "type" ) ? event.type : event,
    				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

    			cur = lastElement = tmp = elem = elem || document;

    			// Don't do events on text and comment nodes
    			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
    				return;
    			}

    			// focus/blur morphs to focusin/out; ensure we're not firing them right now
    			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
    				return;
    			}

    			if ( type.indexOf( "." ) > -1 ) {

    				// Namespaced trigger; create a regexp to match event type in handle()
    				namespaces = type.split( "." );
    				type = namespaces.shift();
    				namespaces.sort();
    			}
    			ontype = type.indexOf( ":" ) < 0 && "on" + type;

    			// Caller can pass in a jQuery.Event object, Object, or just an event type string
    			event = event[ jQuery.expando ] ?
    				event :
    				new jQuery.Event( type, typeof event === "object" && event );

    			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
    			event.isTrigger = onlyHandlers ? 2 : 3;
    			event.namespace = namespaces.join( "." );
    			event.rnamespace = event.namespace ?
    				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
    				null;

    			// Clean up the event in case it is being reused
    			event.result = undefined;
    			if ( !event.target ) {
    				event.target = elem;
    			}

    			// Clone any incoming data and prepend the event, creating the handler arg list
    			data = data == null ?
    				[ event ] :
    				jQuery.makeArray( data, [ event ] );

    			// Allow special events to draw outside the lines
    			special = jQuery.event.special[ type ] || {};
    			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
    				return;
    			}

    			// Determine event propagation path in advance, per W3C events spec (trac-9951)
    			// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
    			if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

    				bubbleType = special.delegateType || type;
    				if ( !rfocusMorph.test( bubbleType + type ) ) {
    					cur = cur.parentNode;
    				}
    				for ( ; cur; cur = cur.parentNode ) {
    					eventPath.push( cur );
    					tmp = cur;
    				}

    				// Only add window if we got to document (e.g., not plain obj or detached DOM)
    				if ( tmp === ( elem.ownerDocument || document ) ) {
    					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
    				}
    			}

    			// Fire handlers on the event path
    			i = 0;
    			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
    				lastElement = cur;
    				event.type = i > 1 ?
    					bubbleType :
    					special.bindType || type;

    				// jQuery handler
    				handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
    					dataPriv.get( cur, "handle" );
    				if ( handle ) {
    					handle.apply( cur, data );
    				}

    				// Native handler
    				handle = ontype && cur[ ontype ];
    				if ( handle && handle.apply && acceptData( cur ) ) {
    					event.result = handle.apply( cur, data );
    					if ( event.result === false ) {
    						event.preventDefault();
    					}
    				}
    			}
    			event.type = type;

    			// If nobody prevented the default action, do it now
    			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

    				if ( ( !special._default ||
    					special._default.apply( eventPath.pop(), data ) === false ) &&
    					acceptData( elem ) ) {

    					// Call a native DOM method on the target with the same name as the event.
    					// Don't do default actions on window, that's where global variables be (trac-6170)
    					if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

    						// Don't re-trigger an onFOO event when we call its FOO() method
    						tmp = elem[ ontype ];

    						if ( tmp ) {
    							elem[ ontype ] = null;
    						}

    						// Prevent re-triggering of the same event, since we already bubbled it above
    						jQuery.event.triggered = type;

    						if ( event.isPropagationStopped() ) {
    							lastElement.addEventListener( type, stopPropagationCallback );
    						}

    						elem[ type ]();

    						if ( event.isPropagationStopped() ) {
    							lastElement.removeEventListener( type, stopPropagationCallback );
    						}

    						jQuery.event.triggered = undefined;

    						if ( tmp ) {
    							elem[ ontype ] = tmp;
    						}
    					}
    				}
    			}

    			return event.result;
    		},

    		// Piggyback on a donor event to simulate a different one
    		// Used only for `focus(in | out)` events
    		simulate: function( type, elem, event ) {
    			var e = jQuery.extend(
    				new jQuery.Event(),
    				event,
    				{
    					type: type,
    					isSimulated: true
    				}
    			);

    			jQuery.event.trigger( e, null, elem );
    		}

    	} );

    	jQuery.fn.extend( {

    		trigger: function( type, data ) {
    			return this.each( function() {
    				jQuery.event.trigger( type, data, this );
    			} );
    		},
    		triggerHandler: function( type, data ) {
    			var elem = this[ 0 ];
    			if ( elem ) {
    				return jQuery.event.trigger( type, data, elem, true );
    			}
    		}
    	} );


    	var
    		rbracket = /\[\]$/,
    		rCRLF = /\r?\n/g,
    		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    		rsubmittable = /^(?:input|select|textarea|keygen)/i;

    	function buildParams( prefix, obj, traditional, add ) {
    		var name;

    		if ( Array.isArray( obj ) ) {

    			// Serialize array item.
    			jQuery.each( obj, function( i, v ) {
    				if ( traditional || rbracket.test( prefix ) ) {

    					// Treat each array item as a scalar.
    					add( prefix, v );

    				} else {

    					// Item is non-scalar (array or object), encode its numeric index.
    					buildParams(
    						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
    						v,
    						traditional,
    						add
    					);
    				}
    			} );

    		} else if ( !traditional && toType( obj ) === "object" ) {

    			// Serialize object item.
    			for ( name in obj ) {
    				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
    			}

    		} else {

    			// Serialize scalar item.
    			add( prefix, obj );
    		}
    	}

    	// Serialize an array of form elements or a set of
    	// key/values into a query string
    	jQuery.param = function( a, traditional ) {
    		var prefix,
    			s = [],
    			add = function( key, valueOrFunction ) {

    				// If value is a function, invoke it and use its return value
    				var value = isFunction( valueOrFunction ) ?
    					valueOrFunction() :
    					valueOrFunction;

    				s[ s.length ] = encodeURIComponent( key ) + "=" +
    					encodeURIComponent( value == null ? "" : value );
    			};

    		if ( a == null ) {
    			return "";
    		}

    		// If an array was passed in, assume that it is an array of form elements.
    		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

    			// Serialize the form elements
    			jQuery.each( a, function() {
    				add( this.name, this.value );
    			} );

    		} else {

    			// If traditional, encode the "old" way (the way 1.3.2 or older
    			// did it), otherwise encode params recursively.
    			for ( prefix in a ) {
    				buildParams( prefix, a[ prefix ], traditional, add );
    			}
    		}

    		// Return the resulting serialization
    		return s.join( "&" );
    	};

    	jQuery.fn.extend( {
    		serialize: function() {
    			return jQuery.param( this.serializeArray() );
    		},
    		serializeArray: function() {
    			return this.map( function() {

    				// Can add propHook for "elements" to filter or add form elements
    				var elements = jQuery.prop( this, "elements" );
    				return elements ? jQuery.makeArray( elements ) : this;
    			} ).filter( function() {
    				var type = this.type;

    				// Use .is( ":disabled" ) so that fieldset[disabled] works
    				return this.name && !jQuery( this ).is( ":disabled" ) &&
    					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
    					( this.checked || !rcheckableType.test( type ) );
    			} ).map( function( _i, elem ) {
    				var val = jQuery( this ).val();

    				if ( val == null ) {
    					return null;
    				}

    				if ( Array.isArray( val ) ) {
    					return jQuery.map( val, function( val ) {
    						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
    					} );
    				}

    				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
    			} ).get();
    		}
    	} );


    	var
    		r20 = /%20/g,
    		rhash = /#.*$/,
    		rantiCache = /([?&])_=[^&]*/,
    		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

    		// trac-7653, trac-8125, trac-8152: local protocol detection
    		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    		rnoContent = /^(?:GET|HEAD)$/,
    		rprotocol = /^\/\//,

    		/* Prefilters
    		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
    		 * 2) These are called:
    		 *    - BEFORE asking for a transport
    		 *    - AFTER param serialization (s.data is a string if s.processData is true)
    		 * 3) key is the dataType
    		 * 4) the catchall symbol "*" can be used
    		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
    		 */
    		prefilters = {},

    		/* Transports bindings
    		 * 1) key is the dataType
    		 * 2) the catchall symbol "*" can be used
    		 * 3) selection will start with transport dataType and THEN go to "*" if needed
    		 */
    		transports = {},

    		// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
    		allTypes = "*/".concat( "*" ),

    		// Anchor tag for parsing the document origin
    		originAnchor = document.createElement( "a" );

    	originAnchor.href = location.href;

    	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    	function addToPrefiltersOrTransports( structure ) {

    		// dataTypeExpression is optional and defaults to "*"
    		return function( dataTypeExpression, func ) {

    			if ( typeof dataTypeExpression !== "string" ) {
    				func = dataTypeExpression;
    				dataTypeExpression = "*";
    			}

    			var dataType,
    				i = 0,
    				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

    			if ( isFunction( func ) ) {

    				// For each dataType in the dataTypeExpression
    				while ( ( dataType = dataTypes[ i++ ] ) ) {

    					// Prepend if requested
    					if ( dataType[ 0 ] === "+" ) {
    						dataType = dataType.slice( 1 ) || "*";
    						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

    					// Otherwise append
    					} else {
    						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
    					}
    				}
    			}
    		};
    	}

    	// Base inspection function for prefilters and transports
    	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

    		var inspected = {},
    			seekingTransport = ( structure === transports );

    		function inspect( dataType ) {
    			var selected;
    			inspected[ dataType ] = true;
    			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
    				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
    				if ( typeof dataTypeOrTransport === "string" &&
    					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

    					options.dataTypes.unshift( dataTypeOrTransport );
    					inspect( dataTypeOrTransport );
    					return false;
    				} else if ( seekingTransport ) {
    					return !( selected = dataTypeOrTransport );
    				}
    			} );
    			return selected;
    		}

    		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
    	}

    	// A special extend for ajax options
    	// that takes "flat" options (not to be deep extended)
    	// Fixes trac-9887
    	function ajaxExtend( target, src ) {
    		var key, deep,
    			flatOptions = jQuery.ajaxSettings.flatOptions || {};

    		for ( key in src ) {
    			if ( src[ key ] !== undefined ) {
    				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
    			}
    		}
    		if ( deep ) {
    			jQuery.extend( true, target, deep );
    		}

    		return target;
    	}

    	/* Handles responses to an ajax request:
    	 * - finds the right dataType (mediates between content-type and expected dataType)
    	 * - returns the corresponding response
    	 */
    	function ajaxHandleResponses( s, jqXHR, responses ) {

    		var ct, type, finalDataType, firstDataType,
    			contents = s.contents,
    			dataTypes = s.dataTypes;

    		// Remove auto dataType and get content-type in the process
    		while ( dataTypes[ 0 ] === "*" ) {
    			dataTypes.shift();
    			if ( ct === undefined ) {
    				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
    			}
    		}

    		// Check if we're dealing with a known content-type
    		if ( ct ) {
    			for ( type in contents ) {
    				if ( contents[ type ] && contents[ type ].test( ct ) ) {
    					dataTypes.unshift( type );
    					break;
    				}
    			}
    		}

    		// Check to see if we have a response for the expected dataType
    		if ( dataTypes[ 0 ] in responses ) {
    			finalDataType = dataTypes[ 0 ];
    		} else {

    			// Try convertible dataTypes
    			for ( type in responses ) {
    				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
    					finalDataType = type;
    					break;
    				}
    				if ( !firstDataType ) {
    					firstDataType = type;
    				}
    			}

    			// Or just use first one
    			finalDataType = finalDataType || firstDataType;
    		}

    		// If we found a dataType
    		// We add the dataType to the list if needed
    		// and return the corresponding response
    		if ( finalDataType ) {
    			if ( finalDataType !== dataTypes[ 0 ] ) {
    				dataTypes.unshift( finalDataType );
    			}
    			return responses[ finalDataType ];
    		}
    	}

    	/* Chain conversions given the request and the original response
    	 * Also sets the responseXXX fields on the jqXHR instance
    	 */
    	function ajaxConvert( s, response, jqXHR, isSuccess ) {
    		var conv2, current, conv, tmp, prev,
    			converters = {},

    			// Work with a copy of dataTypes in case we need to modify it for conversion
    			dataTypes = s.dataTypes.slice();

    		// Create converters map with lowercased keys
    		if ( dataTypes[ 1 ] ) {
    			for ( conv in s.converters ) {
    				converters[ conv.toLowerCase() ] = s.converters[ conv ];
    			}
    		}

    		current = dataTypes.shift();

    		// Convert to each sequential dataType
    		while ( current ) {

    			if ( s.responseFields[ current ] ) {
    				jqXHR[ s.responseFields[ current ] ] = response;
    			}

    			// Apply the dataFilter if provided
    			if ( !prev && isSuccess && s.dataFilter ) {
    				response = s.dataFilter( response, s.dataType );
    			}

    			prev = current;
    			current = dataTypes.shift();

    			if ( current ) {

    				// There's only work to do if current dataType is non-auto
    				if ( current === "*" ) {

    					current = prev;

    				// Convert response if prev dataType is non-auto and differs from current
    				} else if ( prev !== "*" && prev !== current ) {

    					// Seek a direct converter
    					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

    					// If none found, seek a pair
    					if ( !conv ) {
    						for ( conv2 in converters ) {

    							// If conv2 outputs current
    							tmp = conv2.split( " " );
    							if ( tmp[ 1 ] === current ) {

    								// If prev can be converted to accepted input
    								conv = converters[ prev + " " + tmp[ 0 ] ] ||
    									converters[ "* " + tmp[ 0 ] ];
    								if ( conv ) {

    									// Condense equivalence converters
    									if ( conv === true ) {
    										conv = converters[ conv2 ];

    									// Otherwise, insert the intermediate dataType
    									} else if ( converters[ conv2 ] !== true ) {
    										current = tmp[ 0 ];
    										dataTypes.unshift( tmp[ 1 ] );
    									}
    									break;
    								}
    							}
    						}
    					}

    					// Apply converter (if not an equivalence)
    					if ( conv !== true ) {

    						// Unless errors are allowed to bubble, catch and return them
    						if ( conv && s.throws ) {
    							response = conv( response );
    						} else {
    							try {
    								response = conv( response );
    							} catch ( e ) {
    								return {
    									state: "parsererror",
    									error: conv ? e : "No conversion from " + prev + " to " + current
    								};
    							}
    						}
    					}
    				}
    			}
    		}

    		return { state: "success", data: response };
    	}

    	jQuery.extend( {

    		// Counter for holding the number of active queries
    		active: 0,

    		// Last-Modified header cache for next request
    		lastModified: {},
    		etag: {},

    		ajaxSettings: {
    			url: location.href,
    			type: "GET",
    			isLocal: rlocalProtocol.test( location.protocol ),
    			global: true,
    			processData: true,
    			async: true,
    			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

    			/*
    			timeout: 0,
    			data: null,
    			dataType: null,
    			username: null,
    			password: null,
    			cache: null,
    			throws: false,
    			traditional: false,
    			headers: {},
    			*/

    			accepts: {
    				"*": allTypes,
    				text: "text/plain",
    				html: "text/html",
    				xml: "application/xml, text/xml",
    				json: "application/json, text/javascript"
    			},

    			contents: {
    				xml: /\bxml\b/,
    				html: /\bhtml/,
    				json: /\bjson\b/
    			},

    			responseFields: {
    				xml: "responseXML",
    				text: "responseText",
    				json: "responseJSON"
    			},

    			// Data converters
    			// Keys separate source (or catchall "*") and destination types with a single space
    			converters: {

    				// Convert anything to text
    				"* text": String,

    				// Text to html (true = no transformation)
    				"text html": true,

    				// Evaluate text as a json expression
    				"text json": JSON.parse,

    				// Parse text as xml
    				"text xml": jQuery.parseXML
    			},

    			// For options that shouldn't be deep extended:
    			// you can add your own custom options here if
    			// and when you create one that shouldn't be
    			// deep extended (see ajaxExtend)
    			flatOptions: {
    				url: true,
    				context: true
    			}
    		},

    		// Creates a full fledged settings object into target
    		// with both ajaxSettings and settings fields.
    		// If target is omitted, writes into ajaxSettings.
    		ajaxSetup: function( target, settings ) {
    			return settings ?

    				// Building a settings object
    				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

    				// Extending ajaxSettings
    				ajaxExtend( jQuery.ajaxSettings, target );
    		},

    		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
    		ajaxTransport: addToPrefiltersOrTransports( transports ),

    		// Main method
    		ajax: function( url, options ) {

    			// If url is an object, simulate pre-1.5 signature
    			if ( typeof url === "object" ) {
    				options = url;
    				url = undefined;
    			}

    			// Force options to be an object
    			options = options || {};

    			var transport,

    				// URL without anti-cache param
    				cacheURL,

    				// Response headers
    				responseHeadersString,
    				responseHeaders,

    				// timeout handle
    				timeoutTimer,

    				// Url cleanup var
    				urlAnchor,

    				// Request state (becomes false upon send and true upon completion)
    				completed,

    				// To know if global events are to be dispatched
    				fireGlobals,

    				// Loop variable
    				i,

    				// uncached part of the url
    				uncached,

    				// Create the final options object
    				s = jQuery.ajaxSetup( {}, options ),

    				// Callbacks context
    				callbackContext = s.context || s,

    				// Context for global events is callbackContext if it is a DOM node or jQuery collection
    				globalEventContext = s.context &&
    					( callbackContext.nodeType || callbackContext.jquery ) ?
    					jQuery( callbackContext ) :
    					jQuery.event,

    				// Deferreds
    				deferred = jQuery.Deferred(),
    				completeDeferred = jQuery.Callbacks( "once memory" ),

    				// Status-dependent callbacks
    				statusCode = s.statusCode || {},

    				// Headers (they are sent all at once)
    				requestHeaders = {},
    				requestHeadersNames = {},

    				// Default abort message
    				strAbort = "canceled",

    				// Fake xhr
    				jqXHR = {
    					readyState: 0,

    					// Builds headers hashtable if needed
    					getResponseHeader: function( key ) {
    						var match;
    						if ( completed ) {
    							if ( !responseHeaders ) {
    								responseHeaders = {};
    								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
    									responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
    										( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
    											.concat( match[ 2 ] );
    								}
    							}
    							match = responseHeaders[ key.toLowerCase() + " " ];
    						}
    						return match == null ? null : match.join( ", " );
    					},

    					// Raw string
    					getAllResponseHeaders: function() {
    						return completed ? responseHeadersString : null;
    					},

    					// Caches the header
    					setRequestHeader: function( name, value ) {
    						if ( completed == null ) {
    							name = requestHeadersNames[ name.toLowerCase() ] =
    								requestHeadersNames[ name.toLowerCase() ] || name;
    							requestHeaders[ name ] = value;
    						}
    						return this;
    					},

    					// Overrides response content-type header
    					overrideMimeType: function( type ) {
    						if ( completed == null ) {
    							s.mimeType = type;
    						}
    						return this;
    					},

    					// Status-dependent callbacks
    					statusCode: function( map ) {
    						var code;
    						if ( map ) {
    							if ( completed ) {

    								// Execute the appropriate callbacks
    								jqXHR.always( map[ jqXHR.status ] );
    							} else {

    								// Lazy-add the new callbacks in a way that preserves old ones
    								for ( code in map ) {
    									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
    								}
    							}
    						}
    						return this;
    					},

    					// Cancel the request
    					abort: function( statusText ) {
    						var finalText = statusText || strAbort;
    						if ( transport ) {
    							transport.abort( finalText );
    						}
    						done( 0, finalText );
    						return this;
    					}
    				};

    			// Attach deferreds
    			deferred.promise( jqXHR );

    			// Add protocol if not provided (prefilters might expect it)
    			// Handle falsy url in the settings object (trac-10093: consistency with old signature)
    			// We also use the url parameter if available
    			s.url = ( ( url || s.url || location.href ) + "" )
    				.replace( rprotocol, location.protocol + "//" );

    			// Alias method option to type as per ticket trac-12004
    			s.type = options.method || options.type || s.method || s.type;

    			// Extract dataTypes list
    			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

    			// A cross-domain request is in order when the origin doesn't match the current origin.
    			if ( s.crossDomain == null ) {
    				urlAnchor = document.createElement( "a" );

    				// Support: IE <=8 - 11, Edge 12 - 15
    				// IE throws exception on accessing the href property if url is malformed,
    				// e.g. http://example.com:80x/
    				try {
    					urlAnchor.href = s.url;

    					// Support: IE <=8 - 11 only
    					// Anchor's host property isn't correctly set when s.url is relative
    					urlAnchor.href = urlAnchor.href;
    					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
    						urlAnchor.protocol + "//" + urlAnchor.host;
    				} catch ( e ) {

    					// If there is an error parsing the URL, assume it is crossDomain,
    					// it can be rejected by the transport if it is invalid
    					s.crossDomain = true;
    				}
    			}

    			// Convert data if not already a string
    			if ( s.data && s.processData && typeof s.data !== "string" ) {
    				s.data = jQuery.param( s.data, s.traditional );
    			}

    			// Apply prefilters
    			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

    			// If request was aborted inside a prefilter, stop there
    			if ( completed ) {
    				return jqXHR;
    			}

    			// We can fire global events as of now if asked to
    			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
    			fireGlobals = jQuery.event && s.global;

    			// Watch for a new set of requests
    			if ( fireGlobals && jQuery.active++ === 0 ) {
    				jQuery.event.trigger( "ajaxStart" );
    			}

    			// Uppercase the type
    			s.type = s.type.toUpperCase();

    			// Determine if request has content
    			s.hasContent = !rnoContent.test( s.type );

    			// Save the URL in case we're toying with the If-Modified-Since
    			// and/or If-None-Match header later on
    			// Remove hash to simplify url manipulation
    			cacheURL = s.url.replace( rhash, "" );

    			// More options handling for requests with no content
    			if ( !s.hasContent ) {

    				// Remember the hash so we can put it back
    				uncached = s.url.slice( cacheURL.length );

    				// If data is available and should be processed, append data to url
    				if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
    					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

    					// trac-9682: remove data so that it's not used in an eventual retry
    					delete s.data;
    				}

    				// Add or update anti-cache param if needed
    				if ( s.cache === false ) {
    					cacheURL = cacheURL.replace( rantiCache, "$1" );
    					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
    						uncached;
    				}

    				// Put hash and anti-cache on the URL that will be requested (gh-1732)
    				s.url = cacheURL + uncached;

    			// Change '%20' to '+' if this is encoded form body content (gh-2658)
    			} else if ( s.data && s.processData &&
    				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
    				s.data = s.data.replace( r20, "+" );
    			}

    			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
    			if ( s.ifModified ) {
    				if ( jQuery.lastModified[ cacheURL ] ) {
    					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
    				}
    				if ( jQuery.etag[ cacheURL ] ) {
    					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
    				}
    			}

    			// Set the correct header, if data is being sent
    			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
    				jqXHR.setRequestHeader( "Content-Type", s.contentType );
    			}

    			// Set the Accepts header for the server, depending on the dataType
    			jqXHR.setRequestHeader(
    				"Accept",
    				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
    					s.accepts[ s.dataTypes[ 0 ] ] +
    						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
    					s.accepts[ "*" ]
    			);

    			// Check for headers option
    			for ( i in s.headers ) {
    				jqXHR.setRequestHeader( i, s.headers[ i ] );
    			}

    			// Allow custom headers/mimetypes and early abort
    			if ( s.beforeSend &&
    				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

    				// Abort if not done already and return
    				return jqXHR.abort();
    			}

    			// Aborting is no longer a cancellation
    			strAbort = "abort";

    			// Install callbacks on deferreds
    			completeDeferred.add( s.complete );
    			jqXHR.done( s.success );
    			jqXHR.fail( s.error );

    			// Get transport
    			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

    			// If no transport, we auto-abort
    			if ( !transport ) {
    				done( -1, "No Transport" );
    			} else {
    				jqXHR.readyState = 1;

    				// Send global event
    				if ( fireGlobals ) {
    					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
    				}

    				// If request was aborted inside ajaxSend, stop there
    				if ( completed ) {
    					return jqXHR;
    				}

    				// Timeout
    				if ( s.async && s.timeout > 0 ) {
    					timeoutTimer = window.setTimeout( function() {
    						jqXHR.abort( "timeout" );
    					}, s.timeout );
    				}

    				try {
    					completed = false;
    					transport.send( requestHeaders, done );
    				} catch ( e ) {

    					// Rethrow post-completion exceptions
    					if ( completed ) {
    						throw e;
    					}

    					// Propagate others as results
    					done( -1, e );
    				}
    			}

    			// Callback for when everything is done
    			function done( status, nativeStatusText, responses, headers ) {
    				var isSuccess, success, error, response, modified,
    					statusText = nativeStatusText;

    				// Ignore repeat invocations
    				if ( completed ) {
    					return;
    				}

    				completed = true;

    				// Clear timeout if it exists
    				if ( timeoutTimer ) {
    					window.clearTimeout( timeoutTimer );
    				}

    				// Dereference transport for early garbage collection
    				// (no matter how long the jqXHR object will be used)
    				transport = undefined;

    				// Cache response headers
    				responseHeadersString = headers || "";

    				// Set readyState
    				jqXHR.readyState = status > 0 ? 4 : 0;

    				// Determine if successful
    				isSuccess = status >= 200 && status < 300 || status === 304;

    				// Get response data
    				if ( responses ) {
    					response = ajaxHandleResponses( s, jqXHR, responses );
    				}

    				// Use a noop converter for missing script but not if jsonp
    				if ( !isSuccess &&
    					jQuery.inArray( "script", s.dataTypes ) > -1 &&
    					jQuery.inArray( "json", s.dataTypes ) < 0 ) {
    					s.converters[ "text script" ] = function() {};
    				}

    				// Convert no matter what (that way responseXXX fields are always set)
    				response = ajaxConvert( s, response, jqXHR, isSuccess );

    				// If successful, handle type chaining
    				if ( isSuccess ) {

    					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
    					if ( s.ifModified ) {
    						modified = jqXHR.getResponseHeader( "Last-Modified" );
    						if ( modified ) {
    							jQuery.lastModified[ cacheURL ] = modified;
    						}
    						modified = jqXHR.getResponseHeader( "etag" );
    						if ( modified ) {
    							jQuery.etag[ cacheURL ] = modified;
    						}
    					}

    					// if no content
    					if ( status === 204 || s.type === "HEAD" ) {
    						statusText = "nocontent";

    					// if not modified
    					} else if ( status === 304 ) {
    						statusText = "notmodified";

    					// If we have data, let's convert it
    					} else {
    						statusText = response.state;
    						success = response.data;
    						error = response.error;
    						isSuccess = !error;
    					}
    				} else {

    					// Extract error from statusText and normalize for non-aborts
    					error = statusText;
    					if ( status || !statusText ) {
    						statusText = "error";
    						if ( status < 0 ) {
    							status = 0;
    						}
    					}
    				}

    				// Set data for the fake xhr object
    				jqXHR.status = status;
    				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

    				// Success/Error
    				if ( isSuccess ) {
    					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
    				} else {
    					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
    				}

    				// Status-dependent callbacks
    				jqXHR.statusCode( statusCode );
    				statusCode = undefined;

    				if ( fireGlobals ) {
    					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
    						[ jqXHR, s, isSuccess ? success : error ] );
    				}

    				// Complete
    				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

    				if ( fireGlobals ) {
    					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

    					// Handle the global AJAX counter
    					if ( !( --jQuery.active ) ) {
    						jQuery.event.trigger( "ajaxStop" );
    					}
    				}
    			}

    			return jqXHR;
    		},

    		getJSON: function( url, data, callback ) {
    			return jQuery.get( url, data, callback, "json" );
    		},

    		getScript: function( url, callback ) {
    			return jQuery.get( url, undefined, callback, "script" );
    		}
    	} );

    	jQuery.each( [ "get", "post" ], function( _i, method ) {
    		jQuery[ method ] = function( url, data, callback, type ) {

    			// Shift arguments if data argument was omitted
    			if ( isFunction( data ) ) {
    				type = type || callback;
    				callback = data;
    				data = undefined;
    			}

    			// The url can be an options object (which then must have .url)
    			return jQuery.ajax( jQuery.extend( {
    				url: url,
    				type: method,
    				dataType: type,
    				data: data,
    				success: callback
    			}, jQuery.isPlainObject( url ) && url ) );
    		};
    	} );

    	jQuery.ajaxPrefilter( function( s ) {
    		var i;
    		for ( i in s.headers ) {
    			if ( i.toLowerCase() === "content-type" ) {
    				s.contentType = s.headers[ i ] || "";
    			}
    		}
    	} );


    	jQuery._evalUrl = function( url, options, doc ) {
    		return jQuery.ajax( {
    			url: url,

    			// Make this explicit, since user can override this through ajaxSetup (trac-11264)
    			type: "GET",
    			dataType: "script",
    			cache: true,
    			async: false,
    			global: false,

    			// Only evaluate the response if it is successful (gh-4126)
    			// dataFilter is not invoked for failure responses, so using it instead
    			// of the default converter is kludgy but it works.
    			converters: {
    				"text script": function() {}
    			},
    			dataFilter: function( response ) {
    				jQuery.globalEval( response, options, doc );
    			}
    		} );
    	};


    	jQuery.fn.extend( {
    		wrapAll: function( html ) {
    			var wrap;

    			if ( this[ 0 ] ) {
    				if ( isFunction( html ) ) {
    					html = html.call( this[ 0 ] );
    				}

    				// The elements to wrap the target around
    				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

    				if ( this[ 0 ].parentNode ) {
    					wrap.insertBefore( this[ 0 ] );
    				}

    				wrap.map( function() {
    					var elem = this;

    					while ( elem.firstElementChild ) {
    						elem = elem.firstElementChild;
    					}

    					return elem;
    				} ).append( this );
    			}

    			return this;
    		},

    		wrapInner: function( html ) {
    			if ( isFunction( html ) ) {
    				return this.each( function( i ) {
    					jQuery( this ).wrapInner( html.call( this, i ) );
    				} );
    			}

    			return this.each( function() {
    				var self = jQuery( this ),
    					contents = self.contents();

    				if ( contents.length ) {
    					contents.wrapAll( html );

    				} else {
    					self.append( html );
    				}
    			} );
    		},

    		wrap: function( html ) {
    			var htmlIsFunction = isFunction( html );

    			return this.each( function( i ) {
    				jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
    			} );
    		},

    		unwrap: function( selector ) {
    			this.parent( selector ).not( "body" ).each( function() {
    				jQuery( this ).replaceWith( this.childNodes );
    			} );
    			return this;
    		}
    	} );


    	jQuery.expr.pseudos.hidden = function( elem ) {
    		return !jQuery.expr.pseudos.visible( elem );
    	};
    	jQuery.expr.pseudos.visible = function( elem ) {
    		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
    	};




    	jQuery.ajaxSettings.xhr = function() {
    		try {
    			return new window.XMLHttpRequest();
    		} catch ( e ) {}
    	};

    	var xhrSuccessStatus = {

    			// File protocol always yields status code 0, assume 200
    			0: 200,

    			// Support: IE <=9 only
    			// trac-1450: sometimes IE returns 1223 when it should be 204
    			1223: 204
    		},
    		xhrSupported = jQuery.ajaxSettings.xhr();

    	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
    	support.ajax = xhrSupported = !!xhrSupported;

    	jQuery.ajaxTransport( function( options ) {
    		var callback, errorCallback;

    		// Cross domain only allowed if supported through XMLHttpRequest
    		if ( support.cors || xhrSupported && !options.crossDomain ) {
    			return {
    				send: function( headers, complete ) {
    					var i,
    						xhr = options.xhr();

    					xhr.open(
    						options.type,
    						options.url,
    						options.async,
    						options.username,
    						options.password
    					);

    					// Apply custom fields if provided
    					if ( options.xhrFields ) {
    						for ( i in options.xhrFields ) {
    							xhr[ i ] = options.xhrFields[ i ];
    						}
    					}

    					// Override mime type if needed
    					if ( options.mimeType && xhr.overrideMimeType ) {
    						xhr.overrideMimeType( options.mimeType );
    					}

    					// X-Requested-With header
    					// For cross-domain requests, seeing as conditions for a preflight are
    					// akin to a jigsaw puzzle, we simply never set it to be sure.
    					// (it can always be set on a per-request basis or even using ajaxSetup)
    					// For same-domain requests, won't change header if already provided.
    					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
    						headers[ "X-Requested-With" ] = "XMLHttpRequest";
    					}

    					// Set headers
    					for ( i in headers ) {
    						xhr.setRequestHeader( i, headers[ i ] );
    					}

    					// Callback
    					callback = function( type ) {
    						return function() {
    							if ( callback ) {
    								callback = errorCallback = xhr.onload =
    									xhr.onerror = xhr.onabort = xhr.ontimeout =
    										xhr.onreadystatechange = null;

    								if ( type === "abort" ) {
    									xhr.abort();
    								} else if ( type === "error" ) {

    									// Support: IE <=9 only
    									// On a manual native abort, IE9 throws
    									// errors on any property access that is not readyState
    									if ( typeof xhr.status !== "number" ) {
    										complete( 0, "error" );
    									} else {
    										complete(

    											// File: protocol always yields status 0; see trac-8605, trac-14207
    											xhr.status,
    											xhr.statusText
    										);
    									}
    								} else {
    									complete(
    										xhrSuccessStatus[ xhr.status ] || xhr.status,
    										xhr.statusText,

    										// Support: IE <=9 only
    										// IE9 has no XHR2 but throws on binary (trac-11426)
    										// For XHR2 non-text, let the caller handle it (gh-2498)
    										( xhr.responseType || "text" ) !== "text"  ||
    										typeof xhr.responseText !== "string" ?
    											{ binary: xhr.response } :
    											{ text: xhr.responseText },
    										xhr.getAllResponseHeaders()
    									);
    								}
    							}
    						};
    					};

    					// Listen to events
    					xhr.onload = callback();
    					errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

    					// Support: IE 9 only
    					// Use onreadystatechange to replace onabort
    					// to handle uncaught aborts
    					if ( xhr.onabort !== undefined ) {
    						xhr.onabort = errorCallback;
    					} else {
    						xhr.onreadystatechange = function() {

    							// Check readyState before timeout as it changes
    							if ( xhr.readyState === 4 ) {

    								// Allow onerror to be called first,
    								// but that will not handle a native abort
    								// Also, save errorCallback to a variable
    								// as xhr.onerror cannot be accessed
    								window.setTimeout( function() {
    									if ( callback ) {
    										errorCallback();
    									}
    								} );
    							}
    						};
    					}

    					// Create the abort callback
    					callback = callback( "abort" );

    					try {

    						// Do send the request (this may raise an exception)
    						xhr.send( options.hasContent && options.data || null );
    					} catch ( e ) {

    						// trac-14683: Only rethrow if this hasn't been notified as an error yet
    						if ( callback ) {
    							throw e;
    						}
    					}
    				},

    				abort: function() {
    					if ( callback ) {
    						callback();
    					}
    				}
    			};
    		}
    	} );




    	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
    	jQuery.ajaxPrefilter( function( s ) {
    		if ( s.crossDomain ) {
    			s.contents.script = false;
    		}
    	} );

    	// Install script dataType
    	jQuery.ajaxSetup( {
    		accepts: {
    			script: "text/javascript, application/javascript, " +
    				"application/ecmascript, application/x-ecmascript"
    		},
    		contents: {
    			script: /\b(?:java|ecma)script\b/
    		},
    		converters: {
    			"text script": function( text ) {
    				jQuery.globalEval( text );
    				return text;
    			}
    		}
    	} );

    	// Handle cache's special case and crossDomain
    	jQuery.ajaxPrefilter( "script", function( s ) {
    		if ( s.cache === undefined ) {
    			s.cache = false;
    		}
    		if ( s.crossDomain ) {
    			s.type = "GET";
    		}
    	} );

    	// Bind script tag hack transport
    	jQuery.ajaxTransport( "script", function( s ) {

    		// This transport only deals with cross domain or forced-by-attrs requests
    		if ( s.crossDomain || s.scriptAttrs ) {
    			var script, callback;
    			return {
    				send: function( _, complete ) {
    					script = jQuery( "<script>" )
    						.attr( s.scriptAttrs || {} )
    						.prop( { charset: s.scriptCharset, src: s.url } )
    						.on( "load error", callback = function( evt ) {
    							script.remove();
    							callback = null;
    							if ( evt ) {
    								complete( evt.type === "error" ? 404 : 200, evt.type );
    							}
    						} );

    					// Use native DOM manipulation to avoid our domManip AJAX trickery
    					document.head.appendChild( script[ 0 ] );
    				},
    				abort: function() {
    					if ( callback ) {
    						callback();
    					}
    				}
    			};
    		}
    	} );




    	var oldCallbacks = [],
    		rjsonp = /(=)\?(?=&|$)|\?\?/;

    	// Default jsonp settings
    	jQuery.ajaxSetup( {
    		jsonp: "callback",
    		jsonpCallback: function() {
    			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
    			this[ callback ] = true;
    			return callback;
    		}
    	} );

    	// Detect, normalize options and install callbacks for jsonp requests
    	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

    		var callbackName, overwritten, responseContainer,
    			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
    				"url" :
    				typeof s.data === "string" &&
    					( s.contentType || "" )
    						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
    					rjsonp.test( s.data ) && "data"
    			);

    		// Handle iff the expected data type is "jsonp" or we have a parameter to set
    		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

    			// Get callback name, remembering preexisting value associated with it
    			callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
    				s.jsonpCallback() :
    				s.jsonpCallback;

    			// Insert callback into url or form data
    			if ( jsonProp ) {
    				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
    			} else if ( s.jsonp !== false ) {
    				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
    			}

    			// Use data converter to retrieve json after script execution
    			s.converters[ "script json" ] = function() {
    				if ( !responseContainer ) {
    					jQuery.error( callbackName + " was not called" );
    				}
    				return responseContainer[ 0 ];
    			};

    			// Force json dataType
    			s.dataTypes[ 0 ] = "json";

    			// Install callback
    			overwritten = window[ callbackName ];
    			window[ callbackName ] = function() {
    				responseContainer = arguments;
    			};

    			// Clean-up function (fires after converters)
    			jqXHR.always( function() {

    				// If previous value didn't exist - remove it
    				if ( overwritten === undefined ) {
    					jQuery( window ).removeProp( callbackName );

    				// Otherwise restore preexisting value
    				} else {
    					window[ callbackName ] = overwritten;
    				}

    				// Save back as free
    				if ( s[ callbackName ] ) {

    					// Make sure that re-using the options doesn't screw things around
    					s.jsonpCallback = originalSettings.jsonpCallback;

    					// Save the callback name for future use
    					oldCallbacks.push( callbackName );
    				}

    				// Call if it was a function and we have a response
    				if ( responseContainer && isFunction( overwritten ) ) {
    					overwritten( responseContainer[ 0 ] );
    				}

    				responseContainer = overwritten = undefined;
    			} );

    			// Delegate to script
    			return "script";
    		}
    	} );




    	// Support: Safari 8 only
    	// In Safari 8 documents created via document.implementation.createHTMLDocument
    	// collapse sibling forms: the second one becomes a child of the first one.
    	// Because of that, this security measure has to be disabled in Safari 8.
    	// https://bugs.webkit.org/show_bug.cgi?id=137337
    	support.createHTMLDocument = ( function() {
    		var body = document.implementation.createHTMLDocument( "" ).body;
    		body.innerHTML = "<form></form><form></form>";
    		return body.childNodes.length === 2;
    	} )();


    	// Argument "data" should be string of html
    	// context (optional): If specified, the fragment will be created in this context,
    	// defaults to document
    	// keepScripts (optional): If true, will include scripts passed in the html string
    	jQuery.parseHTML = function( data, context, keepScripts ) {
    		if ( typeof data !== "string" ) {
    			return [];
    		}
    		if ( typeof context === "boolean" ) {
    			keepScripts = context;
    			context = false;
    		}

    		var base, parsed, scripts;

    		if ( !context ) {

    			// Stop scripts or inline event handlers from being executed immediately
    			// by using document.implementation
    			if ( support.createHTMLDocument ) {
    				context = document.implementation.createHTMLDocument( "" );

    				// Set the base href for the created document
    				// so any parsed elements with URLs
    				// are based on the document's URL (gh-2965)
    				base = context.createElement( "base" );
    				base.href = document.location.href;
    				context.head.appendChild( base );
    			} else {
    				context = document;
    			}
    		}

    		parsed = rsingleTag.exec( data );
    		scripts = !keepScripts && [];

    		// Single tag
    		if ( parsed ) {
    			return [ context.createElement( parsed[ 1 ] ) ];
    		}

    		parsed = buildFragment( [ data ], context, scripts );

    		if ( scripts && scripts.length ) {
    			jQuery( scripts ).remove();
    		}

    		return jQuery.merge( [], parsed.childNodes );
    	};


    	/**
    	 * Load a url into a page
    	 */
    	jQuery.fn.load = function( url, params, callback ) {
    		var selector, type, response,
    			self = this,
    			off = url.indexOf( " " );

    		if ( off > -1 ) {
    			selector = stripAndCollapse( url.slice( off ) );
    			url = url.slice( 0, off );
    		}

    		// If it's a function
    		if ( isFunction( params ) ) {

    			// We assume that it's the callback
    			callback = params;
    			params = undefined;

    		// Otherwise, build a param string
    		} else if ( params && typeof params === "object" ) {
    			type = "POST";
    		}

    		// If we have elements to modify, make the request
    		if ( self.length > 0 ) {
    			jQuery.ajax( {
    				url: url,

    				// If "type" variable is undefined, then "GET" method will be used.
    				// Make value of this field explicit since
    				// user can override it through ajaxSetup method
    				type: type || "GET",
    				dataType: "html",
    				data: params
    			} ).done( function( responseText ) {

    				// Save response for use in complete callback
    				response = arguments;

    				self.html( selector ?

    					// If a selector was specified, locate the right elements in a dummy div
    					// Exclude scripts to avoid IE 'Permission Denied' errors
    					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

    					// Otherwise use the full result
    					responseText );

    			// If the request succeeds, this function gets "data", "status", "jqXHR"
    			// but they are ignored because response was set above.
    			// If it fails, this function gets "jqXHR", "status", "error"
    			} ).always( callback && function( jqXHR, status ) {
    				self.each( function() {
    					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
    				} );
    			} );
    		}

    		return this;
    	};




    	jQuery.expr.pseudos.animated = function( elem ) {
    		return jQuery.grep( jQuery.timers, function( fn ) {
    			return elem === fn.elem;
    		} ).length;
    	};




    	jQuery.offset = {
    		setOffset: function( elem, options, i ) {
    			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
    				position = jQuery.css( elem, "position" ),
    				curElem = jQuery( elem ),
    				props = {};

    			// Set position first, in-case top/left are set even on static elem
    			if ( position === "static" ) {
    				elem.style.position = "relative";
    			}

    			curOffset = curElem.offset();
    			curCSSTop = jQuery.css( elem, "top" );
    			curCSSLeft = jQuery.css( elem, "left" );
    			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
    				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

    			// Need to be able to calculate position if either
    			// top or left is auto and position is either absolute or fixed
    			if ( calculatePosition ) {
    				curPosition = curElem.position();
    				curTop = curPosition.top;
    				curLeft = curPosition.left;

    			} else {
    				curTop = parseFloat( curCSSTop ) || 0;
    				curLeft = parseFloat( curCSSLeft ) || 0;
    			}

    			if ( isFunction( options ) ) {

    				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
    				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
    			}

    			if ( options.top != null ) {
    				props.top = ( options.top - curOffset.top ) + curTop;
    			}
    			if ( options.left != null ) {
    				props.left = ( options.left - curOffset.left ) + curLeft;
    			}

    			if ( "using" in options ) {
    				options.using.call( elem, props );

    			} else {
    				curElem.css( props );
    			}
    		}
    	};

    	jQuery.fn.extend( {

    		// offset() relates an element's border box to the document origin
    		offset: function( options ) {

    			// Preserve chaining for setter
    			if ( arguments.length ) {
    				return options === undefined ?
    					this :
    					this.each( function( i ) {
    						jQuery.offset.setOffset( this, options, i );
    					} );
    			}

    			var rect, win,
    				elem = this[ 0 ];

    			if ( !elem ) {
    				return;
    			}

    			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
    			// Support: IE <=11 only
    			// Running getBoundingClientRect on a
    			// disconnected node in IE throws an error
    			if ( !elem.getClientRects().length ) {
    				return { top: 0, left: 0 };
    			}

    			// Get document-relative position by adding viewport scroll to viewport-relative gBCR
    			rect = elem.getBoundingClientRect();
    			win = elem.ownerDocument.defaultView;
    			return {
    				top: rect.top + win.pageYOffset,
    				left: rect.left + win.pageXOffset
    			};
    		},

    		// position() relates an element's margin box to its offset parent's padding box
    		// This corresponds to the behavior of CSS absolute positioning
    		position: function() {
    			if ( !this[ 0 ] ) {
    				return;
    			}

    			var offsetParent, offset, doc,
    				elem = this[ 0 ],
    				parentOffset = { top: 0, left: 0 };

    			// position:fixed elements are offset from the viewport, which itself always has zero offset
    			if ( jQuery.css( elem, "position" ) === "fixed" ) {

    				// Assume position:fixed implies availability of getBoundingClientRect
    				offset = elem.getBoundingClientRect();

    			} else {
    				offset = this.offset();

    				// Account for the *real* offset parent, which can be the document or its root element
    				// when a statically positioned element is identified
    				doc = elem.ownerDocument;
    				offsetParent = elem.offsetParent || doc.documentElement;
    				while ( offsetParent &&
    					( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
    					jQuery.css( offsetParent, "position" ) === "static" ) {

    					offsetParent = offsetParent.parentNode;
    				}
    				if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

    					// Incorporate borders into its offset, since they are outside its content origin
    					parentOffset = jQuery( offsetParent ).offset();
    					parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
    					parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
    				}
    			}

    			// Subtract parent offsets and element margins
    			return {
    				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
    				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
    			};
    		},

    		// This method will return documentElement in the following cases:
    		// 1) For the element inside the iframe without offsetParent, this method will return
    		//    documentElement of the parent window
    		// 2) For the hidden or detached element
    		// 3) For body or html element, i.e. in case of the html node - it will return itself
    		//
    		// but those exceptions were never presented as a real life use-cases
    		// and might be considered as more preferable results.
    		//
    		// This logic, however, is not guaranteed and can change at any point in the future
    		offsetParent: function() {
    			return this.map( function() {
    				var offsetParent = this.offsetParent;

    				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
    					offsetParent = offsetParent.offsetParent;
    				}

    				return offsetParent || documentElement;
    			} );
    		}
    	} );

    	// Create scrollLeft and scrollTop methods
    	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
    		var top = "pageYOffset" === prop;

    		jQuery.fn[ method ] = function( val ) {
    			return access( this, function( elem, method, val ) {

    				// Coalesce documents and windows
    				var win;
    				if ( isWindow( elem ) ) {
    					win = elem;
    				} else if ( elem.nodeType === 9 ) {
    					win = elem.defaultView;
    				}

    				if ( val === undefined ) {
    					return win ? win[ prop ] : elem[ method ];
    				}

    				if ( win ) {
    					win.scrollTo(
    						!top ? val : win.pageXOffset,
    						top ? val : win.pageYOffset
    					);

    				} else {
    					elem[ method ] = val;
    				}
    			}, method, val, arguments.length );
    		};
    	} );

    	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
    	// Add the top/left cssHooks using jQuery.fn.position
    	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
    	// getComputedStyle returns percent when specified for top/left/bottom/right;
    	// rather than make the css module depend on the offset module, just check for it here
    	jQuery.each( [ "top", "left" ], function( _i, prop ) {
    		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
    			function( elem, computed ) {
    				if ( computed ) {
    					computed = curCSS( elem, prop );

    					// If curCSS returns percentage, fallback to offset
    					return rnumnonpx.test( computed ) ?
    						jQuery( elem ).position()[ prop ] + "px" :
    						computed;
    				}
    			}
    		);
    	} );


    	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
    		jQuery.each( {
    			padding: "inner" + name,
    			content: type,
    			"": "outer" + name
    		}, function( defaultExtra, funcName ) {

    			// Margin is only for outerHeight, outerWidth
    			jQuery.fn[ funcName ] = function( margin, value ) {
    				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
    					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

    				return access( this, function( elem, type, value ) {
    					var doc;

    					if ( isWindow( elem ) ) {

    						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
    						return funcName.indexOf( "outer" ) === 0 ?
    							elem[ "inner" + name ] :
    							elem.document.documentElement[ "client" + name ];
    					}

    					// Get document width or height
    					if ( elem.nodeType === 9 ) {
    						doc = elem.documentElement;

    						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
    						// whichever is greatest
    						return Math.max(
    							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
    							elem.body[ "offset" + name ], doc[ "offset" + name ],
    							doc[ "client" + name ]
    						);
    					}

    					return value === undefined ?

    						// Get width or height on the element, requesting but not forcing parseFloat
    						jQuery.css( elem, type, extra ) :

    						// Set width or height on the element
    						jQuery.style( elem, type, value, extra );
    				}, type, chainable ? margin : undefined, chainable );
    			};
    		} );
    	} );


    	jQuery.each( [
    		"ajaxStart",
    		"ajaxStop",
    		"ajaxComplete",
    		"ajaxError",
    		"ajaxSuccess",
    		"ajaxSend"
    	], function( _i, type ) {
    		jQuery.fn[ type ] = function( fn ) {
    			return this.on( type, fn );
    		};
    	} );




    	jQuery.fn.extend( {

    		bind: function( types, data, fn ) {
    			return this.on( types, null, data, fn );
    		},
    		unbind: function( types, fn ) {
    			return this.off( types, null, fn );
    		},

    		delegate: function( selector, types, data, fn ) {
    			return this.on( types, selector, data, fn );
    		},
    		undelegate: function( selector, types, fn ) {

    			// ( namespace ) or ( selector, types [, fn] )
    			return arguments.length === 1 ?
    				this.off( selector, "**" ) :
    				this.off( types, selector || "**", fn );
    		},

    		hover: function( fnOver, fnOut ) {
    			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
    		}
    	} );

    	jQuery.each(
    		( "blur focus focusin focusout resize scroll click dblclick " +
    		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
    		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
    		function( _i, name ) {

    			// Handle event binding
    			jQuery.fn[ name ] = function( data, fn ) {
    				return arguments.length > 0 ?
    					this.on( name, null, data, fn ) :
    					this.trigger( name );
    			};
    		}
    	);




    	// Support: Android <=4.0 only
    	// Make sure we trim BOM and NBSP
    	// Require that the "whitespace run" starts from a non-whitespace
    	// to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
    	var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

    	// Bind a function to a context, optionally partially applying any
    	// arguments.
    	// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
    	// However, it is not slated for removal any time soon
    	jQuery.proxy = function( fn, context ) {
    		var tmp, args, proxy;

    		if ( typeof context === "string" ) {
    			tmp = fn[ context ];
    			context = fn;
    			fn = tmp;
    		}

    		// Quick check to determine if target is callable, in the spec
    		// this throws a TypeError, but we will just return undefined.
    		if ( !isFunction( fn ) ) {
    			return undefined;
    		}

    		// Simulated bind
    		args = slice.call( arguments, 2 );
    		proxy = function() {
    			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
    		};

    		// Set the guid of unique handler to the same of original handler, so it can be removed
    		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

    		return proxy;
    	};

    	jQuery.holdReady = function( hold ) {
    		if ( hold ) {
    			jQuery.readyWait++;
    		} else {
    			jQuery.ready( true );
    		}
    	};
    	jQuery.isArray = Array.isArray;
    	jQuery.parseJSON = JSON.parse;
    	jQuery.nodeName = nodeName;
    	jQuery.isFunction = isFunction;
    	jQuery.isWindow = isWindow;
    	jQuery.camelCase = camelCase;
    	jQuery.type = toType;

    	jQuery.now = Date.now;

    	jQuery.isNumeric = function( obj ) {

    		// As of jQuery 3.0, isNumeric is limited to
    		// strings and numbers (primitives or objects)
    		// that can be coerced to finite numbers (gh-2662)
    		var type = jQuery.type( obj );
    		return ( type === "number" || type === "string" ) &&

    			// parseFloat NaNs numeric-cast false positives ("")
    			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    			// subtraction forces infinities to NaN
    			!isNaN( obj - parseFloat( obj ) );
    	};

    	jQuery.trim = function( text ) {
    		return text == null ?
    			"" :
    			( text + "" ).replace( rtrim, "$1" );
    	};




    	var

    		// Map over jQuery in case of overwrite
    		_jQuery = window.jQuery,

    		// Map over the $ in case of overwrite
    		_$ = window.$;

    	jQuery.noConflict = function( deep ) {
    		if ( window.$ === jQuery ) {
    			window.$ = _$;
    		}

    		if ( deep && window.jQuery === jQuery ) {
    			window.jQuery = _jQuery;
    		}

    		return jQuery;
    	};

    	// Expose jQuery and $ identifiers, even in AMD
    	// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
    	// and CommonJS for browser emulators (trac-13566)
    	if ( typeof noGlobal === "undefined" ) {
    		window.jQuery = window.$ = jQuery;
    	}




    	return jQuery;
    	} ); 
    } (jquery));

    var jqueryExports = jquery.exports;
    var j = /*@__PURE__*/getDefaultExportFromCjs(jqueryExports);

    /* src/VueTree.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1$1 } = globals;
    const file$7 = "src/VueTree.svelte";

    function create_fragment$8(ctx) {
    	let div;
    	let tree;
    	let updating_activeId;
    	let updating_selectedIds;
    	let current;

    	function tree_activeId_binding(value) {
    		/*tree_activeId_binding*/ ctx[10](value);
    	}

    	function tree_selectedIds_binding(value) {
    		/*tree_selectedIds_binding*/ ctx[11](value);
    	}

    	let tree_props = {
    		labelText: "",
    		children: /*children*/ ctx[3]
    	};

    	if (/*activeId*/ ctx[1] !== void 0) {
    		tree_props.activeId = /*activeId*/ ctx[1];
    	}

    	if (/*selectedIds*/ ctx[2] !== void 0) {
    		tree_props.selectedIds = /*selectedIds*/ ctx[2];
    	}

    	tree = new Tree({ props: tree_props, $$inline: true });
    	/*tree_binding*/ ctx[9](tree);
    	binding_callbacks.push(() => bind(tree, 'activeId', tree_activeId_binding));
    	binding_callbacks.push(() => bind(tree, 'selectedIds', tree_selectedIds_binding));
    	tree.$on("select", /*select_handler*/ ctx[12]);

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(tree.$$.fragment);
    			attr_dev(div, "id", "tree-view");
    			attr_dev(div, "class", "svelte-1dhou7o");
    			add_location(div, file$7, 90, 0, 2600);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(tree, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const tree_changes = {};

    			if (!updating_activeId && dirty & /*activeId*/ 2) {
    				updating_activeId = true;
    				tree_changes.activeId = /*activeId*/ ctx[1];
    				add_flush_callback(() => updating_activeId = false);
    			}

    			if (!updating_selectedIds && dirty & /*selectedIds*/ 4) {
    				updating_selectedIds = true;
    				tree_changes.selectedIds = /*selectedIds*/ ctx[2];
    				add_flush_callback(() => updating_selectedIds = false);
    			}

    			tree.$set(tree_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tree.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tree.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*tree_binding*/ ctx[9](null);
    			destroy_component(tree);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('VueTree', slots, []);
    	let { nodes } = $$props;
    	let { fetchViewData } = $$props;
    	let { hideButtons } = $$props;
    	let { query } = $$props;
    	let viewPath;
    	let treeview;
    	let activeId = "";
    	let selectedIds = [];
    	let expandedIds = [1, 2, 14];
    	let selectedItemId;
    	let children = [];
    	let i = 0;
    	let paths = {};

    	// recursive function to explore the tree and generate the children array
    	function exploreTree(node, name) {
    		if (node['method']) {
    			paths[i] = node['path'];

    			if (query.length > 0) {
    				if (name == query || name.toLowerCase().includes(query)) {
    					selectedItemId = i;
    					return { id: i++, text: name };
    				} else {
    					return null;
    				}
    			} else {
    				return { id: i++, text: name };
    			}
    		} else {
    			let childrenOfNode = [];

    			for (let [key, value] of Object.entries(node)) {
    				let child = exploreTree(value, key);
    				if (child != null) childrenOfNode.push(child);
    			}

    			if (name == query || name.toLowerCase().includes(query)) {
    				selectedIds.push(i);
    				expandedIds.push(i);
    			}

    			if (query.length > 0) if (childrenOfNode.length == 0) return null;

    			return {
    				id: 100 + i++,
    				text: name,
    				children: childrenOfNode
    			};
    		}
    	}

    	for (let [key, value] of Object.entries(nodes)) {
    		const node = exploreTree(value, key);
    		if (node != null) children.push(node);
    	}

    	// Parent node with children has id >= 100
    	if (selectedItemId) {
    		for (let id in selectedIds) {
    			if (selectedIds[id] == selectedItemId) {
    				selectItem(id, false);
    				break;
    			}
    		}

    		selectItem(selectedItemId, false);
    	}

    	function selectItem(id, fetch = true) {
    		hideButtons(); // This component has a stopPropagation on click, so we need to fire this function that way

    		if (id >= 100) {
    			if (expandedIds.includes(id)) {
    				expandedIds = expandedIds.filter(i => i !== id);
    			} else {
    				expandedIds.push(id);
    			}

    			treeview === null || treeview === void 0
    			? void 0
    			: treeview.expandNodes(node => {
    					return expandedIds.includes(node.id);
    				});
    		} else {
    			viewPath = paths[id];
    			if (fetch) fetchViewData(viewPath);
    		}
    	}

    	onMount(() => {
    		j('#tree-view')[0].children[1].classList.add('lexenddeca-normal-oslo-gray-20px');
    	});

    	$$self.$$.on_mount.push(function () {
    		if (nodes === undefined && !('nodes' in $$props || $$self.$$.bound[$$self.$$.props['nodes']])) {
    			console.warn("<VueTree> was created without expected prop 'nodes'");
    		}

    		if (fetchViewData === undefined && !('fetchViewData' in $$props || $$self.$$.bound[$$self.$$.props['fetchViewData']])) {
    			console.warn("<VueTree> was created without expected prop 'fetchViewData'");
    		}

    		if (hideButtons === undefined && !('hideButtons' in $$props || $$self.$$.bound[$$self.$$.props['hideButtons']])) {
    			console.warn("<VueTree> was created without expected prop 'hideButtons'");
    		}

    		if (query === undefined && !('query' in $$props || $$self.$$.bound[$$self.$$.props['query']])) {
    			console.warn("<VueTree> was created without expected prop 'query'");
    		}
    	});

    	const writable_props = ['nodes', 'fetchViewData', 'hideButtons', 'query'];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<VueTree> was created with unknown prop '${key}'`);
    	});

    	function tree_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			treeview = $$value;
    			$$invalidate(0, treeview);
    		});
    	}

    	function tree_activeId_binding(value) {
    		activeId = value;
    		$$invalidate(1, activeId);
    	}

    	function tree_selectedIds_binding(value) {
    		selectedIds = value;
    		$$invalidate(2, selectedIds);
    	}

    	const select_handler = ({ detail }) => selectItem(detail.id);

    	$$self.$$set = $$props => {
    		if ('nodes' in $$props) $$invalidate(5, nodes = $$props.nodes);
    		if ('fetchViewData' in $$props) $$invalidate(6, fetchViewData = $$props.fetchViewData);
    		if ('hideButtons' in $$props) $$invalidate(7, hideButtons = $$props.hideButtons);
    		if ('query' in $$props) $$invalidate(8, query = $$props.query);
    	};

    	$$self.$capture_state = () => ({
    		Tree,
    		j,
    		onMount,
    		nodes,
    		fetchViewData,
    		hideButtons,
    		query,
    		viewPath,
    		treeview,
    		activeId,
    		selectedIds,
    		expandedIds,
    		selectedItemId,
    		children,
    		i,
    		paths,
    		exploreTree,
    		selectItem
    	});

    	$$self.$inject_state = $$props => {
    		if ('nodes' in $$props) $$invalidate(5, nodes = $$props.nodes);
    		if ('fetchViewData' in $$props) $$invalidate(6, fetchViewData = $$props.fetchViewData);
    		if ('hideButtons' in $$props) $$invalidate(7, hideButtons = $$props.hideButtons);
    		if ('query' in $$props) $$invalidate(8, query = $$props.query);
    		if ('viewPath' in $$props) viewPath = $$props.viewPath;
    		if ('treeview' in $$props) $$invalidate(0, treeview = $$props.treeview);
    		if ('activeId' in $$props) $$invalidate(1, activeId = $$props.activeId);
    		if ('selectedIds' in $$props) $$invalidate(2, selectedIds = $$props.selectedIds);
    		if ('expandedIds' in $$props) expandedIds = $$props.expandedIds;
    		if ('selectedItemId' in $$props) selectedItemId = $$props.selectedItemId;
    		if ('children' in $$props) $$invalidate(3, children = $$props.children);
    		if ('i' in $$props) i = $$props.i;
    		if ('paths' in $$props) paths = $$props.paths;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		treeview,
    		activeId,
    		selectedIds,
    		children,
    		selectItem,
    		nodes,
    		fetchViewData,
    		hideButtons,
    		query,
    		tree_binding,
    		tree_activeId_binding,
    		tree_selectedIds_binding,
    		select_handler
    	];
    }

    class VueTree extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$8, create_fragment$8, safe_not_equal, {
    			nodes: 5,
    			fetchViewData: 6,
    			hideButtons: 7,
    			query: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "VueTree",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get nodes() {
    		throw new Error("<VueTree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nodes(value) {
    		throw new Error("<VueTree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fetchViewData() {
    		throw new Error("<VueTree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fetchViewData(value) {
    		throw new Error("<VueTree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideButtons() {
    		throw new Error("<VueTree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideButtons(value) {
    		throw new Error("<VueTree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get query() {
    		throw new Error("<VueTree>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set query(value) {
    		throw new Error("<VueTree>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/VueSelectionFrame.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1 } = globals;
    const file$6 = "src/VueSelectionFrame.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	child_ctx[10] = i;
    	return child_ctx;
    }

    function get_each_context_2$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	child_ctx[10] = i;
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    // (52:8) {:else}
    function create_else_block_2(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_2 = { length: 3 };
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(52:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (38:8) {#if viewTree}
    function create_if_block_1$2(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (/*viewTree*/ ctx[1].has_view_sets) return create_if_block_2;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(38:8) {#if viewTree}",
    		ctx
    	});

    	return block;
    }

    // (53:10) {#each {length: 3} as _, i}
    function create_each_block_2$2(ctx) {
    	let div;
    	let textinputskeleton;
    	let t;
    	let current;

    	textinputskeleton = new TextInputSkeleton$1({
    			props: { hideLabel: true },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(textinputskeleton.$$.fragment);
    			t = space();
    			attr_dev(div, "class", "view-set svelte-1gfujis");
    			add_location(div, file$6, 53, 12, 2228);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(textinputskeleton, div, null);
    			append_dev(div, t);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textinputskeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textinputskeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(textinputskeleton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$2.name,
    		type: "each",
    		source: "(53:10) {#each {length: 3} as _, i}",
    		ctx
    	});

    	return block;
    }

    // (46:10) {:else}
    function create_else_block_1(ctx) {
    	let div1;
    	let img;
    	let img_src_value;
    	let t0;
    	let div0;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			img = element("img");
    			t0 = space();
    			div0 = element("div");
    			div0.textContent = "Views";
    			attr_dev(img, "class", "vector-3 svelte-1gfujis");
    			if (!src_url_equal(img.src, img_src_value = "https://anima-uploads.s3.amazonaws.com/projects/63f7f6d546da9210f99dd5aa/releases/64a584ff82d80e5a118e543e/img/vector-2.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Vector");
    			add_location(img, file$6, 47, 14, 1888);
    			attr_dev(div0, "class", "view-set-1-1 valign-text-middle svelte-1gfujis");
    			add_location(div0, file$6, 48, 14, 2070);
    			attr_dev(div1, "class", "view-set svelte-1gfujis");
    			add_location(div1, file$6, 46, 12, 1851);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, img);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(46:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (39:10) {#if viewTree.has_view_sets}
    function create_if_block_2(ctx) {
    	let each_1_anchor;
    	let each_value_1 = Object.keys(/*viewTree*/ ctx[1].root);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*Object, viewTree*/ 2) {
    				each_value_1 = Object.keys(/*viewTree*/ ctx[1].root);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(39:10) {#if viewTree.has_view_sets}",
    		ctx
    	});

    	return block;
    }

    // (40:12) {#each Object.keys(viewTree.root) as view_set_key}
    function create_each_block_1$2(ctx) {
    	let div1;
    	let img;
    	let img_src_value;
    	let t0;
    	let div0;
    	let t1_value = /*view_set_key*/ ctx[11] + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			img = element("img");
    			t0 = space();
    			div0 = element("div");
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(img, "class", "vector-3 svelte-1gfujis");
    			if (!src_url_equal(img.src, img_src_value = "https://anima-uploads.s3.amazonaws.com/projects/63f7f6d546da9210f99dd5aa/releases/64a584ff82d80e5a118e543e/img/vector-2.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Vector");
    			add_location(img, file$6, 41, 16, 1530);
    			attr_dev(div0, "class", "view-set-1-1 valign-text-middle svelte-1gfujis");
    			add_location(div0, file$6, 42, 16, 1714);
    			attr_dev(div1, "class", "view-set svelte-1gfujis");
    			add_location(div1, file$6, 40, 14, 1491);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, img);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, t1);
    			append_dev(div1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*viewTree*/ 2 && t1_value !== (t1_value = /*view_set_key*/ ctx[11] + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(40:12) {#each Object.keys(viewTree.root) as view_set_key}",
    		ctx
    	});

    	return block;
    }

    // (80:4) {:else}
    function create_else_block$3(ctx) {
    	let div;
    	let current;
    	let each_value = { length: 10 };
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "tree svelte-1gfujis");
    			add_location(div, file$6, 80, 6, 3374);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div, null);
    				}
    			}

    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(80:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (74:4) {#if viewTree}
    function create_if_block$6(ctx) {
    	let previous_key = /*query*/ ctx[3];
    	let key_block_anchor;
    	let current;
    	let key_block = create_key_block$1(ctx);

    	const block = {
    		c: function create() {
    			key_block.c();
    			key_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			key_block.m(target, anchor);
    			insert_dev(target, key_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*query*/ 8 && safe_not_equal(previous_key, previous_key = /*query*/ ctx[3])) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop);
    				check_outros();
    				key_block = create_key_block$1(ctx);
    				key_block.c();
    				transition_in(key_block, 1);
    				key_block.m(key_block_anchor.parentNode, key_block_anchor);
    			} else {
    				key_block.p(ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(key_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(key_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(key_block_anchor);
    			key_block.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(74:4) {#if viewTree}",
    		ctx
    	});

    	return block;
    }

    // (82:8) {#each {length: 10} as _, i}
    function create_each_block$2(ctx) {
    	let textinputskeleton;
    	let current;

    	textinputskeleton = new TextInputSkeleton$1({
    			props: { hideLabel: true },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(textinputskeleton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textinputskeleton, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textinputskeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textinputskeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textinputskeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(82:8) {#each {length: 10} as _, i}",
    		ctx
    	});

    	return block;
    }

    // (76:8) {#key viewTree}
    function create_key_block_1$1(ctx) {
    	let tree;
    	let current;

    	tree = new VueTree({
    			props: {
    				query: /*query*/ ctx[3],
    				hideButtons: /*hideButtons*/ ctx[4],
    				fetchViewData: /*fetchViewData*/ ctx[2],
    				nodes: /*viewTree*/ ctx[1].root
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tree.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tree, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tree_changes = {};
    			if (dirty & /*query*/ 8) tree_changes.query = /*query*/ ctx[3];
    			if (dirty & /*fetchViewData*/ 4) tree_changes.fetchViewData = /*fetchViewData*/ ctx[2];
    			if (dirty & /*viewTree*/ 2) tree_changes.nodes = /*viewTree*/ ctx[1].root;
    			tree.$set(tree_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tree.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tree.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tree, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block_1$1.name,
    		type: "key",
    		source: "(76:8) {#key viewTree}",
    		ctx
    	});

    	return block;
    }

    // (75:6) {#key query}
    function create_key_block$1(ctx) {
    	let previous_key = /*viewTree*/ ctx[1];
    	let key_block_anchor;
    	let current;
    	let key_block = create_key_block_1$1(ctx);

    	const block = {
    		c: function create() {
    			key_block.c();
    			key_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			key_block.m(target, anchor);
    			insert_dev(target, key_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*viewTree*/ 2 && safe_not_equal(previous_key, previous_key = /*viewTree*/ ctx[1])) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop);
    				check_outros();
    				key_block = create_key_block_1$1(ctx);
    				key_block.c();
    				transition_in(key_block, 1);
    				key_block.m(key_block_anchor.parentNode, key_block_anchor);
    			} else {
    				key_block.p(ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(key_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(key_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(key_block_anchor);
    			key_block.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block$1.name,
    		type: "key",
    		source: "(75:6) {#key query}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div1;
    	let h1;
    	let t1;
    	let div0;
    	let t2;
    	let search;
    	let t3;
    	let div12;
    	let div9;
    	let div8;
    	let div2;
    	let current_block_type_index;
    	let if_block0;
    	let t4;
    	let div7;
    	let div4;
    	let img0;
    	let img0_src_value;
    	let t5;
    	let div3;
    	let t7;
    	let div6;
    	let img1;
    	let img1_src_value;
    	let t8;
    	let div5;
    	let div9_class_value;
    	let t10;
    	let div10;
    	let t11;
    	let div11;
    	let current_block_type_index_1;
    	let if_block1;
    	let current;
    	let mounted;
    	let dispose;

    	search = new Search$1({
    			props: {
    				placeholder: "Search in tree...",
    				autocomplete: "on",
    				autocorrect: "off"
    			},
    			$$inline: true
    		});

    	search.$on("input", /*performSearch*/ ctx[5]);
    	const if_block_creators = [create_if_block_1$2, create_else_block_2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*viewTree*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const if_block_creators_1 = [create_if_block$6, create_else_block$3];
    	const if_blocks_1 = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*viewTree*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index_1 = select_block_type_2(ctx);
    	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h1 = element("h1");
    			h1.textContent = "ENSEA Trendy Tables";
    			t1 = space();
    			div0 = element("div");
    			t2 = space();
    			create_component(search.$$.fragment);
    			t3 = space();
    			div12 = element("div");
    			div9 = element("div");
    			div8 = element("div");
    			div2 = element("div");
    			if_block0.c();
    			t4 = space();
    			div7 = element("div");
    			div4 = element("div");
    			img0 = element("img");
    			t5 = space();
    			div3 = element("div");
    			div3.textContent = "Profile";
    			t7 = space();
    			div6 = element("div");
    			img1 = element("img");
    			t8 = space();
    			div5 = element("div");
    			div5.textContent = "Settings";
    			t10 = space();
    			div10 = element("div");
    			t11 = space();
    			div11 = element("div");
    			if_block1.c();
    			attr_dev(h1, "class", "title valign-text-middle lexenddeca-normal-geyser-24px-2 svelte-1gfujis");
    			add_location(h1, file$6, 29, 2, 877);
    			attr_dev(div0, "class", "view-selection-separator svelte-1gfujis");
    			add_location(div0, file$6, 30, 2, 973);
    			attr_dev(div1, "class", "app-title svelte-1gfujis");
    			add_location(div1, file$6, 28, 0, 851);
    			attr_dev(div2, "class", "view-sets svelte-1gfujis");
    			add_location(div2, file$6, 36, 6, 1328);
    			attr_dev(img0, "class", "vector-5 svelte-1gfujis");
    			if (!src_url_equal(img0.src, img0_src_value = "https://anima-uploads.s3.amazonaws.com/projects/63f7f6d546da9210f99dd5aa/releases/64a584ff82d80e5a118e543e/img/vector-5.svg")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Vector");
    			add_location(img0, file$6, 61, 10, 2430);
    			attr_dev(div3, "class", "profile-1 valign-text-middle lexenddeca-normal-oslo-gray-24px svelte-1gfujis");
    			add_location(div3, file$6, 62, 10, 2608);
    			attr_dev(div4, "class", "profile svelte-1gfujis");
    			add_location(div4, file$6, 60, 8, 2398);
    			attr_dev(img1, "class", "vector-6 svelte-1gfujis");
    			if (!src_url_equal(img1.src, img1_src_value = "https://anima-uploads.s3.amazonaws.com/projects/63f7f6d546da9210f99dd5aa/releases/64a584ff82d80e5a118e543e/img/vector-6.svg")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Vector");
    			add_location(img1, file$6, 65, 10, 2766);
    			attr_dev(div5, "class", "settings-2 valign-text-middle settings-3lexenddeca-normal-oslo-gray-24px svelte-1gfujis");
    			add_location(div5, file$6, 66, 10, 2944);
    			attr_dev(div6, "class", "settings-1 settings-3 svelte-1gfujis");
    			add_location(div6, file$6, 64, 8, 2720);
    			attr_dev(div7, "class", "settings svelte-1gfujis");
    			add_location(div7, file$6, 59, 6, 2367);
    			attr_dev(div8, "class", "left-buttons svelte-1gfujis");
    			add_location(div8, file$6, 35, 4, 1244);
    			attr_dev(div9, "class", div9_class_value = "" + (null_to_empty("left-buttons-container " + (/*buttonsShown*/ ctx[0] ? 'shown' : 'hidden')) + " svelte-1gfujis"));
    			add_location(div9, file$6, 34, 2, 1164);
    			attr_dev(div10, "class", "separator svelte-1gfujis");
    			add_location(div10, file$6, 71, 2, 3095);
    			attr_dev(div11, "class", "tree-container svelte-1gfujis");
    			add_location(div11, file$6, 72, 2, 3127);
    			attr_dev(div12, "class", "view-tree-selector svelte-1gfujis");
    			add_location(div12, file$6, 33, 0, 1129);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h1);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			insert_dev(target, t2, anchor);
    			mount_component(search, target, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div12, anchor);
    			append_dev(div12, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div2);
    			if_blocks[current_block_type_index].m(div2, null);
    			append_dev(div8, t4);
    			append_dev(div8, div7);
    			append_dev(div7, div4);
    			append_dev(div4, img0);
    			append_dev(div4, t5);
    			append_dev(div4, div3);
    			append_dev(div7, t7);
    			append_dev(div7, div6);
    			append_dev(div6, img1);
    			append_dev(div6, t8);
    			append_dev(div6, div5);
    			append_dev(div12, t10);
    			append_dev(div12, div10);
    			append_dev(div12, t11);
    			append_dev(div12, div11);
    			if_blocks_1[current_block_type_index_1].m(div11, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div8, "click", /*click_handler*/ ctx[7], false, false, false, false),
    					listen_dev(div8, "keypress", /*keypress_handler*/ ctx[6], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block0 = if_blocks[current_block_type_index];

    				if (!if_block0) {
    					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block0.c();
    				} else {
    					if_block0.p(ctx, dirty);
    				}

    				transition_in(if_block0, 1);
    				if_block0.m(div2, null);
    			}

    			if (!current || dirty & /*buttonsShown*/ 1 && div9_class_value !== (div9_class_value = "" + (null_to_empty("left-buttons-container " + (/*buttonsShown*/ ctx[0] ? 'shown' : 'hidden')) + " svelte-1gfujis"))) {
    				attr_dev(div9, "class", div9_class_value);
    			}

    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_2(ctx);

    			if (current_block_type_index_1 === previous_block_index_1) {
    				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    					if_blocks_1[previous_block_index_1] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks_1[current_block_type_index_1];

    				if (!if_block1) {
    					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    					if_block1.c();
    				} else {
    					if_block1.p(ctx, dirty);
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(div11, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(search.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(search.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t2);
    			destroy_component(search, detaching);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div12);
    			if_blocks[current_block_type_index].d();
    			if_blocks_1[current_block_type_index_1].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('VueSelectionFrame', slots, []);
    	let { viewTree } = $$props;
    	let { fetchViewData } = $$props;
    	let { buttonsShown = false } = $$props;
    	let query = "";

    	onMount(() => {
    		j('.left-buttons').on('click', function () {
    			$$invalidate(0, buttonsShown = true);
    		});

    		j(document).on('click', function (e) {
    			if (!j(e.target).hasClass('left-buttons') && j(e.target).parents('.left-buttons').length == 0) {
    				// if the target not a child of the left-buttons
    				$$invalidate(0, buttonsShown = false);
    			}
    		});
    	});

    	const hideButtons = () => {
    		$$invalidate(0, buttonsShown = false);
    	};

    	function performSearch(e) {
    		$$invalidate(3, query = e.originalTarget.value.toLowerCase());
    	}

    	$$self.$$.on_mount.push(function () {
    		if (viewTree === undefined && !('viewTree' in $$props || $$self.$$.bound[$$self.$$.props['viewTree']])) {
    			console.warn("<VueSelectionFrame> was created without expected prop 'viewTree'");
    		}

    		if (fetchViewData === undefined && !('fetchViewData' in $$props || $$self.$$.bound[$$self.$$.props['fetchViewData']])) {
    			console.warn("<VueSelectionFrame> was created without expected prop 'fetchViewData'");
    		}
    	});

    	const writable_props = ['viewTree', 'fetchViewData', 'buttonsShown'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<VueSelectionFrame> was created with unknown prop '${key}'`);
    	});

    	function keypress_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	const click_handler = () => $$invalidate(0, buttonsShown = true);

    	$$self.$$set = $$props => {
    		if ('viewTree' in $$props) $$invalidate(1, viewTree = $$props.viewTree);
    		if ('fetchViewData' in $$props) $$invalidate(2, fetchViewData = $$props.fetchViewData);
    		if ('buttonsShown' in $$props) $$invalidate(0, buttonsShown = $$props.buttonsShown);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		writable,
    		Tree: VueTree,
    		TextInputSkeleton: TextInputSkeleton$1,
    		Search: Search$1,
    		jquery: j,
    		viewTree,
    		fetchViewData,
    		buttonsShown,
    		query,
    		hideButtons,
    		performSearch
    	});

    	$$self.$inject_state = $$props => {
    		if ('viewTree' in $$props) $$invalidate(1, viewTree = $$props.viewTree);
    		if ('fetchViewData' in $$props) $$invalidate(2, fetchViewData = $$props.fetchViewData);
    		if ('buttonsShown' in $$props) $$invalidate(0, buttonsShown = $$props.buttonsShown);
    		if ('query' in $$props) $$invalidate(3, query = $$props.query);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		buttonsShown,
    		viewTree,
    		fetchViewData,
    		query,
    		hideButtons,
    		performSearch,
    		keypress_handler,
    		click_handler
    	];
    }

    class VueSelectionFrame extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			viewTree: 1,
    			fetchViewData: 2,
    			buttonsShown: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "VueSelectionFrame",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get viewTree() {
    		throw new Error("<VueSelectionFrame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewTree(value) {
    		throw new Error("<VueSelectionFrame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fetchViewData() {
    		throw new Error("<VueSelectionFrame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fetchViewData(value) {
    		throw new Error("<VueSelectionFrame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get buttonsShown() {
    		throw new Error("<VueSelectionFrame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set buttonsShown(value) {
    		throw new Error("<VueSelectionFrame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/InputFieldsList.svelte generated by Svelte v3.59.2 */

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	child_ctx[11] = list;
    	child_ctx[7] = i;
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	child_ctx[7] = i;
    	return child_ctx;
    }

    // (31:2) {:else}
    function create_else_block$2(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_2 = { length: /*labels*/ ctx[1].length };
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*labels, values*/ 3) {
    				each_value_2 = { length: /*labels*/ ctx[1].length };
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_2$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(31:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (27:2) {#if disabled}
    function create_if_block_1$1(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_1 = /*labels*/ ctx[1];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*labels*/ 2) {
    				each_value_1 = /*labels*/ ctx[1];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(27:2) {#if disabled}",
    		ctx
    	});

    	return block;
    }

    // (22:0) {#if labels.length === 0}
    function create_if_block$5(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = { length: 3 };
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(22:0) {#if labels.length === 0}",
    		ctx
    	});

    	return block;
    }

    // (32:4) {#each {length: labels.length} as _, i}
    function create_each_block_2$1(ctx) {
    	let textinput;
    	let updating_value;
    	let current;

    	function textinput_value_binding(value) {
    		/*textinput_value_binding*/ ctx[4](value, /*i*/ ctx[7]);
    	}

    	let textinput_props = {
    		labelText: /*labels*/ ctx[1][/*i*/ ctx[7]],
    		placeholder: `Edit ${/*labels*/ ctx[1][/*i*/ ctx[7]]} ...`
    	};

    	if (/*values*/ ctx[0][/*i*/ ctx[7]] !== void 0) {
    		textinput_props.value = /*values*/ ctx[0][/*i*/ ctx[7]];
    	}

    	textinput = new TextInput$1({ props: textinput_props, $$inline: true });
    	binding_callbacks.push(() => bind(textinput, 'value', textinput_value_binding));

    	const block = {
    		c: function create() {
    			create_component(textinput.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textinput, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const textinput_changes = {};
    			if (dirty & /*labels*/ 2) textinput_changes.labelText = /*labels*/ ctx[1][/*i*/ ctx[7]];
    			if (dirty & /*labels*/ 2) textinput_changes.placeholder = `Edit ${/*labels*/ ctx[1][/*i*/ ctx[7]]} ...`;

    			if (!updating_value && dirty & /*values*/ 1) {
    				updating_value = true;
    				textinput_changes.value = /*values*/ ctx[0][/*i*/ ctx[7]];
    				add_flush_callback(() => updating_value = false);
    			}

    			textinput.$set(textinput_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textinput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textinput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textinput, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(32:4) {#each {length: labels.length} as _, i}",
    		ctx
    	});

    	return block;
    }

    // (28:4) {#each labels as column}
    function create_each_block_1$1(ctx) {
    	let textinputskeleton;
    	let current;

    	textinputskeleton = new TextInputSkeleton$1({
    			props: { hideLabel: true },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(textinputskeleton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textinputskeleton, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textinputskeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textinputskeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textinputskeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(28:4) {#each labels as column}",
    		ctx
    	});

    	return block;
    }

    // (23:2) {#each {length: 3} as _, i}
    function create_each_block$1(ctx) {
    	let textinputskeleton;
    	let current;

    	textinputskeleton = new TextInputSkeleton$1({
    			props: { hideLabel: true },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(textinputskeleton.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(textinputskeleton, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textinputskeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textinputskeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(textinputskeleton, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(23:2) {#each {length: 3} as _, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$5, create_if_block_1$1, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*labels*/ ctx[1].length === 0) return 0;
    		if (/*disabled*/ ctx[2]) return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InputFieldsList', slots, []);
    	let { labels = [] } = $$props;
    	let { initialValues = [] } = $$props;
    	let { values = [] } = $$props;
    	let { disabled = false } = $$props;

    	if (initialValues.length === 0) {
    		values = new Array(initialValues.length).fill("");
    	} else {
    		values = [...initialValues];
    	}

    	const writable_props = ['labels', 'initialValues', 'values', 'disabled'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InputFieldsList> was created with unknown prop '${key}'`);
    	});

    	function textinput_value_binding(value, i) {
    		if ($$self.$$.not_equal(values[i], value)) {
    			values[i] = value;
    			$$invalidate(0, values);
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('labels' in $$props) $$invalidate(1, labels = $$props.labels);
    		if ('initialValues' in $$props) $$invalidate(3, initialValues = $$props.initialValues);
    		if ('values' in $$props) $$invalidate(0, values = $$props.values);
    		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
    	};

    	$$self.$capture_state = () => ({
    		TextInput: TextInput$1,
    		TextInputSkeleton: TextInputSkeleton$1,
    		labels,
    		initialValues,
    		values,
    		disabled
    	});

    	$$self.$inject_state = $$props => {
    		if ('labels' in $$props) $$invalidate(1, labels = $$props.labels);
    		if ('initialValues' in $$props) $$invalidate(3, initialValues = $$props.initialValues);
    		if ('values' in $$props) $$invalidate(0, values = $$props.values);
    		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [values, labels, disabled, initialValues, textinput_value_binding];
    }

    class InputFieldsList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$6, create_fragment$6, safe_not_equal, {
    			labels: 1,
    			initialValues: 3,
    			values: 0,
    			disabled: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InputFieldsList",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get labels() {
    		throw new Error("<InputFieldsList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labels(value) {
    		throw new Error("<InputFieldsList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get initialValues() {
    		throw new Error("<InputFieldsList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set initialValues(value) {
    		throw new Error("<InputFieldsList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get values() {
    		throw new Error("<InputFieldsList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set values(value) {
    		throw new Error("<InputFieldsList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<InputFieldsList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<InputFieldsList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/Button.svelte generated by Svelte v3.59.2 */

    const file$5 = "src/Button.svelte";
    const get_default_slot_changes = dirty => ({});
    const get_default_slot_context = ctx => ({ class: "button-vector" });

    function create_fragment$5(ctx) {
    	let div1;
    	let div0;
    	let div0_class_value;
    	let t0;
    	let h4;
    	let t1;
    	let div1_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], get_default_slot_context);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			t0 = space();
    			h4 = element("h4");
    			t1 = text(/*text*/ ctx[1]);

    			attr_dev(div0, "class", div0_class_value = "" + (null_to_empty(/*fill*/ ctx[2]
    			? 'button-vector-fill'
    			: 'button-vector-stroke') + " svelte-swzbuf"));

    			add_location(div0, file$5, 14, 2, 401);
    			attr_dev(h4, "class", "button-label svelte-swzbuf");

    			set_style(h4, "line-height", (/*textHeight*/ ctx[3]
    			? /*textHeight*/ ctx[3]
    			: /*width*/ ctx[0] / 2) + "px");

    			set_style(h4, "font-size", (/*textHeight*/ ctx[3]
    			? /*textHeight*/ ctx[3]
    			: /*width*/ ctx[0] / 1.5) + "px");

    			add_location(h4, file$5, 17, 2, 513);
    			attr_dev(div1, "class", div1_class_value = "" + (null_to_empty("button " + /*$$restProps*/ ctx[7].class || '') + " svelte-swzbuf"));
    			add_location(div1, file$5, 13, 0, 293);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			append_dev(div1, t0);
    			append_dev(div1, h4);
    			append_dev(h4, t1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						div1,
    						"click",
    						function () {
    							if (is_function(/*confirmation*/ ctx[5]
    							? /*confirm*/ ctx[6]
    							: /*onClick*/ ctx[4])) (/*confirmation*/ ctx[5]
    							? /*confirm*/ ctx[6]
    							: /*onClick*/ ctx[4]).apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(div1, "keypress", /*keypress_handler*/ ctx[10], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, get_default_slot_changes),
    						get_default_slot_context
    					);
    				}
    			}

    			if (!current || dirty & /*fill*/ 4 && div0_class_value !== (div0_class_value = "" + (null_to_empty(/*fill*/ ctx[2]
    			? 'button-vector-fill'
    			: 'button-vector-stroke') + " svelte-swzbuf"))) {
    				attr_dev(div0, "class", div0_class_value);
    			}

    			if (!current || dirty & /*text*/ 2) set_data_dev(t1, /*text*/ ctx[1]);

    			if (!current || dirty & /*textHeight, width*/ 9) {
    				set_style(h4, "line-height", (/*textHeight*/ ctx[3]
    				? /*textHeight*/ ctx[3]
    				: /*width*/ ctx[0] / 2) + "px");
    			}

    			if (!current || dirty & /*textHeight, width*/ 9) {
    				set_style(h4, "font-size", (/*textHeight*/ ctx[3]
    				? /*textHeight*/ ctx[3]
    				: /*width*/ ctx[0] / 1.5) + "px");
    			}

    			if (!current || dirty & /*$$restProps*/ 128 && div1_class_value !== (div1_class_value = "" + (null_to_empty("button " + /*$$restProps*/ ctx[7].class || '') + " svelte-swzbuf"))) {
    				attr_dev(div1, "class", div1_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	const omit_props_names = ["width","text","fill","textHeight","onClick","confirmation"];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Button', slots, ['default']);
    	let { width = 100 } = $$props;
    	let { text = "" } = $$props;
    	let { fill = true } = $$props;
    	let { textHeight = undefined } = $$props;

    	let { onClick = () => {
    		
    	} } = $$props;

    	let { confirmation = undefined } = $$props;

    	function confirm(e) {
    		if (window.confirm(confirmation)) {
    			onClick(e);
    		}
    	}

    	function keypress_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('width' in $$new_props) $$invalidate(0, width = $$new_props.width);
    		if ('text' in $$new_props) $$invalidate(1, text = $$new_props.text);
    		if ('fill' in $$new_props) $$invalidate(2, fill = $$new_props.fill);
    		if ('textHeight' in $$new_props) $$invalidate(3, textHeight = $$new_props.textHeight);
    		if ('onClick' in $$new_props) $$invalidate(4, onClick = $$new_props.onClick);
    		if ('confirmation' in $$new_props) $$invalidate(5, confirmation = $$new_props.confirmation);
    		if ('$$scope' in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		width,
    		text,
    		fill,
    		textHeight,
    		onClick,
    		confirmation,
    		confirm
    	});

    	$$self.$inject_state = $$new_props => {
    		if ('width' in $$props) $$invalidate(0, width = $$new_props.width);
    		if ('text' in $$props) $$invalidate(1, text = $$new_props.text);
    		if ('fill' in $$props) $$invalidate(2, fill = $$new_props.fill);
    		if ('textHeight' in $$props) $$invalidate(3, textHeight = $$new_props.textHeight);
    		if ('onClick' in $$props) $$invalidate(4, onClick = $$new_props.onClick);
    		if ('confirmation' in $$props) $$invalidate(5, confirmation = $$new_props.confirmation);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		width,
    		text,
    		fill,
    		textHeight,
    		onClick,
    		confirmation,
    		confirm,
    		$$restProps,
    		$$scope,
    		slots,
    		keypress_handler
    	];
    }

    class Button extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			width: 0,
    			text: 1,
    			fill: 2,
    			textHeight: 3,
    			onClick: 4,
    			confirmation: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button",
    			options,
    			id: create_fragment$5.name
    		});
    	}

    	get width() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fill() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fill(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textHeight() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textHeight(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClick() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClick(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get confirmation() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set confirmation(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/EditFrame.svelte generated by Svelte v3.59.2 */
    const file$4 = "src/EditFrame.svelte";

    // (13:2) {#if show}
    function create_if_block$4(ctx) {
    	let div3;
    	let div2;
    	let div0;
    	let button0;
    	let t0;
    	let div1;
    	let button1;
    	let t1;
    	let t2;
    	let div4;
    	let inputfieldslist;
    	let updating_values;
    	let t3;
    	let button2;
    	let current;

    	button0 = new Button({
    			props: {
    				onClick: /*hideEditFrame*/ ctx[2],
    				fill: true,
    				text: "close",
    				width: 40,
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1 = new Button({
    			props: {
    				onClick: /*func*/ ctx[7],
    				fill: false,
    				width: 40,
    				text: "save",
    				confirmation: "Are you sure you want to update this element ?",
    				$$slots: { default: [create_default_slot_1$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function select_block_type(ctx, dirty) {
    		if (/*columnNames*/ ctx[1].length === 0) return create_if_block_1;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	function inputfieldslist_values_binding(value) {
    		/*inputfieldslist_values_binding*/ ctx[8](value);
    	}

    	let inputfieldslist_props = {
    		disabled: /*oldRow*/ ctx[0].length == 0,
    		labels: /*columnNames*/ ctx[1],
    		initialValues: /*oldRow*/ ctx[0]
    	};

    	if (/*newRow*/ ctx[5] !== void 0) {
    		inputfieldslist_props.values = /*newRow*/ ctx[5];
    	}

    	inputfieldslist = new InputFieldsList({
    			props: inputfieldslist_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(inputfieldslist, 'values', inputfieldslist_values_binding));

    	button2 = new Button({
    			props: {
    				onClick: /*func_1*/ ctx[9],
    				class: "delete-button",
    				width: 37,
    				text: "Delete",
    				fill: true,
    				confirmation: "Are you sure you want to delete this element ? This action is irreversible.",
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			create_component(button0.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(button1.$$.fragment);
    			t1 = space();
    			if_block.c();
    			t2 = space();
    			div4 = element("div");
    			create_component(inputfieldslist.$$.fragment);
    			t3 = space();
    			create_component(button2.$$.fragment);
    			add_location(div0, file$4, 15, 8, 444);
    			attr_dev(div1, "class", "save-button svelte-vky09y");
    			add_location(div1, file$4, 24, 8, 1839);
    			attr_dev(div2, "class", "flex-row flex svelte-vky09y");
    			add_location(div2, file$4, 14, 6, 408);
    			attr_dev(div3, "class", "flex-col flex svelte-vky09y");
    			add_location(div3, file$4, 13, 4, 374);
    			attr_dev(div4, "id", "edit-inputs");
    			attr_dev(div4, "class", "frame-31 frame svelte-vky09y");
    			add_location(div4, file$4, 38, 4, 2753);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			mount_component(button0, div0, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			mount_component(button1, div1, null);
    			append_dev(div3, t1);
    			if_block.m(div3, null);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div4, anchor);
    			mount_component(inputfieldslist, div4, null);
    			insert_dev(target, t3, anchor);
    			mount_component(button2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button0_changes = {};
    			if (dirty & /*hideEditFrame*/ 4) button0_changes.onClick = /*hideEditFrame*/ ctx[2];

    			if (dirty & /*$$scope*/ 1024) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};
    			if (dirty & /*updateRow, oldRow, newRow*/ 41) button1_changes.onClick = /*func*/ ctx[7];

    			if (dirty & /*$$scope*/ 1024) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div3, null);
    				}
    			}

    			const inputfieldslist_changes = {};
    			if (dirty & /*oldRow*/ 1) inputfieldslist_changes.disabled = /*oldRow*/ ctx[0].length == 0;
    			if (dirty & /*columnNames*/ 2) inputfieldslist_changes.labels = /*columnNames*/ ctx[1];
    			if (dirty & /*oldRow*/ 1) inputfieldslist_changes.initialValues = /*oldRow*/ ctx[0];

    			if (!updating_values && dirty & /*newRow*/ 32) {
    				updating_values = true;
    				inputfieldslist_changes.values = /*newRow*/ ctx[5];
    				add_flush_callback(() => updating_values = false);
    			}

    			inputfieldslist.$set(inputfieldslist_changes);
    			const button2_changes = {};
    			if (dirty & /*deleteRows, oldRow*/ 17) button2_changes.onClick = /*func_1*/ ctx[9];

    			if (dirty & /*$$scope*/ 1024) {
    				button2_changes.$$scope = { dirty, ctx };
    			}

    			button2.$set(button2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			transition_in(inputfieldslist.$$.fragment, local);
    			transition_in(button2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			transition_out(inputfieldslist.$$.fragment, local);
    			transition_out(button2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(button0);
    			destroy_component(button1);
    			if_block.d();
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div4);
    			destroy_component(inputfieldslist);
    			if (detaching) detach_dev(t3);
    			destroy_component(button2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(13:2) {#if show}",
    		ctx
    	});

    	return block;
    }

    // (17:10) <Button onClick={hideEditFrame} fill={true} text="close" width={40} >
    function create_default_slot_2(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(path0, "d", "M26.5201 41.4679H14.9477C4.47467 41.4679 0 36.9932 0 26.5201V14.9477C0 4.47467 4.47467 0 14.9477 0H26.5201C36.9932 0 41.4679 4.47467 41.4679 14.9477V26.5201C41.4679 36.9932 37.0125 41.4679 26.5201 41.4679ZM14.9477 2.89311C6.05624 2.89311 2.89311 6.05624 2.89311 14.9477V26.5201C2.89311 35.4116 6.05624 38.5748 14.9477 38.5748H26.5201C35.4116 38.5748 38.5748 35.4116 38.5748 26.5201V14.9477C38.5748 6.05624 35.4116 2.89311 26.5201 2.89311H14.9477Z");
    			add_location(path0, file$4, 18, 14, 662);
    			attr_dev(path1, "d", "M13.0185 41.4679C12.2277 41.4679 11.572 40.8121 11.572 40.0213V1.44658C11.572 0.655801 12.2277 3.05176e-05 13.0185 3.05176e-05C13.8093 3.05176e-05 14.4651 0.655801 14.4651 1.44658V40.0213C14.4651 40.8121 13.8286 41.4679 13.0185 41.4679Z");
    			add_location(path1, file$4, 19, 14, 1135);
    			attr_dev(path2, "d", "M26.518 27.1179C26.1515 27.1179 25.7851 26.9829 25.4957 26.6936L20.5582 21.756C19.9988 21.1967 19.9988 20.2709 20.5582 19.7116L25.4957 14.7739C26.0551 14.2146 26.9809 14.2146 27.5402 14.7739C28.0995 15.3333 28.0995 16.2591 27.5402 16.8184L23.6442 20.7338L27.5595 24.6491C28.1188 25.2085 28.1188 26.1343 27.5595 26.6936C27.2702 26.9829 26.9037 27.1179 26.518 27.1179Z");
    			add_location(path2, file$4, 20, 14, 1398);
    			attr_dev(svg, "class", "button-vector");
    			attr_dev(svg, "width", "42");
    			attr_dev(svg, "height", "42");
    			attr_dev(svg, "viewBox", "0 0 42 42");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$4, 17, 12, 542);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(17:10) <Button onClick={hideEditFrame} fill={true} text=\\\"close\\\" width={40} >",
    		ctx
    	});

    	return block;
    }

    // (26:10) <Button onClick={() => updateRow(oldRow, newRow)} fill={false} width={40} text="save" confirmation="Are you sure you want to update this element ?">
    function create_default_slot_1$2(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M13.6807 21.5L19.1992 27.0185L30.2557 15.9816M16.1178 41H27.8178C37.5678 41 41.4678 37.1 41.4678 27.35V15.65C41.4678 5.9 37.5678 2 27.8178 2H16.1178C6.36777 2 2.46777 5.9 2.46777 15.65V27.35C2.46777 37.1 6.36777 41 16.1178 41Z");
    			attr_dev(path, "stroke-width", "3");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			add_location(path, file$4, 27, 14, 2156);
    			attr_dev(svg, "class", "button-vector");
    			attr_dev(svg, "width", "43");
    			attr_dev(svg, "height", "43");
    			attr_dev(svg, "viewBox", "0 0 43 43");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$4, 26, 12, 2036);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(26:10) <Button onClick={() => updateRow(oldRow, newRow)} fill={false} width={40} text=\\\"save\\\" confirmation=\\\"Are you sure you want to update this element ?\\\">",
    		ctx
    	});

    	return block;
    }

    // (35:6) {:else}
    function create_else_block$1(ctx) {
    	let h1;
    	let t_value = /*columnNames*/ ctx[1][0] + ': ' + /*oldRow*/ ctx[0][0] + "";
    	let t;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			t = text(t_value);
    			attr_dev(h1, "class", "title valign-text-middle svelte-vky09y");
    			add_location(h1, file$4, 35, 8, 2648);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			append_dev(h1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*columnNames, oldRow*/ 3 && t_value !== (t_value = /*columnNames*/ ctx[1][0] + ': ' + /*oldRow*/ ctx[0][0] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(35:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (33:6) {#if columnNames.length === 0}
    function create_if_block_1(ctx) {
    	let h1;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "Edit Element";
    			attr_dev(h1, "class", "title valign-text-middle svelte-vky09y");
    			add_location(h1, file$4, 33, 8, 2571);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(33:6) {#if columnNames.length === 0}",
    		ctx
    	});

    	return block;
    }

    // (42:4) <Button onClick={() => deleteRows([oldRow])} class="delete-button" width={37} text="Delete" fill={true} confirmation="Are you sure you want to delete this element ? This action is irreversible.">
    function create_default_slot$2(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M27.647.583 7.127 8.269C3.208 9.76 0 14.388 0 18.604v30.22c0 3.023 1.977 7.015 4.403 8.806l20.52 15.334c3.62 2.724 9.551 2.724 13.17 0l20.52-15.334c2.426-1.828 4.403-5.783 4.403-8.805V18.604c0-4.179-3.208-8.843-7.126-10.298L35.37.62C33.28-.2 29.773-.2 27.647.583Z");
    			attr_dev(path0, "opacity", ".4");
    			add_location(path0, file$4, 43, 8, 3262);
    			attr_dev(path1, "d", "m41.526 41.063-5.933-5.932 5.783-5.783a2.815 2.815 0 0 0 0-3.955 2.815 2.815 0 0 0-3.954 0l-5.783 5.783-5.933-5.932a2.815 2.815 0 0 0-3.954 0 2.815 2.815 0 0 0 0 3.955l5.932 5.932-6.12 6.12a2.815 2.815 0 0 0 0 3.954c.56.56 1.27.82 1.978.82.71 0 1.418-.26 1.978-.82l6.119-6.119 5.932 5.932c.56.56 1.268.821 1.977.821a2.77 2.77 0 0 0 1.978-.82c1.082-1.12 1.082-2.873 0-3.956Z");
    			add_location(path1, file$4, 44, 8, 3559);
    			attr_dev(svg, "class", "button-vector");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "37");
    			attr_dev(svg, "height", "37");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 64 76");
    			add_location(svg, file$4, 42, 6, 3136);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(42:4) <Button onClick={() => deleteRows([oldRow])} class=\\\"delete-button\\\" width={37} text=\\\"Delete\\\" fill={true} confirmation=\\\"Are you sure you want to delete this element ? This action is irreversible.\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let div;
    	let current;
    	let if_block = /*show*/ ctx[6] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "edit-frame-container " + (/*show*/ ctx[6] ? 'shown' : 'hidden') + " svelte-vky09y");
    			add_location(div, file$4, 11, 0, 294);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*show*/ ctx[6]) if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('EditFrame', slots, []);
    	let { oldRow = [] } = $$props;
    	let { columnNames = [] } = $$props;
    	let { hideEditFrame } = $$props;
    	let { updateRow } = $$props;
    	let { deleteRows } = $$props;
    	let newRow = [];
    	let show = oldRow.length > 0;

    	$$self.$$.on_mount.push(function () {
    		if (hideEditFrame === undefined && !('hideEditFrame' in $$props || $$self.$$.bound[$$self.$$.props['hideEditFrame']])) {
    			console.warn("<EditFrame> was created without expected prop 'hideEditFrame'");
    		}

    		if (updateRow === undefined && !('updateRow' in $$props || $$self.$$.bound[$$self.$$.props['updateRow']])) {
    			console.warn("<EditFrame> was created without expected prop 'updateRow'");
    		}

    		if (deleteRows === undefined && !('deleteRows' in $$props || $$self.$$.bound[$$self.$$.props['deleteRows']])) {
    			console.warn("<EditFrame> was created without expected prop 'deleteRows'");
    		}
    	});

    	const writable_props = ['oldRow', 'columnNames', 'hideEditFrame', 'updateRow', 'deleteRows'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<EditFrame> was created with unknown prop '${key}'`);
    	});

    	const func = () => updateRow(oldRow, newRow);

    	function inputfieldslist_values_binding(value) {
    		newRow = value;
    		$$invalidate(5, newRow);
    	}

    	const func_1 = () => deleteRows([oldRow]);

    	$$self.$$set = $$props => {
    		if ('oldRow' in $$props) $$invalidate(0, oldRow = $$props.oldRow);
    		if ('columnNames' in $$props) $$invalidate(1, columnNames = $$props.columnNames);
    		if ('hideEditFrame' in $$props) $$invalidate(2, hideEditFrame = $$props.hideEditFrame);
    		if ('updateRow' in $$props) $$invalidate(3, updateRow = $$props.updateRow);
    		if ('deleteRows' in $$props) $$invalidate(4, deleteRows = $$props.deleteRows);
    	};

    	$$self.$capture_state = () => ({
    		InputFieldsList,
    		Button,
    		oldRow,
    		columnNames,
    		hideEditFrame,
    		updateRow,
    		deleteRows,
    		newRow,
    		show
    	});

    	$$self.$inject_state = $$props => {
    		if ('oldRow' in $$props) $$invalidate(0, oldRow = $$props.oldRow);
    		if ('columnNames' in $$props) $$invalidate(1, columnNames = $$props.columnNames);
    		if ('hideEditFrame' in $$props) $$invalidate(2, hideEditFrame = $$props.hideEditFrame);
    		if ('updateRow' in $$props) $$invalidate(3, updateRow = $$props.updateRow);
    		if ('deleteRows' in $$props) $$invalidate(4, deleteRows = $$props.deleteRows);
    		if ('newRow' in $$props) $$invalidate(5, newRow = $$props.newRow);
    		if ('show' in $$props) $$invalidate(6, show = $$props.show);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		oldRow,
    		columnNames,
    		hideEditFrame,
    		updateRow,
    		deleteRows,
    		newRow,
    		show,
    		func,
    		inputfieldslist_values_binding,
    		func_1
    	];
    }

    class EditFrame extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$4, create_fragment$4, safe_not_equal, {
    			oldRow: 0,
    			columnNames: 1,
    			hideEditFrame: 2,
    			updateRow: 3,
    			deleteRows: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "EditFrame",
    			options,
    			id: create_fragment$4.name
    		});
    	}

    	get oldRow() {
    		throw new Error("<EditFrame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set oldRow(value) {
    		throw new Error("<EditFrame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get columnNames() {
    		throw new Error("<EditFrame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set columnNames(value) {
    		throw new Error("<EditFrame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideEditFrame() {
    		throw new Error("<EditFrame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideEditFrame(value) {
    		throw new Error("<EditFrame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get updateRow() {
    		throw new Error("<EditFrame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set updateRow(value) {
    		throw new Error("<EditFrame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get deleteRows() {
    		throw new Error("<EditFrame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set deleteRows(value) {
    		throw new Error("<EditFrame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/CreationFrame.svelte generated by Svelte v3.59.2 */
    const file$3 = "src/CreationFrame.svelte";

    // (14:2) {#if show}
    function create_if_block$3(ctx) {
    	let div3;
    	let div2;
    	let div0;
    	let button0;
    	let t0;
    	let div1;
    	let button1;
    	let t1;
    	let h1;
    	let t3;
    	let div4;
    	let textinput;
    	let updating_value;
    	let t4;
    	let inputfieldslist;
    	let updating_values;
    	let current;
    	let mounted;
    	let dispose;

    	button0 = new Button({
    			props: {
    				fill: true,
    				text: "cancel",
    				width: 50,
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1 = new Button({
    			props: {
    				onClick: /*func*/ ctx[5],
    				fill: false,
    				width: 40,
    				text: "add",
    				confirmation: "Are you sure you want to create this new element ?",
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function textinput_value_binding(value) {
    		/*textinput_value_binding*/ ctx[6](value);
    	}

    	let textinput_props = {
    		warn: true,
    		disabled: true,
    		warnText: "This field is supposed to be element's unique identifier and should not be given by the user.",
    		labelText: /*columnNames*/ ctx[2][0],
    		placeholder: "Enter " + /*columnNames*/ ctx[2][0] + " ..."
    	};

    	if (/*id*/ ctx[4] !== void 0) {
    		textinput_props.value = /*id*/ ctx[4];
    	}

    	textinput = new TextInput$1({ props: textinput_props, $$inline: true });
    	binding_callbacks.push(() => bind(textinput, 'value', textinput_value_binding));

    	function inputfieldslist_values_binding(value) {
    		/*inputfieldslist_values_binding*/ ctx[7](value);
    	}

    	let inputfieldslist_props = {
    		disabled: false,
    		labels: /*columnNames*/ ctx[2].slice(1),
    		initialValues: []
    	};

    	if (/*newRow*/ ctx[3] !== void 0) {
    		inputfieldslist_props.values = /*newRow*/ ctx[3];
    	}

    	inputfieldslist = new InputFieldsList({
    			props: inputfieldslist_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(inputfieldslist, 'values', inputfieldslist_values_binding));

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			create_component(button0.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			create_component(button1.$$.fragment);
    			t1 = space();
    			h1 = element("h1");
    			h1.textContent = "Create new element";
    			t3 = space();
    			div4 = element("div");
    			create_component(textinput.$$.fragment);
    			t4 = space();
    			create_component(inputfieldslist.$$.fragment);
    			add_location(div0, file$3, 16, 8, 498);
    			attr_dev(div1, "class", "save-button svelte-1fnkpb4");
    			add_location(div1, file$3, 25, 8, 1664);
    			attr_dev(div2, "class", "flex-row flex svelte-1fnkpb4");
    			add_location(div2, file$3, 15, 6, 462);
    			attr_dev(h1, "class", "title valign-text-middle svelte-1fnkpb4");
    			add_location(h1, file$3, 33, 6, 2417);
    			attr_dev(div3, "class", "flex-col flex svelte-1fnkpb4");
    			add_location(div3, file$3, 14, 4, 428);
    			attr_dev(div4, "id", "edit-inputs");
    			attr_dev(div4, "class", "frame-31 frame svelte-1fnkpb4");
    			add_location(div4, file$3, 35, 4, 2493);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			mount_component(button0, div0, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			mount_component(button1, div1, null);
    			append_dev(div3, t1);
    			append_dev(div3, h1);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div4, anchor);
    			mount_component(textinput, div4, null);
    			append_dev(div4, t4);
    			mount_component(inputfieldslist, div4, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						div0,
    						"click",
    						function () {
    							if (is_function(/*hideCreationFrame*/ ctx[1])) /*hideCreationFrame*/ ctx[1].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(div0, "keypress", keypress_handler, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const button0_changes = {};

    			if (dirty & /*$$scope*/ 512) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};
    			if (dirty & /*addRow, id, columnNames, newRow*/ 29) button1_changes.onClick = /*func*/ ctx[5];

    			if (dirty & /*$$scope*/ 512) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);
    			const textinput_changes = {};
    			if (dirty & /*columnNames*/ 4) textinput_changes.labelText = /*columnNames*/ ctx[2][0];
    			if (dirty & /*columnNames*/ 4) textinput_changes.placeholder = "Enter " + /*columnNames*/ ctx[2][0] + " ...";

    			if (!updating_value && dirty & /*id*/ 16) {
    				updating_value = true;
    				textinput_changes.value = /*id*/ ctx[4];
    				add_flush_callback(() => updating_value = false);
    			}

    			textinput.$set(textinput_changes);
    			const inputfieldslist_changes = {};
    			if (dirty & /*columnNames*/ 4) inputfieldslist_changes.labels = /*columnNames*/ ctx[2].slice(1);

    			if (!updating_values && dirty & /*newRow*/ 8) {
    				updating_values = true;
    				inputfieldslist_changes.values = /*newRow*/ ctx[3];
    				add_flush_callback(() => updating_values = false);
    			}

    			inputfieldslist.$set(inputfieldslist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			transition_in(textinput.$$.fragment, local);
    			transition_in(inputfieldslist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			transition_out(textinput.$$.fragment, local);
    			transition_out(inputfieldslist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(button0);
    			destroy_component(button1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div4);
    			destroy_component(textinput);
    			destroy_component(inputfieldslist);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(14:2) {#if show}",
    		ctx
    	});

    	return block;
    }

    // (18:10) <Button fill={true} text="cancel" width={50} >
    function create_default_slot_1$1(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let path2;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			attr_dev(path0, "d", "M46.171 52.733H26.484a16.858 16.858 0 0 1-12.451-5.507L3.69 35.859c-4.921-5.39-4.921-13.535 0-18.955L14.033 5.537A16.778 16.778 0 0 1 26.483 0h19.688c9.287 0 16.845 7.558 16.845 16.845v19.043c0 9.287-7.558 16.845-16.845 16.845ZM26.484 4.394a12.492 12.492 0 0 0-9.2 4.073L6.915 19.863a9.671 9.671 0 0 0 0 13.037l10.341 11.367a12.492 12.492 0 0 0 9.2 4.072H46.17c6.855 0 12.45-5.596 12.45-12.451V16.845c0-6.855-5.595-12.45-12.45-12.45H26.484Z");
    			add_location(path0, file$3, 19, 14, 761);
    			attr_dev(path1, "d", "M43.24 35.8a2.173 2.173 0 0 1-1.552-.644L27.216 20.654a2.21 2.21 0 0 1 0-3.105 2.21 2.21 0 0 1 3.105 0L44.794 32.05c.85.85.85 2.256 0 3.106-.44.44-.996.644-1.553.644Z");
    			add_location(path1, file$3, 20, 14, 1228);
    			attr_dev(path2, "d", "M28.768 35.8a2.173 2.173 0 0 1-1.552-.644 2.21 2.21 0 0 1 0-3.106l14.472-14.472a2.21 2.21 0 0 1 3.106 0c.85.85.85 2.256 0 3.105L30.32 35.156c-.44.44-.996.644-1.553.644Z");
    			add_location(path2, file$3, 21, 14, 1421);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "class", "button-vector");
    			attr_dev(svg, "width", "50");
    			attr_dev(svg, "height", "40");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 64 53");
    			add_location(svg, file$3, 18, 12, 629);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(svg, path2);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(18:10) <Button fill={true} text=\\\"cancel\\\" width={50} >",
    		ctx
    	});

    	return block;
    }

    // (27:10) <Button onClick={() => addRow((id ? columnNames : columnNames.slice(1)), (id ? [id, ...newRow] : newRow))} fill={false} width={40} text="add" confirmation="Are you sure you want to create this new element ?">
    function create_default_slot$1(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M13.6807 21.5L19.1992 27.0185L30.2557 15.9816M16.1178 41H27.8178C37.5678 41 41.4678 37.1 41.4678 27.35V15.65C41.4678 5.9 37.5678 2 27.8178 2H16.1178C6.36777 2 2.46777 5.9 2.46777 15.65V27.35C2.46777 37.1 6.36777 41 16.1178 41Z");
    			attr_dev(path, "stroke-width", "3");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			add_location(path, file$3, 28, 14, 2041);
    			attr_dev(svg, "class", "button-vector");
    			attr_dev(svg, "width", "40");
    			attr_dev(svg, "height", "40");
    			attr_dev(svg, "viewBox", "0 0 43 43");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$3, 27, 12, 1921);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(27:10) <Button onClick={() => addRow((id ? columnNames : columnNames.slice(1)), (id ? [id, ...newRow] : newRow))} fill={false} width={40} text=\\\"add\\\" confirmation=\\\"Are you sure you want to create this new element ?\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div;
    	let current;
    	let if_block = create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block) if_block.c();
    			attr_dev(div, "class", "edit-frame-container " + ('shown' ) + " svelte-1fnkpb4");
    			add_location(div, file$3, 12, 0, 348);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if_block.p(ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const show = true; // futur use
    const keypress_handler = () => true;

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CreationFrame', slots, []);
    	let { addRow } = $$props;
    	let { hideCreationFrame } = $$props;
    	let { columnNames = [] } = $$props;
    	let oldRow = [];
    	let newRow = [];
    	let id;

    	$$self.$$.on_mount.push(function () {
    		if (addRow === undefined && !('addRow' in $$props || $$self.$$.bound[$$self.$$.props['addRow']])) {
    			console.warn("<CreationFrame> was created without expected prop 'addRow'");
    		}

    		if (hideCreationFrame === undefined && !('hideCreationFrame' in $$props || $$self.$$.bound[$$self.$$.props['hideCreationFrame']])) {
    			console.warn("<CreationFrame> was created without expected prop 'hideCreationFrame'");
    		}
    	});

    	const writable_props = ['addRow', 'hideCreationFrame', 'columnNames'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CreationFrame> was created with unknown prop '${key}'`);
    	});

    	const func = () => addRow(id ? columnNames : columnNames.slice(1), id ? [id, ...newRow] : newRow);

    	function textinput_value_binding(value) {
    		id = value;
    		$$invalidate(4, id);
    	}

    	function inputfieldslist_values_binding(value) {
    		newRow = value;
    		$$invalidate(3, newRow);
    	}

    	$$self.$$set = $$props => {
    		if ('addRow' in $$props) $$invalidate(0, addRow = $$props.addRow);
    		if ('hideCreationFrame' in $$props) $$invalidate(1, hideCreationFrame = $$props.hideCreationFrame);
    		if ('columnNames' in $$props) $$invalidate(2, columnNames = $$props.columnNames);
    	};

    	$$self.$capture_state = () => ({
    		InputFieldsList,
    		Button,
    		TextInput: TextInput$1,
    		TextInputSkeleton: TextInputSkeleton$1,
    		addRow,
    		hideCreationFrame,
    		columnNames,
    		oldRow,
    		newRow,
    		id,
    		show
    	});

    	$$self.$inject_state = $$props => {
    		if ('addRow' in $$props) $$invalidate(0, addRow = $$props.addRow);
    		if ('hideCreationFrame' in $$props) $$invalidate(1, hideCreationFrame = $$props.hideCreationFrame);
    		if ('columnNames' in $$props) $$invalidate(2, columnNames = $$props.columnNames);
    		if ('oldRow' in $$props) oldRow = $$props.oldRow;
    		if ('newRow' in $$props) $$invalidate(3, newRow = $$props.newRow);
    		if ('id' in $$props) $$invalidate(4, id = $$props.id);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		addRow,
    		hideCreationFrame,
    		columnNames,
    		newRow,
    		id,
    		func,
    		textinput_value_binding,
    		inputfieldslist_values_binding
    	];
    }

    class CreationFrame extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$3, create_fragment$3, safe_not_equal, {
    			addRow: 0,
    			hideCreationFrame: 1,
    			columnNames: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CreationFrame",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get addRow() {
    		throw new Error("<CreationFrame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set addRow(value) {
    		throw new Error("<CreationFrame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideCreationFrame() {
    		throw new Error("<CreationFrame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideCreationFrame(value) {
    		throw new Error("<CreationFrame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get columnNames() {
    		throw new Error("<CreationFrame>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set columnNames(value) {
    		throw new Error("<CreationFrame>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const csrfToken = getMeta("csrf-token");
    let jwt = getCookie("jwt");
    function refreshToken() {
        jwt = getCookie("jwt");
    }
    async function apiActionRequest(action, viewName = "", keys, values) {
        const data = keys.reduce((obj, key, index) => {
            // Converts key values to object
            obj[key] = values[index];
            return obj;
        }, {});
        const request = {
            action: action,
            jwt: jwt,
            view_name: viewName,
            row: data,
        };
        const res = await fetch(window.location.origin + "/app/execute/", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": csrfToken,
            },
            body: JSON.stringify(request),
        });
        const resJson = await res.json();
        if (resJson.status !== 200) {
            // If api returns error
            console.log("Error: " + resJson.message);
            return undefined;
        }
        else {
            return { names: resJson.row_keys, table: resJson.rows };
        }
    }
    async function apiTreeRequest() {
        let res = await fetch(window.location.origin + "/app/viewtree/", {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": csrfToken,
            },
        });
        return await res.json();
    }
    function getMeta(metaName) {
        const metas = document.getElementsByTagName("meta");
        for (let i = 0; i < metas.length; i++) {
            if (metas[i].getAttribute("name") === metaName) {
                return metas[i].getAttribute("content");
            }
        }
        return "";
    }
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2)
            return parts.pop().split(";").shift();
    }
    function setCookie(name, value, hours) {
        let expires = "";
        if (hours) {
            const date = new Date();
            date.setTime(date.getTime() + hours * 60 * 60 * 1000);
            expires = `; expires=${date.toUTCString()}`;
        }
        document.cookie = `${name}=${value || ""}${expires}; path=/; SameSite=Lax;`;
    }

    async function auth() {
        const csrfToken = getMeta("csrf-token");
        const casUrl = getMeta("cas-url");
        const tokenValidationDuration = parseInt(getMeta("token-lifetime-hours"));
        const jwt = getCookie("jwt");
        const urlParams = new URLSearchParams(window.location.search);
        const ticket = urlParams.get("ticket");
        if (!jwt && ticket) {
            // If no jwt but ticket, verify ticket
            const token = await validateCASTicket(csrfToken, ticket);
            if (!token) {
                return "Authentification failed.";
            }
            else {
                setCookie("jwt", token, tokenValidationDuration);
                return jwt;
            }
        }
        else if (jwt) {
            // If jwt, verify jwt
            validateJWTToken(csrfToken, jwt).then((res) => {
                if (!res) {
                    return "Authentification failed.";
                }
                else {
                    return jwt;
                }
            });
        }
        else {
            // Redirecting user to CAS to get ticket
            let returnUrl = encodeURIComponent(window.location.origin);
            window.location.href = casUrl + `?service=${returnUrl}`;
        }
    }
    async function validateCASTicket(csrfToken, ticket) {
        const response = await fetch("/user/cas/", {
            method: "POST",
            headers: {
                "X-CSRFToken": csrfToken,
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                ticket: ticket,
            }),
        });
        const res = await response.json();
        if (res.status != 200) {
            return undefined;
        }
        if (res.jwt) {
            localStorage.setItem("jwt", res.jwt); // Useless???
        }
        return res.jwt;
    }
    async function validateJWTToken(csrfToken, token) {
        const response = await fetch("/user/auth/", {
            method: "PUT",
            headers: {
                "X-CSRFToken": csrfToken,
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                jwt: token,
            }),
        });
        const res = await response.json();
        if (res.status == 200) {
            return true;
        }
        return false;
    }

    /* src/Login.svelte generated by Svelte v3.59.2 */
    const file$2 = "src/Login.svelte";

    // (9:0) {#if error}
    function create_if_block$2(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = `${/*error*/ ctx[0]}`;
    			add_location(p, file$2, 9, 2, 222);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(9:0) {#if error}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let if_block_anchor;
    	let if_block = /*error*/ ctx[0] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*error*/ ctx[0]) if_block.p(ctx, dirty);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Login', slots, []);
    	let error = '';

    	onMount(async () => {
    		
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Login> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		auth,
    		onMount,
    		getMeta,
    		getCookie,
    		setCookie,
    		error
    	});

    	$$self.$inject_state = $$props => {
    		if ('error' in $$props) $$invalidate(0, error = $$props.error);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [error];
    }

    class Login extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Login",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /*! DataTables 1.13.5
     * ©2008-2023 SpryMedia Ltd - datatables.net/license
     */


    // DataTables code uses $ internally, but we want to be able to
    // reassign $ with the `use` method, so it is a regular var.
    var $$7 = j;


    var DataTable = function ( selector, options )
    {
    	// Check if called with a window or jQuery object for DOM less applications
    	// This is for backwards compatibility
    	if (DataTable.factory(selector, options)) {
    		return DataTable;
    	}

    	// When creating with `new`, create a new DataTable, returning the API instance
    	if (this instanceof DataTable) {
    		return $$7(selector).DataTable(options);
    	}
    	else {
    		// Argument switching
    		options = selector;
    	}

    	/**
    	 * Perform a jQuery selector action on the table's TR elements (from the tbody) and
    	 * return the resulting jQuery object.
    	 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
    	 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
    	 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
    	 *    criterion ("applied") or all TR elements (i.e. no filter).
    	 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
    	 *    Can be either 'current', whereby the current sorting of the table is used, or
    	 *    'original' whereby the original order the data was read into the table is used.
    	 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
    	 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
    	 *    'current' and filter is 'applied', regardless of what they might be given as.
    	 *  @returns {object} jQuery object, filtered by the given selector.
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *
    	 *      // Highlight every second row
    	 *      oTable.$('tr:odd').css('backgroundColor', 'blue');
    	 *    } );
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *
    	 *      // Filter to rows with 'Webkit' in them, add a background colour and then
    	 *      // remove the filter, thus highlighting the 'Webkit' rows only.
    	 *      oTable.fnFilter('Webkit');
    	 *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
    	 *      oTable.fnFilter('');
    	 *    } );
    	 */
    	this.$ = function ( sSelector, oOpts )
    	{
    		return this.api(true).$( sSelector, oOpts );
    	};
    	
    	
    	/**
    	 * Almost identical to $ in operation, but in this case returns the data for the matched
    	 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
    	 * rather than any descendants, so the data can be obtained for the row/cell. If matching
    	 * rows are found, the data returned is the original data array/object that was used to
    	 * create the row (or a generated array if from a DOM source).
    	 *
    	 * This method is often useful in-combination with $ where both functions are given the
    	 * same parameters and the array indexes will match identically.
    	 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
    	 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
    	 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
    	 *    criterion ("applied") or all elements (i.e. no filter).
    	 *  @param {string} [oOpts.order=current] Order of the data in the processed array.
    	 *    Can be either 'current', whereby the current sorting of the table is used, or
    	 *    'original' whereby the original order the data was read into the table is used.
    	 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
    	 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
    	 *    'current' and filter is 'applied', regardless of what they might be given as.
    	 *  @returns {array} Data for the matched elements. If any elements, as a result of the
    	 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
    	 *    entry in the array.
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *
    	 *      // Get the data from the first row in the table
    	 *      var data = oTable._('tr:first');
    	 *
    	 *      // Do something useful with the data
    	 *      alert( "First cell is: "+data[0] );
    	 *    } );
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *
    	 *      // Filter to 'Webkit' and get all data for
    	 *      oTable.fnFilter('Webkit');
    	 *      var data = oTable._('tr', {"search": "applied"});
    	 *
    	 *      // Do something with the data
    	 *      alert( data.length+" rows matched the search" );
    	 *    } );
    	 */
    	this._ = function ( sSelector, oOpts )
    	{
    		return this.api(true).rows( sSelector, oOpts ).data();
    	};
    	
    	
    	/**
    	 * Create a DataTables Api instance, with the currently selected tables for
    	 * the Api's context.
    	 * @param {boolean} [traditional=false] Set the API instance's context to be
    	 *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
    	 *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
    	 *   or if all tables captured in the jQuery object should be used.
    	 * @return {DataTables.Api}
    	 */
    	this.api = function ( traditional )
    	{
    		return traditional ?
    			new _Api(
    				_fnSettingsFromNode( this[ _ext.iApiIndex ] )
    			) :
    			new _Api( this );
    	};
    	
    	
    	/**
    	 * Add a single new row or multiple rows of data to the table. Please note
    	 * that this is suitable for client-side processing only - if you are using
    	 * server-side processing (i.e. "bServerSide": true), then to add data, you
    	 * must add it to the data source, i.e. the server-side, through an Ajax call.
    	 *  @param {array|object} data The data to be added to the table. This can be:
    	 *    <ul>
    	 *      <li>1D array of data - add a single row with the data provided</li>
    	 *      <li>2D array of arrays - add multiple rows in a single call</li>
    	 *      <li>object - data object when using <i>mData</i></li>
    	 *      <li>array of objects - multiple data objects when using <i>mData</i></li>
    	 *    </ul>
    	 *  @param {bool} [redraw=true] redraw the table or not
    	 *  @returns {array} An array of integers, representing the list of indexes in
    	 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
    	 *    the table.
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    // Global var for counter
    	 *    var giCount = 2;
    	 *
    	 *    $(document).ready(function() {
    	 *      $('#example').dataTable();
    	 *    } );
    	 *
    	 *    function fnClickAddRow() {
    	 *      $('#example').dataTable().fnAddData( [
    	 *        giCount+".1",
    	 *        giCount+".2",
    	 *        giCount+".3",
    	 *        giCount+".4" ]
    	 *      );
    	 *
    	 *      giCount++;
    	 *    }
    	 */
    	this.fnAddData = function( data, redraw )
    	{
    		var api = this.api( true );
    	
    		/* Check if we want to add multiple rows or not */
    		var rows = Array.isArray(data) && ( Array.isArray(data[0]) || $$7.isPlainObject(data[0]) ) ?
    			api.rows.add( data ) :
    			api.row.add( data );
    	
    		if ( redraw === undefined || redraw ) {
    			api.draw();
    		}
    	
    		return rows.flatten().toArray();
    	};
    	
    	
    	/**
    	 * This function will make DataTables recalculate the column sizes, based on the data
    	 * contained in the table and the sizes applied to the columns (in the DOM, CSS or
    	 * through the sWidth parameter). This can be useful when the width of the table's
    	 * parent element changes (for example a window resize).
    	 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable( {
    	 *        "sScrollY": "200px",
    	 *        "bPaginate": false
    	 *      } );
    	 *
    	 *      $(window).on('resize', function () {
    	 *        oTable.fnAdjustColumnSizing();
    	 *      } );
    	 *    } );
    	 */
    	this.fnAdjustColumnSizing = function ( bRedraw )
    	{
    		var api = this.api( true ).columns.adjust();
    		var settings = api.settings()[0];
    		var scroll = settings.oScroll;
    	
    		if ( bRedraw === undefined || bRedraw ) {
    			api.draw( false );
    		}
    		else if ( scroll.sX !== "" || scroll.sY !== "" ) {
    			/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
    			_fnScrollDraw( settings );
    		}
    	};
    	
    	
    	/**
    	 * Quickly and simply clear a table
    	 *  @param {bool} [bRedraw=true] redraw the table or not
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *
    	 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
    	 *      oTable.fnClearTable();
    	 *    } );
    	 */
    	this.fnClearTable = function( bRedraw )
    	{
    		var api = this.api( true ).clear();
    	
    		if ( bRedraw === undefined || bRedraw ) {
    			api.draw();
    		}
    	};
    	
    	
    	/**
    	 * The exact opposite of 'opening' a row, this function will close any rows which
    	 * are currently 'open'.
    	 *  @param {node} nTr the table row to 'close'
    	 *  @returns {int} 0 on success, or 1 if failed (can't find the row)
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable;
    	 *
    	 *      // 'open' an information row when a row is clicked on
    	 *      $('#example tbody tr').click( function () {
    	 *        if ( oTable.fnIsOpen(this) ) {
    	 *          oTable.fnClose( this );
    	 *        } else {
    	 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
    	 *        }
    	 *      } );
    	 *
    	 *      oTable = $('#example').dataTable();
    	 *    } );
    	 */
    	this.fnClose = function( nTr )
    	{
    		this.api( true ).row( nTr ).child.hide();
    	};
    	
    	
    	/**
    	 * Remove a row for the table
    	 *  @param {mixed} target The index of the row from aoData to be deleted, or
    	 *    the TR element you want to delete
    	 *  @param {function|null} [callBack] Callback function
    	 *  @param {bool} [redraw=true] Redraw the table or not
    	 *  @returns {array} The row that was deleted
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *
    	 *      // Immediately remove the first row
    	 *      oTable.fnDeleteRow( 0 );
    	 *    } );
    	 */
    	this.fnDeleteRow = function( target, callback, redraw )
    	{
    		var api = this.api( true );
    		var rows = api.rows( target );
    		var settings = rows.settings()[0];
    		var data = settings.aoData[ rows[0][0] ];
    	
    		rows.remove();
    	
    		if ( callback ) {
    			callback.call( this, settings, data );
    		}
    	
    		if ( redraw === undefined || redraw ) {
    			api.draw();
    		}
    	
    		return data;
    	};
    	
    	
    	/**
    	 * Restore the table to it's original state in the DOM by removing all of DataTables
    	 * enhancements, alterations to the DOM structure of the table and event listeners.
    	 *  @param {boolean} [remove=false] Completely remove the table from the DOM
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
    	 *      var oTable = $('#example').dataTable();
    	 *      oTable.fnDestroy();
    	 *    } );
    	 */
    	this.fnDestroy = function ( remove )
    	{
    		this.api( true ).destroy( remove );
    	};
    	
    	
    	/**
    	 * Redraw the table
    	 *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *
    	 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
    	 *      oTable.fnDraw();
    	 *    } );
    	 */
    	this.fnDraw = function( complete )
    	{
    		// Note that this isn't an exact match to the old call to _fnDraw - it takes
    		// into account the new data, but can hold position.
    		this.api( true ).draw( complete );
    	};
    	
    	
    	/**
    	 * Filter the input based on data
    	 *  @param {string} sInput String to filter the table on
    	 *  @param {int|null} [iColumn] Column to limit filtering to
    	 *  @param {bool} [bRegex=false] Treat as regular expression or not
    	 *  @param {bool} [bSmart=true] Perform smart filtering or not
    	 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
    	 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *
    	 *      // Sometime later - filter...
    	 *      oTable.fnFilter( 'test string' );
    	 *    } );
    	 */
    	this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )
    	{
    		var api = this.api( true );
    	
    		if ( iColumn === null || iColumn === undefined ) {
    			api.search( sInput, bRegex, bSmart, bCaseInsensitive );
    		}
    		else {
    			api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );
    		}
    	
    		api.draw();
    	};
    	
    	
    	/**
    	 * Get the data for the whole table, an individual row or an individual cell based on the
    	 * provided parameters.
    	 *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
    	 *    a TR node then the data source for the whole row will be returned. If given as a
    	 *    TD/TH cell node then iCol will be automatically calculated and the data for the
    	 *    cell returned. If given as an integer, then this is treated as the aoData internal
    	 *    data index for the row (see fnGetPosition) and the data for that row used.
    	 *  @param {int} [col] Optional column index that you want the data of.
    	 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
    	 *    returned. If mRow is defined, just data for that row, and is iCol is
    	 *    defined, only data for the designated cell is returned.
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    // Row data
    	 *    $(document).ready(function() {
    	 *      oTable = $('#example').dataTable();
    	 *
    	 *      oTable.$('tr').click( function () {
    	 *        var data = oTable.fnGetData( this );
    	 *        // ... do something with the array / object of data for the row
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Individual cell data
    	 *    $(document).ready(function() {
    	 *      oTable = $('#example').dataTable();
    	 *
    	 *      oTable.$('td').click( function () {
    	 *        var sData = oTable.fnGetData( this );
    	 *        alert( 'The cell clicked on had the value of '+sData );
    	 *      } );
    	 *    } );
    	 */
    	this.fnGetData = function( src, col )
    	{
    		var api = this.api( true );
    	
    		if ( src !== undefined ) {
    			var type = src.nodeName ? src.nodeName.toLowerCase() : '';
    	
    			return col !== undefined || type == 'td' || type == 'th' ?
    				api.cell( src, col ).data() :
    				api.row( src ).data() || null;
    		}
    	
    		return api.data().toArray();
    	};
    	
    	
    	/**
    	 * Get an array of the TR nodes that are used in the table's body. Note that you will
    	 * typically want to use the '$' API method in preference to this as it is more
    	 * flexible.
    	 *  @param {int} [iRow] Optional row index for the TR element you want
    	 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
    	 *    in the table's body, or iRow is defined, just the TR element requested.
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *
    	 *      // Get the nodes from the table
    	 *      var nNodes = oTable.fnGetNodes( );
    	 *    } );
    	 */
    	this.fnGetNodes = function( iRow )
    	{
    		var api = this.api( true );
    	
    		return iRow !== undefined ?
    			api.row( iRow ).node() :
    			api.rows().nodes().flatten().toArray();
    	};
    	
    	
    	/**
    	 * Get the array indexes of a particular cell from it's DOM element
    	 * and column index including hidden columns
    	 *  @param {node} node this can either be a TR, TD or TH in the table's body
    	 *  @returns {int} If nNode is given as a TR, then a single index is returned, or
    	 *    if given as a cell, an array of [row index, column index (visible),
    	 *    column index (all)] is given.
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      $('#example tbody td').click( function () {
    	 *        // Get the position of the current data from the node
    	 *        var aPos = oTable.fnGetPosition( this );
    	 *
    	 *        // Get the data array for this row
    	 *        var aData = oTable.fnGetData( aPos[0] );
    	 *
    	 *        // Update the data array and return the value
    	 *        aData[ aPos[1] ] = 'clicked';
    	 *        this.innerHTML = 'clicked';
    	 *      } );
    	 *
    	 *      // Init DataTables
    	 *      oTable = $('#example').dataTable();
    	 *    } );
    	 */
    	this.fnGetPosition = function( node )
    	{
    		var api = this.api( true );
    		var nodeName = node.nodeName.toUpperCase();
    	
    		if ( nodeName == 'TR' ) {
    			return api.row( node ).index();
    		}
    		else if ( nodeName == 'TD' || nodeName == 'TH' ) {
    			var cell = api.cell( node ).index();
    	
    			return [
    				cell.row,
    				cell.columnVisible,
    				cell.column
    			];
    		}
    		return null;
    	};
    	
    	
    	/**
    	 * Check to see if a row is 'open' or not.
    	 *  @param {node} nTr the table row to check
    	 *  @returns {boolean} true if the row is currently open, false otherwise
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable;
    	 *
    	 *      // 'open' an information row when a row is clicked on
    	 *      $('#example tbody tr').click( function () {
    	 *        if ( oTable.fnIsOpen(this) ) {
    	 *          oTable.fnClose( this );
    	 *        } else {
    	 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
    	 *        }
    	 *      } );
    	 *
    	 *      oTable = $('#example').dataTable();
    	 *    } );
    	 */
    	this.fnIsOpen = function( nTr )
    	{
    		return this.api( true ).row( nTr ).child.isShown();
    	};
    	
    	
    	/**
    	 * This function will place a new row directly after a row which is currently
    	 * on display on the page, with the HTML contents that is passed into the
    	 * function. This can be used, for example, to ask for confirmation that a
    	 * particular record should be deleted.
    	 *  @param {node} nTr The table row to 'open'
    	 *  @param {string|node|jQuery} mHtml The HTML to put into the row
    	 *  @param {string} sClass Class to give the new TD cell
    	 *  @returns {node} The row opened. Note that if the table row passed in as the
    	 *    first parameter, is not found in the table, this method will silently
    	 *    return.
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable;
    	 *
    	 *      // 'open' an information row when a row is clicked on
    	 *      $('#example tbody tr').click( function () {
    	 *        if ( oTable.fnIsOpen(this) ) {
    	 *          oTable.fnClose( this );
    	 *        } else {
    	 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
    	 *        }
    	 *      } );
    	 *
    	 *      oTable = $('#example').dataTable();
    	 *    } );
    	 */
    	this.fnOpen = function( nTr, mHtml, sClass )
    	{
    		return this.api( true )
    			.row( nTr )
    			.child( mHtml, sClass )
    			.show()
    			.child()[0];
    	};
    	
    	
    	/**
    	 * Change the pagination - provides the internal logic for pagination in a simple API
    	 * function. With this function you can have a DataTables table go to the next,
    	 * previous, first or last pages.
    	 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
    	 *    or page number to jump to (integer), note that page 0 is the first page.
    	 *  @param {bool} [bRedraw=true] Redraw the table or not
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *      oTable.fnPageChange( 'next' );
    	 *    } );
    	 */
    	this.fnPageChange = function ( mAction, bRedraw )
    	{
    		var api = this.api( true ).page( mAction );
    	
    		if ( bRedraw === undefined || bRedraw ) {
    			api.draw(false);
    		}
    	};
    	
    	
    	/**
    	 * Show a particular column
    	 *  @param {int} iCol The column whose display should be changed
    	 *  @param {bool} bShow Show (true) or hide (false) the column
    	 *  @param {bool} [bRedraw=true] Redraw the table or not
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *
    	 *      // Hide the second column after initialisation
    	 *      oTable.fnSetColumnVis( 1, false );
    	 *    } );
    	 */
    	this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
    	{
    		var api = this.api( true ).column( iCol ).visible( bShow );
    	
    		if ( bRedraw === undefined || bRedraw ) {
    			api.columns.adjust().draw();
    		}
    	};
    	
    	
    	/**
    	 * Get the settings for a particular table for external manipulation
    	 *  @returns {object} DataTables settings object. See
    	 *    {@link DataTable.models.oSettings}
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *      var oSettings = oTable.fnSettings();
    	 *
    	 *      // Show an example parameter from the settings
    	 *      alert( oSettings._iDisplayStart );
    	 *    } );
    	 */
    	this.fnSettings = function()
    	{
    		return _fnSettingsFromNode( this[_ext.iApiIndex] );
    	};
    	
    	
    	/**
    	 * Sort the table by a particular column
    	 *  @param {int} iCol the data index to sort on. Note that this will not match the
    	 *    'display index' if you have hidden data entries
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *
    	 *      // Sort immediately with columns 0 and 1
    	 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
    	 *    } );
    	 */
    	this.fnSort = function( aaSort )
    	{
    		this.api( true ).order( aaSort ).draw();
    	};
    	
    	
    	/**
    	 * Attach a sort listener to an element for a given column
    	 *  @param {node} nNode the element to attach the sort listener to
    	 *  @param {int} iColumn the column that a click on this node will sort on
    	 *  @param {function} [fnCallback] callback function when sort is run
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *
    	 *      // Sort on column 1, when 'sorter' is clicked on
    	 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
    	 *    } );
    	 */
    	this.fnSortListener = function( nNode, iColumn, fnCallback )
    	{
    		this.api( true ).order.listener( nNode, iColumn, fnCallback );
    	};
    	
    	
    	/**
    	 * Update a table cell or row - this method will accept either a single value to
    	 * update the cell with, an array of values with one element for each column or
    	 * an object in the same format as the original data source. The function is
    	 * self-referencing in order to make the multi column updates easier.
    	 *  @param {object|array|string} mData Data to update the cell/row with
    	 *  @param {node|int} mRow TR element you want to update or the aoData index
    	 *  @param {int} [iColumn] The column to update, give as null or undefined to
    	 *    update a whole row.
    	 *  @param {bool} [bRedraw=true] Redraw the table or not
    	 *  @param {bool} [bAction=true] Perform pre-draw actions or not
    	 *  @returns {int} 0 on success, 1 on error
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
    	 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
    	 *    } );
    	 */
    	this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
    	{
    		var api = this.api( true );
    	
    		if ( iColumn === undefined || iColumn === null ) {
    			api.row( mRow ).data( mData );
    		}
    		else {
    			api.cell( mRow, iColumn ).data( mData );
    		}
    	
    		if ( bAction === undefined || bAction ) {
    			api.columns.adjust();
    		}
    	
    		if ( bRedraw === undefined || bRedraw ) {
    			api.draw();
    		}
    		return 0;
    	};
    	
    	
    	/**
    	 * Provide a common method for plug-ins to check the version of DataTables being used, in order
    	 * to ensure compatibility.
    	 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
    	 *    formats "X" and "X.Y" are also acceptable.
    	 *  @returns {boolean} true if this version of DataTables is greater or equal to the required
    	 *    version, or false if this version of DataTales is not suitable
    	 *  @method
    	 *  @dtopt API
    	 *  @deprecated Since v1.10
    	 *
    	 *  @example
    	 *    $(document).ready(function() {
    	 *      var oTable = $('#example').dataTable();
    	 *      alert( oTable.fnVersionCheck( '1.9.0' ) );
    	 *    } );
    	 */
    	this.fnVersionCheck = _ext.fnVersionCheck;
    	

    	var _that = this;
    	var emptyInit = options === undefined;
    	var len = this.length;

    	if ( emptyInit ) {
    		options = {};
    	}

    	this.oApi = this.internal = _ext.internal;

    	// Extend with old style plug-in API methods
    	for ( var fn in DataTable.ext.internal ) {
    		if ( fn ) {
    			this[fn] = _fnExternApiFunc(fn);
    		}
    	}

    	this.each(function() {
    		// For each initialisation we want to give it a clean initialisation
    		// object that can be bashed around
    		var o = {};
    		var oInit = len > 1 ? // optimisation for single table case
    			_fnExtend( o, options, true ) :
    			options;

    		/*global oInit,_that,emptyInit*/
    		var i=0, iLen;
    		var sId = this.getAttribute( 'id' );
    		var bInitHandedOff = false;
    		var defaults = DataTable.defaults;
    		var $this = $$7(this);
    		
    		
    		/* Sanity check */
    		if ( this.nodeName.toLowerCase() != 'table' )
    		{
    			_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );
    			return;
    		}
    		
    		/* Backwards compatibility for the defaults */
    		_fnCompatOpts( defaults );
    		_fnCompatCols( defaults.column );
    		
    		/* Convert the camel-case defaults to Hungarian */
    		_fnCamelToHungarian( defaults, defaults, true );
    		_fnCamelToHungarian( defaults.column, defaults.column, true );
    		
    		/* Setting up the initialisation object */
    		_fnCamelToHungarian( defaults, $$7.extend( oInit, $this.data() ), true );
    		
    		
    		
    		/* Check to see if we are re-initialising a table */
    		var allSettings = DataTable.settings;
    		for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )
    		{
    			var s = allSettings[i];
    		
    			/* Base check on table node */
    			if (
    				s.nTable == this ||
    				(s.nTHead && s.nTHead.parentNode == this) ||
    				(s.nTFoot && s.nTFoot.parentNode == this)
    			) {
    				var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
    				var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;
    		
    				if ( emptyInit || bRetrieve )
    				{
    					return s.oInstance;
    				}
    				else if ( bDestroy )
    				{
    					s.oInstance.fnDestroy();
    					break;
    				}
    				else
    				{
    					_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );
    					return;
    				}
    			}
    		
    			/* If the element we are initialising has the same ID as a table which was previously
    			 * initialised, but the table nodes don't match (from before) then we destroy the old
    			 * instance by simply deleting it. This is under the assumption that the table has been
    			 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
    			 */
    			if ( s.sTableId == this.id )
    			{
    				allSettings.splice( i, 1 );
    				break;
    			}
    		}
    		
    		/* Ensure the table has an ID - required for accessibility */
    		if ( sId === null || sId === "" )
    		{
    			sId = "DataTables_Table_"+(DataTable.ext._unique++);
    			this.id = sId;
    		}
    		
    		/* Create the settings object for this table and set some of the default parameters */
    		var oSettings = $$7.extend( true, {}, DataTable.models.oSettings, {
    			"sDestroyWidth": $this[0].style.width,
    			"sInstance":     sId,
    			"sTableId":      sId
    		} );
    		oSettings.nTable = this;
    		oSettings.oApi   = _that.internal;
    		oSettings.oInit  = oInit;
    		
    		allSettings.push( oSettings );
    		
    		// Need to add the instance after the instance after the settings object has been added
    		// to the settings array, so we can self reference the table instance if more than one
    		oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();
    		
    		// Backwards compatibility, before we apply all the defaults
    		_fnCompatOpts( oInit );
    		_fnLanguageCompat( oInit.oLanguage );
    		
    		// If the length menu is given, but the init display length is not, use the length menu
    		if ( oInit.aLengthMenu && ! oInit.iDisplayLength )
    		{
    			oInit.iDisplayLength = Array.isArray( oInit.aLengthMenu[0] ) ?
    				oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
    		}
    		
    		// Apply the defaults and init options to make a single init object will all
    		// options defined from defaults and instance options.
    		oInit = _fnExtend( $$7.extend( true, {}, defaults ), oInit );
    		
    		
    		// Map the initialisation options onto the settings object
    		_fnMap( oSettings.oFeatures, oInit, [
    			"bPaginate",
    			"bLengthChange",
    			"bFilter",
    			"bSort",
    			"bSortMulti",
    			"bInfo",
    			"bProcessing",
    			"bAutoWidth",
    			"bSortClasses",
    			"bServerSide",
    			"bDeferRender"
    		] );
    		_fnMap( oSettings, oInit, [
    			"asStripeClasses",
    			"ajax",
    			"fnServerData",
    			"fnFormatNumber",
    			"sServerMethod",
    			"aaSorting",
    			"aaSortingFixed",
    			"aLengthMenu",
    			"sPaginationType",
    			"sAjaxSource",
    			"sAjaxDataProp",
    			"iStateDuration",
    			"sDom",
    			"bSortCellsTop",
    			"iTabIndex",
    			"fnStateLoadCallback",
    			"fnStateSaveCallback",
    			"renderer",
    			"searchDelay",
    			"rowId",
    			[ "iCookieDuration", "iStateDuration" ], // backwards compat
    			[ "oSearch", "oPreviousSearch" ],
    			[ "aoSearchCols", "aoPreSearchCols" ],
    			[ "iDisplayLength", "_iDisplayLength" ]
    		] );
    		_fnMap( oSettings.oScroll, oInit, [
    			[ "sScrollX", "sX" ],
    			[ "sScrollXInner", "sXInner" ],
    			[ "sScrollY", "sY" ],
    			[ "bScrollCollapse", "bCollapse" ]
    		] );
    		_fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );
    		
    		/* Callback functions which are array driven */
    		_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );
    		_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );
    		_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );
    		_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );
    		_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );
    		_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );
    		_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );
    		_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );
    		_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );
    		_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );
    		_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );
    		
    		oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );
    		
    		/* Browser support detection */
    		_fnBrowserDetect( oSettings );
    		
    		var oClasses = oSettings.oClasses;
    		
    		$$7.extend( oClasses, DataTable.ext.classes, oInit.oClasses );
    		$this.addClass( oClasses.sTable );
    		
    		
    		if ( oSettings.iInitDisplayStart === undefined )
    		{
    			/* Display start point, taking into account the save saving */
    			oSettings.iInitDisplayStart = oInit.iDisplayStart;
    			oSettings._iDisplayStart = oInit.iDisplayStart;
    		}
    		
    		if ( oInit.iDeferLoading !== null )
    		{
    			oSettings.bDeferLoading = true;
    			var tmp = Array.isArray( oInit.iDeferLoading );
    			oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
    			oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
    		}
    		
    		/* Language definitions */
    		var oLanguage = oSettings.oLanguage;
    		$$7.extend( true, oLanguage, oInit.oLanguage );
    		
    		if ( oLanguage.sUrl )
    		{
    			/* Get the language definitions from a file - because this Ajax call makes the language
    			 * get async to the remainder of this function we use bInitHandedOff to indicate that
    			 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
    			 */
    			$$7.ajax( {
    				dataType: 'json',
    				url: oLanguage.sUrl,
    				success: function ( json ) {
    					_fnCamelToHungarian( defaults.oLanguage, json );
    					_fnLanguageCompat( json );
    					$$7.extend( true, oLanguage, json, oSettings.oInit.oLanguage );
    		
    					_fnCallbackFire( oSettings, null, 'i18n', [oSettings]);
    					_fnInitialise( oSettings );
    				},
    				error: function () {
    					// Error occurred loading language file, continue on as best we can
    					_fnInitialise( oSettings );
    				}
    			} );
    			bInitHandedOff = true;
    		}
    		else {
    			_fnCallbackFire( oSettings, null, 'i18n', [oSettings]);
    		}
    		
    		/*
    		 * Stripes
    		 */
    		if ( oInit.asStripeClasses === null )
    		{
    			oSettings.asStripeClasses =[
    				oClasses.sStripeOdd,
    				oClasses.sStripeEven
    			];
    		}
    		
    		/* Remove row stripe classes if they are already on the table row */
    		var stripeClasses = oSettings.asStripeClasses;
    		var rowOne = $this.children('tbody').find('tr').eq(0);
    		if ( $$7.inArray( true, $$7.map( stripeClasses, function(el, i) {
    			return rowOne.hasClass(el);
    		} ) ) !== -1 ) {
    			$$7('tbody tr', this).removeClass( stripeClasses.join(' ') );
    			oSettings.asDestroyStripes = stripeClasses.slice();
    		}
    		
    		/*
    		 * Columns
    		 * See if we should load columns automatically or use defined ones
    		 */
    		var anThs = [];
    		var aoColumnsInit;
    		var nThead = this.getElementsByTagName('thead');
    		if ( nThead.length !== 0 )
    		{
    			_fnDetectHeader( oSettings.aoHeader, nThead[0] );
    			anThs = _fnGetUniqueThs( oSettings );
    		}
    		
    		/* If not given a column array, generate one with nulls */
    		if ( oInit.aoColumns === null )
    		{
    			aoColumnsInit = [];
    			for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
    			{
    				aoColumnsInit.push( null );
    			}
    		}
    		else
    		{
    			aoColumnsInit = oInit.aoColumns;
    		}
    		
    		/* Add the columns */
    		for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
    		{
    			_fnAddColumn( oSettings, anThs ? anThs[i] : null );
    		}
    		
    		/* Apply the column definitions */
    		_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
    			_fnColumnOptions( oSettings, iCol, oDef );
    		} );
    		
    		/* HTML5 attribute detection - build an mData object automatically if the
    		 * attributes are found
    		 */
    		if ( rowOne.length ) {
    			var a = function ( cell, name ) {
    				return cell.getAttribute( 'data-'+name ) !== null ? name : null;
    			};
    		
    			$$7( rowOne[0] ).children('th, td').each( function (i, cell) {
    				var col = oSettings.aoColumns[i];
    		
    				if (! col) {
    					_fnLog( oSettings, 0, 'Incorrect column count', 18 );
    				}
    		
    				if ( col.mData === i ) {
    					var sort = a( cell, 'sort' ) || a( cell, 'order' );
    					var filter = a( cell, 'filter' ) || a( cell, 'search' );
    		
    					if ( sort !== null || filter !== null ) {
    						col.mData = {
    							_:      i+'.display',
    							sort:   sort !== null   ? i+'.@data-'+sort   : undefined,
    							type:   sort !== null   ? i+'.@data-'+sort   : undefined,
    							filter: filter !== null ? i+'.@data-'+filter : undefined
    						};
    						col._isArrayHost = true;
    		
    						_fnColumnOptions( oSettings, i );
    					}
    				}
    			} );
    		}
    		
    		var features = oSettings.oFeatures;
    		var loadedInit = function () {
    			/*
    			 * Sorting
    			 * @todo For modularisation (1.11) this needs to do into a sort start up handler
    			 */
    		
    			// If aaSorting is not defined, then we use the first indicator in asSorting
    			// in case that has been altered, so the default sort reflects that option
    			if ( oInit.aaSorting === undefined ) {
    				var sorting = oSettings.aaSorting;
    				for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {
    					sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];
    				}
    			}
    		
    			/* Do a first pass on the sorting classes (allows any size changes to be taken into
    			 * account, and also will apply sorting disabled classes if disabled
    			 */
    			_fnSortingClasses( oSettings );
    		
    			if ( features.bSort ) {
    				_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
    					if ( oSettings.bSorted ) {
    						var aSort = _fnSortFlatten( oSettings );
    						var sortedColumns = {};
    		
    						$$7.each( aSort, function (i, val) {
    							sortedColumns[ val.src ] = val.dir;
    						} );
    		
    						_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );
    						_fnSortAria( oSettings );
    					}
    				} );
    			}
    		
    			_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
    				if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {
    					_fnSortingClasses( oSettings );
    				}
    			}, 'sc' );
    		
    		
    			/*
    			 * Final init
    			 * Cache the header, body and footer as required, creating them if needed
    			 */
    		
    			// Work around for Webkit bug 83867 - store the caption-side before removing from doc
    			var captions = $this.children('caption').each( function () {
    				this._captionSide = $$7(this).css('caption-side');
    			} );
    		
    			var thead = $this.children('thead');
    			if ( thead.length === 0 ) {
    				thead = $$7('<thead/>').appendTo($this);
    			}
    			oSettings.nTHead = thead[0];
    		
    			var tbody = $this.children('tbody');
    			if ( tbody.length === 0 ) {
    				tbody = $$7('<tbody/>').insertAfter(thead);
    			}
    			oSettings.nTBody = tbody[0];
    		
    			var tfoot = $this.children('tfoot');
    			if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") ) {
    				// If we are a scrolling table, and no footer has been given, then we need to create
    				// a tfoot element for the caption element to be appended to
    				tfoot = $$7('<tfoot/>').appendTo($this);
    			}
    		
    			if ( tfoot.length === 0 || tfoot.children().length === 0 ) {
    				$this.addClass( oClasses.sNoFooter );
    			}
    			else if ( tfoot.length > 0 ) {
    				oSettings.nTFoot = tfoot[0];
    				_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
    			}
    		
    			/* Check if there is data passing into the constructor */
    			if ( oInit.aaData ) {
    				for ( i=0 ; i<oInit.aaData.length ; i++ ) {
    					_fnAddData( oSettings, oInit.aaData[ i ] );
    				}
    			}
    			else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {
    				/* Grab the data from the page - only do this when deferred loading or no Ajax
    				 * source since there is no point in reading the DOM data if we are then going
    				 * to replace it with Ajax data
    				 */
    				_fnAddTr( oSettings, $$7(oSettings.nTBody).children('tr') );
    			}
    		
    			/* Copy the data index array */
    			oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
    		
    			/* Initialisation complete - table can be drawn */
    			oSettings.bInitialised = true;
    		
    			/* Check if we need to initialise the table (it might not have been handed off to the
    			 * language processor)
    			 */
    			if ( bInitHandedOff === false ) {
    				_fnInitialise( oSettings );
    			}
    		};
    		
    		/* Must be done after everything which can be overridden by the state saving! */
    		_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );
    		
    		if ( oInit.bStateSave )
    		{
    			features.bStateSave = true;
    			_fnLoadState( oSettings, oInit, loadedInit );
    		}
    		else {
    			loadedInit();
    		}
    		
    	} );
    	_that = null;
    	return this;
    };


    /*
     * It is useful to have variables which are scoped locally so only the
     * DataTables functions can access them and they don't leak into global space.
     * At the same time these functions are often useful over multiple files in the
     * core and API, so we list, or at least document, all variables which are used
     * by DataTables as private variables here. This also ensures that there is no
     * clashing of variable names and that they can easily referenced for reuse.
     */


    // Defined else where
    //  _selector_run
    //  _selector_opts
    //  _selector_first
    //  _selector_row_indexes

    var _ext; // DataTable.ext
    var _Api; // DataTable.Api
    var _api_register; // DataTable.Api.register
    var _api_registerPlural; // DataTable.Api.registerPlural

    var _re_dic = {};
    var _re_new_lines = /[\r\n\u2028]/g;
    var _re_html = /<.*?>/g;

    // This is not strict ISO8601 - Date.parse() is quite lax, although
    // implementations differ between browsers.
    var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;

    // Escape regular expression special characters
    var _re_escape_regex = new RegExp( '(\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ].join('|\\') + ')', 'g' );

    // http://en.wikipedia.org/wiki/Foreign_exchange_market
    // - \u20BD - Russian ruble.
    // - \u20a9 - South Korean Won
    // - \u20BA - Turkish Lira
    // - \u20B9 - Indian Rupee
    // - R - Brazil (R$) and South Africa
    // - fr - Swiss Franc
    // - kr - Swedish krona, Norwegian krone and Danish krone
    // - \u2009 is thin space and \u202F is narrow no-break space, both used in many
    // - Ƀ - Bitcoin
    // - Ξ - Ethereum
    //   standards as thousands separators.
    var _re_formatted_numeric = /['\u00A0,$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi;


    var _empty = function ( d ) {
    	return !d || d === true || d === '-' ? true : false;
    };


    var _intVal = function ( s ) {
    	var integer = parseInt( s, 10 );
    	return !isNaN(integer) && isFinite(s) ? integer : null;
    };

    // Convert from a formatted number with characters other than `.` as the
    // decimal place, to a Javascript number
    var _numToDecimal = function ( num, decimalPoint ) {
    	// Cache created regular expressions for speed as this function is called often
    	if ( ! _re_dic[ decimalPoint ] ) {
    		_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );
    	}
    	return typeof num === 'string' && decimalPoint !== '.' ?
    		num.replace( /\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :
    		num;
    };


    var _isNumber = function ( d, decimalPoint, formatted ) {
    	var type = typeof d;
    	var strType = type === 'string';

    	if ( type === 'number' || type === 'bigint') {
    		return true;
    	}

    	// If empty return immediately so there must be a number if it is a
    	// formatted string (this stops the string "k", or "kr", etc being detected
    	// as a formatted number for currency
    	if ( _empty( d ) ) {
    		return true;
    	}

    	if ( decimalPoint && strType ) {
    		d = _numToDecimal( d, decimalPoint );
    	}

    	if ( formatted && strType ) {
    		d = d.replace( _re_formatted_numeric, '' );
    	}

    	return !isNaN( parseFloat(d) ) && isFinite( d );
    };


    // A string without HTML in it can be considered to be HTML still
    var _isHtml = function ( d ) {
    	return _empty( d ) || typeof d === 'string';
    };


    var _htmlNumeric = function ( d, decimalPoint, formatted ) {
    	if ( _empty( d ) ) {
    		return true;
    	}

    	var html = _isHtml( d );
    	return ! html ?
    		null :
    		_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?
    			true :
    			null;
    };


    var _pluck = function ( a, prop, prop2 ) {
    	var out = [];
    	var i=0, ien=a.length;

    	// Could have the test in the loop for slightly smaller code, but speed
    	// is essential here
    	if ( prop2 !== undefined ) {
    		for ( ; i<ien ; i++ ) {
    			if ( a[i] && a[i][ prop ] ) {
    				out.push( a[i][ prop ][ prop2 ] );
    			}
    		}
    	}
    	else {
    		for ( ; i<ien ; i++ ) {
    			if ( a[i] ) {
    				out.push( a[i][ prop ] );
    			}
    		}
    	}

    	return out;
    };


    // Basically the same as _pluck, but rather than looping over `a` we use `order`
    // as the indexes to pick from `a`
    var _pluck_order = function ( a, order, prop, prop2 )
    {
    	var out = [];
    	var i=0, ien=order.length;

    	// Could have the test in the loop for slightly smaller code, but speed
    	// is essential here
    	if ( prop2 !== undefined ) {
    		for ( ; i<ien ; i++ ) {
    			if ( a[ order[i] ][ prop ] ) {
    				out.push( a[ order[i] ][ prop ][ prop2 ] );
    			}
    		}
    	}
    	else {
    		for ( ; i<ien ; i++ ) {
    			out.push( a[ order[i] ][ prop ] );
    		}
    	}

    	return out;
    };


    var _range = function ( len, start )
    {
    	var out = [];
    	var end;

    	if ( start === undefined ) {
    		start = 0;
    		end = len;
    	}
    	else {
    		end = start;
    		start = len;
    	}

    	for ( var i=start ; i<end ; i++ ) {
    		out.push( i );
    	}

    	return out;
    };


    var _removeEmpty = function ( a )
    {
    	var out = [];

    	for ( var i=0, ien=a.length ; i<ien ; i++ ) {
    		if ( a[i] ) { // careful - will remove all falsy values!
    			out.push( a[i] );
    		}
    	}

    	return out;
    };


    var _stripHtml = function ( d ) {
    	return d
    		.replace( _re_html, '' ) // Complete tags
    		.replace(/<script/i, ''); // Safety for incomplete script tag
    };


    /**
     * Determine if all values in the array are unique. This means we can short
     * cut the _unique method at the cost of a single loop. A sorted array is used
     * to easily check the values.
     *
     * @param  {array} src Source array
     * @return {boolean} true if all unique, false otherwise
     * @ignore
     */
    var _areAllUnique = function ( src ) {
    	if ( src.length < 2 ) {
    		return true;
    	}

    	var sorted = src.slice().sort();
    	var last = sorted[0];

    	for ( var i=1, ien=sorted.length ; i<ien ; i++ ) {
    		if ( sorted[i] === last ) {
    			return false;
    		}

    		last = sorted[i];
    	}

    	return true;
    };


    /**
     * Find the unique elements in a source array.
     *
     * @param  {array} src Source array
     * @return {array} Array of unique items
     * @ignore
     */
    var _unique = function ( src )
    {
    	if ( _areAllUnique( src ) ) {
    		return src.slice();
    	}

    	// A faster unique method is to use object keys to identify used values,
    	// but this doesn't work with arrays or objects, which we must also
    	// consider. See jsperf.com/compare-array-unique-versions/4 for more
    	// information.
    	var
    		out = [],
    		val,
    		i, ien=src.length,
    		j, k=0;

    	again: for ( i=0 ; i<ien ; i++ ) {
    		val = src[i];

    		for ( j=0 ; j<k ; j++ ) {
    			if ( out[j] === val ) {
    				continue again;
    			}
    		}

    		out.push( val );
    		k++;
    	}

    	return out;
    };

    // Surprisingly this is faster than [].concat.apply
    // https://jsperf.com/flatten-an-array-loop-vs-reduce/2
    var _flatten = function (out, val) {
    	if (Array.isArray(val)) {
    		for (var i=0 ; i<val.length ; i++) {
    			_flatten(out, val[i]);
    		}
    	}
    	else {
    		out.push(val);
    	}
      
    	return out;
    };

    var _includes = function (search, start) {
    	if (start === undefined) {
    		start = 0;
    	}

    	return this.indexOf(search, start) !== -1;	
    };

    // Array.isArray polyfill.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray
    if (! Array.isArray) {
        Array.isArray = function(arg) {
            return Object.prototype.toString.call(arg) === '[object Array]';
        };
    }

    if (! Array.prototype.includes) {
    	Array.prototype.includes = _includes;
    }

    // .trim() polyfill
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim
    if (!String.prototype.trim) {
      String.prototype.trim = function () {
        return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
      };
    }

    if (! String.prototype.includes) {
    	String.prototype.includes = _includes;
    }

    /**
     * DataTables utility methods
     * 
     * This namespace provides helper methods that DataTables uses internally to
     * create a DataTable, but which are not exclusively used only for DataTables.
     * These methods can be used by extension authors to save the duplication of
     * code.
     *
     *  @namespace
     */
    DataTable.util = {
    	/**
    	 * Throttle the calls to a function. Arguments and context are maintained
    	 * for the throttled function.
    	 *
    	 * @param {function} fn Function to be called
    	 * @param {integer} freq Call frequency in mS
    	 * @return {function} Wrapped function
    	 */
    	throttle: function ( fn, freq ) {
    		var
    			frequency = freq !== undefined ? freq : 200,
    			last,
    			timer;

    		return function () {
    			var
    				that = this,
    				now  = +new Date(),
    				args = arguments;

    			if ( last && now < last + frequency ) {
    				clearTimeout( timer );

    				timer = setTimeout( function () {
    					last = undefined;
    					fn.apply( that, args );
    				}, frequency );
    			}
    			else {
    				last = now;
    				fn.apply( that, args );
    			}
    		};
    	},


    	/**
    	 * Escape a string such that it can be used in a regular expression
    	 *
    	 *  @param {string} val string to escape
    	 *  @returns {string} escaped string
    	 */
    	escapeRegex: function ( val ) {
    		return val.replace( _re_escape_regex, '\\$1' );
    	},

    	/**
    	 * Create a function that will write to a nested object or array
    	 * @param {*} source JSON notation string
    	 * @returns Write function
    	 */
    	set: function ( source ) {
    		if ( $$7.isPlainObject( source ) ) {
    			/* Unlike get, only the underscore (global) option is used for for
    			 * setting data since we don't know the type here. This is why an object
    			 * option is not documented for `mData` (which is read/write), but it is
    			 * for `mRender` which is read only.
    			 */
    			return DataTable.util.set( source._ );
    		}
    		else if ( source === null ) {
    			// Nothing to do when the data source is null
    			return function () {};
    		}
    		else if ( typeof source === 'function' ) {
    			return function (data, val, meta) {
    				source( data, 'set', val, meta );
    			};
    		}
    		else if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||
    				  source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )
    		{
    			// Like the get, we need to get data from a nested object
    			var setData = function (data, val, src) {
    				var a = _fnSplitObjNotation( src ), b;
    				var aLast = a[a.length-1];
    				var arrayNotation, funcNotation, o, innerSrc;
    	
    				for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ ) {
    					// Protect against prototype pollution
    					if (a[i] === '__proto__' || a[i] === 'constructor') {
    						throw new Error('Cannot set prototype values');
    					}
    	
    					// Check if we are dealing with an array notation request
    					arrayNotation = a[i].match(__reArray);
    					funcNotation = a[i].match(__reFn);
    	
    					if ( arrayNotation ) {
    						a[i] = a[i].replace(__reArray, '');
    						data[ a[i] ] = [];
    	
    						// Get the remainder of the nested object to set so we can recurse
    						b = a.slice();
    						b.splice( 0, i+1 );
    						innerSrc = b.join('.');
    	
    						// Traverse each entry in the array setting the properties requested
    						if ( Array.isArray( val ) ) {
    							for ( var j=0, jLen=val.length ; j<jLen ; j++ ) {
    								o = {};
    								setData( o, val[j], innerSrc );
    								data[ a[i] ].push( o );
    							}
    						}
    						else {
    							// We've been asked to save data to an array, but it
    							// isn't array data to be saved. Best that can be done
    							// is to just save the value.
    							data[ a[i] ] = val;
    						}
    	
    						// The inner call to setData has already traversed through the remainder
    						// of the source and has set the data, thus we can exit here
    						return;
    					}
    					else if ( funcNotation ) {
    						// Function call
    						a[i] = a[i].replace(__reFn, '');
    						data = data[ a[i] ]( val );
    					}
    	
    					// If the nested object doesn't currently exist - since we are
    					// trying to set the value - create it
    					if ( data[ a[i] ] === null || data[ a[i] ] === undefined ) {
    						data[ a[i] ] = {};
    					}
    					data = data[ a[i] ];
    				}
    	
    				// Last item in the input - i.e, the actual set
    				if ( aLast.match(__reFn ) ) {
    					// Function call
    					data = data[ aLast.replace(__reFn, '') ]( val );
    				}
    				else {
    					// If array notation is used, we just want to strip it and use the property name
    					// and assign the value. If it isn't used, then we get the result we want anyway
    					data[ aLast.replace(__reArray, '') ] = val;
    				}
    			};
    	
    			return function (data, val) { // meta is also passed in, but not used
    				return setData( data, val, source );
    			};
    		}
    		else {
    			// Array or flat object mapping
    			return function (data, val) { // meta is also passed in, but not used
    				data[source] = val;
    			};
    		}
    	},

    	/**
    	 * Create a function that will read nested objects from arrays, based on JSON notation
    	 * @param {*} source JSON notation string
    	 * @returns Value read
    	 */
    	get: function ( source ) {
    		if ( $$7.isPlainObject( source ) ) {
    			// Build an object of get functions, and wrap them in a single call
    			var o = {};
    			$$7.each( source, function (key, val) {
    				if ( val ) {
    					o[key] = DataTable.util.get( val );
    				}
    			} );
    	
    			return function (data, type, row, meta) {
    				var t = o[type] || o._;
    				return t !== undefined ?
    					t(data, type, row, meta) :
    					data;
    			};
    		}
    		else if ( source === null ) {
    			// Give an empty string for rendering / sorting etc
    			return function (data) { // type, row and meta also passed, but not used
    				return data;
    			};
    		}
    		else if ( typeof source === 'function' ) {
    			return function (data, type, row, meta) {
    				return source( data, type, row, meta );
    			};
    		}
    		else if ( typeof source === 'string' && (source.indexOf('.') !== -1 ||
    				  source.indexOf('[') !== -1 || source.indexOf('(') !== -1) )
    		{
    			/* If there is a . in the source string then the data source is in a
    			 * nested object so we loop over the data for each level to get the next
    			 * level down. On each loop we test for undefined, and if found immediately
    			 * return. This allows entire objects to be missing and sDefaultContent to
    			 * be used if defined, rather than throwing an error
    			 */
    			var fetchData = function (data, type, src) {
    				var arrayNotation, funcNotation, out, innerSrc;
    	
    				if ( src !== "" ) {
    					var a = _fnSplitObjNotation( src );
    	
    					for ( var i=0, iLen=a.length ; i<iLen ; i++ ) {
    						// Check if we are dealing with special notation
    						arrayNotation = a[i].match(__reArray);
    						funcNotation = a[i].match(__reFn);
    	
    						if ( arrayNotation ) {
    							// Array notation
    							a[i] = a[i].replace(__reArray, '');
    	
    							// Condition allows simply [] to be passed in
    							if ( a[i] !== "" ) {
    								data = data[ a[i] ];
    							}
    							out = [];
    	
    							// Get the remainder of the nested object to get
    							a.splice( 0, i+1 );
    							innerSrc = a.join('.');
    	
    							// Traverse each entry in the array getting the properties requested
    							if ( Array.isArray( data ) ) {
    								for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {
    									out.push( fetchData( data[j], type, innerSrc ) );
    								}
    							}
    	
    							// If a string is given in between the array notation indicators, that
    							// is used to join the strings together, otherwise an array is returned
    							var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);
    							data = (join==="") ? out : out.join(join);
    	
    							// The inner call to fetchData has already traversed through the remainder
    							// of the source requested, so we exit from the loop
    							break;
    						}
    						else if ( funcNotation ) {
    							// Function call
    							a[i] = a[i].replace(__reFn, '');
    							data = data[ a[i] ]();
    							continue;
    						}
    	
    						if (data === null || data[ a[i] ] === null) {
    							return null;
    						}
    						else if ( data === undefined || data[ a[i] ] === undefined ) {
    							return undefined;
    						}

    						data = data[ a[i] ];
    					}
    				}
    	
    				return data;
    			};
    	
    			return function (data, type) { // row and meta also passed, but not used
    				return fetchData( data, type, source );
    			};
    		}
    		else {
    			// Array or flat object mapping
    			return function (data, type) { // row and meta also passed, but not used
    				return data[source];
    			};
    		}
    	}
    };



    /**
     * Create a mapping object that allows camel case parameters to be looked up
     * for their Hungarian counterparts. The mapping is stored in a private
     * parameter called `_hungarianMap` which can be accessed on the source object.
     *  @param {object} o
     *  @memberof DataTable#oApi
     */
    function _fnHungarianMap ( o )
    {
    	var
    		hungarian = 'a aa ai ao as b fn i m o s ',
    		match,
    		newKey,
    		map = {};

    	$$7.each( o, function (key, val) {
    		match = key.match(/^([^A-Z]+?)([A-Z])/);

    		if ( match && hungarian.indexOf(match[1]+' ') !== -1 )
    		{
    			newKey = key.replace( match[0], match[2].toLowerCase() );
    			map[ newKey ] = key;

    			if ( match[1] === 'o' )
    			{
    				_fnHungarianMap( o[key] );
    			}
    		}
    	} );

    	o._hungarianMap = map;
    }


    /**
     * Convert from camel case parameters to Hungarian, based on a Hungarian map
     * created by _fnHungarianMap.
     *  @param {object} src The model object which holds all parameters that can be
     *    mapped.
     *  @param {object} user The object to convert from camel case to Hungarian.
     *  @param {boolean} force When set to `true`, properties which already have a
     *    Hungarian value in the `user` object will be overwritten. Otherwise they
     *    won't be.
     *  @memberof DataTable#oApi
     */
    function _fnCamelToHungarian ( src, user, force )
    {
    	if ( ! src._hungarianMap ) {
    		_fnHungarianMap( src );
    	}

    	var hungarianKey;

    	$$7.each( user, function (key, val) {
    		hungarianKey = src._hungarianMap[ key ];

    		if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )
    		{
    			// For objects, we need to buzz down into the object to copy parameters
    			if ( hungarianKey.charAt(0) === 'o' )
    			{
    				// Copy the camelCase options over to the hungarian
    				if ( ! user[ hungarianKey ] ) {
    					user[ hungarianKey ] = {};
    				}
    				$$7.extend( true, user[hungarianKey], user[key] );

    				_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );
    			}
    			else {
    				user[hungarianKey] = user[ key ];
    			}
    		}
    	} );
    }


    /**
     * Language compatibility - when certain options are given, and others aren't, we
     * need to duplicate the values over, in order to provide backwards compatibility
     * with older language files.
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnLanguageCompat( lang )
    {
    	// Note the use of the Hungarian notation for the parameters in this method as
    	// this is called after the mapping of camelCase to Hungarian
    	var defaults = DataTable.defaults.oLanguage;

    	// Default mapping
    	var defaultDecimal = defaults.sDecimal;
    	if ( defaultDecimal ) {
    		_addNumericSort( defaultDecimal );
    	}

    	if ( lang ) {
    		var zeroRecords = lang.sZeroRecords;

    		// Backwards compatibility - if there is no sEmptyTable given, then use the same as
    		// sZeroRecords - assuming that is given.
    		if ( ! lang.sEmptyTable && zeroRecords &&
    			defaults.sEmptyTable === "No data available in table" )
    		{
    			_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );
    		}

    		// Likewise with loading records
    		if ( ! lang.sLoadingRecords && zeroRecords &&
    			defaults.sLoadingRecords === "Loading..." )
    		{
    			_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );
    		}

    		// Old parameter name of the thousands separator mapped onto the new
    		if ( lang.sInfoThousands ) {
    			lang.sThousands = lang.sInfoThousands;
    		}

    		var decimal = lang.sDecimal;
    		if ( decimal && defaultDecimal !== decimal ) {
    			_addNumericSort( decimal );
    		}
    	}
    }


    /**
     * Map one parameter onto another
     *  @param {object} o Object to map
     *  @param {*} knew The new parameter name
     *  @param {*} old The old parameter name
     */
    var _fnCompatMap = function ( o, knew, old ) {
    	if ( o[ knew ] !== undefined ) {
    		o[ old ] = o[ knew ];
    	}
    };


    /**
     * Provide backwards compatibility for the main DT options. Note that the new
     * options are mapped onto the old parameters, so this is an external interface
     * change only.
     *  @param {object} init Object to map
     */
    function _fnCompatOpts ( init )
    {
    	_fnCompatMap( init, 'ordering',      'bSort' );
    	_fnCompatMap( init, 'orderMulti',    'bSortMulti' );
    	_fnCompatMap( init, 'orderClasses',  'bSortClasses' );
    	_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );
    	_fnCompatMap( init, 'order',         'aaSorting' );
    	_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );
    	_fnCompatMap( init, 'paging',        'bPaginate' );
    	_fnCompatMap( init, 'pagingType',    'sPaginationType' );
    	_fnCompatMap( init, 'pageLength',    'iDisplayLength' );
    	_fnCompatMap( init, 'searching',     'bFilter' );

    	// Boolean initialisation of x-scrolling
    	if ( typeof init.sScrollX === 'boolean' ) {
    		init.sScrollX = init.sScrollX ? '100%' : '';
    	}
    	if ( typeof init.scrollX === 'boolean' ) {
    		init.scrollX = init.scrollX ? '100%' : '';
    	}

    	// Column search objects are in an array, so it needs to be converted
    	// element by element
    	var searchCols = init.aoSearchCols;

    	if ( searchCols ) {
    		for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {
    			if ( searchCols[i] ) {
    				_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );
    			}
    		}
    	}
    }


    /**
     * Provide backwards compatibility for column options. Note that the new options
     * are mapped onto the old parameters, so this is an external interface change
     * only.
     *  @param {object} init Object to map
     */
    function _fnCompatCols ( init )
    {
    	_fnCompatMap( init, 'orderable',     'bSortable' );
    	_fnCompatMap( init, 'orderData',     'aDataSort' );
    	_fnCompatMap( init, 'orderSequence', 'asSorting' );
    	_fnCompatMap( init, 'orderDataType', 'sortDataType' );

    	// orderData can be given as an integer
    	var dataSort = init.aDataSort;
    	if ( typeof dataSort === 'number' && ! Array.isArray( dataSort ) ) {
    		init.aDataSort = [ dataSort ];
    	}
    }


    /**
     * Browser feature detection for capabilities, quirks
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnBrowserDetect( settings )
    {
    	// We don't need to do this every time DataTables is constructed, the values
    	// calculated are specific to the browser and OS configuration which we
    	// don't expect to change between initialisations
    	if ( ! DataTable.__browser ) {
    		var browser = {};
    		DataTable.__browser = browser;

    		// Scrolling feature / quirks detection
    		var n = $$7('<div/>')
    			.css( {
    				position: 'fixed',
    				top: 0,
    				left: $$7(window).scrollLeft()*-1, // allow for scrolling
    				height: 1,
    				width: 1,
    				overflow: 'hidden'
    			} )
    			.append(
    				$$7('<div/>')
    					.css( {
    						position: 'absolute',
    						top: 1,
    						left: 1,
    						width: 100,
    						overflow: 'scroll'
    					} )
    					.append(
    						$$7('<div/>')
    							.css( {
    								width: '100%',
    								height: 10
    							} )
    					)
    			)
    			.appendTo( 'body' );

    		var outer = n.children();
    		var inner = outer.children();

    		// Numbers below, in order, are:
    		// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
    		//
    		// IE6 XP:                           100 100 100  83
    		// IE7 Vista:                        100 100 100  83
    		// IE 8+ Windows:                     83  83 100  83
    		// Evergreen Windows:                 83  83 100  83
    		// Evergreen Mac with scrollbars:     85  85 100  85
    		// Evergreen Mac without scrollbars: 100 100 100 100

    		// Get scrollbar width
    		browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;

    		// IE6/7 will oversize a width 100% element inside a scrolling element, to
    		// include the width of the scrollbar, while other browsers ensure the inner
    		// element is contained without forcing scrolling
    		browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;

    		// In rtl text layout, some browsers (most, but not all) will place the
    		// scrollbar on the left, rather than the right.
    		browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;

    		// IE8- don't provide height and width for getBoundingClientRect
    		browser.bBounding = n[0].getBoundingClientRect().width ? true : false;

    		n.remove();
    	}

    	$$7.extend( settings.oBrowser, DataTable.__browser );
    	settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
    }


    /**
     * Array.prototype reduce[Right] method, used for browsers which don't support
     * JS 1.6. Done this way to reduce code size, since we iterate either way
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnReduce ( that, fn, init, start, end, inc )
    {
    	var
    		i = start,
    		value,
    		isSet = false;

    	if ( init !== undefined ) {
    		value = init;
    		isSet = true;
    	}

    	while ( i !== end ) {
    		if ( ! that.hasOwnProperty(i) ) {
    			continue;
    		}

    		value = isSet ?
    			fn( value, that[i], i, that ) :
    			that[i];

    		isSet = true;
    		i += inc;
    	}

    	return value;
    }

    /**
     * Add a column to the list used for the table with default values
     *  @param {object} oSettings dataTables settings object
     *  @param {node} nTh The th element for this column
     *  @memberof DataTable#oApi
     */
    function _fnAddColumn( oSettings, nTh )
    {
    	// Add column to aoColumns array
    	var oDefaults = DataTable.defaults.column;
    	var iCol = oSettings.aoColumns.length;
    	var oCol = $$7.extend( {}, DataTable.models.oColumn, oDefaults, {
    		"nTh": nTh ? nTh : document.createElement('th'),
    		"sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',
    		"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
    		"mData": oDefaults.mData ? oDefaults.mData : iCol,
    		idx: iCol
    	} );
    	oSettings.aoColumns.push( oCol );

    	// Add search object for column specific search. Note that the `searchCols[ iCol ]`
    	// passed into extend can be undefined. This allows the user to give a default
    	// with only some of the parameters defined, and also not give a default
    	var searchCols = oSettings.aoPreSearchCols;
    	searchCols[ iCol ] = $$7.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );

    	// Use the default column options function to initialise classes etc
    	_fnColumnOptions( oSettings, iCol, $$7(nTh).data() );
    }


    /**
     * Apply options for a column
     *  @param {object} oSettings dataTables settings object
     *  @param {int} iCol column index to consider
     *  @param {object} oOptions object with sType, bVisible and bSearchable etc
     *  @memberof DataTable#oApi
     */
    function _fnColumnOptions( oSettings, iCol, oOptions )
    {
    	var oCol = oSettings.aoColumns[ iCol ];
    	var oClasses = oSettings.oClasses;
    	var th = $$7(oCol.nTh);

    	// Try to get width information from the DOM. We can't get it from CSS
    	// as we'd need to parse the CSS stylesheet. `width` option can override
    	if ( ! oCol.sWidthOrig ) {
    		// Width attribute
    		oCol.sWidthOrig = th.attr('width') || null;

    		// Style attribute
    		var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
    		if ( t ) {
    			oCol.sWidthOrig = t[1];
    		}
    	}

    	/* User specified column options */
    	if ( oOptions !== undefined && oOptions !== null )
    	{
    		// Backwards compatibility
    		_fnCompatCols( oOptions );

    		// Map camel case parameters to their Hungarian counterparts
    		_fnCamelToHungarian( DataTable.defaults.column, oOptions, true );

    		/* Backwards compatibility for mDataProp */
    		if ( oOptions.mDataProp !== undefined && !oOptions.mData )
    		{
    			oOptions.mData = oOptions.mDataProp;
    		}

    		if ( oOptions.sType )
    		{
    			oCol._sManualType = oOptions.sType;
    		}

    		// `class` is a reserved word in Javascript, so we need to provide
    		// the ability to use a valid name for the camel case input
    		if ( oOptions.className && ! oOptions.sClass )
    		{
    			oOptions.sClass = oOptions.className;
    		}
    		if ( oOptions.sClass ) {
    			th.addClass( oOptions.sClass );
    		}

    		var origClass = oCol.sClass;

    		$$7.extend( oCol, oOptions );
    		_fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );

    		// Merge class from previously defined classes with this one, rather than just
    		// overwriting it in the extend above
    		if (origClass !== oCol.sClass) {
    			oCol.sClass = origClass + ' ' + oCol.sClass;
    		}

    		/* iDataSort to be applied (backwards compatibility), but aDataSort will take
    		 * priority if defined
    		 */
    		if ( oOptions.iDataSort !== undefined )
    		{
    			oCol.aDataSort = [ oOptions.iDataSort ];
    		}
    		_fnMap( oCol, oOptions, "aDataSort" );
    	}

    	/* Cache the data get and set functions for speed */
    	var mDataSrc = oCol.mData;
    	var mData = _fnGetObjectDataFn( mDataSrc );
    	var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;

    	var attrTest = function( src ) {
    		return typeof src === 'string' && src.indexOf('@') !== -1;
    	};
    	oCol._bAttrSrc = $$7.isPlainObject( mDataSrc ) && (
    		attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
    	);
    	oCol._setter = null;

    	oCol.fnGetData = function (rowData, type, meta) {
    		var innerData = mData( rowData, type, undefined, meta );

    		return mRender && type ?
    			mRender( innerData, type, rowData, meta ) :
    			innerData;
    	};
    	oCol.fnSetData = function ( rowData, val, meta ) {
    		return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );
    	};

    	// Indicate if DataTables should read DOM data as an object or array
    	// Used in _fnGetRowElements
    	if ( typeof mDataSrc !== 'number' && ! oCol._isArrayHost ) {
    		oSettings._rowReadObject = true;
    	}

    	/* Feature sorting overrides column specific when off */
    	if ( !oSettings.oFeatures.bSort )
    	{
    		oCol.bSortable = false;
    		th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called
    	}

    	/* Check that the class assignment is correct for sorting */
    	var bAsc = $$7.inArray('asc', oCol.asSorting) !== -1;
    	var bDesc = $$7.inArray('desc', oCol.asSorting) !== -1;
    	if ( !oCol.bSortable || (!bAsc && !bDesc) )
    	{
    		oCol.sSortingClass = oClasses.sSortableNone;
    		oCol.sSortingClassJUI = "";
    	}
    	else if ( bAsc && !bDesc )
    	{
    		oCol.sSortingClass = oClasses.sSortableAsc;
    		oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
    	}
    	else if ( !bAsc && bDesc )
    	{
    		oCol.sSortingClass = oClasses.sSortableDesc;
    		oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
    	}
    	else
    	{
    		oCol.sSortingClass = oClasses.sSortable;
    		oCol.sSortingClassJUI = oClasses.sSortJUI;
    	}
    }


    /**
     * Adjust the table column widths for new data. Note: you would probably want to
     * do a redraw after calling this function!
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnAdjustColumnSizing ( settings )
    {
    	/* Not interested in doing column width calculation if auto-width is disabled */
    	if ( settings.oFeatures.bAutoWidth !== false )
    	{
    		var columns = settings.aoColumns;

    		_fnCalculateColumnWidths( settings );
    		for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )
    		{
    			columns[i].nTh.style.width = columns[i].sWidth;
    		}
    	}

    	var scroll = settings.oScroll;
    	if ( scroll.sY !== '' || scroll.sX !== '')
    	{
    		_fnScrollDraw( settings );
    	}

    	_fnCallbackFire( settings, null, 'column-sizing', [settings] );
    }


    /**
     * Convert the index of a visible column to the index in the data array (take account
     * of hidden columns)
     *  @param {object} oSettings dataTables settings object
     *  @param {int} iMatch Visible column index to lookup
     *  @returns {int} i the data index
     *  @memberof DataTable#oApi
     */
    function _fnVisibleToColumnIndex( oSettings, iMatch )
    {
    	var aiVis = _fnGetColumns( oSettings, 'bVisible' );

    	return typeof aiVis[iMatch] === 'number' ?
    		aiVis[iMatch] :
    		null;
    }


    /**
     * Convert the index of an index in the data array and convert it to the visible
     *   column index (take account of hidden columns)
     *  @param {int} iMatch Column index to lookup
     *  @param {object} oSettings dataTables settings object
     *  @returns {int} i the data index
     *  @memberof DataTable#oApi
     */
    function _fnColumnIndexToVisible( oSettings, iMatch )
    {
    	var aiVis = _fnGetColumns( oSettings, 'bVisible' );
    	var iPos = $$7.inArray( iMatch, aiVis );

    	return iPos !== -1 ? iPos : null;
    }


    /**
     * Get the number of visible columns
     *  @param {object} oSettings dataTables settings object
     *  @returns {int} i the number of visible columns
     *  @memberof DataTable#oApi
     */
    function _fnVisbleColumns( oSettings )
    {
    	var vis = 0;

    	// No reduce in IE8, use a loop for now
    	$$7.each( oSettings.aoColumns, function ( i, col ) {
    		if ( col.bVisible && $$7(col.nTh).css('display') !== 'none' ) {
    			vis++;
    		}
    	} );

    	return vis;
    }


    /**
     * Get an array of column indexes that match a given property
     *  @param {object} oSettings dataTables settings object
     *  @param {string} sParam Parameter in aoColumns to look for - typically
     *    bVisible or bSearchable
     *  @returns {array} Array of indexes with matched properties
     *  @memberof DataTable#oApi
     */
    function _fnGetColumns( oSettings, sParam )
    {
    	var a = [];

    	$$7.map( oSettings.aoColumns, function(val, i) {
    		if ( val[sParam] ) {
    			a.push( i );
    		}
    	} );

    	return a;
    }


    /**
     * Calculate the 'type' of a column
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnColumnTypes ( settings )
    {
    	var columns = settings.aoColumns;
    	var data = settings.aoData;
    	var types = DataTable.ext.type.detect;
    	var i, ien, j, jen, k, ken;
    	var col, detectedType, cache;

    	// For each column, spin over the 
    	for ( i=0, ien=columns.length ; i<ien ; i++ ) {
    		col = columns[i];
    		cache = [];

    		if ( ! col.sType && col._sManualType ) {
    			col.sType = col._sManualType;
    		}
    		else if ( ! col.sType ) {
    			for ( j=0, jen=types.length ; j<jen ; j++ ) {
    				for ( k=0, ken=data.length ; k<ken ; k++ ) {
    					// Use a cache array so we only need to get the type data
    					// from the formatter once (when using multiple detectors)
    					if ( cache[k] === undefined ) {
    						cache[k] = _fnGetCellData( settings, k, i, 'type' );
    					}

    					detectedType = types[j]( cache[k], settings );

    					// If null, then this type can't apply to this column, so
    					// rather than testing all cells, break out. There is an
    					// exception for the last type which is `html`. We need to
    					// scan all rows since it is possible to mix string and HTML
    					// types
    					if ( ! detectedType && j !== types.length-1 ) {
    						break;
    					}

    					// Only a single match is needed for html type since it is
    					// bottom of the pile and very similar to string - but it
    					// must not be empty
    					if ( detectedType === 'html' && ! _empty(cache[k]) ) {
    						break;
    					}
    				}

    				// Type is valid for all data points in the column - use this
    				// type
    				if ( detectedType ) {
    					col.sType = detectedType;
    					break;
    				}
    			}

    			// Fall back - if no type was detected, always use string
    			if ( ! col.sType ) {
    				col.sType = 'string';
    			}
    		}
    	}
    }


    /**
     * Take the column definitions and static columns arrays and calculate how
     * they relate to column indexes. The callback function will then apply the
     * definition found for a column to a suitable configuration object.
     *  @param {object} oSettings dataTables settings object
     *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
     *  @param {array} aoCols The aoColumns array that defines columns individually
     *  @param {function} fn Callback function - takes two parameters, the calculated
     *    column index and the definition for that column.
     *  @memberof DataTable#oApi
     */
    function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )
    {
    	var i, iLen, j, jLen, k, kLen, def;
    	var columns = oSettings.aoColumns;

    	// Column definitions with aTargets
    	if ( aoColDefs )
    	{
    		/* Loop over the definitions array - loop in reverse so first instance has priority */
    		for ( i=aoColDefs.length-1 ; i>=0 ; i-- )
    		{
    			def = aoColDefs[i];

    			/* Each definition can target multiple columns, as it is an array */
    			var aTargets = def.target !== undefined
    				? def.target
    				: def.targets !== undefined
    					? def.targets
    					: def.aTargets;

    			if ( ! Array.isArray( aTargets ) )
    			{
    				aTargets = [ aTargets ];
    			}

    			for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
    			{
    				if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )
    				{
    					/* Add columns that we don't yet know about */
    					while( columns.length <= aTargets[j] )
    					{
    						_fnAddColumn( oSettings );
    					}

    					/* Integer, basic index */
    					fn( aTargets[j], def );
    				}
    				else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )
    				{
    					/* Negative integer, right to left column counting */
    					fn( columns.length+aTargets[j], def );
    				}
    				else if ( typeof aTargets[j] === 'string' )
    				{
    					/* Class name matching on TH element */
    					for ( k=0, kLen=columns.length ; k<kLen ; k++ )
    					{
    						if ( aTargets[j] == "_all" ||
    						     $$7(columns[k].nTh).hasClass( aTargets[j] ) )
    						{
    							fn( k, def );
    						}
    					}
    				}
    			}
    		}
    	}

    	// Statically defined columns array
    	if ( aoCols )
    	{
    		for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )
    		{
    			fn( i, aoCols[i] );
    		}
    	}
    }

    /**
     * Add a data array to the table, creating DOM node etc. This is the parallel to
     * _fnGatherData, but for adding rows from a Javascript source, rather than a
     * DOM source.
     *  @param {object} oSettings dataTables settings object
     *  @param {array} aData data array to be added
     *  @param {node} [nTr] TR element to add to the table - optional. If not given,
     *    DataTables will create a row automatically
     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
     *    if nTr is.
     *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
     *  @memberof DataTable#oApi
     */
    function _fnAddData ( oSettings, aDataIn, nTr, anTds )
    {
    	/* Create the object for storing information about this new row */
    	var iRow = oSettings.aoData.length;
    	var oData = $$7.extend( true, {}, DataTable.models.oRow, {
    		src: nTr ? 'dom' : 'data',
    		idx: iRow
    	} );

    	oData._aData = aDataIn;
    	oSettings.aoData.push( oData );
    	var columns = oSettings.aoColumns;

    	// Invalidate the column types as the new data needs to be revalidated
    	for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
    	{
    		columns[i].sType = null;
    	}

    	/* Add to the display array */
    	oSettings.aiDisplayMaster.push( iRow );

    	var id = oSettings.rowIdFn( aDataIn );
    	if ( id !== undefined ) {
    		oSettings.aIds[ id ] = oData;
    	}

    	/* Create the DOM information, or register it if already present */
    	if ( nTr || ! oSettings.oFeatures.bDeferRender )
    	{
    		_fnCreateTr( oSettings, iRow, nTr, anTds );
    	}

    	return iRow;
    }


    /**
     * Add one or more TR elements to the table. Generally we'd expect to
     * use this for reading data from a DOM sourced table, but it could be
     * used for an TR element. Note that if a TR is given, it is used (i.e.
     * it is not cloned).
     *  @param {object} settings dataTables settings object
     *  @param {array|node|jQuery} trs The TR element(s) to add to the table
     *  @returns {array} Array of indexes for the added rows
     *  @memberof DataTable#oApi
     */
    function _fnAddTr( settings, trs )
    {
    	var row;

    	// Allow an individual node to be passed in
    	if ( ! (trs instanceof $$7) ) {
    		trs = $$7(trs);
    	}

    	return trs.map( function (i, el) {
    		row = _fnGetRowElements( settings, el );
    		return _fnAddData( settings, row.data, el, row.cells );
    	} );
    }


    /**
     * Take a TR element and convert it to an index in aoData
     *  @param {object} oSettings dataTables settings object
     *  @param {node} n the TR element to find
     *  @returns {int} index if the node is found, null if not
     *  @memberof DataTable#oApi
     */
    function _fnNodeToDataIndex( oSettings, n )
    {
    	return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;
    }


    /**
     * Take a TD element and convert it into a column data index (not the visible index)
     *  @param {object} oSettings dataTables settings object
     *  @param {int} iRow The row number the TD/TH can be found in
     *  @param {node} n The TD/TH element to find
     *  @returns {int} index if the node is found, -1 if not
     *  @memberof DataTable#oApi
     */
    function _fnNodeToColumnIndex( oSettings, iRow, n )
    {
    	return $$7.inArray( n, oSettings.aoData[ iRow ].anCells );
    }


    /**
     * Get the data for a given cell from the internal cache, taking into account data mapping
     *  @param {object} settings dataTables settings object
     *  @param {int} rowIdx aoData row id
     *  @param {int} colIdx Column index
     *  @param {string} type data get type ('display', 'type' 'filter|search' 'sort|order')
     *  @returns {*} Cell data
     *  @memberof DataTable#oApi
     */
    function _fnGetCellData( settings, rowIdx, colIdx, type )
    {
    	if (type === 'search') {
    		type = 'filter';
    	}
    	else if (type === 'order') {
    		type = 'sort';
    	}

    	var draw           = settings.iDraw;
    	var col            = settings.aoColumns[colIdx];
    	var rowData        = settings.aoData[rowIdx]._aData;
    	var defaultContent = col.sDefaultContent;
    	var cellData       = col.fnGetData( rowData, type, {
    		settings: settings,
    		row:      rowIdx,
    		col:      colIdx
    	} );

    	if ( cellData === undefined ) {
    		if ( settings.iDrawError != draw && defaultContent === null ) {
    			_fnLog( settings, 0, "Requested unknown parameter "+
    				(typeof col.mData=='function' ? '{function}' : "'"+col.mData+"'")+
    				" for row "+rowIdx+", column "+colIdx, 4 );
    			settings.iDrawError = draw;
    		}
    		return defaultContent;
    	}

    	// When the data source is null and a specific data type is requested (i.e.
    	// not the original data), we can use default column data
    	if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {
    		cellData = defaultContent;
    	}
    	else if ( typeof cellData === 'function' ) {
    		// If the data source is a function, then we run it and use the return,
    		// executing in the scope of the data object (for instances)
    		return cellData.call( rowData );
    	}

    	if ( cellData === null && type === 'display' ) {
    		return '';
    	}

    	if ( type === 'filter' ) {
    		var fomatters = DataTable.ext.type.search;

    		if ( fomatters[ col.sType ] ) {
    			cellData = fomatters[ col.sType ]( cellData );
    		}
    	}

    	return cellData;
    }


    /**
     * Set the value for a specific cell, into the internal data cache
     *  @param {object} settings dataTables settings object
     *  @param {int} rowIdx aoData row id
     *  @param {int} colIdx Column index
     *  @param {*} val Value to set
     *  @memberof DataTable#oApi
     */
    function _fnSetCellData( settings, rowIdx, colIdx, val )
    {
    	var col     = settings.aoColumns[colIdx];
    	var rowData = settings.aoData[rowIdx]._aData;

    	col.fnSetData( rowData, val, {
    		settings: settings,
    		row:      rowIdx,
    		col:      colIdx
    	}  );
    }


    // Private variable that is used to match action syntax in the data property object
    var __reArray = /\[.*?\]$/;
    var __reFn = /\(\)$/;

    /**
     * Split string on periods, taking into account escaped periods
     * @param  {string} str String to split
     * @return {array} Split string
     */
    function _fnSplitObjNotation( str )
    {
    	return $$7.map( str.match(/(\\.|[^\.])+/g) || [''], function ( s ) {
    		return s.replace(/\\\./g, '.');
    	} );
    }


    /**
     * Return a function that can be used to get data from a source object, taking
     * into account the ability to use nested objects as a source
     *  @param {string|int|function} mSource The data source for the object
     *  @returns {function} Data get function
     *  @memberof DataTable#oApi
     */
    var _fnGetObjectDataFn = DataTable.util.get;


    /**
     * Return a function that can be used to set data from a source object, taking
     * into account the ability to use nested objects as a source
     *  @param {string|int|function} mSource The data source for the object
     *  @returns {function} Data set function
     *  @memberof DataTable#oApi
     */
    var _fnSetObjectDataFn = DataTable.util.set;


    /**
     * Return an array with the full table data
     *  @param {object} oSettings dataTables settings object
     *  @returns array {array} aData Master data array
     *  @memberof DataTable#oApi
     */
    function _fnGetDataMaster ( settings )
    {
    	return _pluck( settings.aoData, '_aData' );
    }


    /**
     * Nuke the table
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnClearTable( settings )
    {
    	settings.aoData.length = 0;
    	settings.aiDisplayMaster.length = 0;
    	settings.aiDisplay.length = 0;
    	settings.aIds = {};
    }


     /**
     * Take an array of integers (index array) and remove a target integer (value - not
     * the key!)
     *  @param {array} a Index array to target
     *  @param {int} iTarget value to find
     *  @memberof DataTable#oApi
     */
    function _fnDeleteIndex( a, iTarget, splice )
    {
    	var iTargetIndex = -1;

    	for ( var i=0, iLen=a.length ; i<iLen ; i++ )
    	{
    		if ( a[i] == iTarget )
    		{
    			iTargetIndex = i;
    		}
    		else if ( a[i] > iTarget )
    		{
    			a[i]--;
    		}
    	}

    	if ( iTargetIndex != -1 && splice === undefined )
    	{
    		a.splice( iTargetIndex, 1 );
    	}
    }


    /**
     * Mark cached data as invalid such that a re-read of the data will occur when
     * the cached data is next requested. Also update from the data source object.
     *
     * @param {object} settings DataTables settings object
     * @param {int}    rowIdx   Row index to invalidate
     * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
     *     or 'data'
     * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
     *     row will be invalidated
     * @memberof DataTable#oApi
     *
     * @todo For the modularisation of v1.11 this will need to become a callback, so
     *   the sort and filter methods can subscribe to it. That will required
     *   initialisation options for sorting, which is why it is not already baked in
     */
    function _fnInvalidate( settings, rowIdx, src, colIdx )
    {
    	var row = settings.aoData[ rowIdx ];
    	var i, ien;
    	var cellWrite = function ( cell, col ) {
    		// This is very frustrating, but in IE if you just write directly
    		// to innerHTML, and elements that are overwritten are GC'ed,
    		// even if there is a reference to them elsewhere
    		while ( cell.childNodes.length ) {
    			cell.removeChild( cell.firstChild );
    		}

    		cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );
    	};

    	// Are we reading last data from DOM or the data object?
    	if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {
    		// Read the data from the DOM
    		row._aData = _fnGetRowElements(
    				settings, row, colIdx, colIdx === undefined ? undefined : row._aData
    			)
    			.data;
    	}
    	else {
    		// Reading from data object, update the DOM
    		var cells = row.anCells;

    		if ( cells ) {
    			if ( colIdx !== undefined ) {
    				cellWrite( cells[colIdx], colIdx );
    			}
    			else {
    				for ( i=0, ien=cells.length ; i<ien ; i++ ) {
    					cellWrite( cells[i], i );
    				}
    			}
    		}
    	}

    	// For both row and cell invalidation, the cached data for sorting and
    	// filtering is nulled out
    	row._aSortData = null;
    	row._aFilterData = null;

    	// Invalidate the type for a specific column (if given) or all columns since
    	// the data might have changed
    	var cols = settings.aoColumns;
    	if ( colIdx !== undefined ) {
    		cols[ colIdx ].sType = null;
    	}
    	else {
    		for ( i=0, ien=cols.length ; i<ien ; i++ ) {
    			cols[i].sType = null;
    		}

    		// Update DataTables special `DT_*` attributes for the row
    		_fnRowAttributes( settings, row );
    	}
    }


    /**
     * Build a data source object from an HTML row, reading the contents of the
     * cells that are in the row.
     *
     * @param {object} settings DataTables settings object
     * @param {node|object} TR element from which to read data or existing row
     *   object from which to re-read the data from the cells
     * @param {int} [colIdx] Optional column index
     * @param {array|object} [d] Data source object. If `colIdx` is given then this
     *   parameter should also be given and will be used to write the data into.
     *   Only the column in question will be written
     * @returns {object} Object with two parameters: `data` the data read, in
     *   document order, and `cells` and array of nodes (they can be useful to the
     *   caller, so rather than needing a second traversal to get them, just return
     *   them from here).
     * @memberof DataTable#oApi
     */
    function _fnGetRowElements( settings, row, colIdx, d )
    {
    	var tds = [],
    		td = row.firstChild,
    		name, col, i=0, contents,
    		columns = settings.aoColumns,
    		objectRead = settings._rowReadObject;

    	// Allow the data object to be passed in, or construct
    	d = d !== undefined ?
    		d :
    		objectRead ?
    			{} :
    			[];

    	var attr = function ( str, td  ) {
    		if ( typeof str === 'string' ) {
    			var idx = str.indexOf('@');

    			if ( idx !== -1 ) {
    				var attr = str.substring( idx+1 );
    				var setter = _fnSetObjectDataFn( str );
    				setter( d, td.getAttribute( attr ) );
    			}
    		}
    	};

    	// Read data from a cell and store into the data object
    	var cellProcess = function ( cell ) {
    		if ( colIdx === undefined || colIdx === i ) {
    			col = columns[i];
    			contents = (cell.innerHTML).trim();

    			if ( col && col._bAttrSrc ) {
    				var setter = _fnSetObjectDataFn( col.mData._ );
    				setter( d, contents );

    				attr( col.mData.sort, cell );
    				attr( col.mData.type, cell );
    				attr( col.mData.filter, cell );
    			}
    			else {
    				// Depending on the `data` option for the columns the data can
    				// be read to either an object or an array.
    				if ( objectRead ) {
    					if ( ! col._setter ) {
    						// Cache the setter function
    						col._setter = _fnSetObjectDataFn( col.mData );
    					}
    					col._setter( d, contents );
    				}
    				else {
    					d[i] = contents;
    				}
    			}
    		}

    		i++;
    	};

    	if ( td ) {
    		// `tr` element was passed in
    		while ( td ) {
    			name = td.nodeName.toUpperCase();

    			if ( name == "TD" || name == "TH" ) {
    				cellProcess( td );
    				tds.push( td );
    			}

    			td = td.nextSibling;
    		}
    	}
    	else {
    		// Existing row object passed in
    		tds = row.anCells;

    		for ( var j=0, jen=tds.length ; j<jen ; j++ ) {
    			cellProcess( tds[j] );
    		}
    	}

    	// Read the ID from the DOM if present
    	var rowNode = row.firstChild ? row : row.nTr;

    	if ( rowNode ) {
    		var id = rowNode.getAttribute( 'id' );

    		if ( id ) {
    			_fnSetObjectDataFn( settings.rowId )( d, id );
    		}
    	}

    	return {
    		data: d,
    		cells: tds
    	};
    }
    /**
     * Create a new TR element (and it's TD children) for a row
     *  @param {object} oSettings dataTables settings object
     *  @param {int} iRow Row to consider
     *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
     *    DataTables will create a row automatically
     *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
     *    if nTr is.
     *  @memberof DataTable#oApi
     */
    function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )
    {
    	var
    		row = oSettings.aoData[iRow],
    		rowData = row._aData,
    		cells = [],
    		nTr, nTd, oCol,
    		i, iLen, create;

    	if ( row.nTr === null )
    	{
    		nTr = nTrIn || document.createElement('tr');

    		row.nTr = nTr;
    		row.anCells = cells;

    		/* Use a private property on the node to allow reserve mapping from the node
    		 * to the aoData array for fast look up
    		 */
    		nTr._DT_RowIndex = iRow;

    		/* Special parameters can be given by the data source to be used on the row */
    		_fnRowAttributes( oSettings, row );

    		/* Process each column */
    		for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
    		{
    			oCol = oSettings.aoColumns[i];
    			create = nTrIn ? false : true;

    			nTd = create ? document.createElement( oCol.sCellType ) : anTds[i];

    			if (! nTd) {
    				_fnLog( oSettings, 0, 'Incorrect column count', 18 );
    			}

    			nTd._DT_CellIndex = {
    				row: iRow,
    				column: i
    			};
    			
    			cells.push( nTd );

    			// Need to create the HTML if new, or if a rendering function is defined
    			if ( create || ((oCol.mRender || oCol.mData !== i) &&
    				 (!$$7.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')
    			)) {
    				nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );
    			}

    			/* Add user defined class */
    			if ( oCol.sClass )
    			{
    				nTd.className += ' '+oCol.sClass;
    			}

    			// Visibility - add or remove as required
    			if ( oCol.bVisible && ! nTrIn )
    			{
    				nTr.appendChild( nTd );
    			}
    			else if ( ! oCol.bVisible && nTrIn )
    			{
    				nTd.parentNode.removeChild( nTd );
    			}

    			if ( oCol.fnCreatedCell )
    			{
    				oCol.fnCreatedCell.call( oSettings.oInstance,
    					nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i
    				);
    			}
    		}

    		_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells] );
    	}
    }


    /**
     * Add attributes to a row based on the special `DT_*` parameters in a data
     * source object.
     *  @param {object} settings DataTables settings object
     *  @param {object} DataTables row object for the row to be modified
     *  @memberof DataTable#oApi
     */
    function _fnRowAttributes( settings, row )
    {
    	var tr = row.nTr;
    	var data = row._aData;

    	if ( tr ) {
    		var id = settings.rowIdFn( data );

    		if ( id ) {
    			tr.id = id;
    		}

    		if ( data.DT_RowClass ) {
    			// Remove any classes added by DT_RowClass before
    			var a = data.DT_RowClass.split(' ');
    			row.__rowc = row.__rowc ?
    				_unique( row.__rowc.concat( a ) ) :
    				a;

    			$$7(tr)
    				.removeClass( row.__rowc.join(' ') )
    				.addClass( data.DT_RowClass );
    		}

    		if ( data.DT_RowAttr ) {
    			$$7(tr).attr( data.DT_RowAttr );
    		}

    		if ( data.DT_RowData ) {
    			$$7(tr).data( data.DT_RowData );
    		}
    	}
    }


    /**
     * Create the HTML header for the table
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnBuildHead( oSettings )
    {
    	var i, ien, cell, row, column;
    	var thead = oSettings.nTHead;
    	var tfoot = oSettings.nTFoot;
    	var createHeader = $$7('th, td', thead).length === 0;
    	var classes = oSettings.oClasses;
    	var columns = oSettings.aoColumns;

    	if ( createHeader ) {
    		row = $$7('<tr/>').appendTo( thead );
    	}

    	for ( i=0, ien=columns.length ; i<ien ; i++ ) {
    		column = columns[i];
    		cell = $$7( column.nTh ).addClass( column.sClass );

    		if ( createHeader ) {
    			cell.appendTo( row );
    		}

    		// 1.11 move into sorting
    		if ( oSettings.oFeatures.bSort ) {
    			cell.addClass( column.sSortingClass );

    			if ( column.bSortable !== false ) {
    				cell
    					.attr( 'tabindex', oSettings.iTabIndex )
    					.attr( 'aria-controls', oSettings.sTableId );

    				_fnSortAttachListener( oSettings, column.nTh, i );
    			}
    		}

    		if ( column.sTitle != cell[0].innerHTML ) {
    			cell.html( column.sTitle );
    		}

    		_fnRenderer( oSettings, 'header' )(
    			oSettings, cell, column, classes
    		);
    	}

    	if ( createHeader ) {
    		_fnDetectHeader( oSettings.aoHeader, thead );
    	}

    	/* Deal with the footer - add classes if required */
    	$$7(thead).children('tr').children('th, td').addClass( classes.sHeaderTH );
    	$$7(tfoot).children('tr').children('th, td').addClass( classes.sFooterTH );

    	// Cache the footer cells. Note that we only take the cells from the first
    	// row in the footer. If there is more than one row the user wants to
    	// interact with, they need to use the table().foot() method. Note also this
    	// allows cells to be used for multiple columns using colspan
    	if ( tfoot !== null ) {
    		var cells = oSettings.aoFooter[0];

    		for ( i=0, ien=cells.length ; i<ien ; i++ ) {
    			column = columns[i];

    			if (column) {
    				column.nTf = cells[i].cell;
    	
    				if ( column.sClass ) {
    					$$7(column.nTf).addClass( column.sClass );
    				}
    			}
    			else {
    				_fnLog( oSettings, 0, 'Incorrect column count', 18 );
    			}
    		}
    	}
    }


    /**
     * Draw the header (or footer) element based on the column visibility states. The
     * methodology here is to use the layout array from _fnDetectHeader, modified for
     * the instantaneous column visibility, to construct the new layout. The grid is
     * traversed over cell at a time in a rows x columns grid fashion, although each
     * cell insert can cover multiple elements in the grid - which is tracks using the
     * aApplied array. Cell inserts in the grid will only occur where there isn't
     * already a cell in that position.
     *  @param {object} oSettings dataTables settings object
     *  @param array {objects} aoSource Layout array from _fnDetectHeader
     *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
     *  @memberof DataTable#oApi
     */
    function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
    {
    	var i, iLen, j, jLen, k, n, nLocalTr;
    	var aoLocal = [];
    	var aApplied = [];
    	var iColumns = oSettings.aoColumns.length;
    	var iRowspan, iColspan;

    	if ( ! aoSource )
    	{
    		return;
    	}

    	if (  bIncludeHidden === undefined )
    	{
    		bIncludeHidden = false;
    	}

    	/* Make a copy of the master layout array, but without the visible columns in it */
    	for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
    	{
    		aoLocal[i] = aoSource[i].slice();
    		aoLocal[i].nTr = aoSource[i].nTr;

    		/* Remove any columns which are currently hidden */
    		for ( j=iColumns-1 ; j>=0 ; j-- )
    		{
    			if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
    			{
    				aoLocal[i].splice( j, 1 );
    			}
    		}

    		/* Prep the applied array - it needs an element for each row */
    		aApplied.push( [] );
    	}

    	for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
    	{
    		nLocalTr = aoLocal[i].nTr;

    		/* All cells are going to be replaced, so empty out the row */
    		if ( nLocalTr )
    		{
    			while( (n = nLocalTr.firstChild) )
    			{
    				nLocalTr.removeChild( n );
    			}
    		}

    		for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
    		{
    			iRowspan = 1;
    			iColspan = 1;

    			/* Check to see if there is already a cell (row/colspan) covering our target
    			 * insert point. If there is, then there is nothing to do.
    			 */
    			if ( aApplied[i][j] === undefined )
    			{
    				nLocalTr.appendChild( aoLocal[i][j].cell );
    				aApplied[i][j] = 1;

    				/* Expand the cell to cover as many rows as needed */
    				while ( aoLocal[i+iRowspan] !== undefined &&
    				        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
    				{
    					aApplied[i+iRowspan][j] = 1;
    					iRowspan++;
    				}

    				/* Expand the cell to cover as many columns as needed */
    				while ( aoLocal[i][j+iColspan] !== undefined &&
    				        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
    				{
    					/* Must update the applied array over the rows for the columns */
    					for ( k=0 ; k<iRowspan ; k++ )
    					{
    						aApplied[i+k][j+iColspan] = 1;
    					}
    					iColspan++;
    				}

    				/* Do the actual expansion in the DOM */
    				$$7(aoLocal[i][j].cell)
    					.attr('rowspan', iRowspan)
    					.attr('colspan', iColspan);
    			}
    		}
    	}
    }


    /**
     * Insert the required TR nodes into the table for display
     *  @param {object} oSettings dataTables settings object
     *  @param ajaxComplete true after ajax call to complete rendering
     *  @memberof DataTable#oApi
     */
    function _fnDraw( oSettings, ajaxComplete )
    {
    	// Allow for state saving and a custom start position
    	_fnStart( oSettings );

    	/* Provide a pre-callback function which can be used to cancel the draw is false is returned */
    	var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );
    	if ( $$7.inArray( false, aPreDraw ) !== -1 )
    	{
    		_fnProcessingDisplay( oSettings, false );
    		return;
    	}

    	var anRows = [];
    	var iRowCount = 0;
    	var asStripeClasses = oSettings.asStripeClasses;
    	var iStripes = asStripeClasses.length;
    	var oLang = oSettings.oLanguage;
    	var bServerSide = _fnDataSource( oSettings ) == 'ssp';
    	var aiDisplay = oSettings.aiDisplay;
    	var iDisplayStart = oSettings._iDisplayStart;
    	var iDisplayEnd = oSettings.fnDisplayEnd();

    	oSettings.bDrawing = true;

    	/* Server-side processing draw intercept */
    	if ( oSettings.bDeferLoading )
    	{
    		oSettings.bDeferLoading = false;
    		oSettings.iDraw++;
    		_fnProcessingDisplay( oSettings, false );
    	}
    	else if ( !bServerSide )
    	{
    		oSettings.iDraw++;
    	}
    	else if ( !oSettings.bDestroying && !ajaxComplete)
    	{
    		_fnAjaxUpdate( oSettings );
    		return;
    	}

    	if ( aiDisplay.length !== 0 )
    	{
    		var iStart = bServerSide ? 0 : iDisplayStart;
    		var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;

    		for ( var j=iStart ; j<iEnd ; j++ )
    		{
    			var iDataIndex = aiDisplay[j];
    			var aoData = oSettings.aoData[ iDataIndex ];
    			if ( aoData.nTr === null )
    			{
    				_fnCreateTr( oSettings, iDataIndex );
    			}

    			var nRow = aoData.nTr;

    			/* Remove the old striping classes and then add the new one */
    			if ( iStripes !== 0 )
    			{
    				var sStripe = asStripeClasses[ iRowCount % iStripes ];
    				if ( aoData._sRowStripe != sStripe )
    				{
    					$$7(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );
    					aoData._sRowStripe = sStripe;
    				}
    			}

    			// Row callback functions - might want to manipulate the row
    			// iRowCount and j are not currently documented. Are they at all
    			// useful?
    			_fnCallbackFire( oSettings, 'aoRowCallback', null,
    				[nRow, aoData._aData, iRowCount, j, iDataIndex] );

    			anRows.push( nRow );
    			iRowCount++;
    		}
    	}
    	else
    	{
    		/* Table is empty - create a row with an empty message in it */
    		var sZero = oLang.sZeroRecords;
    		if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )
    		{
    			sZero = oLang.sLoadingRecords;
    		}
    		else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )
    		{
    			sZero = oLang.sEmptyTable;
    		}

    		anRows[ 0 ] = $$7( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )
    			.append( $$7('<td />', {
    				'valign':  'top',
    				'colSpan': _fnVisbleColumns( oSettings ),
    				'class':   oSettings.oClasses.sRowEmpty
    			} ).html( sZero ) )[0];
    	}

    	/* Header and footer callbacks */
    	_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $$7(oSettings.nTHead).children('tr')[0],
    		_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );

    	_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $$7(oSettings.nTFoot).children('tr')[0],
    		_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );

    	var body = $$7(oSettings.nTBody);

    	body.children().detach();
    	body.append( $$7(anRows) );

    	/* Call all required callback functions for the end of a draw */
    	_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );

    	/* Draw is complete, sorting and filtering must be as well */
    	oSettings.bSorted = false;
    	oSettings.bFiltered = false;
    	oSettings.bDrawing = false;
    }


    /**
     * Redraw the table - taking account of the various features which are enabled
     *  @param {object} oSettings dataTables settings object
     *  @param {boolean} [holdPosition] Keep the current paging position. By default
     *    the paging is reset to the first page
     *  @memberof DataTable#oApi
     */
    function _fnReDraw( settings, holdPosition )
    {
    	var
    		features = settings.oFeatures,
    		sort     = features.bSort,
    		filter   = features.bFilter;

    	if ( sort ) {
    		_fnSort( settings );
    	}

    	if ( filter ) {
    		_fnFilterComplete( settings, settings.oPreviousSearch );
    	}
    	else {
    		// No filtering, so we want to just use the display master
    		settings.aiDisplay = settings.aiDisplayMaster.slice();
    	}

    	if ( holdPosition !== true ) {
    		settings._iDisplayStart = 0;
    	}

    	// Let any modules know about the draw hold position state (used by
    	// scrolling internally)
    	settings._drawHold = holdPosition;

    	_fnDraw( settings );

    	settings._drawHold = false;
    }


    /**
     * Add the options to the page HTML for the table
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnAddOptionsHtml ( oSettings )
    {
    	var classes = oSettings.oClasses;
    	var table = $$7(oSettings.nTable);
    	var holding = $$7('<div/>').insertBefore( table ); // Holding element for speed
    	var features = oSettings.oFeatures;

    	// All DataTables are wrapped in a div
    	var insert = $$7('<div/>', {
    		id:      oSettings.sTableId+'_wrapper',
    		'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)
    	} );

    	oSettings.nHolding = holding[0];
    	oSettings.nTableWrapper = insert[0];
    	oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;

    	/* Loop over the user set positioning and place the elements as needed */
    	var aDom = oSettings.sDom.split('');
    	var featureNode, cOption, nNewNode, cNext, sAttr, j;
    	for ( var i=0 ; i<aDom.length ; i++ )
    	{
    		featureNode = null;
    		cOption = aDom[i];

    		if ( cOption == '<' )
    		{
    			/* New container div */
    			nNewNode = $$7('<div/>')[0];

    			/* Check to see if we should append an id and/or a class name to the container */
    			cNext = aDom[i+1];
    			if ( cNext == "'" || cNext == '"' )
    			{
    				sAttr = "";
    				j = 2;
    				while ( aDom[i+j] != cNext )
    				{
    					sAttr += aDom[i+j];
    					j++;
    				}

    				/* Replace jQuery UI constants @todo depreciated */
    				if ( sAttr == "H" )
    				{
    					sAttr = classes.sJUIHeader;
    				}
    				else if ( sAttr == "F" )
    				{
    					sAttr = classes.sJUIFooter;
    				}

    				/* The attribute can be in the format of "#id.class", "#id" or "class" This logic
    				 * breaks the string into parts and applies them as needed
    				 */
    				if ( sAttr.indexOf('.') != -1 )
    				{
    					var aSplit = sAttr.split('.');
    					nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);
    					nNewNode.className = aSplit[1];
    				}
    				else if ( sAttr.charAt(0) == "#" )
    				{
    					nNewNode.id = sAttr.substr(1, sAttr.length-1);
    				}
    				else
    				{
    					nNewNode.className = sAttr;
    				}

    				i += j; /* Move along the position array */
    			}

    			insert.append( nNewNode );
    			insert = $$7(nNewNode);
    		}
    		else if ( cOption == '>' )
    		{
    			/* End container div */
    			insert = insert.parent();
    		}
    		// @todo Move options into their own plugins?
    		else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )
    		{
    			/* Length */
    			featureNode = _fnFeatureHtmlLength( oSettings );
    		}
    		else if ( cOption == 'f' && features.bFilter )
    		{
    			/* Filter */
    			featureNode = _fnFeatureHtmlFilter( oSettings );
    		}
    		else if ( cOption == 'r' && features.bProcessing )
    		{
    			/* pRocessing */
    			featureNode = _fnFeatureHtmlProcessing( oSettings );
    		}
    		else if ( cOption == 't' )
    		{
    			/* Table */
    			featureNode = _fnFeatureHtmlTable( oSettings );
    		}
    		else if ( cOption ==  'i' && features.bInfo )
    		{
    			/* Info */
    			featureNode = _fnFeatureHtmlInfo( oSettings );
    		}
    		else if ( cOption == 'p' && features.bPaginate )
    		{
    			/* Pagination */
    			featureNode = _fnFeatureHtmlPaginate( oSettings );
    		}
    		else if ( DataTable.ext.feature.length !== 0 )
    		{
    			/* Plug-in features */
    			var aoFeatures = DataTable.ext.feature;
    			for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
    			{
    				if ( cOption == aoFeatures[k].cFeature )
    				{
    					featureNode = aoFeatures[k].fnInit( oSettings );
    					break;
    				}
    			}
    		}

    		/* Add to the 2D features array */
    		if ( featureNode )
    		{
    			var aanFeatures = oSettings.aanFeatures;

    			if ( ! aanFeatures[cOption] )
    			{
    				aanFeatures[cOption] = [];
    			}

    			aanFeatures[cOption].push( featureNode );
    			insert.append( featureNode );
    		}
    	}

    	/* Built our DOM structure - replace the holding div with what we want */
    	holding.replaceWith( insert );
    	oSettings.nHolding = null;
    }


    /**
     * Use the DOM source to create up an array of header cells. The idea here is to
     * create a layout grid (array) of rows x columns, which contains a reference
     * to the cell that that point in the grid (regardless of col/rowspan), such that
     * any column / row could be removed and the new grid constructed
     *  @param array {object} aLayout Array to store the calculated layout in
     *  @param {node} nThead The header/footer element for the table
     *  @memberof DataTable#oApi
     */
    function _fnDetectHeader ( aLayout, nThead )
    {
    	var nTrs = $$7(nThead).children('tr');
    	var nTr, nCell;
    	var i, k, l, iLen, iColShifted, iColumn, iColspan, iRowspan;
    	var bUnique;
    	var fnShiftCol = function ( a, i, j ) {
    		var k = a[i];
                    while ( k[j] ) {
    			j++;
    		}
    		return j;
    	};

    	aLayout.splice( 0, aLayout.length );

    	/* We know how many rows there are in the layout - so prep it */
    	for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
    	{
    		aLayout.push( [] );
    	}

    	/* Calculate a layout array */
    	for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
    	{
    		nTr = nTrs[i];
    		iColumn = 0;

    		/* For every cell in the row... */
    		nCell = nTr.firstChild;
    		while ( nCell ) {
    			if ( nCell.nodeName.toUpperCase() == "TD" ||
    			     nCell.nodeName.toUpperCase() == "TH" )
    			{
    				/* Get the col and rowspan attributes from the DOM and sanitise them */
    				iColspan = nCell.getAttribute('colspan') * 1;
    				iRowspan = nCell.getAttribute('rowspan') * 1;
    				iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
    				iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;

    				/* There might be colspan cells already in this row, so shift our target
    				 * accordingly
    				 */
    				iColShifted = fnShiftCol( aLayout, i, iColumn );

    				/* Cache calculation for unique columns */
    				bUnique = iColspan === 1 ? true : false;

    				/* If there is col / rowspan, copy the information into the layout grid */
    				for ( l=0 ; l<iColspan ; l++ )
    				{
    					for ( k=0 ; k<iRowspan ; k++ )
    					{
    						aLayout[i+k][iColShifted+l] = {
    							"cell": nCell,
    							"unique": bUnique
    						};
    						aLayout[i+k].nTr = nTr;
    					}
    				}
    			}
    			nCell = nCell.nextSibling;
    		}
    	}
    }


    /**
     * Get an array of unique th elements, one for each column
     *  @param {object} oSettings dataTables settings object
     *  @param {node} nHeader automatically detect the layout from this node - optional
     *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
     *  @returns array {node} aReturn list of unique th's
     *  @memberof DataTable#oApi
     */
    function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
    {
    	var aReturn = [];
    	if ( !aLayout )
    	{
    		aLayout = oSettings.aoHeader;
    		if ( nHeader )
    		{
    			aLayout = [];
    			_fnDetectHeader( aLayout, nHeader );
    		}
    	}

    	for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
    	{
    		for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
    		{
    			if ( aLayout[i][j].unique &&
    				 (!aReturn[j] || !oSettings.bSortCellsTop) )
    			{
    				aReturn[j] = aLayout[i][j].cell;
    			}
    		}
    	}

    	return aReturn;
    }

    /**
     * Set the start position for draw
     *  @param {object} oSettings dataTables settings object
     */
    function _fnStart( oSettings )
    {
    	var bServerSide = _fnDataSource( oSettings ) == 'ssp';
    	var iInitDisplayStart = oSettings.iInitDisplayStart;

    	// Check and see if we have an initial draw position from state saving
    	if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )
    	{
    		oSettings._iDisplayStart = bServerSide ?
    			iInitDisplayStart :
    			iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
    				0 :
    				iInitDisplayStart;

    		oSettings.iInitDisplayStart = -1;
    	}
    }

    /**
     * Create an Ajax call based on the table's settings, taking into account that
     * parameters can have multiple forms, and backwards compatibility.
     *
     * @param {object} oSettings dataTables settings object
     * @param {array} data Data to send to the server, required by
     *     DataTables - may be augmented by developer callbacks
     * @param {function} fn Callback function to run when data is obtained
     */
    function _fnBuildAjax( oSettings, data, fn )
    {
    	// Compatibility with 1.9-, allow fnServerData and event to manipulate
    	_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );

    	// Convert to object based for 1.10+ if using the old array scheme which can
    	// come from server-side processing or serverParams
    	if ( data && Array.isArray(data) ) {
    		var tmp = {};
    		var rbracket = /(.*?)\[\]$/;

    		$$7.each( data, function (key, val) {
    			var match = val.name.match(rbracket);

    			if ( match ) {
    				// Support for arrays
    				var name = match[0];

    				if ( ! tmp[ name ] ) {
    					tmp[ name ] = [];
    				}
    				tmp[ name ].push( val.value );
    			}
    			else {
    				tmp[val.name] = val.value;
    			}
    		} );
    		data = tmp;
    	}

    	var ajaxData;
    	var ajax = oSettings.ajax;
    	var instance = oSettings.oInstance;
    	var callback = function ( json ) {
    		var status = oSettings.jqXHR
    			? oSettings.jqXHR.status
    			: null;

    		if ( json === null || (typeof status === 'number' && status == 204 ) ) {
    			json = {};
    			_fnAjaxDataSrc( oSettings, json, [] );
    		}

    		var error = json.error || json.sError;
    		if ( error ) {
    			_fnLog( oSettings, 0, error );
    		}

    		oSettings.json = json;

    		_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );
    		fn( json );
    	};

    	if ( $$7.isPlainObject( ajax ) && ajax.data )
    	{
    		ajaxData = ajax.data;

    		var newData = typeof ajaxData === 'function' ?
    			ajaxData( data, oSettings ) :  // fn can manipulate data or return
    			ajaxData;                      // an object object or array to merge

    		// If the function returned something, use that alone
    		data = typeof ajaxData === 'function' && newData ?
    			newData :
    			$$7.extend( true, data, newData );

    		// Remove the data property as we've resolved it already and don't want
    		// jQuery to do it again (it is restored at the end of the function)
    		delete ajax.data;
    	}

    	var baseAjax = {
    		"data": data,
    		"success": callback,
    		"dataType": "json",
    		"cache": false,
    		"type": oSettings.sServerMethod,
    		"error": function (xhr, error, thrown) {
    			var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );

    			if ( $$7.inArray( true, ret ) === -1 ) {
    				if ( error == "parsererror" ) {
    					_fnLog( oSettings, 0, 'Invalid JSON response', 1 );
    				}
    				else if ( xhr.readyState === 4 ) {
    					_fnLog( oSettings, 0, 'Ajax error', 7 );
    				}
    			}

    			_fnProcessingDisplay( oSettings, false );
    		}
    	};

    	// Store the data submitted for the API
    	oSettings.oAjaxData = data;

    	// Allow plug-ins and external processes to modify the data
    	_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );

    	if ( oSettings.fnServerData )
    	{
    		// DataTables 1.9- compatibility
    		oSettings.fnServerData.call( instance,
    			oSettings.sAjaxSource,
    			$$7.map( data, function (val, key) { // Need to convert back to 1.9 trad format
    				return { name: key, value: val };
    			} ),
    			callback,
    			oSettings
    		);
    	}
    	else if ( oSettings.sAjaxSource || typeof ajax === 'string' )
    	{
    		// DataTables 1.9- compatibility
    		oSettings.jqXHR = $$7.ajax( $$7.extend( baseAjax, {
    			url: ajax || oSettings.sAjaxSource
    		} ) );
    	}
    	else if ( typeof ajax === 'function' )
    	{
    		// Is a function - let the caller define what needs to be done
    		oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );
    	}
    	else
    	{
    		// Object to extend the base settings
    		oSettings.jqXHR = $$7.ajax( $$7.extend( baseAjax, ajax ) );

    		// Restore for next time around
    		ajax.data = ajaxData;
    	}
    }


    /**
     * Update the table using an Ajax call
     *  @param {object} settings dataTables settings object
     *  @returns {boolean} Block the table drawing or not
     *  @memberof DataTable#oApi
     */
    function _fnAjaxUpdate( settings )
    {
    	settings.iDraw++;
    	_fnProcessingDisplay( settings, true );

    	// Keep track of drawHold state to handle scrolling after the Ajax call
    	var drawHold = settings._drawHold;

    	_fnBuildAjax(
    		settings,
    		_fnAjaxParameters( settings ),
    		function(json) {
    			settings._drawHold = drawHold;
    			_fnAjaxUpdateDraw( settings, json );
    			settings._drawHold = false;
    		}
    	);
    }


    /**
     * Build up the parameters in an object needed for a server-side processing
     * request. Note that this is basically done twice, is different ways - a modern
     * method which is used by default in DataTables 1.10 which uses objects and
     * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
     * the sAjaxSource option is used in the initialisation, or the legacyAjax
     * option is set.
     *  @param {object} oSettings dataTables settings object
     *  @returns {bool} block the table drawing or not
     *  @memberof DataTable#oApi
     */
    function _fnAjaxParameters( settings )
    {
    	var
    		columns = settings.aoColumns,
    		columnCount = columns.length,
    		features = settings.oFeatures,
    		preSearch = settings.oPreviousSearch,
    		preColSearch = settings.aoPreSearchCols,
    		i, data = [], dataProp, column, columnSearch,
    		sort = _fnSortFlatten( settings ),
    		displayStart = settings._iDisplayStart,
    		displayLength = features.bPaginate !== false ?
    			settings._iDisplayLength :
    			-1;

    	var param = function ( name, value ) {
    		data.push( { 'name': name, 'value': value } );
    	};

    	// DataTables 1.9- compatible method
    	param( 'sEcho',          settings.iDraw );
    	param( 'iColumns',       columnCount );
    	param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );
    	param( 'iDisplayStart',  displayStart );
    	param( 'iDisplayLength', displayLength );

    	// DataTables 1.10+ method
    	var d = {
    		draw:    settings.iDraw,
    		columns: [],
    		order:   [],
    		start:   displayStart,
    		length:  displayLength,
    		search:  {
    			value: preSearch.sSearch,
    			regex: preSearch.bRegex
    		}
    	};

    	for ( i=0 ; i<columnCount ; i++ ) {
    		column = columns[i];
    		columnSearch = preColSearch[i];
    		dataProp = typeof column.mData=="function" ? 'function' : column.mData ;

    		d.columns.push( {
    			data:       dataProp,
    			name:       column.sName,
    			searchable: column.bSearchable,
    			orderable:  column.bSortable,
    			search:     {
    				value: columnSearch.sSearch,
    				regex: columnSearch.bRegex
    			}
    		} );

    		param( "mDataProp_"+i, dataProp );

    		if ( features.bFilter ) {
    			param( 'sSearch_'+i,     columnSearch.sSearch );
    			param( 'bRegex_'+i,      columnSearch.bRegex );
    			param( 'bSearchable_'+i, column.bSearchable );
    		}

    		if ( features.bSort ) {
    			param( 'bSortable_'+i, column.bSortable );
    		}
    	}

    	if ( features.bFilter ) {
    		param( 'sSearch', preSearch.sSearch );
    		param( 'bRegex', preSearch.bRegex );
    	}

    	if ( features.bSort ) {
    		$$7.each( sort, function ( i, val ) {
    			d.order.push( { column: val.col, dir: val.dir } );

    			param( 'iSortCol_'+i, val.col );
    			param( 'sSortDir_'+i, val.dir );
    		} );

    		param( 'iSortingCols', sort.length );
    	}

    	// If the legacy.ajax parameter is null, then we automatically decide which
    	// form to use, based on sAjaxSource
    	var legacy = DataTable.ext.legacy.ajax;
    	if ( legacy === null ) {
    		return settings.sAjaxSource ? data : d;
    	}

    	// Otherwise, if legacy has been specified then we use that to decide on the
    	// form
    	return legacy ? data : d;
    }


    /**
     * Data the data from the server (nuking the old) and redraw the table
     *  @param {object} oSettings dataTables settings object
     *  @param {object} json json data return from the server.
     *  @param {string} json.sEcho Tracking flag for DataTables to match requests
     *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
     *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
     *  @param {array} json.aaData The data to display on this page
     *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
     *  @memberof DataTable#oApi
     */
    function _fnAjaxUpdateDraw ( settings, json )
    {
    	// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
    	// Support both
    	var compat = function ( old, modern ) {
    		return json[old] !== undefined ? json[old] : json[modern];
    	};

    	var data = _fnAjaxDataSrc( settings, json );
    	var draw            = compat( 'sEcho',                'draw' );
    	var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );
    	var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );

    	if ( draw !== undefined ) {
    		// Protect against out of sequence returns
    		if ( draw*1 < settings.iDraw ) {
    			return;
    		}
    		settings.iDraw = draw * 1;
    	}

    	// No data in returned object, so rather than an array, we show an empty table
    	if ( ! data ) {
    		data = [];
    	}

    	_fnClearTable( settings );
    	settings._iRecordsTotal   = parseInt(recordsTotal, 10);
    	settings._iRecordsDisplay = parseInt(recordsFiltered, 10);

    	for ( var i=0, ien=data.length ; i<ien ; i++ ) {
    		_fnAddData( settings, data[i] );
    	}
    	settings.aiDisplay = settings.aiDisplayMaster.slice();

    	_fnDraw( settings, true );

    	if ( ! settings._bInitComplete ) {
    		_fnInitComplete( settings, json );
    	}

    	_fnProcessingDisplay( settings, false );
    }


    /**
     * Get the data from the JSON data source to use for drawing a table. Using
     * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
     * source object, or from a processing function.
     *  @param {object} oSettings dataTables settings object
     *  @param  {object} json Data source object / array from the server
     *  @return {array} Array of data to use
     */
     function _fnAjaxDataSrc ( oSettings, json, write )
     {
    	var dataSrc = $$7.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?
    		oSettings.ajax.dataSrc :
    		oSettings.sAjaxDataProp; // Compatibility with 1.9-.

    	if ( ! write ) {
    		if ( dataSrc === 'data' ) {
    			// If the default, then we still want to support the old style, and safely ignore
    			// it if possible
    			return json.aaData || json[dataSrc];
    		}

    		return dataSrc !== "" ?
    			_fnGetObjectDataFn( dataSrc )( json ) :
    			json;
    	}

    	// set
    	_fnSetObjectDataFn( dataSrc )( json, write );
    }

    /**
     * Generate the node required for filtering text
     *  @returns {node} Filter control element
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnFeatureHtmlFilter ( settings )
    {
    	var classes = settings.oClasses;
    	var tableId = settings.sTableId;
    	var language = settings.oLanguage;
    	var previousSearch = settings.oPreviousSearch;
    	var features = settings.aanFeatures;
    	var input = '<input type="search" class="'+classes.sFilterInput+'"/>';

    	var str = language.sSearch;
    	str = str.match(/_INPUT_/) ?
    		str.replace('_INPUT_', input) :
    		str+input;

    	var filter = $$7('<div/>', {
    			'id': ! features.f ? tableId+'_filter' : null,
    			'class': classes.sFilter
    		} )
    		.append( $$7('<label/>' ).append( str ) );

    	var searchFn = function(event) {
    		/* Update all other filter input elements for the new display */
    		features.f;
    		var val = !this.value ? "" : this.value; // mental IE8 fix :-(
    		if(previousSearch.return && event.key !== "Enter") {
    			return;
    		}
    		/* Now do the filter */
    		if ( val != previousSearch.sSearch ) {
    			_fnFilterComplete( settings, {
    				"sSearch": val,
    				"bRegex": previousSearch.bRegex,
    				"bSmart": previousSearch.bSmart ,
    				"bCaseInsensitive": previousSearch.bCaseInsensitive,
    				"return": previousSearch.return
    			} );

    			// Need to redraw, without resorting
    			settings._iDisplayStart = 0;
    			_fnDraw( settings );
    		}
    	};

    	var searchDelay = settings.searchDelay !== null ?
    		settings.searchDelay :
    		_fnDataSource( settings ) === 'ssp' ?
    			400 :
    			0;

    	var jqFilter = $$7('input', filter)
    		.val( previousSearch.sSearch )
    		.attr( 'placeholder', language.sSearchPlaceholder )
    		.on(
    			'keyup.DT search.DT input.DT paste.DT cut.DT',
    			searchDelay ?
    				_fnThrottle( searchFn, searchDelay ) :
    				searchFn
    		)
    		.on( 'mouseup.DT', function(e) {
    			// Edge fix! Edge 17 does not trigger anything other than mouse events when clicking
    			// on the clear icon (Edge bug 17584515). This is safe in other browsers as `searchFn`
    			// checks the value to see if it has changed. In other browsers it won't have.
    			setTimeout( function () {
    				searchFn.call(jqFilter[0], e);
    			}, 10);
    		} )
    		.on( 'keypress.DT', function(e) {
    			/* Prevent form submission */
    			if ( e.keyCode == 13 ) {
    				return false;
    			}
    		} )
    		.attr('aria-controls', tableId);

    	// Update the input elements whenever the table is filtered
    	$$7(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {
    		if ( settings === s ) {
    			// IE9 throws an 'unknown error' if document.activeElement is used
    			// inside an iframe or frame...
    			try {
    				if ( jqFilter[0] !== document.activeElement ) {
    					jqFilter.val( previousSearch.sSearch );
    				}
    			}
    			catch ( e ) {}
    		}
    	} );

    	return filter[0];
    }


    /**
     * Filter the table using both the global filter and column based filtering
     *  @param {object} oSettings dataTables settings object
     *  @param {object} oSearch search information
     *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
     *  @memberof DataTable#oApi
     */
    function _fnFilterComplete ( oSettings, oInput, iForce )
    {
    	var oPrevSearch = oSettings.oPreviousSearch;
    	var aoPrevSearch = oSettings.aoPreSearchCols;
    	var fnSaveFilter = function ( oFilter ) {
    		/* Save the filtering values */
    		oPrevSearch.sSearch = oFilter.sSearch;
    		oPrevSearch.bRegex = oFilter.bRegex;
    		oPrevSearch.bSmart = oFilter.bSmart;
    		oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
    		oPrevSearch.return = oFilter.return;
    	};
    	var fnRegex = function ( o ) {
    		// Backwards compatibility with the bEscapeRegex option
    		return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
    	};

    	// Resolve any column types that are unknown due to addition or invalidation
    	// @todo As per sort - can this be moved into an event handler?
    	_fnColumnTypes( oSettings );

    	/* In server-side processing all filtering is done by the server, so no point hanging around here */
    	if ( _fnDataSource( oSettings ) != 'ssp' )
    	{
    		/* Global filter */
    		_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );
    		fnSaveFilter( oInput );

    		/* Now do the individual column filter */
    		for ( var i=0 ; i<aoPrevSearch.length ; i++ )
    		{
    			_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
    				aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );
    		}

    		/* Custom filtering */
    		_fnFilterCustom( oSettings );
    	}
    	else
    	{
    		fnSaveFilter( oInput );
    	}

    	/* Tell the draw function we have been filtering */
    	oSettings.bFiltered = true;
    	_fnCallbackFire( oSettings, null, 'search', [oSettings] );
    }


    /**
     * Apply custom filtering functions
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnFilterCustom( settings )
    {
    	var filters = DataTable.ext.search;
    	var displayRows = settings.aiDisplay;
    	var row, rowIdx;

    	for ( var i=0, ien=filters.length ; i<ien ; i++ ) {
    		var rows = [];

    		// Loop over each row and see if it should be included
    		for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {
    			rowIdx = displayRows[ j ];
    			row = settings.aoData[ rowIdx ];

    			if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {
    				rows.push( rowIdx );
    			}
    		}

    		// So the array reference doesn't break set the results into the
    		// existing array
    		displayRows.length = 0;
    		$$7.merge( displayRows, rows );
    	}
    }


    /**
     * Filter the table on a per-column basis
     *  @param {object} oSettings dataTables settings object
     *  @param {string} sInput string to filter on
     *  @param {int} iColumn column to filter
     *  @param {bool} bRegex treat search string as a regular expression or not
     *  @param {bool} bSmart use smart filtering or not
     *  @param {bool} bCaseInsensitive Do case insensitive matching or not
     *  @memberof DataTable#oApi
     */
    function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )
    {
    	if ( searchStr === '' ) {
    		return;
    	}

    	var data;
    	var out = [];
    	var display = settings.aiDisplay;
    	var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );

    	for ( var i=0 ; i<display.length ; i++ ) {
    		data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];

    		if ( rpSearch.test( data ) ) {
    			out.push( display[i] );
    		}
    	}

    	settings.aiDisplay = out;
    }


    /**
     * Filter the data table based on user input and draw the table
     *  @param {object} settings dataTables settings object
     *  @param {string} input string to filter on
     *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
     *  @param {bool} regex treat as a regular expression or not
     *  @param {bool} smart perform smart filtering or not
     *  @param {bool} caseInsensitive Do case insensitive matching or not
     *  @memberof DataTable#oApi
     */
    function _fnFilter( settings, input, force, regex, smart, caseInsensitive )
    {
    	var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );
    	var prevSearch = settings.oPreviousSearch.sSearch;
    	var displayMaster = settings.aiDisplayMaster;
    	var display, invalidated, i;
    	var filtered = [];

    	// Need to take account of custom filtering functions - always filter
    	if ( DataTable.ext.search.length !== 0 ) {
    		force = true;
    	}

    	// Check if any of the rows were invalidated
    	invalidated = _fnFilterData( settings );

    	// If the input is blank - we just want the full data set
    	if ( input.length <= 0 ) {
    		settings.aiDisplay = displayMaster.slice();
    	}
    	else {
    		// New search - start from the master array
    		if ( invalidated ||
    			 force ||
    			 regex ||
    			 prevSearch.length > input.length ||
    			 input.indexOf(prevSearch) !== 0 ||
    			 settings.bSorted // On resort, the display master needs to be
    			                  // re-filtered since indexes will have changed
    		) {
    			settings.aiDisplay = displayMaster.slice();
    		}

    		// Search the display array
    		display = settings.aiDisplay;

    		for ( i=0 ; i<display.length ; i++ ) {
    			if ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {
    				filtered.push( display[i] );
    			}
    		}

    		settings.aiDisplay = filtered;
    	}
    }


    /**
     * Build a regular expression object suitable for searching a table
     *  @param {string} sSearch string to search for
     *  @param {bool} bRegex treat as a regular expression or not
     *  @param {bool} bSmart perform smart filtering or not
     *  @param {bool} bCaseInsensitive Do case insensitive matching or not
     *  @returns {RegExp} constructed object
     *  @memberof DataTable#oApi
     */
    function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )
    {
    	search = regex ?
    		search :
    		_fnEscapeRegex( search );
    	
    	if ( smart ) {
    		/* For smart filtering we want to allow the search to work regardless of
    		 * word order. We also want double quoted text to be preserved, so word
    		 * order is important - a la google. So this is what we want to
    		 * generate:
    		 * 
    		 * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
    		 */
    		var a = $$7.map( search.match( /["\u201C][^"\u201D]+["\u201D]|[^ ]+/g ) || [''], function ( word ) {
    			if ( word.charAt(0) === '"' ) {
    				var m = word.match( /^"(.*)"$/ );
    				word = m ? m[1] : word;
    			}
    			else if ( word.charAt(0) === '\u201C' ) {
    				var m = word.match( /^\u201C(.*)\u201D$/ );
    				word = m ? m[1] : word;
    			}

    			return word.replace('"', '');
    		} );

    		search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';
    	}

    	return new RegExp( search, caseInsensitive ? 'i' : '' );
    }


    /**
     * Escape a string such that it can be used in a regular expression
     *  @param {string} sVal string to escape
     *  @returns {string} escaped string
     *  @memberof DataTable#oApi
     */
    var _fnEscapeRegex = DataTable.util.escapeRegex;

    var __filter_div = $$7('<div>')[0];
    var __filter_div_textContent = __filter_div.textContent !== undefined;

    // Update the filtering data for each row if needed (by invalidation or first run)
    function _fnFilterData ( settings )
    {
    	var columns = settings.aoColumns;
    	var column;
    	var i, j, ien, jen, filterData, cellData, row;
    	var wasInvalidated = false;

    	for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
    		row = settings.aoData[i];

    		if ( ! row._aFilterData ) {
    			filterData = [];

    			for ( j=0, jen=columns.length ; j<jen ; j++ ) {
    				column = columns[j];

    				if ( column.bSearchable ) {
    					cellData = _fnGetCellData( settings, i, j, 'filter' );

    					// Search in DataTables 1.10 is string based. In 1.11 this
    					// should be altered to also allow strict type checking.
    					if ( cellData === null ) {
    						cellData = '';
    					}

    					if ( typeof cellData !== 'string' && cellData.toString ) {
    						cellData = cellData.toString();
    					}
    				}
    				else {
    					cellData = '';
    				}

    				// If it looks like there is an HTML entity in the string,
    				// attempt to decode it so sorting works as expected. Note that
    				// we could use a single line of jQuery to do this, but the DOM
    				// method used here is much faster http://jsperf.com/html-decode
    				if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {
    					__filter_div.innerHTML = cellData;
    					cellData = __filter_div_textContent ?
    						__filter_div.textContent :
    						__filter_div.innerText;
    				}

    				if ( cellData.replace ) {
    					cellData = cellData.replace(/[\r\n\u2028]/g, '');
    				}

    				filterData.push( cellData );
    			}

    			row._aFilterData = filterData;
    			row._sFilterRow = filterData.join('  ');
    			wasInvalidated = true;
    		}
    	}

    	return wasInvalidated;
    }


    /**
     * Convert from the internal Hungarian notation to camelCase for external
     * interaction
     *  @param {object} obj Object to convert
     *  @returns {object} Inverted object
     *  @memberof DataTable#oApi
     */
    function _fnSearchToCamel ( obj )
    {
    	return {
    		search:          obj.sSearch,
    		smart:           obj.bSmart,
    		regex:           obj.bRegex,
    		caseInsensitive: obj.bCaseInsensitive
    	};
    }



    /**
     * Convert from camelCase notation to the internal Hungarian. We could use the
     * Hungarian convert function here, but this is cleaner
     *  @param {object} obj Object to convert
     *  @returns {object} Inverted object
     *  @memberof DataTable#oApi
     */
    function _fnSearchToHung ( obj )
    {
    	return {
    		sSearch:          obj.search,
    		bSmart:           obj.smart,
    		bRegex:           obj.regex,
    		bCaseInsensitive: obj.caseInsensitive
    	};
    }

    /**
     * Generate the node required for the info display
     *  @param {object} oSettings dataTables settings object
     *  @returns {node} Information element
     *  @memberof DataTable#oApi
     */
    function _fnFeatureHtmlInfo ( settings )
    {
    	var
    		tid = settings.sTableId,
    		nodes = settings.aanFeatures.i,
    		n = $$7('<div/>', {
    			'class': settings.oClasses.sInfo,
    			'id': ! nodes ? tid+'_info' : null
    		} );

    	if ( ! nodes ) {
    		// Update display on each draw
    		settings.aoDrawCallback.push( {
    			"fn": _fnUpdateInfo,
    			"sName": "information"
    		} );

    		n
    			.attr( 'role', 'status' )
    			.attr( 'aria-live', 'polite' );

    		// Table is described by our info div
    		$$7(settings.nTable).attr( 'aria-describedby', tid+'_info' );
    	}

    	return n[0];
    }


    /**
     * Update the information elements in the display
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnUpdateInfo ( settings )
    {
    	/* Show information about the table */
    	var nodes = settings.aanFeatures.i;
    	if ( nodes.length === 0 ) {
    		return;
    	}

    	var
    		lang  = settings.oLanguage,
    		start = settings._iDisplayStart+1,
    		end   = settings.fnDisplayEnd(),
    		max   = settings.fnRecordsTotal(),
    		total = settings.fnRecordsDisplay(),
    		out   = total ?
    			lang.sInfo :
    			lang.sInfoEmpty;

    	if ( total !== max ) {
    		/* Record set after filtering */
    		out += ' ' + lang.sInfoFiltered;
    	}

    	// Convert the macros
    	out += lang.sInfoPostFix;
    	out = _fnInfoMacros( settings, out );

    	var callback = lang.fnInfoCallback;
    	if ( callback !== null ) {
    		out = callback.call( settings.oInstance,
    			settings, start, end, max, total, out
    		);
    	}

    	$$7(nodes).html( out );
    }


    function _fnInfoMacros ( settings, str )
    {
    	// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
    	// internally
    	var
    		formatter  = settings.fnFormatNumber,
    		start      = settings._iDisplayStart+1,
    		len        = settings._iDisplayLength,
    		vis        = settings.fnRecordsDisplay(),
    		all        = len === -1;

    	return str.
    		replace(/_START_/g, formatter.call( settings, start ) ).
    		replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).
    		replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).
    		replace(/_TOTAL_/g, formatter.call( settings, vis ) ).
    		replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).
    		replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );
    }



    /**
     * Draw the table for the first time, adding all required features
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnInitialise ( settings )
    {
    	var i, iLen, iAjaxStart=settings.iInitDisplayStart;
    	var columns = settings.aoColumns, column;
    	var features = settings.oFeatures;
    	var deferLoading = settings.bDeferLoading; // value modified by the draw

    	/* Ensure that the table data is fully initialised */
    	if ( ! settings.bInitialised ) {
    		setTimeout( function(){ _fnInitialise( settings ); }, 200 );
    		return;
    	}

    	/* Show the display HTML options */
    	_fnAddOptionsHtml( settings );

    	/* Build and draw the header / footer for the table */
    	_fnBuildHead( settings );
    	_fnDrawHead( settings, settings.aoHeader );
    	_fnDrawHead( settings, settings.aoFooter );

    	/* Okay to show that something is going on now */
    	_fnProcessingDisplay( settings, true );

    	/* Calculate sizes for columns */
    	if ( features.bAutoWidth ) {
    		_fnCalculateColumnWidths( settings );
    	}

    	for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {
    		column = columns[i];

    		if ( column.sWidth ) {
    			column.nTh.style.width = _fnStringToCss( column.sWidth );
    		}
    	}

    	_fnCallbackFire( settings, null, 'preInit', [settings] );

    	// If there is default sorting required - let's do it. The sort function
    	// will do the drawing for us. Otherwise we draw the table regardless of the
    	// Ajax source - this allows the table to look initialised for Ajax sourcing
    	// data (show 'loading' message possibly)
    	_fnReDraw( settings );

    	// Server-side processing init complete is done by _fnAjaxUpdateDraw
    	var dataSrc = _fnDataSource( settings );
    	if ( dataSrc != 'ssp' || deferLoading ) {
    		// if there is an ajax source load the data
    		if ( dataSrc == 'ajax' ) {
    			_fnBuildAjax( settings, [], function(json) {
    				var aData = _fnAjaxDataSrc( settings, json );

    				// Got the data - add it to the table
    				for ( i=0 ; i<aData.length ; i++ ) {
    					_fnAddData( settings, aData[i] );
    				}

    				// Reset the init display for cookie saving. We've already done
    				// a filter, and therefore cleared it before. So we need to make
    				// it appear 'fresh'
    				settings.iInitDisplayStart = iAjaxStart;

    				_fnReDraw( settings );

    				_fnProcessingDisplay( settings, false );
    				_fnInitComplete( settings, json );
    			});
    		}
    		else {
    			_fnProcessingDisplay( settings, false );
    			_fnInitComplete( settings );
    		}
    	}
    }


    /**
     * Draw the table for the first time, adding all required features
     *  @param {object} oSettings dataTables settings object
     *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
     *    with client-side processing (optional)
     *  @memberof DataTable#oApi
     */
    function _fnInitComplete ( settings, json )
    {
    	settings._bInitComplete = true;

    	// When data was added after the initialisation (data or Ajax) we need to
    	// calculate the column sizing
    	if ( json || settings.oInit.aaData ) {
    		_fnAdjustColumnSizing( settings );
    	}

    	_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );
    	_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );
    }


    function _fnLengthChange ( settings, val )
    {
    	var len = parseInt( val, 10 );
    	settings._iDisplayLength = len;

    	_fnLengthOverflow( settings );

    	// Fire length change event
    	_fnCallbackFire( settings, null, 'length', [settings, len] );
    }


    /**
     * Generate the node required for user display length changing
     *  @param {object} settings dataTables settings object
     *  @returns {node} Display length feature node
     *  @memberof DataTable#oApi
     */
    function _fnFeatureHtmlLength ( settings )
    {
    	var
    		classes  = settings.oClasses,
    		tableId  = settings.sTableId,
    		menu     = settings.aLengthMenu,
    		d2       = Array.isArray( menu[0] ),
    		lengths  = d2 ? menu[0] : menu,
    		language = d2 ? menu[1] : menu;

    	var select = $$7('<select/>', {
    		'name':          tableId+'_length',
    		'aria-controls': tableId,
    		'class':         classes.sLengthSelect
    	} );

    	for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {
    		select[0][ i ] = new Option(
    			typeof language[i] === 'number' ?
    				settings.fnFormatNumber( language[i] ) :
    				language[i],
    			lengths[i]
    		);
    	}

    	var div = $$7('<div><label/></div>').addClass( classes.sLength );
    	if ( ! settings.aanFeatures.l ) {
    		div[0].id = tableId+'_length';
    	}

    	div.children().append(
    		settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )
    	);

    	// Can't use `select` variable as user might provide their own and the
    	// reference is broken by the use of outerHTML
    	$$7('select', div)
    		.val( settings._iDisplayLength )
    		.on( 'change.DT', function(e) {
    			_fnLengthChange( settings, $$7(this).val() );
    			_fnDraw( settings );
    		} );

    	// Update node value whenever anything changes the table's length
    	$$7(settings.nTable).on( 'length.dt.DT', function (e, s, len) {
    		if ( settings === s ) {
    			$$7('select', div).val( len );
    		}
    	} );

    	return div[0];
    }



    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Note that most of the paging logic is done in
     * DataTable.ext.pager
     */

    /**
     * Generate the node required for default pagination
     *  @param {object} oSettings dataTables settings object
     *  @returns {node} Pagination feature node
     *  @memberof DataTable#oApi
     */
    function _fnFeatureHtmlPaginate ( settings )
    {
    	var
    		type   = settings.sPaginationType,
    		plugin = DataTable.ext.pager[ type ],
    		modern = typeof plugin === 'function',
    		redraw = function( settings ) {
    			_fnDraw( settings );
    		},
    		node = $$7('<div/>').addClass( settings.oClasses.sPaging + type )[0],
    		features = settings.aanFeatures;

    	if ( ! modern ) {
    		plugin.fnInit( settings, node, redraw );
    	}

    	/* Add a draw callback for the pagination on first instance, to update the paging display */
    	if ( ! features.p )
    	{
    		node.id = settings.sTableId+'_paginate';

    		settings.aoDrawCallback.push( {
    			"fn": function( settings ) {
    				if ( modern ) {
    					var
    						start      = settings._iDisplayStart,
    						len        = settings._iDisplayLength,
    						visRecords = settings.fnRecordsDisplay(),
    						all        = len === -1,
    						page = all ? 0 : Math.ceil( start / len ),
    						pages = all ? 1 : Math.ceil( visRecords / len ),
    						buttons = plugin(page, pages),
    						i, ien;

    					for ( i=0, ien=features.p.length ; i<ien ; i++ ) {
    						_fnRenderer( settings, 'pageButton' )(
    							settings, features.p[i], i, buttons, page, pages
    						);
    					}
    				}
    				else {
    					plugin.fnUpdate( settings, redraw );
    				}
    			},
    			"sName": "pagination"
    		} );
    	}

    	return node;
    }


    /**
     * Alter the display settings to change the page
     *  @param {object} settings DataTables settings object
     *  @param {string|int} action Paging action to take: "first", "previous",
     *    "next" or "last" or page number to jump to (integer)
     *  @param [bool] redraw Automatically draw the update or not
     *  @returns {bool} true page has changed, false - no change
     *  @memberof DataTable#oApi
     */
    function _fnPageChange ( settings, action, redraw )
    {
    	var
    		start     = settings._iDisplayStart,
    		len       = settings._iDisplayLength,
    		records   = settings.fnRecordsDisplay();

    	if ( records === 0 || len === -1 )
    	{
    		start = 0;
    	}
    	else if ( typeof action === "number" )
    	{
    		start = action * len;

    		if ( start > records )
    		{
    			start = 0;
    		}
    	}
    	else if ( action == "first" )
    	{
    		start = 0;
    	}
    	else if ( action == "previous" )
    	{
    		start = len >= 0 ?
    			start - len :
    			0;

    		if ( start < 0 )
    		{
    		  start = 0;
    		}
    	}
    	else if ( action == "next" )
    	{
    		if ( start + len < records )
    		{
    			start += len;
    		}
    	}
    	else if ( action == "last" )
    	{
    		start = Math.floor( (records-1) / len) * len;
    	}
    	else
    	{
    		_fnLog( settings, 0, "Unknown paging action: "+action, 5 );
    	}

    	var changed = settings._iDisplayStart !== start;
    	settings._iDisplayStart = start;

    	if ( changed ) {
    		_fnCallbackFire( settings, null, 'page', [settings] );

    		if ( redraw ) {
    			_fnDraw( settings );
    		}
    	}
    	else {
    		// No change event - paging was called, but no change
    		_fnCallbackFire( settings, null, 'page-nc', [settings] );
    	}

    	return changed;
    }



    /**
     * Generate the node required for the processing node
     *  @param {object} settings dataTables settings object
     *  @returns {node} Processing element
     *  @memberof DataTable#oApi
     */
    function _fnFeatureHtmlProcessing ( settings )
    {
    	return $$7('<div/>', {
    			'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,
    			'class': settings.oClasses.sProcessing,
    			'role': 'status'
    		} )
    		.html( settings.oLanguage.sProcessing )
    		.append('<div><div></div><div></div><div></div><div></div></div>')
    		.insertBefore( settings.nTable )[0];
    }


    /**
     * Display or hide the processing indicator
     *  @param {object} settings dataTables settings object
     *  @param {bool} show Show the processing indicator (true) or not (false)
     *  @memberof DataTable#oApi
     */
    function _fnProcessingDisplay ( settings, show )
    {
    	if ( settings.oFeatures.bProcessing ) {
    		$$7(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );
    	}

    	_fnCallbackFire( settings, null, 'processing', [settings, show] );
    }

    /**
     * Add any control elements for the table - specifically scrolling
     *  @param {object} settings dataTables settings object
     *  @returns {node} Node to add to the DOM
     *  @memberof DataTable#oApi
     */
    function _fnFeatureHtmlTable ( settings )
    {
    	var table = $$7(settings.nTable);

    	// Scrolling from here on in
    	var scroll = settings.oScroll;

    	if ( scroll.sX === '' && scroll.sY === '' ) {
    		return settings.nTable;
    	}

    	var scrollX = scroll.sX;
    	var scrollY = scroll.sY;
    	var classes = settings.oClasses;
    	var caption = table.children('caption');
    	var captionSide = caption.length ? caption[0]._captionSide : null;
    	var headerClone = $$7( table[0].cloneNode(false) );
    	var footerClone = $$7( table[0].cloneNode(false) );
    	var footer = table.children('tfoot');
    	var _div = '<div/>';
    	var size = function ( s ) {
    		return !s ? null : _fnStringToCss( s );
    	};

    	if ( ! footer.length ) {
    		footer = null;
    	}

    	/*
    	 * The HTML structure that we want to generate in this function is:
    	 *  div - scroller
    	 *    div - scroll head
    	 *      div - scroll head inner
    	 *        table - scroll head table
    	 *          thead - thead
    	 *    div - scroll body
    	 *      table - table (master table)
    	 *        thead - thead clone for sizing
    	 *        tbody - tbody
    	 *    div - scroll foot
    	 *      div - scroll foot inner
    	 *        table - scroll foot table
    	 *          tfoot - tfoot
    	 */
    	var scroller = $$7( _div, { 'class': classes.sScrollWrapper } )
    		.append(
    			$$7(_div, { 'class': classes.sScrollHead } )
    				.css( {
    					overflow: 'hidden',
    					position: 'relative',
    					border: 0,
    					width: scrollX ? size(scrollX) : '100%'
    				} )
    				.append(
    					$$7(_div, { 'class': classes.sScrollHeadInner } )
    						.css( {
    							'box-sizing': 'content-box',
    							width: scroll.sXInner || '100%'
    						} )
    						.append(
    							headerClone
    								.removeAttr('id')
    								.css( 'margin-left', 0 )
    								.append( captionSide === 'top' ? caption : null )
    								.append(
    									table.children('thead')
    								)
    						)
    				)
    		)
    		.append(
    			$$7(_div, { 'class': classes.sScrollBody } )
    				.css( {
    					position: 'relative',
    					overflow: 'auto',
    					width: size( scrollX )
    				} )
    				.append( table )
    		);

    	if ( footer ) {
    		scroller.append(
    			$$7(_div, { 'class': classes.sScrollFoot } )
    				.css( {
    					overflow: 'hidden',
    					border: 0,
    					width: scrollX ? size(scrollX) : '100%'
    				} )
    				.append(
    					$$7(_div, { 'class': classes.sScrollFootInner } )
    						.append(
    							footerClone
    								.removeAttr('id')
    								.css( 'margin-left', 0 )
    								.append( captionSide === 'bottom' ? caption : null )
    								.append(
    									table.children('tfoot')
    								)
    						)
    				)
    		);
    	}

    	var children = scroller.children();
    	var scrollHead = children[0];
    	var scrollBody = children[1];
    	var scrollFoot = footer ? children[2] : null;

    	// When the body is scrolled, then we also want to scroll the headers
    	if ( scrollX ) {
    		$$7(scrollBody).on( 'scroll.DT', function (e) {
    			var scrollLeft = this.scrollLeft;

    			scrollHead.scrollLeft = scrollLeft;

    			if ( footer ) {
    				scrollFoot.scrollLeft = scrollLeft;
    			}
    		} );
    	}

    	$$7(scrollBody).css('max-height', scrollY);
    	if (! scroll.bCollapse) {
    		$$7(scrollBody).css('height', scrollY);
    	}

    	settings.nScrollHead = scrollHead;
    	settings.nScrollBody = scrollBody;
    	settings.nScrollFoot = scrollFoot;

    	// On redraw - align columns
    	settings.aoDrawCallback.push( {
    		"fn": _fnScrollDraw,
    		"sName": "scrolling"
    	} );

    	return scroller[0];
    }



    /**
     * Update the header, footer and body tables for resizing - i.e. column
     * alignment.
     *
     * Welcome to the most horrible function DataTables. The process that this
     * function follows is basically:
     *   1. Re-create the table inside the scrolling div
     *   2. Take live measurements from the DOM
     *   3. Apply the measurements to align the columns
     *   4. Clean up
     *
     *  @param {object} settings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnScrollDraw ( settings )
    {
    	// Given that this is such a monster function, a lot of variables are use
    	// to try and keep the minimised size as small as possible
    	var scroll         = settings.oScroll,
    		scrollX        = scroll.sX,
    		scrollXInner   = scroll.sXInner,
    		scrollY        = scroll.sY,
    		barWidth       = scroll.iBarWidth,
    		divHeader      = $$7(settings.nScrollHead),
    		divHeaderStyle = divHeader[0].style,
    		divHeaderInner = divHeader.children('div'),
    		divHeaderInnerStyle = divHeaderInner[0].style,
    		divHeaderTable = divHeaderInner.children('table'),
    		divBodyEl      = settings.nScrollBody,
    		divBody        = $$7(divBodyEl),
    		divBodyStyle   = divBodyEl.style,
    		divFooter      = $$7(settings.nScrollFoot),
    		divFooterInner = divFooter.children('div'),
    		divFooterTable = divFooterInner.children('table'),
    		header         = $$7(settings.nTHead),
    		table          = $$7(settings.nTable),
    		tableEl        = table[0],
    		tableStyle     = tableEl.style,
    		footer         = settings.nTFoot ? $$7(settings.nTFoot) : null,
    		browser        = settings.oBrowser,
    		ie67           = browser.bScrollOversize;
    		_pluck( settings.aoColumns, 'nTh' );
    		var headerTrgEls, footerTrgEls,
    		headerSrcEls, footerSrcEls,
    		headerCopy, footerCopy,
    		headerWidths=[], footerWidths=[],
    		headerContent=[], footerContent=[],
    		idx, correction, sanityWidth,
    		zeroOut = function(nSizer) {
    			var style = nSizer.style;
    			style.paddingTop = "0";
    			style.paddingBottom = "0";
    			style.borderTopWidth = "0";
    			style.borderBottomWidth = "0";
    			style.height = 0;
    		};

    	// If the scrollbar visibility has changed from the last draw, we need to
    	// adjust the column sizes as the table width will have changed to account
    	// for the scrollbar
    	var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;
    	
    	if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {
    		settings.scrollBarVis = scrollBarVis;
    		_fnAdjustColumnSizing( settings );
    		return; // adjust column sizing will call this function again
    	}
    	else {
    		settings.scrollBarVis = scrollBarVis;
    	}

    	/*
    	 * 1. Re-create the table inside the scrolling div
    	 */

    	// Remove the old minimised thead and tfoot elements in the inner table
    	table.children('thead, tfoot').remove();

    	if ( footer ) {
    		footerCopy = footer.clone().prependTo( table );
    		footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
    		footerSrcEls = footerCopy.find('tr');
    		footerCopy.find('[id]').removeAttr('id');
    	}

    	// Clone the current header and footer elements and then place it into the inner table
    	headerCopy = header.clone().prependTo( table );
    	headerTrgEls = header.find('tr'); // original header is in its own table
    	headerSrcEls = headerCopy.find('tr');
    	headerCopy.find('th, td').removeAttr('tabindex');
    	headerCopy.find('[id]').removeAttr('id');


    	/*
    	 * 2. Take live measurements from the DOM - do not alter the DOM itself!
    	 */

    	// Remove old sizing and apply the calculated column widths
    	// Get the unique column headers in the newly created (cloned) header. We want to apply the
    	// calculated sizes to this header
    	if ( ! scrollX )
    	{
    		divBodyStyle.width = '100%';
    		divHeader[0].style.width = '100%';
    	}

    	$$7.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {
    		idx = _fnVisibleToColumnIndex( settings, i );
    		el.style.width = settings.aoColumns[idx].sWidth;
    	} );

    	if ( footer ) {
    		_fnApplyToChildren( function(n) {
    			n.style.width = "";
    		}, footerSrcEls );
    	}

    	// Size the table as a whole
    	sanityWidth = table.outerWidth();
    	if ( scrollX === "" ) {
    		// No x scrolling
    		tableStyle.width = "100%";

    		// IE7 will make the width of the table when 100% include the scrollbar
    		// - which is shouldn't. When there is a scrollbar we need to take this
    		// into account.
    		if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
    			divBody.css('overflow-y') == "scroll")
    		) {
    			tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);
    		}

    		// Recalculate the sanity width
    		sanityWidth = table.outerWidth();
    	}
    	else if ( scrollXInner !== "" ) {
    		// legacy x scroll inner has been given - use it
    		tableStyle.width = _fnStringToCss(scrollXInner);

    		// Recalculate the sanity width
    		sanityWidth = table.outerWidth();
    	}

    	// Hidden header should have zero height, so remove padding and borders. Then
    	// set the width based on the real headers

    	// Apply all styles in one pass
    	_fnApplyToChildren( zeroOut, headerSrcEls );

    	// Read all widths in next pass
    	_fnApplyToChildren( function(nSizer) {
    		var style = window.getComputedStyle ?
    			window.getComputedStyle(nSizer).width :
    			_fnStringToCss( $$7(nSizer).width() );

    		headerContent.push( nSizer.innerHTML );
    		headerWidths.push( style );
    	}, headerSrcEls );

    	// Apply all widths in final pass
    	_fnApplyToChildren( function(nToSize, i) {
    		nToSize.style.width = headerWidths[i];
    	}, headerTrgEls );

    	$$7(headerSrcEls).css('height', 0);

    	/* Same again with the footer if we have one */
    	if ( footer )
    	{
    		_fnApplyToChildren( zeroOut, footerSrcEls );

    		_fnApplyToChildren( function(nSizer) {
    			footerContent.push( nSizer.innerHTML );
    			footerWidths.push( _fnStringToCss( $$7(nSizer).css('width') ) );
    		}, footerSrcEls );

    		_fnApplyToChildren( function(nToSize, i) {
    			nToSize.style.width = footerWidths[i];
    		}, footerTrgEls );

    		$$7(footerSrcEls).height(0);
    	}


    	/*
    	 * 3. Apply the measurements
    	 */

    	// "Hide" the header and footer that we used for the sizing. We need to keep
    	// the content of the cell so that the width applied to the header and body
    	// both match, but we want to hide it completely. We want to also fix their
    	// width to what they currently are
    	_fnApplyToChildren( function(nSizer, i) {
    		nSizer.innerHTML = '<div class="dataTables_sizing">'+headerContent[i]+'</div>';
    		nSizer.childNodes[0].style.height = "0";
    		nSizer.childNodes[0].style.overflow = "hidden";
    		nSizer.style.width = headerWidths[i];
    	}, headerSrcEls );

    	if ( footer )
    	{
    		_fnApplyToChildren( function(nSizer, i) {
    			nSizer.innerHTML = '<div class="dataTables_sizing">'+footerContent[i]+'</div>';
    			nSizer.childNodes[0].style.height = "0";
    			nSizer.childNodes[0].style.overflow = "hidden";
    			nSizer.style.width = footerWidths[i];
    		}, footerSrcEls );
    	}

    	// Sanity check that the table is of a sensible width. If not then we are going to get
    	// misalignment - try to prevent this by not allowing the table to shrink below its min width
    	if ( Math.round(table.outerWidth()) < Math.round(sanityWidth) )
    	{
    		// The min width depends upon if we have a vertical scrollbar visible or not */
    		correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
    			divBody.css('overflow-y') == "scroll")) ?
    				sanityWidth+barWidth :
    				sanityWidth;

    		// IE6/7 are a law unto themselves...
    		if ( ie67 && (divBodyEl.scrollHeight >
    			divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")
    		) {
    			tableStyle.width = _fnStringToCss( correction-barWidth );
    		}

    		// And give the user a warning that we've stopped the table getting too small
    		if ( scrollX === "" || scrollXInner !== "" ) {
    			_fnLog( settings, 1, 'Possible column misalignment', 6 );
    		}
    	}
    	else
    	{
    		correction = '100%';
    	}

    	// Apply to the container elements
    	divBodyStyle.width = _fnStringToCss( correction );
    	divHeaderStyle.width = _fnStringToCss( correction );

    	if ( footer ) {
    		settings.nScrollFoot.style.width = _fnStringToCss( correction );
    	}


    	/*
    	 * 4. Clean up
    	 */
    	if ( ! scrollY ) {
    		/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
    		 * the scrollbar height from the visible display, rather than adding it on. We need to
    		 * set the height in order to sort this. Don't want to do it in any other browsers.
    		 */
    		if ( ie67 ) {
    			divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );
    		}
    	}

    	/* Finally set the width's of the header and footer tables */
    	var iOuterWidth = table.outerWidth();
    	divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );
    	divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );

    	// Figure out if there are scrollbar present - if so then we need a the header and footer to
    	// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
    	var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
    	var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );
    	divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+"px" : "0px";

    	if ( footer ) {
    		divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );
    		divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );
    		divFooterInner[0].style[padding] = bScrolling ? barWidth+"px" : "0px";
    	}

    	// Correct DOM ordering for colgroup - comes before the thead
    	table.children('colgroup').insertBefore( table.children('thead') );

    	/* Adjust the position of the header in case we loose the y-scrollbar */
    	divBody.trigger('scroll');

    	// If sorting or filtering has occurred, jump the scrolling back to the top
    	// only if we aren't holding the position
    	if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {
    		divBodyEl.scrollTop = 0;
    	}
    }



    /**
     * Apply a given function to the display child nodes of an element array (typically
     * TD children of TR rows
     *  @param {function} fn Method to apply to the objects
     *  @param array {nodes} an1 List of elements to look through for display children
     *  @param array {nodes} an2 Another list (identical structure to the first) - optional
     *  @memberof DataTable#oApi
     */
    function _fnApplyToChildren( fn, an1, an2 )
    {
    	var index=0, i=0, iLen=an1.length;
    	var nNode1, nNode2;

    	while ( i < iLen ) {
    		nNode1 = an1[i].firstChild;
    		nNode2 = an2 ? an2[i].firstChild : null;

    		while ( nNode1 ) {
    			if ( nNode1.nodeType === 1 ) {
    				if ( an2 ) {
    					fn( nNode1, nNode2, index );
    				}
    				else {
    					fn( nNode1, index );
    				}

    				index++;
    			}

    			nNode1 = nNode1.nextSibling;
    			nNode2 = an2 ? nNode2.nextSibling : null;
    		}

    		i++;
    	}
    }



    var __re_html_remove = /<.*?>/g;


    /**
     * Calculate the width of columns for the table
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnCalculateColumnWidths ( oSettings )
    {
    	var table = oSettings.nTable,
    		columns = oSettings.aoColumns,
    		scroll = oSettings.oScroll,
    		scrollY = scroll.sY,
    		scrollX = scroll.sX,
    		scrollXInner = scroll.sXInner,
    		columnCount = columns.length,
    		visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),
    		headerCells = $$7('th', oSettings.nTHead),
    		tableWidthAttr = table.getAttribute('width'), // from DOM element
    		tableContainer = table.parentNode,
    		userInputs = false,
    		i, column, columnIdx, browser = oSettings.oBrowser,
    		ie67 = browser.bScrollOversize;

    	var styleWidth = table.style.width;
    	if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {
    		tableWidthAttr = styleWidth;
    	}

    	/* Convert any user input sizes into pixel sizes */
    	for ( i=0 ; i<visibleColumns.length ; i++ ) {
    		column = columns[ visibleColumns[i] ];

    		if ( column.sWidth !== null ) {
    			column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );

    			userInputs = true;
    		}
    	}

    	/* If the number of columns in the DOM equals the number that we have to
    	 * process in DataTables, then we can use the offsets that are created by
    	 * the web- browser. No custom sizes can be set in order for this to happen,
    	 * nor scrolling used
    	 */
    	if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&
    	     columnCount == _fnVisbleColumns( oSettings ) &&
    	     columnCount == headerCells.length
    	) {
    		for ( i=0 ; i<columnCount ; i++ ) {
    			var colIdx = _fnVisibleToColumnIndex( oSettings, i );

    			if ( colIdx !== null ) {
    				columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );
    			}
    		}
    	}
    	else
    	{
    		// Otherwise construct a single row, worst case, table with the widest
    		// node in the data, assign any user defined widths, then insert it into
    		// the DOM and allow the browser to do all the hard work of calculating
    		// table widths
    		var tmpTable = $$7(table).clone() // don't use cloneNode - IE8 will remove events on the main table
    			.css( 'visibility', 'hidden' )
    			.removeAttr( 'id' );

    		// Clean up the table body
    		tmpTable.find('tbody tr').remove();
    		var tr = $$7('<tr/>').appendTo( tmpTable.find('tbody') );

    		// Clone the table header and footer - we can't use the header / footer
    		// from the cloned table, since if scrolling is active, the table's
    		// real header and footer are contained in different table tags
    		tmpTable.find('thead, tfoot').remove();
    		tmpTable
    			.append( $$7(oSettings.nTHead).clone() )
    			.append( $$7(oSettings.nTFoot).clone() );

    		// Remove any assigned widths from the footer (from scrolling)
    		tmpTable.find('tfoot th, tfoot td').css('width', '');

    		// Apply custom sizing to the cloned header
    		headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );

    		for ( i=0 ; i<visibleColumns.length ; i++ ) {
    			column = columns[ visibleColumns[i] ];

    			headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
    				_fnStringToCss( column.sWidthOrig ) :
    				'';

    			// For scrollX we need to force the column width otherwise the
    			// browser will collapse it. If this width is smaller than the
    			// width the column requires, then it will have no effect
    			if ( column.sWidthOrig && scrollX ) {
    				$$7( headerCells[i] ).append( $$7('<div/>').css( {
    					width: column.sWidthOrig,
    					margin: 0,
    					padding: 0,
    					border: 0,
    					height: 1
    				} ) );
    			}
    		}

    		// Find the widest cell for each column and put it into the table
    		if ( oSettings.aoData.length ) {
    			for ( i=0 ; i<visibleColumns.length ; i++ ) {
    				columnIdx = visibleColumns[i];
    				column = columns[ columnIdx ];

    				$$7( _fnGetWidestNode( oSettings, columnIdx ) )
    					.clone( false )
    					.append( column.sContentPadding )
    					.appendTo( tr );
    			}
    		}

    		// Tidy the temporary table - remove name attributes so there aren't
    		// duplicated in the dom (radio elements for example)
    		$$7('[name]', tmpTable).removeAttr('name');

    		// Table has been built, attach to the document so we can work with it.
    		// A holding element is used, positioned at the top of the container
    		// with minimal height, so it has no effect on if the container scrolls
    		// or not. Otherwise it might trigger scrolling when it actually isn't
    		// needed
    		var holder = $$7('<div/>').css( scrollX || scrollY ?
    				{
    					position: 'absolute',
    					top: 0,
    					left: 0,
    					height: 1,
    					right: 0,
    					overflow: 'hidden'
    				} :
    				{}
    			)
    			.append( tmpTable )
    			.appendTo( tableContainer );

    		// When scrolling (X or Y) we want to set the width of the table as 
    		// appropriate. However, when not scrolling leave the table width as it
    		// is. This results in slightly different, but I think correct behaviour
    		if ( scrollX && scrollXInner ) {
    			tmpTable.width( scrollXInner );
    		}
    		else if ( scrollX ) {
    			tmpTable.css( 'width', 'auto' );
    			tmpTable.removeAttr('width');

    			// If there is no width attribute or style, then allow the table to
    			// collapse
    			if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {
    				tmpTable.width( tableContainer.clientWidth );
    			}
    		}
    		else if ( scrollY ) {
    			tmpTable.width( tableContainer.clientWidth );
    		}
    		else if ( tableWidthAttr ) {
    			tmpTable.width( tableWidthAttr );
    		}

    		// Get the width of each column in the constructed table - we need to
    		// know the inner width (so it can be assigned to the other table's
    		// cells) and the outer width so we can calculate the full width of the
    		// table. This is safe since DataTables requires a unique cell for each
    		// column, but if ever a header can span multiple columns, this will
    		// need to be modified.
    		var total = 0;
    		for ( i=0 ; i<visibleColumns.length ; i++ ) {
    			var cell = $$7(headerCells[i]);
    			var border = cell.outerWidth() - cell.width();

    			// Use getBounding... where possible (not IE8-) because it can give
    			// sub-pixel accuracy, which we then want to round up!
    			var bounding = browser.bBounding ?
    				Math.ceil( headerCells[i].getBoundingClientRect().width ) :
    				cell.outerWidth();

    			// Total is tracked to remove any sub-pixel errors as the outerWidth
    			// of the table might not equal the total given here (IE!).
    			total += bounding;

    			// Width for each column to use
    			columns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );
    		}

    		table.style.width = _fnStringToCss( total );

    		// Finished with the table - ditch it
    		holder.remove();
    	}

    	// If there is a width attr, we want to attach an event listener which
    	// allows the table sizing to automatically adjust when the window is
    	// resized. Use the width attr rather than CSS, since we can't know if the
    	// CSS is a relative value or absolute - DOM read is always px.
    	if ( tableWidthAttr ) {
    		table.style.width = _fnStringToCss( tableWidthAttr );
    	}

    	if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {
    		var bindResize = function () {
    			$$7(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {
    				_fnAdjustColumnSizing( oSettings );
    			} ) );
    		};

    		// IE6/7 will crash if we bind a resize event handler on page load.
    		// To be removed in 1.11 which drops IE6/7 support
    		if ( ie67 ) {
    			setTimeout( bindResize, 1000 );
    		}
    		else {
    			bindResize();
    		}

    		oSettings._reszEvt = true;
    	}
    }


    /**
     * Throttle the calls to a function. Arguments and context are maintained for
     * the throttled function
     *  @param {function} fn Function to be called
     *  @param {int} [freq=200] call frequency in mS
     *  @returns {function} wrapped function
     *  @memberof DataTable#oApi
     */
    var _fnThrottle = DataTable.util.throttle;


    /**
     * Convert a CSS unit width to pixels (e.g. 2em)
     *  @param {string} width width to be converted
     *  @param {node} parent parent to get the with for (required for relative widths) - optional
     *  @returns {int} width in pixels
     *  @memberof DataTable#oApi
     */
    function _fnConvertToWidth ( width, parent )
    {
    	if ( ! width ) {
    		return 0;
    	}

    	var n = $$7('<div/>')
    		.css( 'width', _fnStringToCss( width ) )
    		.appendTo( parent || document.body );

    	var val = n[0].offsetWidth;
    	n.remove();

    	return val;
    }


    /**
     * Get the widest node
     *  @param {object} settings dataTables settings object
     *  @param {int} colIdx column of interest
     *  @returns {node} widest table node
     *  @memberof DataTable#oApi
     */
    function _fnGetWidestNode( settings, colIdx )
    {
    	var idx = _fnGetMaxLenString( settings, colIdx );
    	if ( idx < 0 ) {
    		return null;
    	}

    	var data = settings.aoData[ idx ];
    	return ! data.nTr ? // Might not have been created when deferred rendering
    		$$7('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :
    		data.anCells[ colIdx ];
    }


    /**
     * Get the maximum strlen for each data column
     *  @param {object} settings dataTables settings object
     *  @param {int} colIdx column of interest
     *  @returns {string} max string length for each column
     *  @memberof DataTable#oApi
     */
    function _fnGetMaxLenString( settings, colIdx )
    {
    	var s, max=-1, maxIdx = -1;

    	for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
    		s = _fnGetCellData( settings, i, colIdx, 'display' )+'';
    		s = s.replace( __re_html_remove, '' );
    		s = s.replace( /&nbsp;/g, ' ' );

    		if ( s.length > max ) {
    			max = s.length;
    			maxIdx = i;
    		}
    	}

    	return maxIdx;
    }


    /**
     * Append a CSS unit (only if required) to a string
     *  @param {string} value to css-ify
     *  @returns {string} value with css unit
     *  @memberof DataTable#oApi
     */
    function _fnStringToCss( s )
    {
    	if ( s === null ) {
    		return '0px';
    	}

    	if ( typeof s == 'number' ) {
    		return s < 0 ?
    			'0px' :
    			s+'px';
    	}

    	// Check it has a unit character already
    	return s.match(/\d$/) ?
    		s+'px' :
    		s;
    }



    function _fnSortFlatten ( settings )
    {
    	var i, k, kLen,
    		aSort = [],
    		aoColumns = settings.aoColumns,
    		aDataSort, iCol, sType, srcCol,
    		fixed = settings.aaSortingFixed,
    		fixedObj = $$7.isPlainObject( fixed ),
    		nestedSort = [],
    		add = function ( a ) {
    			if ( a.length && ! Array.isArray( a[0] ) ) {
    				// 1D array
    				nestedSort.push( a );
    			}
    			else {
    				// 2D array
    				$$7.merge( nestedSort, a );
    			}
    		};

    	// Build the sort array, with pre-fix and post-fix options if they have been
    	// specified
    	if ( Array.isArray( fixed ) ) {
    		add( fixed );
    	}

    	if ( fixedObj && fixed.pre ) {
    		add( fixed.pre );
    	}

    	add( settings.aaSorting );

    	if (fixedObj && fixed.post ) {
    		add( fixed.post );
    	}

    	for ( i=0 ; i<nestedSort.length ; i++ )
    	{
    		srcCol = nestedSort[i][0];
    		aDataSort = aoColumns[ srcCol ].aDataSort;

    		for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )
    		{
    			iCol = aDataSort[k];
    			sType = aoColumns[ iCol ].sType || 'string';

    			if ( nestedSort[i]._idx === undefined ) {
    				nestedSort[i]._idx = $$7.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );
    			}

    			aSort.push( {
    				src:       srcCol,
    				col:       iCol,
    				dir:       nestedSort[i][1],
    				index:     nestedSort[i]._idx,
    				type:      sType,
    				formatter: DataTable.ext.type.order[ sType+"-pre" ]
    			} );
    		}
    	}

    	return aSort;
    }

    /**
     * Change the order of the table
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     *  @todo This really needs split up!
     */
    function _fnSort ( oSettings )
    {
    	var i, ien, iLen, aiOrig = [],
    		oExtSort = DataTable.ext.type.order,
    		aoData = oSettings.aoData;
    		oSettings.aoColumns;
    		var formatters = 0,
    		sortCol,
    		displayMaster = oSettings.aiDisplayMaster,
    		aSort;

    	// Resolve any column types that are unknown due to addition or invalidation
    	// @todo Can this be moved into a 'data-ready' handler which is called when
    	//   data is going to be used in the table?
    	_fnColumnTypes( oSettings );

    	aSort = _fnSortFlatten( oSettings );

    	for ( i=0, ien=aSort.length ; i<ien ; i++ ) {
    		sortCol = aSort[i];

    		// Track if we can use the fast sort algorithm
    		if ( sortCol.formatter ) {
    			formatters++;
    		}

    		// Load the data needed for the sort, for each cell
    		_fnSortData( oSettings, sortCol.col );
    	}

    	/* No sorting required if server-side or no sorting array */
    	if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )
    	{
    		// Create a value - key array of the current row positions such that we can use their
    		// current position during the sort, if values match, in order to perform stable sorting
    		for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {
    			aiOrig[ displayMaster[i] ] = i;
    		}

    		/* Do the sort - here we want multi-column sorting based on a given data source (column)
    		 * and sorting function (from oSort) in a certain direction. It's reasonably complex to
    		 * follow on it's own, but this is what we want (example two column sorting):
    		 *  fnLocalSorting = function(a,b){
    		 *    var iTest;
    		 *    iTest = oSort['string-asc']('data11', 'data12');
    		 *      if (iTest !== 0)
    		 *        return iTest;
    		 *    iTest = oSort['numeric-desc']('data21', 'data22');
    		 *    if (iTest !== 0)
    		 *      return iTest;
    		 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
    		 *  }
    		 * Basically we have a test for each sorting column, if the data in that column is equal,
    		 * test the next column. If all columns match, then we use a numeric sort on the row
    		 * positions in the original data array to provide a stable sort.
    		 *
    		 * Note - I know it seems excessive to have two sorting methods, but the first is around
    		 * 15% faster, so the second is only maintained for backwards compatibility with sorting
    		 * methods which do not have a pre-sort formatting function.
    		 */
    		if ( formatters === aSort.length ) {
    			// All sort types have formatting functions
    			displayMaster.sort( function ( a, b ) {
    				var
    					x, y, k, test, sort,
    					len=aSort.length,
    					dataA = aoData[a]._aSortData,
    					dataB = aoData[b]._aSortData;

    				for ( k=0 ; k<len ; k++ ) {
    					sort = aSort[k];

    					x = dataA[ sort.col ];
    					y = dataB[ sort.col ];

    					test = x<y ? -1 : x>y ? 1 : 0;
    					if ( test !== 0 ) {
    						return sort.dir === 'asc' ? test : -test;
    					}
    				}

    				x = aiOrig[a];
    				y = aiOrig[b];
    				return x<y ? -1 : x>y ? 1 : 0;
    			} );
    		}
    		else {
    			// Depreciated - remove in 1.11 (providing a plug-in option)
    			// Not all sort types have formatting methods, so we have to call their sorting
    			// methods.
    			displayMaster.sort( function ( a, b ) {
    				var x, y, k, test, sort, fn,
    					len=aSort.length,
    					dataA = aoData[a]._aSortData,
    					dataB = aoData[b]._aSortData;

    				for ( k=0 ; k<len ; k++ ) {
    					sort = aSort[k];

    					x = dataA[ sort.col ];
    					y = dataB[ sort.col ];

    					fn = oExtSort[ sort.type+"-"+sort.dir ] || oExtSort[ "string-"+sort.dir ];
    					test = fn( x, y );
    					if ( test !== 0 ) {
    						return test;
    					}
    				}

    				x = aiOrig[a];
    				y = aiOrig[b];
    				return x<y ? -1 : x>y ? 1 : 0;
    			} );
    		}
    	}

    	/* Tell the draw function that we have sorted the data */
    	oSettings.bSorted = true;
    }


    function _fnSortAria ( settings )
    {
    	var label;
    	var nextSort;
    	var columns = settings.aoColumns;
    	var aSort = _fnSortFlatten( settings );
    	var oAria = settings.oLanguage.oAria;

    	// ARIA attributes - need to loop all columns, to update all (removing old
    	// attributes as needed)
    	for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
    	{
    		var col = columns[i];
    		var asSorting = col.asSorting;
    		var sTitle = col.ariaTitle || col.sTitle.replace( /<.*?>/g, "" );
    		var th = col.nTh;

    		// IE7 is throwing an error when setting these properties with jQuery's
    		// attr() and removeAttr() methods...
    		th.removeAttribute('aria-sort');

    		/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
    		if ( col.bSortable ) {
    			if ( aSort.length > 0 && aSort[0].col == i ) {
    				th.setAttribute('aria-sort', aSort[0].dir=="asc" ? "ascending" : "descending" );
    				nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];
    			}
    			else {
    				nextSort = asSorting[0];
    			}

    			label = sTitle + ( nextSort === "asc" ?
    				oAria.sSortAscending :
    				oAria.sSortDescending
    			);
    		}
    		else {
    			label = sTitle;
    		}

    		th.setAttribute('aria-label', label);
    	}
    }


    /**
     * Function to run on user sort request
     *  @param {object} settings dataTables settings object
     *  @param {node} attachTo node to attach the handler to
     *  @param {int} colIdx column sorting index
     *  @param {boolean} [append=false] Append the requested sort to the existing
     *    sort if true (i.e. multi-column sort)
     *  @param {function} [callback] callback function
     *  @memberof DataTable#oApi
     */
    function _fnSortListener ( settings, colIdx, append, callback )
    {
    	var col = settings.aoColumns[ colIdx ];
    	var sorting = settings.aaSorting;
    	var asSorting = col.asSorting;
    	var nextSortIdx;
    	var next = function ( a, overflow ) {
    		var idx = a._idx;
    		if ( idx === undefined ) {
    			idx = $$7.inArray( a[1], asSorting );
    		}

    		return idx+1 < asSorting.length ?
    			idx+1 :
    			overflow ?
    				null :
    				0;
    	};

    	// Convert to 2D array if needed
    	if ( typeof sorting[0] === 'number' ) {
    		sorting = settings.aaSorting = [ sorting ];
    	}

    	// If appending the sort then we are multi-column sorting
    	if ( append && settings.oFeatures.bSortMulti ) {
    		// Are we already doing some kind of sort on this column?
    		var sortIdx = $$7.inArray( colIdx, _pluck(sorting, '0') );

    		if ( sortIdx !== -1 ) {
    			// Yes, modify the sort
    			nextSortIdx = next( sorting[sortIdx], true );

    			if ( nextSortIdx === null && sorting.length === 1 ) {
    				nextSortIdx = 0; // can't remove sorting completely
    			}

    			if ( nextSortIdx === null ) {
    				sorting.splice( sortIdx, 1 );
    			}
    			else {
    				sorting[sortIdx][1] = asSorting[ nextSortIdx ];
    				sorting[sortIdx]._idx = nextSortIdx;
    			}
    		}
    		else {
    			// No sort on this column yet
    			sorting.push( [ colIdx, asSorting[0], 0 ] );
    			sorting[sorting.length-1]._idx = 0;
    		}
    	}
    	else if ( sorting.length && sorting[0][0] == colIdx ) {
    		// Single column - already sorting on this column, modify the sort
    		nextSortIdx = next( sorting[0] );

    		sorting.length = 1;
    		sorting[0][1] = asSorting[ nextSortIdx ];
    		sorting[0]._idx = nextSortIdx;
    	}
    	else {
    		// Single column - sort only on this column
    		sorting.length = 0;
    		sorting.push( [ colIdx, asSorting[0] ] );
    		sorting[0]._idx = 0;
    	}

    	// Run the sort by calling a full redraw
    	_fnReDraw( settings );

    	// callback used for async user interaction
    	if ( typeof callback == 'function' ) {
    		callback( settings );
    	}
    }


    /**
     * Attach a sort handler (click) to a node
     *  @param {object} settings dataTables settings object
     *  @param {node} attachTo node to attach the handler to
     *  @param {int} colIdx column sorting index
     *  @param {function} [callback] callback function
     *  @memberof DataTable#oApi
     */
    function _fnSortAttachListener ( settings, attachTo, colIdx, callback )
    {
    	var col = settings.aoColumns[ colIdx ];

    	_fnBindAction( attachTo, {}, function (e) {
    		/* If the column is not sortable - don't to anything */
    		if ( col.bSortable === false ) {
    			return;
    		}

    		// If processing is enabled use a timeout to allow the processing
    		// display to be shown - otherwise to it synchronously
    		if ( settings.oFeatures.bProcessing ) {
    			_fnProcessingDisplay( settings, true );

    			setTimeout( function() {
    				_fnSortListener( settings, colIdx, e.shiftKey, callback );

    				// In server-side processing, the draw callback will remove the
    				// processing display
    				if ( _fnDataSource( settings ) !== 'ssp' ) {
    					_fnProcessingDisplay( settings, false );
    				}
    			}, 0 );
    		}
    		else {
    			_fnSortListener( settings, colIdx, e.shiftKey, callback );
    		}
    	} );
    }


    /**
     * Set the sorting classes on table's body, Note: it is safe to call this function
     * when bSort and bSortClasses are false
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnSortingClasses( settings )
    {
    	var oldSort = settings.aLastSort;
    	var sortClass = settings.oClasses.sSortColumn;
    	var sort = _fnSortFlatten( settings );
    	var features = settings.oFeatures;
    	var i, ien, colIdx;

    	if ( features.bSort && features.bSortClasses ) {
    		// Remove old sorting classes
    		for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {
    			colIdx = oldSort[i].src;

    			// Remove column sorting
    			$$7( _pluck( settings.aoData, 'anCells', colIdx ) )
    				.removeClass( sortClass + (i<2 ? i+1 : 3) );
    		}

    		// Add new column sorting
    		for ( i=0, ien=sort.length ; i<ien ; i++ ) {
    			colIdx = sort[i].src;

    			$$7( _pluck( settings.aoData, 'anCells', colIdx ) )
    				.addClass( sortClass + (i<2 ? i+1 : 3) );
    		}
    	}

    	settings.aLastSort = sort;
    }


    // Get the data to sort a column, be it from cache, fresh (populating the
    // cache), or from a sort formatter
    function _fnSortData( settings, idx )
    {
    	// Custom sorting function - provided by the sort data type
    	var column = settings.aoColumns[ idx ];
    	var customSort = DataTable.ext.order[ column.sSortDataType ];
    	var customData;

    	if ( customSort ) {
    		customData = customSort.call( settings.oInstance, settings, idx,
    			_fnColumnIndexToVisible( settings, idx )
    		);
    	}

    	// Use / populate cache
    	var row, cellData;
    	var formatter = DataTable.ext.type.order[ column.sType+"-pre" ];

    	for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
    		row = settings.aoData[i];

    		if ( ! row._aSortData ) {
    			row._aSortData = [];
    		}

    		if ( ! row._aSortData[idx] || customSort ) {
    			cellData = customSort ?
    				customData[i] : // If there was a custom sort function, use data from there
    				_fnGetCellData( settings, i, idx, 'sort' );

    			row._aSortData[ idx ] = formatter ?
    				formatter( cellData ) :
    				cellData;
    		}
    	}
    }



    /**
     * Save the state of a table
     *  @param {object} oSettings dataTables settings object
     *  @memberof DataTable#oApi
     */
    function _fnSaveState ( settings )
    {
    	if (settings._bLoadingState) {
    		return;
    	}

    	/* Store the interesting variables */
    	var state = {
    		time:    +new Date(),
    		start:   settings._iDisplayStart,
    		length:  settings._iDisplayLength,
    		order:   $$7.extend( true, [], settings.aaSorting ),
    		search:  _fnSearchToCamel( settings.oPreviousSearch ),
    		columns: $$7.map( settings.aoColumns, function ( col, i ) {
    			return {
    				visible: col.bVisible,
    				search: _fnSearchToCamel( settings.aoPreSearchCols[i] )
    			};
    		} )
    	};

    	settings.oSavedState = state;
    	_fnCallbackFire( settings, "aoStateSaveParams", 'stateSaveParams', [settings, state] );
    	
    	if ( settings.oFeatures.bStateSave && !settings.bDestroying )
    	{
    		settings.fnStateSaveCallback.call( settings.oInstance, settings, state );
    	}	
    }


    /**
     * Attempt to load a saved table state
     *  @param {object} oSettings dataTables settings object
     *  @param {object} oInit DataTables init object so we can override settings
     *  @param {function} callback Callback to execute when the state has been loaded
     *  @memberof DataTable#oApi
     */
    function _fnLoadState ( settings, oInit, callback )
    {
    	if ( ! settings.oFeatures.bStateSave ) {
    		callback();
    		return;
    	}

    	var loaded = function(state) {
    		_fnImplementState(settings, state, callback);
    	};

    	var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );

    	if ( state !== undefined ) {
    		_fnImplementState( settings, state, callback );
    	}
    	// otherwise, wait for the loaded callback to be executed

    	return true;
    }

    function _fnImplementState ( settings, s, callback) {
    	var i, ien;
    	var columns = settings.aoColumns;
    	settings._bLoadingState = true;

    	// When StateRestore was introduced the state could now be implemented at any time
    	// Not just initialisation. To do this an api instance is required in some places
    	var api = settings._bInitComplete ? new DataTable.Api(settings) : null;

    	if ( ! s || ! s.time ) {
    		settings._bLoadingState = false;
    		callback();
    		return;
    	}

    	// Allow custom and plug-in manipulation functions to alter the saved data set and
    	// cancelling of loading by returning false
    	var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );
    	if ( $$7.inArray( false, abStateLoad ) !== -1 ) {
    		settings._bLoadingState = false;
    		callback();
    		return;
    	}

    	// Reject old data
    	var duration = settings.iStateDuration;
    	if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {
    		settings._bLoadingState = false;
    		callback();
    		return;
    	}

    	// Number of columns have changed - all bets are off, no restore of settings
    	if ( s.columns && columns.length !== s.columns.length ) {
    		settings._bLoadingState = false;
    		callback();
    		return;
    	}

    	// Store the saved state so it might be accessed at any time
    	settings.oLoadedState = $$7.extend( true, {}, s );

    	// Page Length
    	if ( s.length !== undefined ) {
    		// If already initialised just set the value directly so that the select element is also updated
    		if (api) {
    			api.page.len(s.length);
    		}
    		else {
    			settings._iDisplayLength   = s.length;
    		}
    	}

    	// Restore key features - todo - for 1.11 this needs to be done by
    	// subscribed events
    	if ( s.start !== undefined ) {
    		if(api === null) {
    			settings._iDisplayStart    = s.start;
    			settings.iInitDisplayStart = s.start;
    		}
    		else {
    			_fnPageChange(settings, s.start/settings._iDisplayLength);
    		}
    	}

    	// Order
    	if ( s.order !== undefined ) {
    		settings.aaSorting = [];
    		$$7.each( s.order, function ( i, col ) {
    			settings.aaSorting.push( col[0] >= columns.length ?
    				[ 0, col[1] ] :
    				col
    			);
    		} );
    	}

    	// Search
    	if ( s.search !== undefined ) {
    		$$7.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );
    	}

    	// Columns
    	if ( s.columns ) {
    		for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {
    			var col = s.columns[i];

    			// Visibility
    			if ( col.visible !== undefined ) {
    				// If the api is defined, the table has been initialised so we need to use it rather than internal settings
    				if (api) {
    					// Don't redraw the columns on every iteration of this loop, we will do this at the end instead
    					api.column(i).visible(col.visible, false);
    				}
    				else {
    					columns[i].bVisible = col.visible;
    				}
    			}

    			// Search
    			if ( col.search !== undefined ) {
    				$$7.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );
    			}
    		}
    		
    		// If the api is defined then we need to adjust the columns once the visibility has been changed
    		if (api) {
    			api.columns.adjust();
    		}
    	}

    	settings._bLoadingState = false;
    	_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );
    	callback();
    }

    /**
     * Return the settings object for a particular table
     *  @param {node} table table we are using as a dataTable
     *  @returns {object} Settings object - or null if not found
     *  @memberof DataTable#oApi
     */
    function _fnSettingsFromNode ( table )
    {
    	var settings = DataTable.settings;
    	var idx = $$7.inArray( table, _pluck( settings, 'nTable' ) );

    	return idx !== -1 ?
    		settings[ idx ] :
    		null;
    }


    /**
     * Log an error message
     *  @param {object} settings dataTables settings object
     *  @param {int} level log error messages, or display them to the user
     *  @param {string} msg error message
     *  @param {int} tn Technical note id to get more information about the error.
     *  @memberof DataTable#oApi
     */
    function _fnLog( settings, level, msg, tn )
    {
    	msg = 'DataTables warning: '+
    		(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;

    	if ( tn ) {
    		msg += '. For more information about this error, please see '+
    		'http://datatables.net/tn/'+tn;
    	}

    	if ( ! level  ) {
    		// Backwards compatibility pre 1.10
    		var ext = DataTable.ext;
    		var type = ext.sErrMode || ext.errMode;

    		if ( settings ) {
    			_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );
    		}

    		if ( type == 'alert' ) {
    			alert( msg );
    		}
    		else if ( type == 'throw' ) {
    			throw new Error(msg);
    		}
    		else if ( typeof type == 'function' ) {
    			type( settings, tn, msg );
    		}
    	}
    	else if ( window.console && console.log ) {
    		console.log( msg );
    	}
    }


    /**
     * See if a property is defined on one object, if so assign it to the other object
     *  @param {object} ret target object
     *  @param {object} src source object
     *  @param {string} name property
     *  @param {string} [mappedName] name to map too - optional, name used if not given
     *  @memberof DataTable#oApi
     */
    function _fnMap( ret, src, name, mappedName )
    {
    	if ( Array.isArray( name ) ) {
    		$$7.each( name, function (i, val) {
    			if ( Array.isArray( val ) ) {
    				_fnMap( ret, src, val[0], val[1] );
    			}
    			else {
    				_fnMap( ret, src, val );
    			}
    		} );

    		return;
    	}

    	if ( mappedName === undefined ) {
    		mappedName = name;
    	}

    	if ( src[name] !== undefined ) {
    		ret[mappedName] = src[name];
    	}
    }


    /**
     * Extend objects - very similar to jQuery.extend, but deep copy objects, and
     * shallow copy arrays. The reason we need to do this, is that we don't want to
     * deep copy array init values (such as aaSorting) since the dev wouldn't be
     * able to override them, but we do want to deep copy arrays.
     *  @param {object} out Object to extend
     *  @param {object} extender Object from which the properties will be applied to
     *      out
     *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
     *      independent copy with the exception of the `data` or `aaData` parameters
     *      if they are present. This is so you can pass in a collection to
     *      DataTables and have that used as your data source without breaking the
     *      references
     *  @returns {object} out Reference, just for convenience - out === the return.
     *  @memberof DataTable#oApi
     *  @todo This doesn't take account of arrays inside the deep copied objects.
     */
    function _fnExtend( out, extender, breakRefs )
    {
    	var val;

    	for ( var prop in extender ) {
    		if ( extender.hasOwnProperty(prop) ) {
    			val = extender[prop];

    			if ( $$7.isPlainObject( val ) ) {
    				if ( ! $$7.isPlainObject( out[prop] ) ) {
    					out[prop] = {};
    				}
    				$$7.extend( true, out[prop], val );
    			}
    			else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && Array.isArray(val) ) {
    				out[prop] = val.slice();
    			}
    			else {
    				out[prop] = val;
    			}
    		}
    	}

    	return out;
    }


    /**
     * Bind an event handers to allow a click or return key to activate the callback.
     * This is good for accessibility since a return on the keyboard will have the
     * same effect as a click, if the element has focus.
     *  @param {element} n Element to bind the action to
     *  @param {object} oData Data object to pass to the triggered function
     *  @param {function} fn Callback function for when the event is triggered
     *  @memberof DataTable#oApi
     */
    function _fnBindAction( n, oData, fn )
    {
    	$$7(n)
    		.on( 'click.DT', oData, function (e) {
    				$$7(n).trigger('blur'); // Remove focus outline for mouse users
    				fn(e);
    			} )
    		.on( 'keypress.DT', oData, function (e){
    				if ( e.which === 13 ) {
    					e.preventDefault();
    					fn(e);
    				}
    			} )
    		.on( 'selectstart.DT', function () {
    				/* Take the brutal approach to cancelling text selection */
    				return false;
    			} );
    }


    /**
     * Register a callback function. Easily allows a callback function to be added to
     * an array store of callback functions that can then all be called together.
     *  @param {object} oSettings dataTables settings object
     *  @param {string} sStore Name of the array storage for the callbacks in oSettings
     *  @param {function} fn Function to be called back
     *  @param {string} sName Identifying name for the callback (i.e. a label)
     *  @memberof DataTable#oApi
     */
    function _fnCallbackReg( oSettings, sStore, fn, sName )
    {
    	if ( fn )
    	{
    		oSettings[sStore].push( {
    			"fn": fn,
    			"sName": sName
    		} );
    	}
    }


    /**
     * Fire callback functions and trigger events. Note that the loop over the
     * callback array store is done backwards! Further note that you do not want to
     * fire off triggers in time sensitive applications (for example cell creation)
     * as its slow.
     *  @param {object} settings dataTables settings object
     *  @param {string} callbackArr Name of the array storage for the callbacks in
     *      oSettings
     *  @param {string} eventName Name of the jQuery custom event to trigger. If
     *      null no trigger is fired
     *  @param {array} args Array of arguments to pass to the callback function /
     *      trigger
     *  @memberof DataTable#oApi
     */
    function _fnCallbackFire( settings, callbackArr, eventName, args )
    {
    	var ret = [];

    	if ( callbackArr ) {
    		ret = $$7.map( settings[callbackArr].slice().reverse(), function (val, i) {
    			return val.fn.apply( settings.oInstance, args );
    		} );
    	}

    	if ( eventName !== null ) {
    		var e = $$7.Event( eventName+'.dt' );
    		var table = $$7(settings.nTable);

    		table.trigger( e, args );

    		// If not yet attached to the document, trigger the event
    		// on the body directly to sort of simulate the bubble
    		if (table.parents('body').length === 0) {
    			$$7('body').trigger( e, args );
    		}

    		ret.push( e.result );
    	}

    	return ret;
    }


    function _fnLengthOverflow ( settings )
    {
    	var
    		start = settings._iDisplayStart,
    		end = settings.fnDisplayEnd(),
    		len = settings._iDisplayLength;

    	/* If we have space to show extra rows (backing up from the end point - then do so */
    	if ( start >= end )
    	{
    		start = end - len;
    	}

    	// Keep the start record on the current page
    	start -= (start % len);

    	if ( len === -1 || start < 0 )
    	{
    		start = 0;
    	}

    	settings._iDisplayStart = start;
    }


    function _fnRenderer( settings, type )
    {
    	var renderer = settings.renderer;
    	var host = DataTable.ext.renderer[type];

    	if ( $$7.isPlainObject( renderer ) && renderer[type] ) {
    		// Specific renderer for this type. If available use it, otherwise use
    		// the default.
    		return host[renderer[type]] || host._;
    	}
    	else if ( typeof renderer === 'string' ) {
    		// Common renderer - if there is one available for this type use it,
    		// otherwise use the default
    		return host[renderer] || host._;
    	}

    	// Use the default
    	return host._;
    }


    /**
     * Detect the data source being used for the table. Used to simplify the code
     * a little (ajax) and to make it compress a little smaller.
     *
     *  @param {object} settings dataTables settings object
     *  @returns {string} Data source
     *  @memberof DataTable#oApi
     */
    function _fnDataSource ( settings )
    {
    	if ( settings.oFeatures.bServerSide ) {
    		return 'ssp';
    	}
    	else if ( settings.ajax || settings.sAjaxSource ) {
    		return 'ajax';
    	}
    	return 'dom';
    }




    /**
     * Computed structure of the DataTables API, defined by the options passed to
     * `DataTable.Api.register()` when building the API.
     *
     * The structure is built in order to speed creation and extension of the Api
     * objects since the extensions are effectively pre-parsed.
     *
     * The array is an array of objects with the following structure, where this
     * base array represents the Api prototype base:
     *
     *     [
     *       {
     *         name:      'data'                -- string   - Property name
     *         val:       function () {},       -- function - Api method (or undefined if just an object
     *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
     *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
     *       },
     *       {
     *         name:     'row'
     *         val:       {},
     *         methodExt: [ ... ],
     *         propExt:   [
     *           {
     *             name:      'data'
     *             val:       function () {},
     *             methodExt: [ ... ],
     *             propExt:   [ ... ]
     *           },
     *           ...
     *         ]
     *       }
     *     ]
     *
     * @type {Array}
     * @ignore
     */
    var __apiStruct = [];


    /**
     * `Array.prototype` reference.
     *
     * @type object
     * @ignore
     */
    var __arrayProto = Array.prototype;


    /**
     * Abstraction for `context` parameter of the `Api` constructor to allow it to
     * take several different forms for ease of use.
     *
     * Each of the input parameter types will be converted to a DataTables settings
     * object where possible.
     *
     * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
     *   of:
     *
     *   * `string` - jQuery selector. Any DataTables' matching the given selector
     *     with be found and used.
     *   * `node` - `TABLE` node which has already been formed into a DataTable.
     *   * `jQuery` - A jQuery object of `TABLE` nodes.
     *   * `object` - DataTables settings object
     *   * `DataTables.Api` - API instance
     * @return {array|null} Matching DataTables settings objects. `null` or
     *   `undefined` is returned if no matching DataTable is found.
     * @ignore
     */
    var _toSettings = function ( mixed )
    {
    	var idx, jq;
    	var settings = DataTable.settings;
    	var tables = $$7.map( settings, function (el, i) {
    		return el.nTable;
    	} );

    	if ( ! mixed ) {
    		return [];
    	}
    	else if ( mixed.nTable && mixed.oApi ) {
    		// DataTables settings object
    		return [ mixed ];
    	}
    	else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {
    		// Table node
    		idx = $$7.inArray( mixed, tables );
    		return idx !== -1 ? [ settings[idx] ] : null;
    	}
    	else if ( mixed && typeof mixed.settings === 'function' ) {
    		return mixed.settings().toArray();
    	}
    	else if ( typeof mixed === 'string' ) {
    		// jQuery selector
    		jq = $$7(mixed);
    	}
    	else if ( mixed instanceof $$7 ) {
    		// jQuery object (also DataTables instance)
    		jq = mixed;
    	}

    	if ( jq ) {
    		return jq.map( function(i) {
    			idx = $$7.inArray( this, tables );
    			return idx !== -1 ? settings[idx] : null;
    		} ).toArray();
    	}
    };


    /**
     * DataTables API class - used to control and interface with  one or more
     * DataTables enhanced tables.
     *
     * The API class is heavily based on jQuery, presenting a chainable interface
     * that you can use to interact with tables. Each instance of the API class has
     * a "context" - i.e. the tables that it will operate on. This could be a single
     * table, all tables on a page or a sub-set thereof.
     *
     * Additionally the API is designed to allow you to easily work with the data in
     * the tables, retrieving and manipulating it as required. This is done by
     * presenting the API class as an array like interface. The contents of the
     * array depend upon the actions requested by each method (for example
     * `rows().nodes()` will return an array of nodes, while `rows().data()` will
     * return an array of objects or arrays depending upon your table's
     * configuration). The API object has a number of array like methods (`push`,
     * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
     * `unique` etc) to assist your working with the data held in a table.
     *
     * Most methods (those which return an Api instance) are chainable, which means
     * the return from a method call also has all of the methods available that the
     * top level object had. For example, these two calls are equivalent:
     *
     *     // Not chained
     *     api.row.add( {...} );
     *     api.draw();
     *
     *     // Chained
     *     api.row.add( {...} ).draw();
     *
     * @class DataTable.Api
     * @param {array|object|string|jQuery} context DataTable identifier. This is
     *   used to define which DataTables enhanced tables this API will operate on.
     *   Can be one of:
     *
     *   * `string` - jQuery selector. Any DataTables' matching the given selector
     *     with be found and used.
     *   * `node` - `TABLE` node which has already been formed into a DataTable.
     *   * `jQuery` - A jQuery object of `TABLE` nodes.
     *   * `object` - DataTables settings object
     * @param {array} [data] Data to initialise the Api instance with.
     *
     * @example
     *   // Direct initialisation during DataTables construction
     *   var api = $('#example').DataTable();
     *
     * @example
     *   // Initialisation using a DataTables jQuery object
     *   var api = $('#example').dataTable().api();
     *
     * @example
     *   // Initialisation as a constructor
     *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
     */
    _Api = function ( context, data )
    {
    	if ( ! (this instanceof _Api) ) {
    		return new _Api( context, data );
    	}

    	var settings = [];
    	var ctxSettings = function ( o ) {
    		var a = _toSettings( o );
    		if ( a ) {
    			settings.push.apply( settings, a );
    		}
    	};

    	if ( Array.isArray( context ) ) {
    		for ( var i=0, ien=context.length ; i<ien ; i++ ) {
    			ctxSettings( context[i] );
    		}
    	}
    	else {
    		ctxSettings( context );
    	}

    	// Remove duplicates
    	this.context = _unique( settings );

    	// Initial data
    	if ( data ) {
    		$$7.merge( this, data );
    	}

    	// selector
    	this.selector = {
    		rows: null,
    		cols: null,
    		opts: null
    	};

    	_Api.extend( this, this, __apiStruct );
    };

    DataTable.Api = _Api;

    // Don't destroy the existing prototype, just extend it. Required for jQuery 2's
    // isPlainObject.
    $$7.extend( _Api.prototype, {
    	any: function ()
    	{
    		return this.count() !== 0;
    	},


    	concat:  __arrayProto.concat,


    	context: [], // array of table settings objects


    	count: function ()
    	{
    		return this.flatten().length;
    	},


    	each: function ( fn )
    	{
    		for ( var i=0, ien=this.length ; i<ien; i++ ) {
    			fn.call( this, this[i], i, this );
    		}

    		return this;
    	},


    	eq: function ( idx )
    	{
    		var ctx = this.context;

    		return ctx.length > idx ?
    			new _Api( ctx[idx], this[idx] ) :
    			null;
    	},


    	filter: function ( fn )
    	{
    		var a = [];

    		if ( __arrayProto.filter ) {
    			a = __arrayProto.filter.call( this, fn, this );
    		}
    		else {
    			// Compatibility for browsers without EMCA-252-5 (JS 1.6)
    			for ( var i=0, ien=this.length ; i<ien ; i++ ) {
    				if ( fn.call( this, this[i], i, this ) ) {
    					a.push( this[i] );
    				}
    			}
    		}

    		return new _Api( this.context, a );
    	},


    	flatten: function ()
    	{
    		var a = [];
    		return new _Api( this.context, a.concat.apply( a, this.toArray() ) );
    	},


    	join:    __arrayProto.join,


    	indexOf: __arrayProto.indexOf || function (obj, start)
    	{
    		for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {
    			if ( this[i] === obj ) {
    				return i;
    			}
    		}
    		return -1;
    	},

    	iterator: function ( flatten, type, fn, alwaysNew ) {
    		var
    			a = [], ret,
    			i, ien, j, jen,
    			context = this.context,
    			rows, items, item,
    			selector = this.selector;

    		// Argument shifting
    		if ( typeof flatten === 'string' ) {
    			alwaysNew = fn;
    			fn = type;
    			type = flatten;
    			flatten = false;
    		}

    		for ( i=0, ien=context.length ; i<ien ; i++ ) {
    			var apiInst = new _Api( context[i] );

    			if ( type === 'table' ) {
    				ret = fn.call( apiInst, context[i], i );

    				if ( ret !== undefined ) {
    					a.push( ret );
    				}
    			}
    			else if ( type === 'columns' || type === 'rows' ) {
    				// this has same length as context - one entry for each table
    				ret = fn.call( apiInst, context[i], this[i], i );

    				if ( ret !== undefined ) {
    					a.push( ret );
    				}
    			}
    			else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {
    				// columns and rows share the same structure.
    				// 'this' is an array of column indexes for each context
    				items = this[i];

    				if ( type === 'column-rows' ) {
    					rows = _selector_row_indexes( context[i], selector.opts );
    				}

    				for ( j=0, jen=items.length ; j<jen ; j++ ) {
    					item = items[j];

    					if ( type === 'cell' ) {
    						ret = fn.call( apiInst, context[i], item.row, item.column, i, j );
    					}
    					else {
    						ret = fn.call( apiInst, context[i], item, i, j, rows );
    					}

    					if ( ret !== undefined ) {
    						a.push( ret );
    					}
    				}
    			}
    		}

    		if ( a.length || alwaysNew ) {
    			var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );
    			var apiSelector = api.selector;
    			apiSelector.rows = selector.rows;
    			apiSelector.cols = selector.cols;
    			apiSelector.opts = selector.opts;
    			return api;
    		}
    		return this;
    	},


    	lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)
    	{
    		// Bit cheeky...
    		return this.indexOf.apply( this.toArray.reverse(), arguments );
    	},


    	length:  0,


    	map: function ( fn )
    	{
    		var a = [];

    		if ( __arrayProto.map ) {
    			a = __arrayProto.map.call( this, fn, this );
    		}
    		else {
    			// Compatibility for browsers without EMCA-252-5 (JS 1.6)
    			for ( var i=0, ien=this.length ; i<ien ; i++ ) {
    				a.push( fn.call( this, this[i], i ) );
    			}
    		}

    		return new _Api( this.context, a );
    	},


    	pluck: function ( prop )
    	{
    		var fn = DataTable.util.get(prop);

    		return this.map( function ( el ) {
    			return fn(el);
    		} );
    	},

    	pop:     __arrayProto.pop,


    	push:    __arrayProto.push,


    	// Does not return an API instance
    	reduce: __arrayProto.reduce || function ( fn, init )
    	{
    		return _fnReduce( this, fn, init, 0, this.length, 1 );
    	},


    	reduceRight: __arrayProto.reduceRight || function ( fn, init )
    	{
    		return _fnReduce( this, fn, init, this.length-1, -1, -1 );
    	},


    	reverse: __arrayProto.reverse,


    	// Object with rows, columns and opts
    	selector: null,


    	shift:   __arrayProto.shift,


    	slice: function () {
    		return new _Api( this.context, this );
    	},


    	sort:    __arrayProto.sort, // ? name - order?


    	splice:  __arrayProto.splice,


    	toArray: function ()
    	{
    		return __arrayProto.slice.call( this );
    	},


    	to$: function ()
    	{
    		return $$7( this );
    	},


    	toJQuery: function ()
    	{
    		return $$7( this );
    	},


    	unique: function ()
    	{
    		return new _Api( this.context, _unique(this) );
    	},


    	unshift: __arrayProto.unshift
    } );


    _Api.extend = function ( scope, obj, ext )
    {
    	// Only extend API instances and static properties of the API
    	if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {
    		return;
    	}

    	var
    		i, ien,
    		struct,
    		methodScoping = function ( scope, fn, struc ) {
    			return function () {
    				var ret = fn.apply( scope, arguments );

    				// Method extension
    				_Api.extend( ret, ret, struc.methodExt );
    				return ret;
    			};
    		};

    	for ( i=0, ien=ext.length ; i<ien ; i++ ) {
    		struct = ext[i];

    		// Value
    		obj[ struct.name ] = struct.type === 'function' ?
    			methodScoping( scope, struct.val, struct ) :
    			struct.type === 'object' ?
    				{} :
    				struct.val;

    		obj[ struct.name ].__dt_wrapper = true;

    		// Property extension
    		_Api.extend( scope, obj[ struct.name ], struct.propExt );
    	}
    };


    // @todo - Is there need for an augment function?
    // _Api.augment = function ( inst, name )
    // {
    // 	// Find src object in the structure from the name
    // 	var parts = name.split('.');

    // 	_Api.extend( inst, obj );
    // };


    //     [
    //       {
    //         name:      'data'                -- string   - Property name
    //         val:       function () {},       -- function - Api method (or undefined if just an object
    //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
    //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
    //       },
    //       {
    //         name:     'row'
    //         val:       {},
    //         methodExt: [ ... ],
    //         propExt:   [
    //           {
    //             name:      'data'
    //             val:       function () {},
    //             methodExt: [ ... ],
    //             propExt:   [ ... ]
    //           },
    //           ...
    //         ]
    //       }
    //     ]

    _Api.register = _api_register = function ( name, val )
    {
    	if ( Array.isArray( name ) ) {
    		for ( var j=0, jen=name.length ; j<jen ; j++ ) {
    			_Api.register( name[j], val );
    		}
    		return;
    	}

    	var
    		i, ien,
    		heir = name.split('.'),
    		struct = __apiStruct,
    		key, method;

    	var find = function ( src, name ) {
    		for ( var i=0, ien=src.length ; i<ien ; i++ ) {
    			if ( src[i].name === name ) {
    				return src[i];
    			}
    		}
    		return null;
    	};

    	for ( i=0, ien=heir.length ; i<ien ; i++ ) {
    		method = heir[i].indexOf('()') !== -1;
    		key = method ?
    			heir[i].replace('()', '') :
    			heir[i];

    		var src = find( struct, key );
    		if ( ! src ) {
    			src = {
    				name:      key,
    				val:       {},
    				methodExt: [],
    				propExt:   [],
    				type:      'object'
    			};
    			struct.push( src );
    		}

    		if ( i === ien-1 ) {
    			src.val = val;
    			src.type = typeof val === 'function' ?
    				'function' :
    				$$7.isPlainObject( val ) ?
    					'object' :
    					'other';
    		}
    		else {
    			struct = method ?
    				src.methodExt :
    				src.propExt;
    		}
    	}
    };

    _Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {
    	_Api.register( pluralName, val );

    	_Api.register( singularName, function () {
    		var ret = val.apply( this, arguments );

    		if ( ret === this ) {
    			// Returned item is the API instance that was passed in, return it
    			return this;
    		}
    		else if ( ret instanceof _Api ) {
    			// New API instance returned, want the value from the first item
    			// in the returned array for the singular result.
    			return ret.length ?
    				Array.isArray( ret[0] ) ?
    					new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'
    					ret[0] :
    				undefined;
    		}

    		// Non-API return - just fire it back
    		return ret;
    	} );
    };


    /**
     * Selector for HTML tables. Apply the given selector to the give array of
     * DataTables settings objects.
     *
     * @param {string|integer} [selector] jQuery selector string or integer
     * @param  {array} Array of DataTables settings objects to be filtered
     * @return {array}
     * @ignore
     */
    var __table_selector = function ( selector, a )
    {
    	if ( Array.isArray(selector) ) {
    		return $$7.map( selector, function (item) {
    			return __table_selector(item, a);
    		} );
    	}

    	// Integer is used to pick out a table by index
    	if ( typeof selector === 'number' ) {
    		return [ a[ selector ] ];
    	}

    	// Perform a jQuery selector on the table nodes
    	var nodes = $$7.map( a, function (el, i) {
    		return el.nTable;
    	} );

    	return $$7(nodes)
    		.filter( selector )
    		.map( function (i) {
    			// Need to translate back from the table node to the settings
    			var idx = $$7.inArray( this, nodes );
    			return a[ idx ];
    		} )
    		.toArray();
    };



    /**
     * Context selector for the API's context (i.e. the tables the API instance
     * refers to.
     *
     * @name    DataTable.Api#tables
     * @param {string|integer} [selector] Selector to pick which tables the iterator
     *   should operate on. If not given, all tables in the current context are
     *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
     *   select multiple tables or as an integer to select a single table.
     * @returns {DataTable.Api} Returns a new API instance if a selector is given.
     */
    _api_register( 'tables()', function ( selector ) {
    	// A new instance is created if there was a selector specified
    	return selector !== undefined && selector !== null ?
    		new _Api( __table_selector( selector, this.context ) ) :
    		this;
    } );


    _api_register( 'table()', function ( selector ) {
    	var tables = this.tables( selector );
    	var ctx = tables.context;

    	// Truncate to the first matched table
    	return ctx.length ?
    		new _Api( ctx[0] ) :
    		tables;
    } );


    _api_registerPlural( 'tables().nodes()', 'table().node()' , function () {
    	return this.iterator( 'table', function ( ctx ) {
    		return ctx.nTable;
    	}, 1 );
    } );


    _api_registerPlural( 'tables().body()', 'table().body()' , function () {
    	return this.iterator( 'table', function ( ctx ) {
    		return ctx.nTBody;
    	}, 1 );
    } );


    _api_registerPlural( 'tables().header()', 'table().header()' , function () {
    	return this.iterator( 'table', function ( ctx ) {
    		return ctx.nTHead;
    	}, 1 );
    } );


    _api_registerPlural( 'tables().footer()', 'table().footer()' , function () {
    	return this.iterator( 'table', function ( ctx ) {
    		return ctx.nTFoot;
    	}, 1 );
    } );


    _api_registerPlural( 'tables().containers()', 'table().container()' , function () {
    	return this.iterator( 'table', function ( ctx ) {
    		return ctx.nTableWrapper;
    	}, 1 );
    } );



    /**
     * Redraw the tables in the current context.
     */
    _api_register( 'draw()', function ( paging ) {
    	return this.iterator( 'table', function ( settings ) {
    		if ( paging === 'page' ) {
    			_fnDraw( settings );
    		}
    		else {
    			if ( typeof paging === 'string' ) {
    				paging = paging === 'full-hold' ?
    					false :
    					true;
    			}

    			_fnReDraw( settings, paging===false );
    		}
    	} );
    } );



    /**
     * Get the current page index.
     *
     * @return {integer} Current page index (zero based)
     *//**
     * Set the current page.
     *
     * Note that if you attempt to show a page which does not exist, DataTables will
     * not throw an error, but rather reset the paging.
     *
     * @param {integer|string} action The paging action to take. This can be one of:
     *  * `integer` - The page index to jump to
     *  * `string` - An action to take:
     *    * `first` - Jump to first page.
     *    * `next` - Jump to the next page
     *    * `previous` - Jump to previous page
     *    * `last` - Jump to the last page.
     * @returns {DataTables.Api} this
     */
    _api_register( 'page()', function ( action ) {
    	if ( action === undefined ) {
    		return this.page.info().page; // not an expensive call
    	}

    	// else, have an action to take on all tables
    	return this.iterator( 'table', function ( settings ) {
    		_fnPageChange( settings, action );
    	} );
    } );


    /**
     * Paging information for the first table in the current context.
     *
     * If you require paging information for another table, use the `table()` method
     * with a suitable selector.
     *
     * @return {object} Object with the following properties set:
     *  * `page` - Current page index (zero based - i.e. the first page is `0`)
     *  * `pages` - Total number of pages
     *  * `start` - Display index for the first record shown on the current page
     *  * `end` - Display index for the last record shown on the current page
     *  * `length` - Display length (number of records). Note that generally `start
     *    + length = end`, but this is not always true, for example if there are
     *    only 2 records to show on the final page, with a length of 10.
     *  * `recordsTotal` - Full data set length
     *  * `recordsDisplay` - Data set length once the current filtering criterion
     *    are applied.
     */
    _api_register( 'page.info()', function ( action ) {
    	if ( this.context.length === 0 ) {
    		return undefined;
    	}

    	var
    		settings   = this.context[0],
    		start      = settings._iDisplayStart,
    		len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
    		visRecords = settings.fnRecordsDisplay(),
    		all        = len === -1;

    	return {
    		"page":           all ? 0 : Math.floor( start / len ),
    		"pages":          all ? 1 : Math.ceil( visRecords / len ),
    		"start":          start,
    		"end":            settings.fnDisplayEnd(),
    		"length":         len,
    		"recordsTotal":   settings.fnRecordsTotal(),
    		"recordsDisplay": visRecords,
    		"serverSide":     _fnDataSource( settings ) === 'ssp'
    	};
    } );


    /**
     * Get the current page length.
     *
     * @return {integer} Current page length. Note `-1` indicates that all records
     *   are to be shown.
     *//**
     * Set the current page length.
     *
     * @param {integer} Page length to set. Use `-1` to show all records.
     * @returns {DataTables.Api} this
     */
    _api_register( 'page.len()', function ( len ) {
    	// Note that we can't call this function 'length()' because `length`
    	// is a Javascript property of functions which defines how many arguments
    	// the function expects.
    	if ( len === undefined ) {
    		return this.context.length !== 0 ?
    			this.context[0]._iDisplayLength :
    			undefined;
    	}

    	// else, set the page length
    	return this.iterator( 'table', function ( settings ) {
    		_fnLengthChange( settings, len );
    	} );
    } );



    var __reload = function ( settings, holdPosition, callback ) {
    	// Use the draw event to trigger a callback
    	if ( callback ) {
    		var api = new _Api( settings );

    		api.one( 'draw', function () {
    			callback( api.ajax.json() );
    		} );
    	}

    	if ( _fnDataSource( settings ) == 'ssp' ) {
    		_fnReDraw( settings, holdPosition );
    	}
    	else {
    		_fnProcessingDisplay( settings, true );

    		// Cancel an existing request
    		var xhr = settings.jqXHR;
    		if ( xhr && xhr.readyState !== 4 ) {
    			xhr.abort();
    		}

    		// Trigger xhr
    		_fnBuildAjax( settings, [], function( json ) {
    			_fnClearTable( settings );

    			var data = _fnAjaxDataSrc( settings, json );
    			for ( var i=0, ien=data.length ; i<ien ; i++ ) {
    				_fnAddData( settings, data[i] );
    			}

    			_fnReDraw( settings, holdPosition );
    			_fnProcessingDisplay( settings, false );
    		} );
    	}
    };


    /**
     * Get the JSON response from the last Ajax request that DataTables made to the
     * server. Note that this returns the JSON from the first table in the current
     * context.
     *
     * @return {object} JSON received from the server.
     */
    _api_register( 'ajax.json()', function () {
    	var ctx = this.context;

    	if ( ctx.length > 0 ) {
    		return ctx[0].json;
    	}

    	// else return undefined;
    } );


    /**
     * Get the data submitted in the last Ajax request
     */
    _api_register( 'ajax.params()', function () {
    	var ctx = this.context;

    	if ( ctx.length > 0 ) {
    		return ctx[0].oAjaxData;
    	}

    	// else return undefined;
    } );


    /**
     * Reload tables from the Ajax data source. Note that this function will
     * automatically re-draw the table when the remote data has been loaded.
     *
     * @param {boolean} [reset=true] Reset (default) or hold the current paging
     *   position. A full re-sort and re-filter is performed when this method is
     *   called, which is why the pagination reset is the default action.
     * @returns {DataTables.Api} this
     */
    _api_register( 'ajax.reload()', function ( callback, resetPaging ) {
    	return this.iterator( 'table', function (settings) {
    		__reload( settings, resetPaging===false, callback );
    	} );
    } );


    /**
     * Get the current Ajax URL. Note that this returns the URL from the first
     * table in the current context.
     *
     * @return {string} Current Ajax source URL
     *//**
     * Set the Ajax URL. Note that this will set the URL for all tables in the
     * current context.
     *
     * @param {string} url URL to set.
     * @returns {DataTables.Api} this
     */
    _api_register( 'ajax.url()', function ( url ) {
    	var ctx = this.context;

    	if ( url === undefined ) {
    		// get
    		if ( ctx.length === 0 ) {
    			return undefined;
    		}
    		ctx = ctx[0];

    		return ctx.ajax ?
    			$$7.isPlainObject( ctx.ajax ) ?
    				ctx.ajax.url :
    				ctx.ajax :
    			ctx.sAjaxSource;
    	}

    	// set
    	return this.iterator( 'table', function ( settings ) {
    		if ( $$7.isPlainObject( settings.ajax ) ) {
    			settings.ajax.url = url;
    		}
    		else {
    			settings.ajax = url;
    		}
    		// No need to consider sAjaxSource here since DataTables gives priority
    		// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
    		// value of `sAjaxSource` redundant.
    	} );
    } );


    /**
     * Load data from the newly set Ajax URL. Note that this method is only
     * available when `ajax.url()` is used to set a URL. Additionally, this method
     * has the same effect as calling `ajax.reload()` but is provided for
     * convenience when setting a new URL. Like `ajax.reload()` it will
     * automatically redraw the table once the remote data has been loaded.
     *
     * @returns {DataTables.Api} this
     */
    _api_register( 'ajax.url().load()', function ( callback, resetPaging ) {
    	// Same as a reload, but makes sense to present it for easy access after a
    	// url change
    	return this.iterator( 'table', function ( ctx ) {
    		__reload( ctx, resetPaging===false, callback );
    	} );
    } );




    var _selector_run = function ( type, selector, selectFn, settings, opts )
    {
    	var
    		out = [], res,
    		a, i, ien, j, jen,
    		selectorType = typeof selector;

    	// Can't just check for isArray here, as an API or jQuery instance might be
    	// given with their array like look
    	if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {
    		selector = [ selector ];
    	}

    	for ( i=0, ien=selector.length ; i<ien ; i++ ) {
    		// Only split on simple strings - complex expressions will be jQuery selectors
    		a = selector[i] && selector[i].split && ! selector[i].match(/[\[\(:]/) ?
    			selector[i].split(',') :
    			[ selector[i] ];

    		for ( j=0, jen=a.length ; j<jen ; j++ ) {
    			res = selectFn( typeof a[j] === 'string' ? (a[j]).trim() : a[j] );

    			if ( res && res.length ) {
    				out = out.concat( res );
    			}
    		}
    	}

    	// selector extensions
    	var ext = _ext.selector[ type ];
    	if ( ext.length ) {
    		for ( i=0, ien=ext.length ; i<ien ; i++ ) {
    			out = ext[i]( settings, opts, out );
    		}
    	}

    	return _unique( out );
    };


    var _selector_opts = function ( opts )
    {
    	if ( ! opts ) {
    		opts = {};
    	}

    	// Backwards compatibility for 1.9- which used the terminology filter rather
    	// than search
    	if ( opts.filter && opts.search === undefined ) {
    		opts.search = opts.filter;
    	}

    	return $$7.extend( {
    		search: 'none',
    		order: 'current',
    		page: 'all'
    	}, opts );
    };


    var _selector_first = function ( inst )
    {
    	// Reduce the API instance to the first item found
    	for ( var i=0, ien=inst.length ; i<ien ; i++ ) {
    		if ( inst[i].length > 0 ) {
    			// Assign the first element to the first item in the instance
    			// and truncate the instance and context
    			inst[0] = inst[i];
    			inst[0].length = 1;
    			inst.length = 1;
    			inst.context = [ inst.context[i] ];

    			return inst;
    		}
    	}

    	// Not found - return an empty instance
    	inst.length = 0;
    	return inst;
    };


    var _selector_row_indexes = function ( settings, opts )
    {
    	var
    		i, ien, tmp, a=[],
    		displayFiltered = settings.aiDisplay,
    		displayMaster = settings.aiDisplayMaster;

    	var
    		search = opts.search,  // none, applied, removed
    		order  = opts.order,   // applied, current, index (original - compatibility with 1.9)
    		page   = opts.page;    // all, current

    	if ( _fnDataSource( settings ) == 'ssp' ) {
    		// In server-side processing mode, most options are irrelevant since
    		// rows not shown don't exist and the index order is the applied order
    		// Removed is a special case - for consistency just return an empty
    		// array
    		return search === 'removed' ?
    			[] :
    			_range( 0, displayMaster.length );
    	}
    	else if ( page == 'current' ) {
    		// Current page implies that order=current and filter=applied, since it is
    		// fairly senseless otherwise, regardless of what order and search actually
    		// are
    		for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {
    			a.push( displayFiltered[i] );
    		}
    	}
    	else if ( order == 'current' || order == 'applied' ) {
    		if ( search == 'none') {
    			a = displayMaster.slice();
    		}
    		else if ( search == 'applied' ) {
    			a = displayFiltered.slice();
    		}
    		else if ( search == 'removed' ) {
    			// O(n+m) solution by creating a hash map
    			var displayFilteredMap = {};

    			for ( var i=0, ien=displayFiltered.length ; i<ien ; i++ ) {
    				displayFilteredMap[displayFiltered[i]] = null;
    			}

    			a = $$7.map( displayMaster, function (el) {
    				return ! displayFilteredMap.hasOwnProperty(el) ?
    					el :
    					null;
    			} );
    		}
    	}
    	else if ( order == 'index' || order == 'original' ) {
    		for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
    			if ( search == 'none' ) {
    				a.push( i );
    			}
    			else { // applied | removed
    				tmp = $$7.inArray( i, displayFiltered );

    				if ((tmp === -1 && search == 'removed') ||
    					(tmp >= 0   && search == 'applied') )
    				{
    					a.push( i );
    				}
    			}
    		}
    	}

    	return a;
    };


    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Rows
     *
     * {}          - no selector - use all available rows
     * {integer}   - row aoData index
     * {node}      - TR node
     * {string}    - jQuery selector to apply to the TR elements
     * {array}     - jQuery array of nodes, or simply an array of TR nodes
     *
     */
    var __row_selector = function ( settings, selector, opts )
    {
    	var rows;
    	var run = function ( sel ) {
    		var selInt = _intVal( sel );
    		var aoData = settings.aoData;

    		// Short cut - selector is a number and no options provided (default is
    		// all records, so no need to check if the index is in there, since it
    		// must be - dev error if the index doesn't exist).
    		if ( selInt !== null && ! opts ) {
    			return [ selInt ];
    		}

    		if ( ! rows ) {
    			rows = _selector_row_indexes( settings, opts );
    		}

    		if ( selInt !== null && $$7.inArray( selInt, rows ) !== -1 ) {
    			// Selector - integer
    			return [ selInt ];
    		}
    		else if ( sel === null || sel === undefined || sel === '' ) {
    			// Selector - none
    			return rows;
    		}

    		// Selector - function
    		if ( typeof sel === 'function' ) {
    			return $$7.map( rows, function (idx) {
    				var row = aoData[ idx ];
    				return sel( idx, row._aData, row.nTr ) ? idx : null;
    			} );
    		}

    		// Selector - node
    		if ( sel.nodeName ) {
    			var rowIdx = sel._DT_RowIndex;  // Property added by DT for fast lookup
    			var cellIdx = sel._DT_CellIndex;

    			if ( rowIdx !== undefined ) {
    				// Make sure that the row is actually still present in the table
    				return aoData[ rowIdx ] && aoData[ rowIdx ].nTr === sel ?
    					[ rowIdx ] :
    					[];
    			}
    			else if ( cellIdx ) {
    				return aoData[ cellIdx.row ] && aoData[ cellIdx.row ].nTr === sel.parentNode ?
    					[ cellIdx.row ] :
    					[];
    			}
    			else {
    				var host = $$7(sel).closest('*[data-dt-row]');
    				return host.length ?
    					[ host.data('dt-row') ] :
    					[];
    			}
    		}

    		// ID selector. Want to always be able to select rows by id, regardless
    		// of if the tr element has been created or not, so can't rely upon
    		// jQuery here - hence a custom implementation. This does not match
    		// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
    		// but to select it using a CSS selector engine (like Sizzle or
    		// querySelect) it would need to need to be escaped for some characters.
    		// DataTables simplifies this for row selectors since you can select
    		// only a row. A # indicates an id any anything that follows is the id -
    		// unescaped.
    		if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {
    			// get row index from id
    			var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];
    			if ( rowObj !== undefined ) {
    				return [ rowObj.idx ];
    			}

    			// need to fall through to jQuery in case there is DOM id that
    			// matches
    		}
    		
    		// Get nodes in the order from the `rows` array with null values removed
    		var nodes = _removeEmpty(
    			_pluck_order( settings.aoData, rows, 'nTr' )
    		);

    		// Selector - jQuery selector string, array of nodes or jQuery object/
    		// As jQuery's .filter() allows jQuery objects to be passed in filter,
    		// it also allows arrays, so this will cope with all three options
    		return $$7(nodes)
    			.filter( sel )
    			.map( function () {
    				return this._DT_RowIndex;
    			} )
    			.toArray();
    	};

    	return _selector_run( 'row', selector, run, settings, opts );
    };


    _api_register( 'rows()', function ( selector, opts ) {
    	// argument shifting
    	if ( selector === undefined ) {
    		selector = '';
    	}
    	else if ( $$7.isPlainObject( selector ) ) {
    		opts = selector;
    		selector = '';
    	}

    	opts = _selector_opts( opts );

    	var inst = this.iterator( 'table', function ( settings ) {
    		return __row_selector( settings, selector, opts );
    	}, 1 );

    	// Want argument shifting here and in __row_selector?
    	inst.selector.rows = selector;
    	inst.selector.opts = opts;

    	return inst;
    } );

    _api_register( 'rows().nodes()', function () {
    	return this.iterator( 'row', function ( settings, row ) {
    		return settings.aoData[ row ].nTr || undefined;
    	}, 1 );
    } );

    _api_register( 'rows().data()', function () {
    	return this.iterator( true, 'rows', function ( settings, rows ) {
    		return _pluck_order( settings.aoData, rows, '_aData' );
    	}, 1 );
    } );

    _api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {
    	return this.iterator( 'row', function ( settings, row ) {
    		var r = settings.aoData[ row ];
    		return type === 'search' ? r._aFilterData : r._aSortData;
    	}, 1 );
    } );

    _api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {
    	return this.iterator( 'row', function ( settings, row ) {
    		_fnInvalidate( settings, row, src );
    	} );
    } );

    _api_registerPlural( 'rows().indexes()', 'row().index()', function () {
    	return this.iterator( 'row', function ( settings, row ) {
    		return row;
    	}, 1 );
    } );

    _api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {
    	var a = [];
    	var context = this.context;

    	// `iterator` will drop undefined values, but in this case we want them
    	for ( var i=0, ien=context.length ; i<ien ; i++ ) {
    		for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {
    			var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );
    			a.push( (hash === true ? '#' : '' )+ id );
    		}
    	}

    	return new _Api( context, a );
    } );

    _api_registerPlural( 'rows().remove()', 'row().remove()', function () {
    	var that = this;

    	this.iterator( 'row', function ( settings, row, thatIdx ) {
    		var data = settings.aoData;
    		var rowData = data[ row ];
    		var i, ien, j, jen;
    		var loopRow, loopCells;

    		data.splice( row, 1 );

    		// Update the cached indexes
    		for ( i=0, ien=data.length ; i<ien ; i++ ) {
    			loopRow = data[i];
    			loopCells = loopRow.anCells;

    			// Rows
    			if ( loopRow.nTr !== null ) {
    				loopRow.nTr._DT_RowIndex = i;
    			}

    			// Cells
    			if ( loopCells !== null ) {
    				for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {
    					loopCells[j]._DT_CellIndex.row = i;
    				}
    			}
    		}

    		// Delete from the display arrays
    		_fnDeleteIndex( settings.aiDisplayMaster, row );
    		_fnDeleteIndex( settings.aiDisplay, row );
    		_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes

    		// For server-side processing tables - subtract the deleted row from the count
    		if ( settings._iRecordsDisplay > 0 ) {
    			settings._iRecordsDisplay--;
    		}

    		// Check for an 'overflow' they case for displaying the table
    		_fnLengthOverflow( settings );

    		// Remove the row's ID reference if there is one
    		var id = settings.rowIdFn( rowData._aData );
    		if ( id !== undefined ) {
    			delete settings.aIds[ id ];
    		}
    	} );

    	this.iterator( 'table', function ( settings ) {
    		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
    			settings.aoData[i].idx = i;
    		}
    	} );

    	return this;
    } );


    _api_register( 'rows.add()', function ( rows ) {
    	var newRows = this.iterator( 'table', function ( settings ) {
    			var row, i, ien;
    			var out = [];

    			for ( i=0, ien=rows.length ; i<ien ; i++ ) {
    				row = rows[i];

    				if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
    					out.push( _fnAddTr( settings, row )[0] );
    				}
    				else {
    					out.push( _fnAddData( settings, row ) );
    				}
    			}

    			return out;
    		}, 1 );

    	// Return an Api.rows() extended instance, so rows().nodes() etc can be used
    	var modRows = this.rows( -1 );
    	modRows.pop();
    	$$7.merge( modRows, newRows );

    	return modRows;
    } );





    /**
     *
     */
    _api_register( 'row()', function ( selector, opts ) {
    	return _selector_first( this.rows( selector, opts ) );
    } );


    _api_register( 'row().data()', function ( data ) {
    	var ctx = this.context;

    	if ( data === undefined ) {
    		// Get
    		return ctx.length && this.length ?
    			ctx[0].aoData[ this[0] ]._aData :
    			undefined;
    	}

    	// Set
    	var row = ctx[0].aoData[ this[0] ];
    	row._aData = data;

    	// If the DOM has an id, and the data source is an array
    	if ( Array.isArray( data ) && row.nTr && row.nTr.id ) {
    		_fnSetObjectDataFn( ctx[0].rowId )( data, row.nTr.id );
    	}

    	// Automatically invalidate
    	_fnInvalidate( ctx[0], this[0], 'data' );

    	return this;
    } );


    _api_register( 'row().node()', function () {
    	var ctx = this.context;

    	return ctx.length && this.length ?
    		ctx[0].aoData[ this[0] ].nTr || null :
    		null;
    } );


    _api_register( 'row.add()', function ( row ) {
    	// Allow a jQuery object to be passed in - only a single row is added from
    	// it though - the first element in the set
    	if ( row instanceof $$7 && row.length ) {
    		row = row[0];
    	}

    	var rows = this.iterator( 'table', function ( settings ) {
    		if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
    			return _fnAddTr( settings, row )[0];
    		}
    		return _fnAddData( settings, row );
    	} );

    	// Return an Api.rows() extended instance, with the newly added row selected
    	return this.row( rows[0] );
    } );


    $$7(document).on('plugin-init.dt', function (e, context) {
    	var api = new _Api( context );
    	var namespace = 'on-plugin-init';
    	var stateSaveParamsEvent = 'stateSaveParams.' + namespace;
    	var destroyEvent = 'destroy. ' + namespace;

    	api.on( stateSaveParamsEvent, function ( e, settings, d ) {
    		// This could be more compact with the API, but it is a lot faster as a simple
    		// internal loop
    		var idFn = settings.rowIdFn;
    		var data = settings.aoData;
    		var ids = [];

    		for (var i=0 ; i<data.length ; i++) {
    			if (data[i]._detailsShow) {
    				ids.push( '#' + idFn(data[i]._aData) );
    			}
    		}

    		d.childRows = ids;
    	});

    	api.on( destroyEvent, function () {
    		api.off(stateSaveParamsEvent + ' ' + destroyEvent);
    	});

    	var loaded = api.state.loaded();

    	if ( loaded && loaded.childRows ) {
    		api
    			.rows( $$7.map(loaded.childRows, function (id){
    				return id.replace(/:/g, '\\:')
    			}) )
    			.every( function () {
    				_fnCallbackFire( context, null, 'requestChild', [ this ] );
    			});
    	}
    });

    var __details_add = function ( ctx, row, data, klass )
    {
    	// Convert to array of TR elements
    	var rows = [];
    	var addRow = function ( r, k ) {
    		// Recursion to allow for arrays of jQuery objects
    		if ( Array.isArray( r ) || r instanceof $$7 ) {
    			for ( var i=0, ien=r.length ; i<ien ; i++ ) {
    				addRow( r[i], k );
    			}
    			return;
    		}

    		// If we get a TR element, then just add it directly - up to the dev
    		// to add the correct number of columns etc
    		if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {
    			rows.push( r );
    		}
    		else {
    			// Otherwise create a row with a wrapper
    			var created = $$7('<tr><td></td></tr>').addClass( k );
    			$$7('td', created)
    				.addClass( k )
    				.html( r )
    				[0].colSpan = _fnVisbleColumns( ctx );

    			rows.push( created[0] );
    		}
    	};

    	addRow( data, klass );

    	if ( row._details ) {
    		row._details.detach();
    	}

    	row._details = $$7(rows);

    	// If the children were already shown, that state should be retained
    	if ( row._detailsShow ) {
    		row._details.insertAfter( row.nTr );
    	}
    };


    // Make state saving of child row details async to allow them to be batch processed
    var __details_state = DataTable.util.throttle(
    	function (ctx) {
    		_fnSaveState( ctx[0] );
    	},
    	500
    );


    var __details_remove = function ( api, idx )
    {
    	var ctx = api.context;

    	if ( ctx.length ) {
    		var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];

    		if ( row && row._details ) {
    			row._details.remove();

    			row._detailsShow = undefined;
    			row._details = undefined;
    			$$7( row.nTr ).removeClass( 'dt-hasChild' );
    			__details_state( ctx );
    		}
    	}
    };


    var __details_display = function ( api, show ) {
    	var ctx = api.context;

    	if ( ctx.length && api.length ) {
    		var row = ctx[0].aoData[ api[0] ];

    		if ( row._details ) {
    			row._detailsShow = show;

    			if ( show ) {
    				row._details.insertAfter( row.nTr );
    				$$7( row.nTr ).addClass( 'dt-hasChild' );
    			}
    			else {
    				row._details.detach();
    				$$7( row.nTr ).removeClass( 'dt-hasChild' );
    			}

    			_fnCallbackFire( ctx[0], null, 'childRow', [ show, api.row( api[0] ) ] );

    			__details_events( ctx[0] );
    			__details_state( ctx );
    		}
    	}
    };


    var __details_events = function ( settings )
    {
    	var api = new _Api( settings );
    	var namespace = '.dt.DT_details';
    	var drawEvent = 'draw'+namespace;
    	var colvisEvent = 'column-sizing'+namespace;
    	var destroyEvent = 'destroy'+namespace;
    	var data = settings.aoData;

    	api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );

    	if ( _pluck( data, '_details' ).length > 0 ) {
    		// On each draw, insert the required elements into the document
    		api.on( drawEvent, function ( e, ctx ) {
    			if ( settings !== ctx ) {
    				return;
    			}

    			api.rows( {page:'current'} ).eq(0).each( function (idx) {
    				// Internal data grab
    				var row = data[ idx ];

    				if ( row._detailsShow ) {
    					row._details.insertAfter( row.nTr );
    				}
    			} );
    		} );

    		// Column visibility change - update the colspan
    		api.on( colvisEvent, function ( e, ctx, idx, vis ) {
    			if ( settings !== ctx ) {
    				return;
    			}

    			// Update the colspan for the details rows (note, only if it already has
    			// a colspan)
    			var row, visible = _fnVisbleColumns( ctx );

    			for ( var i=0, ien=data.length ; i<ien ; i++ ) {
    				row = data[i];

    				if ( row._details ) {
    					row._details.children('td[colspan]').attr('colspan', visible );
    				}
    			}
    		} );

    		// Table destroyed - nuke any child rows
    		api.on( destroyEvent, function ( e, ctx ) {
    			if ( settings !== ctx ) {
    				return;
    			}

    			for ( var i=0, ien=data.length ; i<ien ; i++ ) {
    				if ( data[i]._details ) {
    					__details_remove( api, i );
    				}
    			}
    		} );
    	}
    };

    // Strings for the method names to help minification
    var _emp = '';
    var _child_obj = _emp+'row().child';
    var _child_mth = _child_obj+'()';

    // data can be:
    //  tr
    //  string
    //  jQuery or array of any of the above
    _api_register( _child_mth, function ( data, klass ) {
    	var ctx = this.context;

    	if ( data === undefined ) {
    		// get
    		return ctx.length && this.length ?
    			ctx[0].aoData[ this[0] ]._details :
    			undefined;
    	}
    	else if ( data === true ) {
    		// show
    		this.child.show();
    	}
    	else if ( data === false ) {
    		// remove
    		__details_remove( this );
    	}
    	else if ( ctx.length && this.length ) {
    		// set
    		__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );
    	}

    	return this;
    } );


    _api_register( [
    	_child_obj+'.show()',
    	_child_mth+'.show()' // only when `child()` was called with parameters (without
    ], function ( show ) {   // it returns an object and this method is not executed)
    	__details_display( this, true );
    	return this;
    } );


    _api_register( [
    	_child_obj+'.hide()',
    	_child_mth+'.hide()' // only when `child()` was called with parameters (without
    ], function () {         // it returns an object and this method is not executed)
    	__details_display( this, false );
    	return this;
    } );


    _api_register( [
    	_child_obj+'.remove()',
    	_child_mth+'.remove()' // only when `child()` was called with parameters (without
    ], function () {           // it returns an object and this method is not executed)
    	__details_remove( this );
    	return this;
    } );


    _api_register( _child_obj+'.isShown()', function () {
    	var ctx = this.context;

    	if ( ctx.length && this.length ) {
    		// _detailsShown as false or undefined will fall through to return false
    		return ctx[0].aoData[ this[0] ]._detailsShow || false;
    	}
    	return false;
    } );



    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Columns
     *
     * {integer}           - column index (>=0 count from left, <0 count from right)
     * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
     * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
     * "{string}:name"     - column name
     * "{string}"          - jQuery selector on column header nodes
     *
     */

    // can be an array of these items, comma separated list, or an array of comma
    // separated lists

    var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;


    // r1 and r2 are redundant - but it means that the parameters match for the
    // iterator callback in columns().data()
    var __columnData = function ( settings, column, r1, r2, rows ) {
    	var a = [];
    	for ( var row=0, ien=rows.length ; row<ien ; row++ ) {
    		a.push( _fnGetCellData( settings, rows[row], column ) );
    	}
    	return a;
    };


    var __column_selector = function ( settings, selector, opts )
    {
    	var
    		columns = settings.aoColumns,
    		names = _pluck( columns, 'sName' ),
    		nodes = _pluck( columns, 'nTh' );

    	var run = function ( s ) {
    		var selInt = _intVal( s );

    		// Selector - all
    		if ( s === '' ) {
    			return _range( columns.length );
    		}

    		// Selector - index
    		if ( selInt !== null ) {
    			return [ selInt >= 0 ?
    				selInt : // Count from left
    				columns.length + selInt // Count from right (+ because its a negative value)
    			];
    		}

    		// Selector = function
    		if ( typeof s === 'function' ) {
    			var rows = _selector_row_indexes( settings, opts );

    			return $$7.map( columns, function (col, idx) {
    				return s(
    						idx,
    						__columnData( settings, idx, 0, 0, rows ),
    						nodes[ idx ]
    					) ? idx : null;
    			} );
    		}

    		// jQuery or string selector
    		var match = typeof s === 'string' ?
    			s.match( __re_column_selector ) :
    			'';

    		if ( match ) {
    			switch( match[2] ) {
    				case 'visIdx':
    				case 'visible':
    					var idx = parseInt( match[1], 10 );
    					// Visible index given, convert to column index
    					if ( idx < 0 ) {
    						// Counting from the right
    						var visColumns = $$7.map( columns, function (col,i) {
    							return col.bVisible ? i : null;
    						} );
    						return [ visColumns[ visColumns.length + idx ] ];
    					}
    					// Counting from the left
    					return [ _fnVisibleToColumnIndex( settings, idx ) ];

    				case 'name':
    					// match by name. `names` is column index complete and in order
    					return $$7.map( names, function (name, i) {
    						return name === match[1] ? i : null;
    					} );

    				default:
    					return [];
    			}
    		}

    		// Cell in the table body
    		if ( s.nodeName && s._DT_CellIndex ) {
    			return [ s._DT_CellIndex.column ];
    		}

    		// jQuery selector on the TH elements for the columns
    		var jqResult = $$7( nodes )
    			.filter( s )
    			.map( function () {
    				return $$7.inArray( this, nodes ); // `nodes` is column index complete and in order
    			} )
    			.toArray();

    		if ( jqResult.length || ! s.nodeName ) {
    			return jqResult;
    		}

    		// Otherwise a node which might have a `dt-column` data attribute, or be
    		// a child or such an element
    		var host = $$7(s).closest('*[data-dt-column]');
    		return host.length ?
    			[ host.data('dt-column') ] :
    			[];
    	};

    	return _selector_run( 'column', selector, run, settings, opts );
    };


    var __setColumnVis = function ( settings, column, vis ) {
    	var cols = settings.aoColumns,
    		col  = cols[ column ],
    		data = settings.aoData,
    		cells, i, ien, tr;

    	// Get
    	if ( vis === undefined ) {
    		return col.bVisible;
    	}

    	// Set
    	// No change
    	if ( col.bVisible === vis ) {
    		return;
    	}

    	if ( vis ) {
    		// Insert column
    		// Need to decide if we should use appendChild or insertBefore
    		var insertBefore = $$7.inArray( true, _pluck(cols, 'bVisible'), column+1 );

    		for ( i=0, ien=data.length ; i<ien ; i++ ) {
    			tr = data[i].nTr;
    			cells = data[i].anCells;

    			if ( tr ) {
    				// insertBefore can act like appendChild if 2nd arg is null
    				tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );
    			}
    		}
    	}
    	else {
    		// Remove column
    		$$7( _pluck( settings.aoData, 'anCells', column ) ).detach();
    	}

    	// Common actions
    	col.bVisible = vis;
    };


    _api_register( 'columns()', function ( selector, opts ) {
    	// argument shifting
    	if ( selector === undefined ) {
    		selector = '';
    	}
    	else if ( $$7.isPlainObject( selector ) ) {
    		opts = selector;
    		selector = '';
    	}

    	opts = _selector_opts( opts );

    	var inst = this.iterator( 'table', function ( settings ) {
    		return __column_selector( settings, selector, opts );
    	}, 1 );

    	// Want argument shifting here and in _row_selector?
    	inst.selector.cols = selector;
    	inst.selector.opts = opts;

    	return inst;
    } );

    _api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {
    	return this.iterator( 'column', function ( settings, column ) {
    		return settings.aoColumns[column].nTh;
    	}, 1 );
    } );

    _api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {
    	return this.iterator( 'column', function ( settings, column ) {
    		return settings.aoColumns[column].nTf;
    	}, 1 );
    } );

    _api_registerPlural( 'columns().data()', 'column().data()', function () {
    	return this.iterator( 'column-rows', __columnData, 1 );
    } );

    _api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {
    	return this.iterator( 'column', function ( settings, column ) {
    		return settings.aoColumns[column].mData;
    	}, 1 );
    } );

    _api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {
    	return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
    		return _pluck_order( settings.aoData, rows,
    			type === 'search' ? '_aFilterData' : '_aSortData', column
    		);
    	}, 1 );
    } );

    _api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {
    	return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
    		return _pluck_order( settings.aoData, rows, 'anCells', column ) ;
    	}, 1 );
    } );

    _api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {
    	var that = this;
    	var ret = this.iterator( 'column', function ( settings, column ) {
    		if ( vis === undefined ) {
    			return settings.aoColumns[ column ].bVisible;
    		} // else
    		__setColumnVis( settings, column, vis );
    	} );

    	// Group the column visibility changes
    	if ( vis !== undefined ) {
    		this.iterator( 'table', function ( settings ) {
    			// Redraw the header after changes
    			_fnDrawHead( settings, settings.aoHeader );
    			_fnDrawHead( settings, settings.aoFooter );
    	
    			// Update colspan for no records display. Child rows and extensions will use their own
    			// listeners to do this - only need to update the empty table item here
    			if ( ! settings.aiDisplay.length ) {
    				$$7(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));
    			}
    	
    			_fnSaveState( settings );

    			// Second loop once the first is done for events
    			that.iterator( 'column', function ( settings, column ) {
    				_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );
    			} );

    			if ( calc === undefined || calc ) {
    				that.columns.adjust();
    			}
    		});
    	}

    	return ret;
    } );

    _api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {
    	return this.iterator( 'column', function ( settings, column ) {
    		return type === 'visible' ?
    			_fnColumnIndexToVisible( settings, column ) :
    			column;
    	}, 1 );
    } );

    _api_register( 'columns.adjust()', function () {
    	return this.iterator( 'table', function ( settings ) {
    		_fnAdjustColumnSizing( settings );
    	}, 1 );
    } );

    _api_register( 'column.index()', function ( type, idx ) {
    	if ( this.context.length !== 0 ) {
    		var ctx = this.context[0];

    		if ( type === 'fromVisible' || type === 'toData' ) {
    			return _fnVisibleToColumnIndex( ctx, idx );
    		}
    		else if ( type === 'fromData' || type === 'toVisible' ) {
    			return _fnColumnIndexToVisible( ctx, idx );
    		}
    	}
    } );

    _api_register( 'column()', function ( selector, opts ) {
    	return _selector_first( this.columns( selector, opts ) );
    } );

    var __cell_selector = function ( settings, selector, opts )
    {
    	var data = settings.aoData;
    	var rows = _selector_row_indexes( settings, opts );
    	var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );
    	var allCells = $$7(_flatten( [], cells ));
    	var row;
    	var columns = settings.aoColumns.length;
    	var a, i, ien, j, o, host;

    	var run = function ( s ) {
    		var fnSelector = typeof s === 'function';

    		if ( s === null || s === undefined || fnSelector ) {
    			// All cells and function selectors
    			a = [];

    			for ( i=0, ien=rows.length ; i<ien ; i++ ) {
    				row = rows[i];

    				for ( j=0 ; j<columns ; j++ ) {
    					o = {
    						row: row,
    						column: j
    					};

    					if ( fnSelector ) {
    						// Selector - function
    						host = data[ row ];

    						if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {
    							a.push( o );
    						}
    					}
    					else {
    						// Selector - all
    						a.push( o );
    					}
    				}
    			}

    			return a;
    		}
    		
    		// Selector - index
    		if ( $$7.isPlainObject( s ) ) {
    			// Valid cell index and its in the array of selectable rows
    			return s.column !== undefined && s.row !== undefined && $$7.inArray( s.row, rows ) !== -1 ?
    				[s] :
    				[];
    		}

    		// Selector - jQuery filtered cells
    		var jqResult = allCells
    			.filter( s )
    			.map( function (i, el) {
    				return { // use a new object, in case someone changes the values
    					row:    el._DT_CellIndex.row,
    					column: el._DT_CellIndex.column
     				};
    			} )
    			.toArray();

    		if ( jqResult.length || ! s.nodeName ) {
    			return jqResult;
    		}

    		// Otherwise the selector is a node, and there is one last option - the
    		// element might be a child of an element which has dt-row and dt-column
    		// data attributes
    		host = $$7(s).closest('*[data-dt-row]');
    		return host.length ?
    			[ {
    				row: host.data('dt-row'),
    				column: host.data('dt-column')
    			} ] :
    			[];
    	};

    	return _selector_run( 'cell', selector, run, settings, opts );
    };




    _api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {
    	// Argument shifting
    	if ( $$7.isPlainObject( rowSelector ) ) {
    		// Indexes
    		if ( rowSelector.row === undefined ) {
    			// Selector options in first parameter
    			opts = rowSelector;
    			rowSelector = null;
    		}
    		else {
    			// Cell index objects in first parameter
    			opts = columnSelector;
    			columnSelector = null;
    		}
    	}
    	if ( $$7.isPlainObject( columnSelector ) ) {
    		opts = columnSelector;
    		columnSelector = null;
    	}

    	// Cell selector
    	if ( columnSelector === null || columnSelector === undefined ) {
    		return this.iterator( 'table', function ( settings ) {
    			return __cell_selector( settings, rowSelector, _selector_opts( opts ) );
    		} );
    	}

    	// The default built in options need to apply to row and columns
    	var internalOpts = opts ? {
    		page: opts.page,
    		order: opts.order,
    		search: opts.search
    	} : {};

    	// Row + column selector
    	var columns = this.columns( columnSelector, internalOpts );
    	var rows = this.rows( rowSelector, internalOpts );
    	var i, ien, j, jen;

    	var cellsNoOpts = this.iterator( 'table', function ( settings, idx ) {
    		var a = [];

    		for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {
    			for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {
    				a.push( {
    					row:    rows[idx][i],
    					column: columns[idx][j]
    				} );
    			}
    		}

    		return a;
    	}, 1 );

    	// There is currently only one extension which uses a cell selector extension
    	// It is a _major_ performance drag to run this if it isn't needed, so this is
    	// an extension specific check at the moment
    	var cells = opts && opts.selected ?
    		this.cells( cellsNoOpts, opts ) :
    		cellsNoOpts;

    	$$7.extend( cells.selector, {
    		cols: columnSelector,
    		rows: rowSelector,
    		opts: opts
    	} );

    	return cells;
    } );


    _api_registerPlural( 'cells().nodes()', 'cell().node()', function () {
    	return this.iterator( 'cell', function ( settings, row, column ) {
    		var data = settings.aoData[ row ];

    		return data && data.anCells ?
    			data.anCells[ column ] :
    			undefined;
    	}, 1 );
    } );


    _api_register( 'cells().data()', function () {
    	return this.iterator( 'cell', function ( settings, row, column ) {
    		return _fnGetCellData( settings, row, column );
    	}, 1 );
    } );


    _api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {
    	type = type === 'search' ? '_aFilterData' : '_aSortData';

    	return this.iterator( 'cell', function ( settings, row, column ) {
    		return settings.aoData[ row ][ type ][ column ];
    	}, 1 );
    } );


    _api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {
    	return this.iterator( 'cell', function ( settings, row, column ) {
    		return _fnGetCellData( settings, row, column, type );
    	}, 1 );
    } );


    _api_registerPlural( 'cells().indexes()', 'cell().index()', function () {
    	return this.iterator( 'cell', function ( settings, row, column ) {
    		return {
    			row: row,
    			column: column,
    			columnVisible: _fnColumnIndexToVisible( settings, column )
    		};
    	}, 1 );
    } );


    _api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {
    	return this.iterator( 'cell', function ( settings, row, column ) {
    		_fnInvalidate( settings, row, src, column );
    	} );
    } );



    _api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {
    	return _selector_first( this.cells( rowSelector, columnSelector, opts ) );
    } );


    _api_register( 'cell().data()', function ( data ) {
    	var ctx = this.context;
    	var cell = this[0];

    	if ( data === undefined ) {
    		// Get
    		return ctx.length && cell.length ?
    			_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :
    			undefined;
    	}

    	// Set
    	_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );
    	_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );

    	return this;
    } );



    /**
     * Get current ordering (sorting) that has been applied to the table.
     *
     * @returns {array} 2D array containing the sorting information for the first
     *   table in the current context. Each element in the parent array represents
     *   a column being sorted upon (i.e. multi-sorting with two columns would have
     *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
     *   the column index that the sorting condition applies to, the second is the
     *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
     *   index of the sorting order from the `column.sorting` initialisation array.
     *//**
     * Set the ordering for the table.
     *
     * @param {integer} order Column index to sort upon.
     * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
     * @returns {DataTables.Api} this
     *//**
     * Set the ordering for the table.
     *
     * @param {array} order 1D array of sorting information to be applied.
     * @param {array} [...] Optional additional sorting conditions
     * @returns {DataTables.Api} this
     *//**
     * Set the ordering for the table.
     *
     * @param {array} order 2D array of sorting information to be applied.
     * @returns {DataTables.Api} this
     */
    _api_register( 'order()', function ( order, dir ) {
    	var ctx = this.context;

    	if ( order === undefined ) {
    		// get
    		return ctx.length !== 0 ?
    			ctx[0].aaSorting :
    			undefined;
    	}

    	// set
    	if ( typeof order === 'number' ) {
    		// Simple column / direction passed in
    		order = [ [ order, dir ] ];
    	}
    	else if ( order.length && ! Array.isArray( order[0] ) ) {
    		// Arguments passed in (list of 1D arrays)
    		order = Array.prototype.slice.call( arguments );
    	}
    	// otherwise a 2D array was passed in

    	return this.iterator( 'table', function ( settings ) {
    		settings.aaSorting = order.slice();
    	} );
    } );


    /**
     * Attach a sort listener to an element for a given column
     *
     * @param {node|jQuery|string} node Identifier for the element(s) to attach the
     *   listener to. This can take the form of a single DOM node, a jQuery
     *   collection of nodes or a jQuery selector which will identify the node(s).
     * @param {integer} column the column that a click on this node will sort on
     * @param {function} [callback] callback function when sort is run
     * @returns {DataTables.Api} this
     */
    _api_register( 'order.listener()', function ( node, column, callback ) {
    	return this.iterator( 'table', function ( settings ) {
    		_fnSortAttachListener( settings, node, column, callback );
    	} );
    } );


    _api_register( 'order.fixed()', function ( set ) {
    	if ( ! set ) {
    		var ctx = this.context;
    		var fixed = ctx.length ?
    			ctx[0].aaSortingFixed :
    			undefined;

    		return Array.isArray( fixed ) ?
    			{ pre: fixed } :
    			fixed;
    	}

    	return this.iterator( 'table', function ( settings ) {
    		settings.aaSortingFixed = $$7.extend( true, {}, set );
    	} );
    } );


    // Order by the selected column(s)
    _api_register( [
    	'columns().order()',
    	'column().order()'
    ], function ( dir ) {
    	var that = this;

    	return this.iterator( 'table', function ( settings, i ) {
    		var sort = [];

    		$$7.each( that[i], function (j, col) {
    			sort.push( [ col, dir ] );
    		} );

    		settings.aaSorting = sort;
    	} );
    } );



    _api_register( 'search()', function ( input, regex, smart, caseInsen ) {
    	var ctx = this.context;

    	if ( input === undefined ) {
    		// get
    		return ctx.length !== 0 ?
    			ctx[0].oPreviousSearch.sSearch :
    			undefined;
    	}

    	// set
    	return this.iterator( 'table', function ( settings ) {
    		if ( ! settings.oFeatures.bFilter ) {
    			return;
    		}

    		_fnFilterComplete( settings, $$7.extend( {}, settings.oPreviousSearch, {
    			"sSearch": input+"",
    			"bRegex":  regex === null ? false : regex,
    			"bSmart":  smart === null ? true  : smart,
    			"bCaseInsensitive": caseInsen === null ? true : caseInsen
    		} ), 1 );
    	} );
    } );


    _api_registerPlural(
    	'columns().search()',
    	'column().search()',
    	function ( input, regex, smart, caseInsen ) {
    		return this.iterator( 'column', function ( settings, column ) {
    			var preSearch = settings.aoPreSearchCols;

    			if ( input === undefined ) {
    				// get
    				return preSearch[ column ].sSearch;
    			}

    			// set
    			if ( ! settings.oFeatures.bFilter ) {
    				return;
    			}

    			$$7.extend( preSearch[ column ], {
    				"sSearch": input+"",
    				"bRegex":  regex === null ? false : regex,
    				"bSmart":  smart === null ? true  : smart,
    				"bCaseInsensitive": caseInsen === null ? true : caseInsen
    			} );

    			_fnFilterComplete( settings, settings.oPreviousSearch, 1 );
    		} );
    	}
    );

    /*
     * State API methods
     */

    _api_register( 'state()', function () {
    	return this.context.length ?
    		this.context[0].oSavedState :
    		null;
    } );


    _api_register( 'state.clear()', function () {
    	return this.iterator( 'table', function ( settings ) {
    		// Save an empty object
    		settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );
    	} );
    } );


    _api_register( 'state.loaded()', function () {
    	return this.context.length ?
    		this.context[0].oLoadedState :
    		null;
    } );


    _api_register( 'state.save()', function () {
    	return this.iterator( 'table', function ( settings ) {
    		_fnSaveState( settings );
    	} );
    } );



    /**
     * Set the jQuery or window object to be used by DataTables
     *
     * @param {*} module Library / container object
     * @param {string} [type] Library or container type `lib`, `win` or `datetime`.
     *   If not provided, automatic detection is attempted.
     */
    DataTable.use = function (module, type) {
    	if (type === 'lib' || module.fn) {
    		$$7 = module;
    	}
    	else if (type == 'win' || module.document) {
    		window = module;
    		document = module.document;
    	}
    	else if (type === 'datetime' || module.type === 'DateTime') {
    		DataTable.DateTime = module;
    	}
    };

    /**
     * CommonJS factory function pass through. This will check if the arguments
     * given are a window object or a jQuery object. If so they are set
     * accordingly.
     * @param {*} root Window
     * @param {*} jq jQUery
     * @returns {boolean} Indicator
     */
    DataTable.factory = function (root, jq) {
    	var is = false;

    	// Test if the first parameter is a window object
    	if (root && root.document) {
    		window = root;
    		document = root.document;
    	}

    	// Test if the second parameter is a jQuery object
    	if (jq && jq.fn && jq.fn.jquery) {
    		$$7 = jq;
    		is = true;
    	}

    	return is;
    };

    /**
     * Provide a common method for plug-ins to check the version of DataTables being
     * used, in order to ensure compatibility.
     *
     *  @param {string} version Version string to check for, in the format "X.Y.Z".
     *    Note that the formats "X" and "X.Y" are also acceptable.
     *  @returns {boolean} true if this version of DataTables is greater or equal to
     *    the required version, or false if this version of DataTales is not
     *    suitable
     *  @static
     *  @dtopt API-Static
     *
     *  @example
     *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
     */
    DataTable.versionCheck = DataTable.fnVersionCheck = function( version )
    {
    	var aThis = DataTable.version.split('.');
    	var aThat = version.split('.');
    	var iThis, iThat;

    	for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {
    		iThis = parseInt( aThis[i], 10 ) || 0;
    		iThat = parseInt( aThat[i], 10 ) || 0;

    		// Parts are the same, keep comparing
    		if (iThis === iThat) {
    			continue;
    		}

    		// Parts are different, return immediately
    		return iThis > iThat;
    	}

    	return true;
    };


    /**
     * Check if a `<table>` node is a DataTable table already or not.
     *
     *  @param {node|jquery|string} table Table node, jQuery object or jQuery
     *      selector for the table to test. Note that if more than more than one
     *      table is passed on, only the first will be checked
     *  @returns {boolean} true the table given is a DataTable, or false otherwise
     *  @static
     *  @dtopt API-Static
     *
     *  @example
     *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
     *      $('#example').dataTable();
     *    }
     */
    DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )
    {
    	var t = $$7(table).get(0);
    	var is = false;

    	if ( table instanceof DataTable.Api ) {
    		return true;
    	}

    	$$7.each( DataTable.settings, function (i, o) {
    		var head = o.nScrollHead ? $$7('table', o.nScrollHead)[0] : null;
    		var foot = o.nScrollFoot ? $$7('table', o.nScrollFoot)[0] : null;

    		if ( o.nTable === t || head === t || foot === t ) {
    			is = true;
    		}
    	} );

    	return is;
    };


    /**
     * Get all DataTable tables that have been initialised - optionally you can
     * select to get only currently visible tables.
     *
     *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
     *    or visible tables only.
     *  @returns {array} Array of `table` nodes (not DataTable instances) which are
     *    DataTables
     *  @static
     *  @dtopt API-Static
     *
     *  @example
     *    $.each( $.fn.dataTable.tables(true), function () {
     *      $(table).DataTable().columns.adjust();
     *    } );
     */
    DataTable.tables = DataTable.fnTables = function ( visible )
    {
    	var api = false;

    	if ( $$7.isPlainObject( visible ) ) {
    		api = visible.api;
    		visible = visible.visible;
    	}

    	var a = $$7.map( DataTable.settings, function (o) {
    		if ( !visible || (visible && $$7(o.nTable).is(':visible')) ) {
    			return o.nTable;
    		}
    	} );

    	return api ?
    		new _Api( a ) :
    		a;
    };


    /**
     * Convert from camel case parameters to Hungarian notation. This is made public
     * for the extensions to provide the same ability as DataTables core to accept
     * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
     * parameters.
     *
     *  @param {object} src The model object which holds all parameters that can be
     *    mapped.
     *  @param {object} user The object to convert from camel case to Hungarian.
     *  @param {boolean} force When set to `true`, properties which already have a
     *    Hungarian value in the `user` object will be overwritten. Otherwise they
     *    won't be.
     */
    DataTable.camelToHungarian = _fnCamelToHungarian;



    /**
     *
     */
    _api_register( '$()', function ( selector, opts ) {
    	var
    		rows   = this.rows( opts ).nodes(), // Get all rows
    		jqRows = $$7(rows);

    	return $$7( [].concat(
    		jqRows.filter( selector ).toArray(),
    		jqRows.find( selector ).toArray()
    	) );
    } );


    // jQuery functions to operate on the tables
    $$7.each( [ 'on', 'one', 'off' ], function (i, key) {
    	_api_register( key+'()', function ( /* event, handler */ ) {
    		var args = Array.prototype.slice.call(arguments);

    		// Add the `dt` namespace automatically if it isn't already present
    		args[0] = $$7.map( args[0].split( /\s/ ), function ( e ) {
    			return ! e.match(/\.dt\b/) ?
    				e+'.dt' :
    				e;
    			} ).join( ' ' );

    		var inst = $$7( this.tables().nodes() );
    		inst[key].apply( inst, args );
    		return this;
    	} );
    } );


    _api_register( 'clear()', function () {
    	return this.iterator( 'table', function ( settings ) {
    		_fnClearTable( settings );
    	} );
    } );


    _api_register( 'settings()', function () {
    	return new _Api( this.context, this.context );
    } );


    _api_register( 'init()', function () {
    	var ctx = this.context;
    	return ctx.length ? ctx[0].oInit : null;
    } );


    _api_register( 'data()', function () {
    	return this.iterator( 'table', function ( settings ) {
    		return _pluck( settings.aoData, '_aData' );
    	} ).flatten();
    } );


    _api_register( 'destroy()', function ( remove ) {
    	remove = remove || false;

    	return this.iterator( 'table', function ( settings ) {
    		var classes   = settings.oClasses;
    		var table     = settings.nTable;
    		var tbody     = settings.nTBody;
    		var thead     = settings.nTHead;
    		var tfoot     = settings.nTFoot;
    		var jqTable   = $$7(table);
    		var jqTbody   = $$7(tbody);
    		var jqWrapper = $$7(settings.nTableWrapper);
    		var rows      = $$7.map( settings.aoData, function (r) { return r.nTr; } );
    		var ien;

    		// Flag to note that the table is currently being destroyed - no action
    		// should be taken
    		settings.bDestroying = true;

    		// Fire off the destroy callbacks for plug-ins etc
    		_fnCallbackFire( settings, "aoDestroyCallback", "destroy", [settings] );

    		// If not being removed from the document, make all columns visible
    		if ( ! remove ) {
    			new _Api( settings ).columns().visible( true );
    		}

    		// Blitz all `DT` namespaced events (these are internal events, the
    		// lowercase, `dt` events are user subscribed and they are responsible
    		// for removing them
    		jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
    		$$7(window).off('.DT-'+settings.sInstance);

    		// When scrolling we had to break the table up - restore it
    		if ( table != thead.parentNode ) {
    			jqTable.children('thead').detach();
    			jqTable.append( thead );
    		}

    		if ( tfoot && table != tfoot.parentNode ) {
    			jqTable.children('tfoot').detach();
    			jqTable.append( tfoot );
    		}

    		settings.aaSorting = [];
    		settings.aaSortingFixed = [];
    		_fnSortingClasses( settings );

    		$$7( rows ).removeClass( settings.asStripeClasses.join(' ') );

    		$$7('th, td', thead).removeClass( classes.sSortable+' '+
    			classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone
    		);

    		// Add the TR elements back into the table in their original order
    		jqTbody.children().detach();
    		jqTbody.append( rows );

    		var orig = settings.nTableWrapper.parentNode;

    		// Remove the DataTables generated nodes, events and classes
    		var removedMethod = remove ? 'remove' : 'detach';
    		jqTable[ removedMethod ]();
    		jqWrapper[ removedMethod ]();

    		// If we need to reattach the table to the document
    		if ( ! remove && orig ) {
    			// insertBefore acts like appendChild if !arg[1]
    			orig.insertBefore( table, settings.nTableReinsertBefore );

    			// Restore the width of the original table - was read from the style property,
    			// so we can restore directly to that
    			jqTable
    				.css( 'width', settings.sDestroyWidth )
    				.removeClass( classes.sTable );

    			// If the were originally stripe classes - then we add them back here.
    			// Note this is not fool proof (for example if not all rows had stripe
    			// classes - but it's a good effort without getting carried away
    			ien = settings.asDestroyStripes.length;

    			if ( ien ) {
    				jqTbody.children().each( function (i) {
    					$$7(this).addClass( settings.asDestroyStripes[i % ien] );
    				} );
    			}
    		}

    		/* Remove the settings object from the settings array */
    		var idx = $$7.inArray( settings, DataTable.settings );
    		if ( idx !== -1 ) {
    			DataTable.settings.splice( idx, 1 );
    		}
    	} );
    } );


    // Add the `every()` method for rows, columns and cells in a compact form
    $$7.each( [ 'column', 'row', 'cell' ], function ( i, type ) {
    	_api_register( type+'s().every()', function ( fn ) {
    		var opts = this.selector.opts;
    		var api = this;

    		return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {
    			// Rows and columns:
    			//  arg1 - index
    			//  arg2 - table counter
    			//  arg3 - loop counter
    			//  arg4 - undefined
    			// Cells:
    			//  arg1 - row index
    			//  arg2 - column index
    			//  arg3 - table counter
    			//  arg4 - loop counter
    			fn.call(
    				api[ type ](
    					arg1,
    					type==='cell' ? arg2 : opts,
    					type==='cell' ? opts : undefined
    				),
    				arg1, arg2, arg3, arg4
    			);
    		} );
    	} );
    } );


    // i18n method for extensions to be able to use the language object from the
    // DataTable
    _api_register( 'i18n()', function ( token, def, plural ) {
    	var ctx = this.context[0];
    	var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );

    	if ( resolved === undefined ) {
    		resolved = def;
    	}

    	if ( plural !== undefined && $$7.isPlainObject( resolved ) ) {
    		resolved = resolved[ plural ] !== undefined ?
    			resolved[ plural ] :
    			resolved._;
    	}

    	return typeof resolved === 'string'
    		? resolved.replace( '%d', plural ) // nb: plural might be undefined,
    		: resolved;
    } );
    /**
     * Version string for plug-ins to check compatibility. Allowed format is
     * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
     * only for non-release builds. See http://semver.org/ for more information.
     *  @member
     *  @type string
     *  @default Version number
     */
    DataTable.version = "1.13.5";

    /**
     * Private data store, containing all of the settings objects that are
     * created for the tables on a given page.
     *
     * Note that the `DataTable.settings` object is aliased to
     * `jQuery.fn.dataTableExt` through which it may be accessed and
     * manipulated, or `jQuery.fn.dataTable.settings`.
     *  @member
     *  @type array
     *  @default []
     *  @private
     */
    DataTable.settings = [];

    /**
     * Object models container, for the various models that DataTables has
     * available to it. These models define the objects that are used to hold
     * the active state and configuration of the table.
     *  @namespace
     */
    DataTable.models = {};



    /**
     * Template object for the way in which DataTables holds information about
     * search information for the global filter and individual column filters.
     *  @namespace
     */
    DataTable.models.oSearch = {
    	/**
    	 * Flag to indicate if the filtering should be case insensitive or not
    	 *  @type boolean
    	 *  @default true
    	 */
    	"bCaseInsensitive": true,

    	/**
    	 * Applied search term
    	 *  @type string
    	 *  @default <i>Empty string</i>
    	 */
    	"sSearch": "",

    	/**
    	 * Flag to indicate if the search term should be interpreted as a
    	 * regular expression (true) or not (false) and therefore and special
    	 * regex characters escaped.
    	 *  @type boolean
    	 *  @default false
    	 */
    	"bRegex": false,

    	/**
    	 * Flag to indicate if DataTables is to use its smart filtering or not.
    	 *  @type boolean
    	 *  @default true
    	 */
    	"bSmart": true,

    	/**
    	 * Flag to indicate if DataTables should only trigger a search when
    	 * the return key is pressed.
    	 *  @type boolean
    	 *  @default false
    	 */
    	"return": false
    };




    /**
     * Template object for the way in which DataTables holds information about
     * each individual row. This is the object format used for the settings
     * aoData array.
     *  @namespace
     */
    DataTable.models.oRow = {
    	/**
    	 * TR element for the row
    	 *  @type node
    	 *  @default null
    	 */
    	"nTr": null,

    	/**
    	 * Array of TD elements for each row. This is null until the row has been
    	 * created.
    	 *  @type array nodes
    	 *  @default []
    	 */
    	"anCells": null,

    	/**
    	 * Data object from the original data source for the row. This is either
    	 * an array if using the traditional form of DataTables, or an object if
    	 * using mData options. The exact type will depend on the passed in
    	 * data from the data source, or will be an array if using DOM a data
    	 * source.
    	 *  @type array|object
    	 *  @default []
    	 */
    	"_aData": [],

    	/**
    	 * Sorting data cache - this array is ostensibly the same length as the
    	 * number of columns (although each index is generated only as it is
    	 * needed), and holds the data that is used for sorting each column in the
    	 * row. We do this cache generation at the start of the sort in order that
    	 * the formatting of the sort data need be done only once for each cell
    	 * per sort. This array should not be read from or written to by anything
    	 * other than the master sorting methods.
    	 *  @type array
    	 *  @default null
    	 *  @private
    	 */
    	"_aSortData": null,

    	/**
    	 * Per cell filtering data cache. As per the sort data cache, used to
    	 * increase the performance of the filtering in DataTables
    	 *  @type array
    	 *  @default null
    	 *  @private
    	 */
    	"_aFilterData": null,

    	/**
    	 * Filtering data cache. This is the same as the cell filtering cache, but
    	 * in this case a string rather than an array. This is easily computed with
    	 * a join on `_aFilterData`, but is provided as a cache so the join isn't
    	 * needed on every search (memory traded for performance)
    	 *  @type array
    	 *  @default null
    	 *  @private
    	 */
    	"_sFilterRow": null,

    	/**
    	 * Cache of the class name that DataTables has applied to the row, so we
    	 * can quickly look at this variable rather than needing to do a DOM check
    	 * on className for the nTr property.
    	 *  @type string
    	 *  @default <i>Empty string</i>
    	 *  @private
    	 */
    	"_sRowStripe": "",

    	/**
    	 * Denote if the original data source was from the DOM, or the data source
    	 * object. This is used for invalidating data, so DataTables can
    	 * automatically read data from the original source, unless uninstructed
    	 * otherwise.
    	 *  @type string
    	 *  @default null
    	 *  @private
    	 */
    	"src": null,

    	/**
    	 * Index in the aoData array. This saves an indexOf lookup when we have the
    	 * object, but want to know the index
    	 *  @type integer
    	 *  @default -1
    	 *  @private
    	 */
    	"idx": -1
    };


    /**
     * Template object for the column information object in DataTables. This object
     * is held in the settings aoColumns array and contains all the information that
     * DataTables needs about each individual column.
     *
     * Note that this object is related to {@link DataTable.defaults.column}
     * but this one is the internal data store for DataTables's cache of columns.
     * It should NOT be manipulated outside of DataTables. Any configuration should
     * be done through the initialisation options.
     *  @namespace
     */
    DataTable.models.oColumn = {
    	/**
    	 * Column index. This could be worked out on-the-fly with $.inArray, but it
    	 * is faster to just hold it as a variable
    	 *  @type integer
    	 *  @default null
    	 */
    	"idx": null,

    	/**
    	 * A list of the columns that sorting should occur on when this column
    	 * is sorted. That this property is an array allows multi-column sorting
    	 * to be defined for a column (for example first name / last name columns
    	 * would benefit from this). The values are integers pointing to the
    	 * columns to be sorted on (typically it will be a single integer pointing
    	 * at itself, but that doesn't need to be the case).
    	 *  @type array
    	 */
    	"aDataSort": null,

    	/**
    	 * Define the sorting directions that are applied to the column, in sequence
    	 * as the column is repeatedly sorted upon - i.e. the first value is used
    	 * as the sorting direction when the column if first sorted (clicked on).
    	 * Sort it again (click again) and it will move on to the next index.
    	 * Repeat until loop.
    	 *  @type array
    	 */
    	"asSorting": null,

    	/**
    	 * Flag to indicate if the column is searchable, and thus should be included
    	 * in the filtering or not.
    	 *  @type boolean
    	 */
    	"bSearchable": null,

    	/**
    	 * Flag to indicate if the column is sortable or not.
    	 *  @type boolean
    	 */
    	"bSortable": null,

    	/**
    	 * Flag to indicate if the column is currently visible in the table or not
    	 *  @type boolean
    	 */
    	"bVisible": null,

    	/**
    	 * Store for manual type assignment using the `column.type` option. This
    	 * is held in store so we can manipulate the column's `sType` property.
    	 *  @type string
    	 *  @default null
    	 *  @private
    	 */
    	"_sManualType": null,

    	/**
    	 * Flag to indicate if HTML5 data attributes should be used as the data
    	 * source for filtering or sorting. True is either are.
    	 *  @type boolean
    	 *  @default false
    	 *  @private
    	 */
    	"_bAttrSrc": false,

    	/**
    	 * Developer definable function that is called whenever a cell is created (Ajax source,
    	 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
    	 * allowing you to modify the DOM element (add background colour for example) when the
    	 * element is available.
    	 *  @type function
    	 *  @param {element} nTd The TD node that has been created
    	 *  @param {*} sData The Data for the cell
    	 *  @param {array|object} oData The data for the whole row
    	 *  @param {int} iRow The row index for the aoData data store
    	 *  @default null
    	 */
    	"fnCreatedCell": null,

    	/**
    	 * Function to get data from a cell in a column. You should <b>never</b>
    	 * access data directly through _aData internally in DataTables - always use
    	 * the method attached to this property. It allows mData to function as
    	 * required. This function is automatically assigned by the column
    	 * initialisation method
    	 *  @type function
    	 *  @param {array|object} oData The data array/object for the array
    	 *    (i.e. aoData[]._aData)
    	 *  @param {string} sSpecific The specific data type you want to get -
    	 *    'display', 'type' 'filter' 'sort'
    	 *  @returns {*} The data for the cell from the given row's data
    	 *  @default null
    	 */
    	"fnGetData": null,

    	/**
    	 * Function to set data for a cell in the column. You should <b>never</b>
    	 * set the data directly to _aData internally in DataTables - always use
    	 * this method. It allows mData to function as required. This function
    	 * is automatically assigned by the column initialisation method
    	 *  @type function
    	 *  @param {array|object} oData The data array/object for the array
    	 *    (i.e. aoData[]._aData)
    	 *  @param {*} sValue Value to set
    	 *  @default null
    	 */
    	"fnSetData": null,

    	/**
    	 * Property to read the value for the cells in the column from the data
    	 * source array / object. If null, then the default content is used, if a
    	 * function is given then the return from the function is used.
    	 *  @type function|int|string|null
    	 *  @default null
    	 */
    	"mData": null,

    	/**
    	 * Partner property to mData which is used (only when defined) to get
    	 * the data - i.e. it is basically the same as mData, but without the
    	 * 'set' option, and also the data fed to it is the result from mData.
    	 * This is the rendering method to match the data method of mData.
    	 *  @type function|int|string|null
    	 *  @default null
    	 */
    	"mRender": null,

    	/**
    	 * Unique header TH/TD element for this column - this is what the sorting
    	 * listener is attached to (if sorting is enabled.)
    	 *  @type node
    	 *  @default null
    	 */
    	"nTh": null,

    	/**
    	 * Unique footer TH/TD element for this column (if there is one). Not used
    	 * in DataTables as such, but can be used for plug-ins to reference the
    	 * footer for each column.
    	 *  @type node
    	 *  @default null
    	 */
    	"nTf": null,

    	/**
    	 * The class to apply to all TD elements in the table's TBODY for the column
    	 *  @type string
    	 *  @default null
    	 */
    	"sClass": null,

    	/**
    	 * When DataTables calculates the column widths to assign to each column,
    	 * it finds the longest string in each column and then constructs a
    	 * temporary table and reads the widths from that. The problem with this
    	 * is that "mmm" is much wider then "iiii", but the latter is a longer
    	 * string - thus the calculation can go wrong (doing it properly and putting
    	 * it into an DOM object and measuring that is horribly(!) slow). Thus as
    	 * a "work around" we provide this option. It will append its value to the
    	 * text that is found to be the longest string for the column - i.e. padding.
    	 *  @type string
    	 */
    	"sContentPadding": null,

    	/**
    	 * Allows a default value to be given for a column's data, and will be used
    	 * whenever a null data source is encountered (this can be because mData
    	 * is set to null, or because the data source itself is null).
    	 *  @type string
    	 *  @default null
    	 */
    	"sDefaultContent": null,

    	/**
    	 * Name for the column, allowing reference to the column by name as well as
    	 * by index (needs a lookup to work by name).
    	 *  @type string
    	 */
    	"sName": null,

    	/**
    	 * Custom sorting data type - defines which of the available plug-ins in
    	 * afnSortData the custom sorting will use - if any is defined.
    	 *  @type string
    	 *  @default std
    	 */
    	"sSortDataType": 'std',

    	/**
    	 * Class to be applied to the header element when sorting on this column
    	 *  @type string
    	 *  @default null
    	 */
    	"sSortingClass": null,

    	/**
    	 * Class to be applied to the header element when sorting on this column -
    	 * when jQuery UI theming is used.
    	 *  @type string
    	 *  @default null
    	 */
    	"sSortingClassJUI": null,

    	/**
    	 * Title of the column - what is seen in the TH element (nTh).
    	 *  @type string
    	 */
    	"sTitle": null,

    	/**
    	 * Column sorting and filtering type
    	 *  @type string
    	 *  @default null
    	 */
    	"sType": null,

    	/**
    	 * Width of the column
    	 *  @type string
    	 *  @default null
    	 */
    	"sWidth": null,

    	/**
    	 * Width of the column when it was first "encountered"
    	 *  @type string
    	 *  @default null
    	 */
    	"sWidthOrig": null
    };


    /*
     * Developer note: The properties of the object below are given in Hungarian
     * notation, that was used as the interface for DataTables prior to v1.10, however
     * from v1.10 onwards the primary interface is camel case. In order to avoid
     * breaking backwards compatibility utterly with this change, the Hungarian
     * version is still, internally the primary interface, but is is not documented
     * - hence the @name tags in each doc comment. This allows a Javascript function
     * to create a map from Hungarian notation to camel case (going the other direction
     * would require each property to be listed, which would add around 3K to the size
     * of DataTables, while this method is about a 0.5K hit).
     *
     * Ultimately this does pave the way for Hungarian notation to be dropped
     * completely, but that is a massive amount of work and will break current
     * installs (therefore is on-hold until v2).
     */

    /**
     * Initialisation options that can be given to DataTables at initialisation
     * time.
     *  @namespace
     */
    DataTable.defaults = {
    	/**
    	 * An array of data to use for the table, passed in at initialisation which
    	 * will be used in preference to any data which is already in the DOM. This is
    	 * particularly useful for constructing tables purely in Javascript, for
    	 * example with a custom Ajax call.
    	 *  @type array
    	 *  @default null
    	 *
    	 *  @dtopt Option
    	 *  @name DataTable.defaults.data
    	 *
    	 *  @example
    	 *    // Using a 2D array data source
    	 *    $(document).ready( function () {
    	 *      $('#example').dataTable( {
    	 *        "data": [
    	 *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
    	 *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
    	 *        ],
    	 *        "columns": [
    	 *          { "title": "Engine" },
    	 *          { "title": "Browser" },
    	 *          { "title": "Platform" },
    	 *          { "title": "Version" },
    	 *          { "title": "Grade" }
    	 *        ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using an array of objects as a data source (`data`)
    	 *    $(document).ready( function () {
    	 *      $('#example').dataTable( {
    	 *        "data": [
    	 *          {
    	 *            "engine":   "Trident",
    	 *            "browser":  "Internet Explorer 4.0",
    	 *            "platform": "Win 95+",
    	 *            "version":  4,
    	 *            "grade":    "X"
    	 *          },
    	 *          {
    	 *            "engine":   "Trident",
    	 *            "browser":  "Internet Explorer 5.0",
    	 *            "platform": "Win 95+",
    	 *            "version":  5,
    	 *            "grade":    "C"
    	 *          }
    	 *        ],
    	 *        "columns": [
    	 *          { "title": "Engine",   "data": "engine" },
    	 *          { "title": "Browser",  "data": "browser" },
    	 *          { "title": "Platform", "data": "platform" },
    	 *          { "title": "Version",  "data": "version" },
    	 *          { "title": "Grade",    "data": "grade" }
    	 *        ]
    	 *      } );
    	 *    } );
    	 */
    	"aaData": null,


    	/**
    	 * If ordering is enabled, then DataTables will perform a first pass sort on
    	 * initialisation. You can define which column(s) the sort is performed
    	 * upon, and the sorting direction, with this variable. The `sorting` array
    	 * should contain an array for each column to be sorted initially containing
    	 * the column's index and a direction string ('asc' or 'desc').
    	 *  @type array
    	 *  @default [[0,'asc']]
    	 *
    	 *  @dtopt Option
    	 *  @name DataTable.defaults.order
    	 *
    	 *  @example
    	 *    // Sort by 3rd column first, and then 4th column
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "order": [[2,'asc'], [3,'desc']]
    	 *      } );
    	 *    } );
    	 *
    	 *    // No initial sorting
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "order": []
    	 *      } );
    	 *    } );
    	 */
    	"aaSorting": [[0,'asc']],


    	/**
    	 * This parameter is basically identical to the `sorting` parameter, but
    	 * cannot be overridden by user interaction with the table. What this means
    	 * is that you could have a column (visible or hidden) which the sorting
    	 * will always be forced on first - any sorting after that (from the user)
    	 * will then be performed as required. This can be useful for grouping rows
    	 * together.
    	 *  @type array
    	 *  @default null
    	 *
    	 *  @dtopt Option
    	 *  @name DataTable.defaults.orderFixed
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "orderFixed": [[0,'asc']]
    	 *      } );
    	 *    } )
    	 */
    	"aaSortingFixed": [],


    	/**
    	 * DataTables can be instructed to load data to display in the table from a
    	 * Ajax source. This option defines how that Ajax call is made and where to.
    	 *
    	 * The `ajax` property has three different modes of operation, depending on
    	 * how it is defined. These are:
    	 *
    	 * * `string` - Set the URL from where the data should be loaded from.
    	 * * `object` - Define properties for `jQuery.ajax`.
    	 * * `function` - Custom data get function
    	 *
    	 * `string`
    	 * --------
    	 *
    	 * As a string, the `ajax` property simply defines the URL from which
    	 * DataTables will load data.
    	 *
    	 * `object`
    	 * --------
    	 *
    	 * As an object, the parameters in the object are passed to
    	 * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
    	 * of the Ajax request. DataTables has a number of default parameters which
    	 * you can override using this option. Please refer to the jQuery
    	 * documentation for a full description of the options available, although
    	 * the following parameters provide additional options in DataTables or
    	 * require special consideration:
    	 *
    	 * * `data` - As with jQuery, `data` can be provided as an object, but it
    	 *   can also be used as a function to manipulate the data DataTables sends
    	 *   to the server. The function takes a single parameter, an object of
    	 *   parameters with the values that DataTables has readied for sending. An
    	 *   object may be returned which will be merged into the DataTables
    	 *   defaults, or you can add the items to the object that was passed in and
    	 *   not return anything from the function. This supersedes `fnServerParams`
    	 *   from DataTables 1.9-.
    	 *
    	 * * `dataSrc` - By default DataTables will look for the property `data` (or
    	 *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
    	 *   from an Ajax source or for server-side processing - this parameter
    	 *   allows that property to be changed. You can use Javascript dotted
    	 *   object notation to get a data source for multiple levels of nesting, or
    	 *   it my be used as a function. As a function it takes a single parameter,
    	 *   the JSON returned from the server, which can be manipulated as
    	 *   required, with the returned value being that used by DataTables as the
    	 *   data source for the table. This supersedes `sAjaxDataProp` from
    	 *   DataTables 1.9-.
    	 *
    	 * * `success` - Should not be overridden it is used internally in
    	 *   DataTables. To manipulate / transform the data returned by the server
    	 *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
    	 *
    	 * `function`
    	 * ----------
    	 *
    	 * As a function, making the Ajax call is left up to yourself allowing
    	 * complete control of the Ajax request. Indeed, if desired, a method other
    	 * than Ajax could be used to obtain the required data, such as Web storage
    	 * or an AIR database.
    	 *
    	 * The function is given four parameters and no return is required. The
    	 * parameters are:
    	 *
    	 * 1. _object_ - Data to send to the server
    	 * 2. _function_ - Callback function that must be executed when the required
    	 *    data has been obtained. That data should be passed into the callback
    	 *    as the only parameter
    	 * 3. _object_ - DataTables settings object for the table
    	 *
    	 * Note that this supersedes `fnServerData` from DataTables 1.9-.
    	 *
    	 *  @type string|object|function
    	 *  @default null
    	 *
    	 *  @dtopt Option
    	 *  @name DataTable.defaults.ajax
    	 *  @since 1.10.0
    	 *
    	 * @example
    	 *   // Get JSON data from a file via Ajax.
    	 *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
    	 *   $('#example').dataTable( {
    	 *     "ajax": "data.json"
    	 *   } );
    	 *
    	 * @example
    	 *   // Get JSON data from a file via Ajax, using `dataSrc` to change
    	 *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
    	 *   $('#example').dataTable( {
    	 *     "ajax": {
    	 *       "url": "data.json",
    	 *       "dataSrc": "tableData"
    	 *     }
    	 *   } );
    	 *
    	 * @example
    	 *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
    	 *   // from a plain array rather than an array in an object
    	 *   $('#example').dataTable( {
    	 *     "ajax": {
    	 *       "url": "data.json",
    	 *       "dataSrc": ""
    	 *     }
    	 *   } );
    	 *
    	 * @example
    	 *   // Manipulate the data returned from the server - add a link to data
    	 *   // (note this can, should, be done using `render` for the column - this
    	 *   // is just a simple example of how the data can be manipulated).
    	 *   $('#example').dataTable( {
    	 *     "ajax": {
    	 *       "url": "data.json",
    	 *       "dataSrc": function ( json ) {
    	 *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
    	 *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
    	 *         }
    	 *         return json;
    	 *       }
    	 *     }
    	 *   } );
    	 *
    	 * @example
    	 *   // Add data to the request
    	 *   $('#example').dataTable( {
    	 *     "ajax": {
    	 *       "url": "data.json",
    	 *       "data": function ( d ) {
    	 *         return {
    	 *           "extra_search": $('#extra').val()
    	 *         };
    	 *       }
    	 *     }
    	 *   } );
    	 *
    	 * @example
    	 *   // Send request as POST
    	 *   $('#example').dataTable( {
    	 *     "ajax": {
    	 *       "url": "data.json",
    	 *       "type": "POST"
    	 *     }
    	 *   } );
    	 *
    	 * @example
    	 *   // Get the data from localStorage (could interface with a form for
    	 *   // adding, editing and removing rows).
    	 *   $('#example').dataTable( {
    	 *     "ajax": function (data, callback, settings) {
    	 *       callback(
    	 *         JSON.parse( localStorage.getItem('dataTablesData') )
    	 *       );
    	 *     }
    	 *   } );
    	 */
    	"ajax": null,


    	/**
    	 * This parameter allows you to readily specify the entries in the length drop
    	 * down menu that DataTables shows when pagination is enabled. It can be
    	 * either a 1D array of options which will be used for both the displayed
    	 * option and the value, or a 2D array which will use the array in the first
    	 * position as the value, and the array in the second position as the
    	 * displayed options (useful for language strings such as 'All').
    	 *
    	 * Note that the `pageLength` property will be automatically set to the
    	 * first value given in this array, unless `pageLength` is also provided.
    	 *  @type array
    	 *  @default [ 10, 25, 50, 100 ]
    	 *
    	 *  @dtopt Option
    	 *  @name DataTable.defaults.lengthMenu
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
    	 *      } );
    	 *    } );
    	 */
    	"aLengthMenu": [ 10, 25, 50, 100 ],


    	/**
    	 * The `columns` option in the initialisation parameter allows you to define
    	 * details about the way individual columns behave. For a full list of
    	 * column options that can be set, please see
    	 * {@link DataTable.defaults.column}. Note that if you use `columns` to
    	 * define your columns, you must have an entry in the array for every single
    	 * column that you have in your table (these can be null if you don't which
    	 * to specify any options).
    	 *  @member
    	 *
    	 *  @name DataTable.defaults.column
    	 */
    	"aoColumns": null,

    	/**
    	 * Very similar to `columns`, `columnDefs` allows you to target a specific
    	 * column, multiple columns, or all columns, using the `targets` property of
    	 * each object in the array. This allows great flexibility when creating
    	 * tables, as the `columnDefs` arrays can be of any length, targeting the
    	 * columns you specifically want. `columnDefs` may use any of the column
    	 * options available: {@link DataTable.defaults.column}, but it _must_
    	 * have `targets` defined in each object in the array. Values in the `targets`
    	 * array may be:
    	 *   <ul>
    	 *     <li>a string - class name will be matched on the TH for the column</li>
    	 *     <li>0 or a positive integer - column index counting from the left</li>
    	 *     <li>a negative integer - column index counting from the right</li>
    	 *     <li>the string "_all" - all columns (i.e. assign a default)</li>
    	 *   </ul>
    	 *  @member
    	 *
    	 *  @name DataTable.defaults.columnDefs
    	 */
    	"aoColumnDefs": null,


    	/**
    	 * Basically the same as `search`, this parameter defines the individual column
    	 * filtering state at initialisation time. The array must be of the same size
    	 * as the number of columns, and each element be an object with the parameters
    	 * `search` and `escapeRegex` (the latter is optional). 'null' is also
    	 * accepted and the default will be used.
    	 *  @type array
    	 *  @default []
    	 *
    	 *  @dtopt Option
    	 *  @name DataTable.defaults.searchCols
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "searchCols": [
    	 *          null,
    	 *          { "search": "My filter" },
    	 *          null,
    	 *          { "search": "^[0-9]", "escapeRegex": false }
    	 *        ]
    	 *      } );
    	 *    } )
    	 */
    	"aoSearchCols": [],


    	/**
    	 * An array of CSS classes that should be applied to displayed rows. This
    	 * array may be of any length, and DataTables will apply each class
    	 * sequentially, looping when required.
    	 *  @type array
    	 *  @default null <i>Will take the values determined by the `oClasses.stripe*`
    	 *    options</i>
    	 *
    	 *  @dtopt Option
    	 *  @name DataTable.defaults.stripeClasses
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
    	 *      } );
    	 *    } )
    	 */
    	"asStripeClasses": null,


    	/**
    	 * Enable or disable automatic column width calculation. This can be disabled
    	 * as an optimisation (it takes some time to calculate the widths) if the
    	 * tables widths are passed in using `columns`.
    	 *  @type boolean
    	 *  @default true
    	 *
    	 *  @dtopt Features
    	 *  @name DataTable.defaults.autoWidth
    	 *
    	 *  @example
    	 *    $(document).ready( function () {
    	 *      $('#example').dataTable( {
    	 *        "autoWidth": false
    	 *      } );
    	 *    } );
    	 */
    	"bAutoWidth": true,


    	/**
    	 * Deferred rendering can provide DataTables with a huge speed boost when you
    	 * are using an Ajax or JS data source for the table. This option, when set to
    	 * true, will cause DataTables to defer the creation of the table elements for
    	 * each row until they are needed for a draw - saving a significant amount of
    	 * time.
    	 *  @type boolean
    	 *  @default false
    	 *
    	 *  @dtopt Features
    	 *  @name DataTable.defaults.deferRender
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "ajax": "sources/arrays.txt",
    	 *        "deferRender": true
    	 *      } );
    	 *    } );
    	 */
    	"bDeferRender": false,


    	/**
    	 * Replace a DataTable which matches the given selector and replace it with
    	 * one which has the properties of the new initialisation object passed. If no
    	 * table matches the selector, then the new DataTable will be constructed as
    	 * per normal.
    	 *  @type boolean
    	 *  @default false
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.destroy
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "srollY": "200px",
    	 *        "paginate": false
    	 *      } );
    	 *
    	 *      // Some time later....
    	 *      $('#example').dataTable( {
    	 *        "filter": false,
    	 *        "destroy": true
    	 *      } );
    	 *    } );
    	 */
    	"bDestroy": false,


    	/**
    	 * Enable or disable filtering of data. Filtering in DataTables is "smart" in
    	 * that it allows the end user to input multiple words (space separated) and
    	 * will match a row containing those words, even if not in the order that was
    	 * specified (this allow matching across multiple columns). Note that if you
    	 * wish to use filtering in DataTables this must remain 'true' - to remove the
    	 * default filtering input box and retain filtering abilities, please use
    	 * {@link DataTable.defaults.dom}.
    	 *  @type boolean
    	 *  @default true
    	 *
    	 *  @dtopt Features
    	 *  @name DataTable.defaults.searching
    	 *
    	 *  @example
    	 *    $(document).ready( function () {
    	 *      $('#example').dataTable( {
    	 *        "searching": false
    	 *      } );
    	 *    } );
    	 */
    	"bFilter": true,


    	/**
    	 * Enable or disable the table information display. This shows information
    	 * about the data that is currently visible on the page, including information
    	 * about filtered data if that action is being performed.
    	 *  @type boolean
    	 *  @default true
    	 *
    	 *  @dtopt Features
    	 *  @name DataTable.defaults.info
    	 *
    	 *  @example
    	 *    $(document).ready( function () {
    	 *      $('#example').dataTable( {
    	 *        "info": false
    	 *      } );
    	 *    } );
    	 */
    	"bInfo": true,


    	/**
    	 * Allows the end user to select the size of a formatted page from a select
    	 * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
    	 *  @type boolean
    	 *  @default true
    	 *
    	 *  @dtopt Features
    	 *  @name DataTable.defaults.lengthChange
    	 *
    	 *  @example
    	 *    $(document).ready( function () {
    	 *      $('#example').dataTable( {
    	 *        "lengthChange": false
    	 *      } );
    	 *    } );
    	 */
    	"bLengthChange": true,


    	/**
    	 * Enable or disable pagination.
    	 *  @type boolean
    	 *  @default true
    	 *
    	 *  @dtopt Features
    	 *  @name DataTable.defaults.paging
    	 *
    	 *  @example
    	 *    $(document).ready( function () {
    	 *      $('#example').dataTable( {
    	 *        "paging": false
    	 *      } );
    	 *    } );
    	 */
    	"bPaginate": true,


    	/**
    	 * Enable or disable the display of a 'processing' indicator when the table is
    	 * being processed (e.g. a sort). This is particularly useful for tables with
    	 * large amounts of data where it can take a noticeable amount of time to sort
    	 * the entries.
    	 *  @type boolean
    	 *  @default false
    	 *
    	 *  @dtopt Features
    	 *  @name DataTable.defaults.processing
    	 *
    	 *  @example
    	 *    $(document).ready( function () {
    	 *      $('#example').dataTable( {
    	 *        "processing": true
    	 *      } );
    	 *    } );
    	 */
    	"bProcessing": false,


    	/**
    	 * Retrieve the DataTables object for the given selector. Note that if the
    	 * table has already been initialised, this parameter will cause DataTables
    	 * to simply return the object that has already been set up - it will not take
    	 * account of any changes you might have made to the initialisation object
    	 * passed to DataTables (setting this parameter to true is an acknowledgement
    	 * that you understand this). `destroy` can be used to reinitialise a table if
    	 * you need.
    	 *  @type boolean
    	 *  @default false
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.retrieve
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      initTable();
    	 *      tableActions();
    	 *    } );
    	 *
    	 *    function initTable ()
    	 *    {
    	 *      return $('#example').dataTable( {
    	 *        "scrollY": "200px",
    	 *        "paginate": false,
    	 *        "retrieve": true
    	 *      } );
    	 *    }
    	 *
    	 *    function tableActions ()
    	 *    {
    	 *      var table = initTable();
    	 *      // perform API operations with oTable
    	 *    }
    	 */
    	"bRetrieve": false,


    	/**
    	 * When vertical (y) scrolling is enabled, DataTables will force the height of
    	 * the table's viewport to the given height at all times (useful for layout).
    	 * However, this can look odd when filtering data down to a small data set,
    	 * and the footer is left "floating" further down. This parameter (when
    	 * enabled) will cause DataTables to collapse the table's viewport down when
    	 * the result set will fit within the given Y height.
    	 *  @type boolean
    	 *  @default false
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.scrollCollapse
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "scrollY": "200",
    	 *        "scrollCollapse": true
    	 *      } );
    	 *    } );
    	 */
    	"bScrollCollapse": false,


    	/**
    	 * Configure DataTables to use server-side processing. Note that the
    	 * `ajax` parameter must also be given in order to give DataTables a
    	 * source to obtain the required data for each draw.
    	 *  @type boolean
    	 *  @default false
    	 *
    	 *  @dtopt Features
    	 *  @dtopt Server-side
    	 *  @name DataTable.defaults.serverSide
    	 *
    	 *  @example
    	 *    $(document).ready( function () {
    	 *      $('#example').dataTable( {
    	 *        "serverSide": true,
    	 *        "ajax": "xhr.php"
    	 *      } );
    	 *    } );
    	 */
    	"bServerSide": false,


    	/**
    	 * Enable or disable sorting of columns. Sorting of individual columns can be
    	 * disabled by the `sortable` option for each column.
    	 *  @type boolean
    	 *  @default true
    	 *
    	 *  @dtopt Features
    	 *  @name DataTable.defaults.ordering
    	 *
    	 *  @example
    	 *    $(document).ready( function () {
    	 *      $('#example').dataTable( {
    	 *        "ordering": false
    	 *      } );
    	 *    } );
    	 */
    	"bSort": true,


    	/**
    	 * Enable or display DataTables' ability to sort multiple columns at the
    	 * same time (activated by shift-click by the user).
    	 *  @type boolean
    	 *  @default true
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.orderMulti
    	 *
    	 *  @example
    	 *    // Disable multiple column sorting ability
    	 *    $(document).ready( function () {
    	 *      $('#example').dataTable( {
    	 *        "orderMulti": false
    	 *      } );
    	 *    } );
    	 */
    	"bSortMulti": true,


    	/**
    	 * Allows control over whether DataTables should use the top (true) unique
    	 * cell that is found for a single column, or the bottom (false - default).
    	 * This is useful when using complex headers.
    	 *  @type boolean
    	 *  @default false
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.orderCellsTop
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "orderCellsTop": true
    	 *      } );
    	 *    } );
    	 */
    	"bSortCellsTop": false,


    	/**
    	 * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
    	 * `sorting\_3` to the columns which are currently being sorted on. This is
    	 * presented as a feature switch as it can increase processing time (while
    	 * classes are removed and added) so for large data sets you might want to
    	 * turn this off.
    	 *  @type boolean
    	 *  @default true
    	 *
    	 *  @dtopt Features
    	 *  @name DataTable.defaults.orderClasses
    	 *
    	 *  @example
    	 *    $(document).ready( function () {
    	 *      $('#example').dataTable( {
    	 *        "orderClasses": false
    	 *      } );
    	 *    } );
    	 */
    	"bSortClasses": true,


    	/**
    	 * Enable or disable state saving. When enabled HTML5 `localStorage` will be
    	 * used to save table display information such as pagination information,
    	 * display length, filtering and sorting. As such when the end user reloads
    	 * the page the display display will match what thy had previously set up.
    	 *
    	 * Due to the use of `localStorage` the default state saving is not supported
    	 * in IE6 or 7. If state saving is required in those browsers, use
    	 * `stateSaveCallback` to provide a storage solution such as cookies.
    	 *  @type boolean
    	 *  @default false
    	 *
    	 *  @dtopt Features
    	 *  @name DataTable.defaults.stateSave
    	 *
    	 *  @example
    	 *    $(document).ready( function () {
    	 *      $('#example').dataTable( {
    	 *        "stateSave": true
    	 *      } );
    	 *    } );
    	 */
    	"bStateSave": false,


    	/**
    	 * This function is called when a TR element is created (and all TD child
    	 * elements have been inserted), or registered if using a DOM source, allowing
    	 * manipulation of the TR element (adding classes etc).
    	 *  @type function
    	 *  @param {node} row "TR" element for the current row
    	 *  @param {array} data Raw data array for this row
    	 *  @param {int} dataIndex The index of this row in the internal aoData array
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.createdRow
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "createdRow": function( row, data, dataIndex ) {
    	 *          // Bold the grade for all 'A' grade browsers
    	 *          if ( data[4] == "A" )
    	 *          {
    	 *            $('td:eq(4)', row).html( '<b>A</b>' );
    	 *          }
    	 *        }
    	 *      } );
    	 *    } );
    	 */
    	"fnCreatedRow": null,


    	/**
    	 * This function is called on every 'draw' event, and allows you to
    	 * dynamically modify any aspect you want about the created DOM.
    	 *  @type function
    	 *  @param {object} settings DataTables settings object
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.drawCallback
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "drawCallback": function( settings ) {
    	 *          alert( 'DataTables has redrawn the table' );
    	 *        }
    	 *      } );
    	 *    } );
    	 */
    	"fnDrawCallback": null,


    	/**
    	 * Identical to fnHeaderCallback() but for the table footer this function
    	 * allows you to modify the table footer on every 'draw' event.
    	 *  @type function
    	 *  @param {node} foot "TR" element for the footer
    	 *  @param {array} data Full table data (as derived from the original HTML)
    	 *  @param {int} start Index for the current display starting point in the
    	 *    display array
    	 *  @param {int} end Index for the current display ending point in the
    	 *    display array
    	 *  @param {array int} display Index array to translate the visual position
    	 *    to the full data array
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.footerCallback
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "footerCallback": function( tfoot, data, start, end, display ) {
    	 *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
    	 *        }
    	 *      } );
    	 *    } )
    	 */
    	"fnFooterCallback": null,


    	/**
    	 * When rendering large numbers in the information element for the table
    	 * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
    	 * to have a comma separator for the 'thousands' units (e.g. 1 million is
    	 * rendered as "1,000,000") to help readability for the end user. This
    	 * function will override the default method DataTables uses.
    	 *  @type function
    	 *  @member
    	 *  @param {int} toFormat number to be formatted
    	 *  @returns {string} formatted string for DataTables to show the number
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.formatNumber
    	 *
    	 *  @example
    	 *    // Format a number using a single quote for the separator (note that
    	 *    // this can also be done with the language.thousands option)
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "formatNumber": function ( toFormat ) {
    	 *          return toFormat.toString().replace(
    	 *            /\B(?=(\d{3})+(?!\d))/g, "'"
    	 *          );
    	 *        };
    	 *      } );
    	 *    } );
    	 */
    	"fnFormatNumber": function ( toFormat ) {
    		return toFormat.toString().replace(
    			/\B(?=(\d{3})+(?!\d))/g,
    			this.oLanguage.sThousands
    		);
    	},


    	/**
    	 * This function is called on every 'draw' event, and allows you to
    	 * dynamically modify the header row. This can be used to calculate and
    	 * display useful information about the table.
    	 *  @type function
    	 *  @param {node} head "TR" element for the header
    	 *  @param {array} data Full table data (as derived from the original HTML)
    	 *  @param {int} start Index for the current display starting point in the
    	 *    display array
    	 *  @param {int} end Index for the current display ending point in the
    	 *    display array
    	 *  @param {array int} display Index array to translate the visual position
    	 *    to the full data array
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.headerCallback
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "fheaderCallback": function( head, data, start, end, display ) {
    	 *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
    	 *        }
    	 *      } );
    	 *    } )
    	 */
    	"fnHeaderCallback": null,


    	/**
    	 * The information element can be used to convey information about the current
    	 * state of the table. Although the internationalisation options presented by
    	 * DataTables are quite capable of dealing with most customisations, there may
    	 * be times where you wish to customise the string further. This callback
    	 * allows you to do exactly that.
    	 *  @type function
    	 *  @param {object} oSettings DataTables settings object
    	 *  @param {int} start Starting position in data for the draw
    	 *  @param {int} end End position in data for the draw
    	 *  @param {int} max Total number of rows in the table (regardless of
    	 *    filtering)
    	 *  @param {int} total Total number of rows in the data set, after filtering
    	 *  @param {string} pre The string that DataTables has formatted using it's
    	 *    own rules
    	 *  @returns {string} The string to be displayed in the information element.
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.infoCallback
    	 *
    	 *  @example
    	 *    $('#example').dataTable( {
    	 *      "infoCallback": function( settings, start, end, max, total, pre ) {
    	 *        return start +" to "+ end;
    	 *      }
    	 *    } );
    	 */
    	"fnInfoCallback": null,


    	/**
    	 * Called when the table has been initialised. Normally DataTables will
    	 * initialise sequentially and there will be no need for this function,
    	 * however, this does not hold true when using external language information
    	 * since that is obtained using an async XHR call.
    	 *  @type function
    	 *  @param {object} settings DataTables settings object
    	 *  @param {object} json The JSON object request from the server - only
    	 *    present if client-side Ajax sourced data is used
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.initComplete
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "initComplete": function(settings, json) {
    	 *          alert( 'DataTables has finished its initialisation.' );
    	 *        }
    	 *      } );
    	 *    } )
    	 */
    	"fnInitComplete": null,


    	/**
    	 * Called at the very start of each table draw and can be used to cancel the
    	 * draw by returning false, any other return (including undefined) results in
    	 * the full draw occurring).
    	 *  @type function
    	 *  @param {object} settings DataTables settings object
    	 *  @returns {boolean} False will cancel the draw, anything else (including no
    	 *    return) will allow it to complete.
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.preDrawCallback
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "preDrawCallback": function( settings ) {
    	 *          if ( $('#test').val() == 1 ) {
    	 *            return false;
    	 *          }
    	 *        }
    	 *      } );
    	 *    } );
    	 */
    	"fnPreDrawCallback": null,


    	/**
    	 * This function allows you to 'post process' each row after it have been
    	 * generated for each table draw, but before it is rendered on screen. This
    	 * function might be used for setting the row class name etc.
    	 *  @type function
    	 *  @param {node} row "TR" element for the current row
    	 *  @param {array} data Raw data array for this row
    	 *  @param {int} displayIndex The display index for the current table draw
    	 *  @param {int} displayIndexFull The index of the data in the full list of
    	 *    rows (after filtering)
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.rowCallback
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
    	 *          // Bold the grade for all 'A' grade browsers
    	 *          if ( data[4] == "A" ) {
    	 *            $('td:eq(4)', row).html( '<b>A</b>' );
    	 *          }
    	 *        }
    	 *      } );
    	 *    } );
    	 */
    	"fnRowCallback": null,


    	/**
    	 * __Deprecated__ The functionality provided by this parameter has now been
    	 * superseded by that provided through `ajax`, which should be used instead.
    	 *
    	 * This parameter allows you to override the default function which obtains
    	 * the data from the server so something more suitable for your application.
    	 * For example you could use POST data, or pull information from a Gears or
    	 * AIR database.
    	 *  @type function
    	 *  @member
    	 *  @param {string} source HTTP source to obtain the data from (`ajax`)
    	 *  @param {array} data A key/value pair object containing the data to send
    	 *    to the server
    	 *  @param {function} callback to be called on completion of the data get
    	 *    process that will draw the data on the page.
    	 *  @param {object} settings DataTables settings object
    	 *
    	 *  @dtopt Callbacks
    	 *  @dtopt Server-side
    	 *  @name DataTable.defaults.serverData
    	 *
    	 *  @deprecated 1.10. Please use `ajax` for this functionality now.
    	 */
    	"fnServerData": null,


    	/**
    	 * __Deprecated__ The functionality provided by this parameter has now been
    	 * superseded by that provided through `ajax`, which should be used instead.
    	 *
    	 *  It is often useful to send extra data to the server when making an Ajax
    	 * request - for example custom filtering information, and this callback
    	 * function makes it trivial to send extra information to the server. The
    	 * passed in parameter is the data set that has been constructed by
    	 * DataTables, and you can add to this or modify it as you require.
    	 *  @type function
    	 *  @param {array} data Data array (array of objects which are name/value
    	 *    pairs) that has been constructed by DataTables and will be sent to the
    	 *    server. In the case of Ajax sourced data with server-side processing
    	 *    this will be an empty array, for server-side processing there will be a
    	 *    significant number of parameters!
    	 *  @returns {undefined} Ensure that you modify the data array passed in,
    	 *    as this is passed by reference.
    	 *
    	 *  @dtopt Callbacks
    	 *  @dtopt Server-side
    	 *  @name DataTable.defaults.serverParams
    	 *
    	 *  @deprecated 1.10. Please use `ajax` for this functionality now.
    	 */
    	"fnServerParams": null,


    	/**
    	 * Load the table state. With this function you can define from where, and how, the
    	 * state of a table is loaded. By default DataTables will load from `localStorage`
    	 * but you might wish to use a server-side database or cookies.
    	 *  @type function
    	 *  @member
    	 *  @param {object} settings DataTables settings object
    	 *  @param {object} callback Callback that can be executed when done. It
    	 *    should be passed the loaded state object.
    	 *  @return {object} The DataTables state object to be loaded
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.stateLoadCallback
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "stateSave": true,
    	 *        "stateLoadCallback": function (settings, callback) {
    	 *          $.ajax( {
    	 *            "url": "/state_load",
    	 *            "dataType": "json",
    	 *            "success": function (json) {
    	 *              callback( json );
    	 *            }
    	 *          } );
    	 *        }
    	 *      } );
    	 *    } );
    	 */
    	"fnStateLoadCallback": function ( settings ) {
    		try {
    			return JSON.parse(
    				(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
    					'DataTables_'+settings.sInstance+'_'+location.pathname
    				)
    			);
    		} catch (e) {
    			return {};
    		}
    	},


    	/**
    	 * Callback which allows modification of the saved state prior to loading that state.
    	 * This callback is called when the table is loading state from the stored data, but
    	 * prior to the settings object being modified by the saved state. Note that for
    	 * plug-in authors, you should use the `stateLoadParams` event to load parameters for
    	 * a plug-in.
    	 *  @type function
    	 *  @param {object} settings DataTables settings object
    	 *  @param {object} data The state object that is to be loaded
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.stateLoadParams
    	 *
    	 *  @example
    	 *    // Remove a saved filter, so filtering is never loaded
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "stateSave": true,
    	 *        "stateLoadParams": function (settings, data) {
    	 *          data.oSearch.sSearch = "";
    	 *        }
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Disallow state loading by returning false
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "stateSave": true,
    	 *        "stateLoadParams": function (settings, data) {
    	 *          return false;
    	 *        }
    	 *      } );
    	 *    } );
    	 */
    	"fnStateLoadParams": null,


    	/**
    	 * Callback that is called when the state has been loaded from the state saving method
    	 * and the DataTables settings object has been modified as a result of the loaded state.
    	 *  @type function
    	 *  @param {object} settings DataTables settings object
    	 *  @param {object} data The state object that was loaded
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.stateLoaded
    	 *
    	 *  @example
    	 *    // Show an alert with the filtering value that was saved
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "stateSave": true,
    	 *        "stateLoaded": function (settings, data) {
    	 *          alert( 'Saved filter was: '+data.oSearch.sSearch );
    	 *        }
    	 *      } );
    	 *    } );
    	 */
    	"fnStateLoaded": null,


    	/**
    	 * Save the table state. This function allows you to define where and how the state
    	 * information for the table is stored By default DataTables will use `localStorage`
    	 * but you might wish to use a server-side database or cookies.
    	 *  @type function
    	 *  @member
    	 *  @param {object} settings DataTables settings object
    	 *  @param {object} data The state object to be saved
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.stateSaveCallback
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "stateSave": true,
    	 *        "stateSaveCallback": function (settings, data) {
    	 *          // Send an Ajax request to the server with the state object
    	 *          $.ajax( {
    	 *            "url": "/state_save",
    	 *            "data": data,
    	 *            "dataType": "json",
    	 *            "method": "POST"
    	 *            "success": function () {}
    	 *          } );
    	 *        }
    	 *      } );
    	 *    } );
    	 */
    	"fnStateSaveCallback": function ( settings, data ) {
    		try {
    			(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
    				'DataTables_'+settings.sInstance+'_'+location.pathname,
    				JSON.stringify( data )
    			);
    		} catch (e) {}
    	},


    	/**
    	 * Callback which allows modification of the state to be saved. Called when the table
    	 * has changed state a new state save is required. This method allows modification of
    	 * the state saving object prior to actually doing the save, including addition or
    	 * other state properties or modification. Note that for plug-in authors, you should
    	 * use the `stateSaveParams` event to save parameters for a plug-in.
    	 *  @type function
    	 *  @param {object} settings DataTables settings object
    	 *  @param {object} data The state object to be saved
    	 *
    	 *  @dtopt Callbacks
    	 *  @name DataTable.defaults.stateSaveParams
    	 *
    	 *  @example
    	 *    // Remove a saved filter, so filtering is never saved
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "stateSave": true,
    	 *        "stateSaveParams": function (settings, data) {
    	 *          data.oSearch.sSearch = "";
    	 *        }
    	 *      } );
    	 *    } );
    	 */
    	"fnStateSaveParams": null,


    	/**
    	 * Duration for which the saved state information is considered valid. After this period
    	 * has elapsed the state will be returned to the default.
    	 * Value is given in seconds.
    	 *  @type int
    	 *  @default 7200 <i>(2 hours)</i>
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.stateDuration
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "stateDuration": 60*60*24; // 1 day
    	 *      } );
    	 *    } )
    	 */
    	"iStateDuration": 7200,


    	/**
    	 * When enabled DataTables will not make a request to the server for the first
    	 * page draw - rather it will use the data already on the page (no sorting etc
    	 * will be applied to it), thus saving on an XHR at load time. `deferLoading`
    	 * is used to indicate that deferred loading is required, but it is also used
    	 * to tell DataTables how many records there are in the full table (allowing
    	 * the information element and pagination to be displayed correctly). In the case
    	 * where a filtering is applied to the table on initial load, this can be
    	 * indicated by giving the parameter as an array, where the first element is
    	 * the number of records available after filtering and the second element is the
    	 * number of records without filtering (allowing the table information element
    	 * to be shown correctly).
    	 *  @type int | array
    	 *  @default null
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.deferLoading
    	 *
    	 *  @example
    	 *    // 57 records available in the table, no filtering applied
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "serverSide": true,
    	 *        "ajax": "scripts/server_processing.php",
    	 *        "deferLoading": 57
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // 57 records after filtering, 100 without filtering (an initial filter applied)
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "serverSide": true,
    	 *        "ajax": "scripts/server_processing.php",
    	 *        "deferLoading": [ 57, 100 ],
    	 *        "search": {
    	 *          "search": "my_filter"
    	 *        }
    	 *      } );
    	 *    } );
    	 */
    	"iDeferLoading": null,


    	/**
    	 * Number of rows to display on a single page when using pagination. If
    	 * feature enabled (`lengthChange`) then the end user will be able to override
    	 * this to a custom setting using a pop-up menu.
    	 *  @type int
    	 *  @default 10
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.pageLength
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "pageLength": 50
    	 *      } );
    	 *    } )
    	 */
    	"iDisplayLength": 10,


    	/**
    	 * Define the starting point for data display when using DataTables with
    	 * pagination. Note that this parameter is the number of records, rather than
    	 * the page number, so if you have 10 records per page and want to start on
    	 * the third page, it should be "20".
    	 *  @type int
    	 *  @default 0
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.displayStart
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "displayStart": 20
    	 *      } );
    	 *    } )
    	 */
    	"iDisplayStart": 0,


    	/**
    	 * By default DataTables allows keyboard navigation of the table (sorting, paging,
    	 * and filtering) by adding a `tabindex` attribute to the required elements. This
    	 * allows you to tab through the controls and press the enter key to activate them.
    	 * The tabindex is default 0, meaning that the tab follows the flow of the document.
    	 * You can overrule this using this parameter if you wish. Use a value of -1 to
    	 * disable built-in keyboard navigation.
    	 *  @type int
    	 *  @default 0
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.tabIndex
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "tabIndex": 1
    	 *      } );
    	 *    } );
    	 */
    	"iTabIndex": 0,


    	/**
    	 * Classes that DataTables assigns to the various components and features
    	 * that it adds to the HTML table. This allows classes to be configured
    	 * during initialisation in addition to through the static
    	 * {@link DataTable.ext.oStdClasses} object).
    	 *  @namespace
    	 *  @name DataTable.defaults.classes
    	 */
    	"oClasses": {},


    	/**
    	 * All strings that DataTables uses in the user interface that it creates
    	 * are defined in this object, allowing you to modified them individually or
    	 * completely replace them all as required.
    	 *  @namespace
    	 *  @name DataTable.defaults.language
    	 */
    	"oLanguage": {
    		/**
    		 * Strings that are used for WAI-ARIA labels and controls only (these are not
    		 * actually visible on the page, but will be read by screenreaders, and thus
    		 * must be internationalised as well).
    		 *  @namespace
    		 *  @name DataTable.defaults.language.aria
    		 */
    		"oAria": {
    			/**
    			 * ARIA label that is added to the table headers when the column may be
    			 * sorted ascending by activing the column (click or return when focused).
    			 * Note that the column header is prefixed to this string.
    			 *  @type string
    			 *  @default : activate to sort column ascending
    			 *
    			 *  @dtopt Language
    			 *  @name DataTable.defaults.language.aria.sortAscending
    			 *
    			 *  @example
    			 *    $(document).ready( function() {
    			 *      $('#example').dataTable( {
    			 *        "language": {
    			 *          "aria": {
    			 *            "sortAscending": " - click/return to sort ascending"
    			 *          }
    			 *        }
    			 *      } );
    			 *    } );
    			 */
    			"sSortAscending": ": activate to sort column ascending",

    			/**
    			 * ARIA label that is added to the table headers when the column may be
    			 * sorted descending by activing the column (click or return when focused).
    			 * Note that the column header is prefixed to this string.
    			 *  @type string
    			 *  @default : activate to sort column ascending
    			 *
    			 *  @dtopt Language
    			 *  @name DataTable.defaults.language.aria.sortDescending
    			 *
    			 *  @example
    			 *    $(document).ready( function() {
    			 *      $('#example').dataTable( {
    			 *        "language": {
    			 *          "aria": {
    			 *            "sortDescending": " - click/return to sort descending"
    			 *          }
    			 *        }
    			 *      } );
    			 *    } );
    			 */
    			"sSortDescending": ": activate to sort column descending"
    		},

    		/**
    		 * Pagination string used by DataTables for the built-in pagination
    		 * control types.
    		 *  @namespace
    		 *  @name DataTable.defaults.language.paginate
    		 */
    		"oPaginate": {
    			/**
    			 * Text to use when using the 'full_numbers' type of pagination for the
    			 * button to take the user to the first page.
    			 *  @type string
    			 *  @default First
    			 *
    			 *  @dtopt Language
    			 *  @name DataTable.defaults.language.paginate.first
    			 *
    			 *  @example
    			 *    $(document).ready( function() {
    			 *      $('#example').dataTable( {
    			 *        "language": {
    			 *          "paginate": {
    			 *            "first": "First page"
    			 *          }
    			 *        }
    			 *      } );
    			 *    } );
    			 */
    			"sFirst": "First",


    			/**
    			 * Text to use when using the 'full_numbers' type of pagination for the
    			 * button to take the user to the last page.
    			 *  @type string
    			 *  @default Last
    			 *
    			 *  @dtopt Language
    			 *  @name DataTable.defaults.language.paginate.last
    			 *
    			 *  @example
    			 *    $(document).ready( function() {
    			 *      $('#example').dataTable( {
    			 *        "language": {
    			 *          "paginate": {
    			 *            "last": "Last page"
    			 *          }
    			 *        }
    			 *      } );
    			 *    } );
    			 */
    			"sLast": "Last",


    			/**
    			 * Text to use for the 'next' pagination button (to take the user to the
    			 * next page).
    			 *  @type string
    			 *  @default Next
    			 *
    			 *  @dtopt Language
    			 *  @name DataTable.defaults.language.paginate.next
    			 *
    			 *  @example
    			 *    $(document).ready( function() {
    			 *      $('#example').dataTable( {
    			 *        "language": {
    			 *          "paginate": {
    			 *            "next": "Next page"
    			 *          }
    			 *        }
    			 *      } );
    			 *    } );
    			 */
    			"sNext": "Next",


    			/**
    			 * Text to use for the 'previous' pagination button (to take the user to
    			 * the previous page).
    			 *  @type string
    			 *  @default Previous
    			 *
    			 *  @dtopt Language
    			 *  @name DataTable.defaults.language.paginate.previous
    			 *
    			 *  @example
    			 *    $(document).ready( function() {
    			 *      $('#example').dataTable( {
    			 *        "language": {
    			 *          "paginate": {
    			 *            "previous": "Previous page"
    			 *          }
    			 *        }
    			 *      } );
    			 *    } );
    			 */
    			"sPrevious": "Previous"
    		},

    		/**
    		 * This string is shown in preference to `zeroRecords` when the table is
    		 * empty of data (regardless of filtering). Note that this is an optional
    		 * parameter - if it is not given, the value of `zeroRecords` will be used
    		 * instead (either the default or given value).
    		 *  @type string
    		 *  @default No data available in table
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.emptyTable
    		 *
    		 *  @example
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "emptyTable": "No data available in table"
    		 *        }
    		 *      } );
    		 *    } );
    		 */
    		"sEmptyTable": "No data available in table",


    		/**
    		 * This string gives information to the end user about the information
    		 * that is current on display on the page. The following tokens can be
    		 * used in the string and will be dynamically replaced as the table
    		 * display updates. This tokens can be placed anywhere in the string, or
    		 * removed as needed by the language requires:
    		 *
    		 * * `\_START\_` - Display index of the first record on the current page
    		 * * `\_END\_` - Display index of the last record on the current page
    		 * * `\_TOTAL\_` - Number of records in the table after filtering
    		 * * `\_MAX\_` - Number of records in the table without filtering
    		 * * `\_PAGE\_` - Current page number
    		 * * `\_PAGES\_` - Total number of pages of data in the table
    		 *
    		 *  @type string
    		 *  @default Showing _START_ to _END_ of _TOTAL_ entries
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.info
    		 *
    		 *  @example
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "info": "Showing page _PAGE_ of _PAGES_"
    		 *        }
    		 *      } );
    		 *    } );
    		 */
    		"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",


    		/**
    		 * Display information string for when the table is empty. Typically the
    		 * format of this string should match `info`.
    		 *  @type string
    		 *  @default Showing 0 to 0 of 0 entries
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.infoEmpty
    		 *
    		 *  @example
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "infoEmpty": "No entries to show"
    		 *        }
    		 *      } );
    		 *    } );
    		 */
    		"sInfoEmpty": "Showing 0 to 0 of 0 entries",


    		/**
    		 * When a user filters the information in a table, this string is appended
    		 * to the information (`info`) to give an idea of how strong the filtering
    		 * is. The variable _MAX_ is dynamically updated.
    		 *  @type string
    		 *  @default (filtered from _MAX_ total entries)
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.infoFiltered
    		 *
    		 *  @example
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "infoFiltered": " - filtering from _MAX_ records"
    		 *        }
    		 *      } );
    		 *    } );
    		 */
    		"sInfoFiltered": "(filtered from _MAX_ total entries)",


    		/**
    		 * If can be useful to append extra information to the info string at times,
    		 * and this variable does exactly that. This information will be appended to
    		 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
    		 * being used) at all times.
    		 *  @type string
    		 *  @default <i>Empty string</i>
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.infoPostFix
    		 *
    		 *  @example
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "infoPostFix": "All records shown are derived from real information."
    		 *        }
    		 *      } );
    		 *    } );
    		 */
    		"sInfoPostFix": "",


    		/**
    		 * This decimal place operator is a little different from the other
    		 * language options since DataTables doesn't output floating point
    		 * numbers, so it won't ever use this for display of a number. Rather,
    		 * what this parameter does is modify the sort methods of the table so
    		 * that numbers which are in a format which has a character other than
    		 * a period (`.`) as a decimal place will be sorted numerically.
    		 *
    		 * Note that numbers with different decimal places cannot be shown in
    		 * the same table and still be sortable, the table must be consistent.
    		 * However, multiple different tables on the page can use different
    		 * decimal place characters.
    		 *  @type string
    		 *  @default 
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.decimal
    		 *
    		 *  @example
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "decimal": ","
    		 *          "thousands": "."
    		 *        }
    		 *      } );
    		 *    } );
    		 */
    		"sDecimal": "",


    		/**
    		 * DataTables has a build in number formatter (`formatNumber`) which is
    		 * used to format large numbers that are used in the table information.
    		 * By default a comma is used, but this can be trivially changed to any
    		 * character you wish with this parameter.
    		 *  @type string
    		 *  @default ,
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.thousands
    		 *
    		 *  @example
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "thousands": "'"
    		 *        }
    		 *      } );
    		 *    } );
    		 */
    		"sThousands": ",",


    		/**
    		 * Detail the action that will be taken when the drop down menu for the
    		 * pagination length option is changed. The '_MENU_' variable is replaced
    		 * with a default select list of 10, 25, 50 and 100, and can be replaced
    		 * with a custom select box if required.
    		 *  @type string
    		 *  @default Show _MENU_ entries
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.lengthMenu
    		 *
    		 *  @example
    		 *    // Language change only
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "lengthMenu": "Display _MENU_ records"
    		 *        }
    		 *      } );
    		 *    } );
    		 *
    		 *  @example
    		 *    // Language and options change
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "lengthMenu": 'Display <select>'+
    		 *            '<option value="10">10</option>'+
    		 *            '<option value="20">20</option>'+
    		 *            '<option value="30">30</option>'+
    		 *            '<option value="40">40</option>'+
    		 *            '<option value="50">50</option>'+
    		 *            '<option value="-1">All</option>'+
    		 *            '</select> records'
    		 *        }
    		 *      } );
    		 *    } );
    		 */
    		"sLengthMenu": "Show _MENU_ entries",


    		/**
    		 * When using Ajax sourced data and during the first draw when DataTables is
    		 * gathering the data, this message is shown in an empty row in the table to
    		 * indicate to the end user the the data is being loaded. Note that this
    		 * parameter is not used when loading data by server-side processing, just
    		 * Ajax sourced data with client-side processing.
    		 *  @type string
    		 *  @default Loading...
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.loadingRecords
    		 *
    		 *  @example
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "loadingRecords": "Please wait - loading..."
    		 *        }
    		 *      } );
    		 *    } );
    		 */
    		"sLoadingRecords": "Loading...",


    		/**
    		 * Text which is displayed when the table is processing a user action
    		 * (usually a sort command or similar).
    		 *  @type string
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.processing
    		 *
    		 *  @example
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "processing": "DataTables is currently busy"
    		 *        }
    		 *      } );
    		 *    } );
    		 */
    		"sProcessing": "",


    		/**
    		 * Details the actions that will be taken when the user types into the
    		 * filtering input text box. The variable "_INPUT_", if used in the string,
    		 * is replaced with the HTML text box for the filtering input allowing
    		 * control over where it appears in the string. If "_INPUT_" is not given
    		 * then the input box is appended to the string automatically.
    		 *  @type string
    		 *  @default Search:
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.search
    		 *
    		 *  @example
    		 *    // Input text box will be appended at the end automatically
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "search": "Filter records:"
    		 *        }
    		 *      } );
    		 *    } );
    		 *
    		 *  @example
    		 *    // Specify where the filter should appear
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "search": "Apply filter _INPUT_ to table"
    		 *        }
    		 *      } );
    		 *    } );
    		 */
    		"sSearch": "Search:",


    		/**
    		 * Assign a `placeholder` attribute to the search `input` element
    		 *  @type string
    		 *  @default 
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.searchPlaceholder
    		 */
    		"sSearchPlaceholder": "",


    		/**
    		 * All of the language information can be stored in a file on the
    		 * server-side, which DataTables will look up if this parameter is passed.
    		 * It must store the URL of the language file, which is in a JSON format,
    		 * and the object has the same properties as the oLanguage object in the
    		 * initialiser object (i.e. the above parameters). Please refer to one of
    		 * the example language files to see how this works in action.
    		 *  @type string
    		 *  @default <i>Empty string - i.e. disabled</i>
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.url
    		 *
    		 *  @example
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
    		 *        }
    		 *      } );
    		 *    } );
    		 */
    		"sUrl": "",


    		/**
    		 * Text shown inside the table records when the is no information to be
    		 * displayed after filtering. `emptyTable` is shown when there is simply no
    		 * information in the table at all (regardless of filtering).
    		 *  @type string
    		 *  @default No matching records found
    		 *
    		 *  @dtopt Language
    		 *  @name DataTable.defaults.language.zeroRecords
    		 *
    		 *  @example
    		 *    $(document).ready( function() {
    		 *      $('#example').dataTable( {
    		 *        "language": {
    		 *          "zeroRecords": "No records to display"
    		 *        }
    		 *      } );
    		 *    } );
    		 */
    		"sZeroRecords": "No matching records found"
    	},


    	/**
    	 * This parameter allows you to have define the global filtering state at
    	 * initialisation time. As an object the `search` parameter must be
    	 * defined, but all other parameters are optional. When `regex` is true,
    	 * the search string will be treated as a regular expression, when false
    	 * (default) it will be treated as a straight string. When `smart`
    	 * DataTables will use it's smart filtering methods (to word match at
    	 * any point in the data), when false this will not be done.
    	 *  @namespace
    	 *  @extends DataTable.models.oSearch
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.search
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "search": {"search": "Initial search"}
    	 *      } );
    	 *    } )
    	 */
    	"oSearch": $$7.extend( {}, DataTable.models.oSearch ),


    	/**
    	 * __Deprecated__ The functionality provided by this parameter has now been
    	 * superseded by that provided through `ajax`, which should be used instead.
    	 *
    	 * By default DataTables will look for the property `data` (or `aaData` for
    	 * compatibility with DataTables 1.9-) when obtaining data from an Ajax
    	 * source or for server-side processing - this parameter allows that
    	 * property to be changed. You can use Javascript dotted object notation to
    	 * get a data source for multiple levels of nesting.
    	 *  @type string
    	 *  @default data
    	 *
    	 *  @dtopt Options
    	 *  @dtopt Server-side
    	 *  @name DataTable.defaults.ajaxDataProp
    	 *
    	 *  @deprecated 1.10. Please use `ajax` for this functionality now.
    	 */
    	"sAjaxDataProp": "data",


    	/**
    	 * __Deprecated__ The functionality provided by this parameter has now been
    	 * superseded by that provided through `ajax`, which should be used instead.
    	 *
    	 * You can instruct DataTables to load data from an external
    	 * source using this parameter (use aData if you want to pass data in you
    	 * already have). Simply provide a url a JSON object can be obtained from.
    	 *  @type string
    	 *  @default null
    	 *
    	 *  @dtopt Options
    	 *  @dtopt Server-side
    	 *  @name DataTable.defaults.ajaxSource
    	 *
    	 *  @deprecated 1.10. Please use `ajax` for this functionality now.
    	 */
    	"sAjaxSource": null,


    	/**
    	 * This initialisation variable allows you to specify exactly where in the
    	 * DOM you want DataTables to inject the various controls it adds to the page
    	 * (for example you might want the pagination controls at the top of the
    	 * table). DIV elements (with or without a custom class) can also be added to
    	 * aid styling. The follow syntax is used:
    	 *   <ul>
    	 *     <li>The following options are allowed:
    	 *       <ul>
    	 *         <li>'l' - Length changing</li>
    	 *         <li>'f' - Filtering input</li>
    	 *         <li>'t' - The table!</li>
    	 *         <li>'i' - Information</li>
    	 *         <li>'p' - Pagination</li>
    	 *         <li>'r' - pRocessing</li>
    	 *       </ul>
    	 *     </li>
    	 *     <li>The following constants are allowed:
    	 *       <ul>
    	 *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
    	 *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
    	 *       </ul>
    	 *     </li>
    	 *     <li>The following syntax is expected:
    	 *       <ul>
    	 *         <li>'&lt;' and '&gt;' - div elements</li>
    	 *         <li>'&lt;"class" and '&gt;' - div with a class</li>
    	 *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
    	 *       </ul>
    	 *     </li>
    	 *     <li>Examples:
    	 *       <ul>
    	 *         <li>'&lt;"wrapper"flipt&gt;'</li>
    	 *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
    	 *       </ul>
    	 *     </li>
    	 *   </ul>
    	 *  @type string
    	 *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
    	 *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.dom
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
    	 *      } );
    	 *    } );
    	 */
    	"sDom": "lfrtip",


    	/**
    	 * Search delay option. This will throttle full table searches that use the
    	 * DataTables provided search input element (it does not effect calls to
    	 * `dt-api search()`, providing a delay before the search is made.
    	 *  @type integer
    	 *  @default 0
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.searchDelay
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "searchDelay": 200
    	 *      } );
    	 *    } )
    	 */
    	"searchDelay": null,


    	/**
    	 * DataTables features six different built-in options for the buttons to
    	 * display for pagination control:
    	 *
    	 * * `numbers` - Page number buttons only
    	 * * `simple` - 'Previous' and 'Next' buttons only
    	 * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
    	 * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
    	 * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
    	 * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers
    	 *  
    	 * Further methods can be added using {@link DataTable.ext.oPagination}.
    	 *  @type string
    	 *  @default simple_numbers
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.pagingType
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "pagingType": "full_numbers"
    	 *      } );
    	 *    } )
    	 */
    	"sPaginationType": "simple_numbers",


    	/**
    	 * Enable horizontal scrolling. When a table is too wide to fit into a
    	 * certain layout, or you have a large number of columns in the table, you
    	 * can enable x-scrolling to show the table in a viewport, which can be
    	 * scrolled. This property can be `true` which will allow the table to
    	 * scroll horizontally when needed, or any CSS unit, or a number (in which
    	 * case it will be treated as a pixel measurement). Setting as simply `true`
    	 * is recommended.
    	 *  @type boolean|string
    	 *  @default <i>blank string - i.e. disabled</i>
    	 *
    	 *  @dtopt Features
    	 *  @name DataTable.defaults.scrollX
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "scrollX": true,
    	 *        "scrollCollapse": true
    	 *      } );
    	 *    } );
    	 */
    	"sScrollX": "",


    	/**
    	 * This property can be used to force a DataTable to use more width than it
    	 * might otherwise do when x-scrolling is enabled. For example if you have a
    	 * table which requires to be well spaced, this parameter is useful for
    	 * "over-sizing" the table, and thus forcing scrolling. This property can by
    	 * any CSS unit, or a number (in which case it will be treated as a pixel
    	 * measurement).
    	 *  @type string
    	 *  @default <i>blank string - i.e. disabled</i>
    	 *
    	 *  @dtopt Options
    	 *  @name DataTable.defaults.scrollXInner
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "scrollX": "100%",
    	 *        "scrollXInner": "110%"
    	 *      } );
    	 *    } );
    	 */
    	"sScrollXInner": "",


    	/**
    	 * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
    	 * to the given height, and enable scrolling for any data which overflows the
    	 * current viewport. This can be used as an alternative to paging to display
    	 * a lot of data in a small area (although paging and scrolling can both be
    	 * enabled at the same time). This property can be any CSS unit, or a number
    	 * (in which case it will be treated as a pixel measurement).
    	 *  @type string
    	 *  @default <i>blank string - i.e. disabled</i>
    	 *
    	 *  @dtopt Features
    	 *  @name DataTable.defaults.scrollY
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "scrollY": "200px",
    	 *        "paginate": false
    	 *      } );
    	 *    } );
    	 */
    	"sScrollY": "",


    	/**
    	 * __Deprecated__ The functionality provided by this parameter has now been
    	 * superseded by that provided through `ajax`, which should be used instead.
    	 *
    	 * Set the HTTP method that is used to make the Ajax call for server-side
    	 * processing or Ajax sourced data.
    	 *  @type string
    	 *  @default GET
    	 *
    	 *  @dtopt Options
    	 *  @dtopt Server-side
    	 *  @name DataTable.defaults.serverMethod
    	 *
    	 *  @deprecated 1.10. Please use `ajax` for this functionality now.
    	 */
    	"sServerMethod": "GET",


    	/**
    	 * DataTables makes use of renderers when displaying HTML elements for
    	 * a table. These renderers can be added or modified by plug-ins to
    	 * generate suitable mark-up for a site. For example the Bootstrap
    	 * integration plug-in for DataTables uses a paging button renderer to
    	 * display pagination buttons in the mark-up required by Bootstrap.
    	 *
    	 * For further information about the renderers available see
    	 * DataTable.ext.renderer
    	 *  @type string|object
    	 *  @default null
    	 *
    	 *  @name DataTable.defaults.renderer
    	 *
    	 */
    	"renderer": null,


    	/**
    	 * Set the data property name that DataTables should use to get a row's id
    	 * to set as the `id` property in the node.
    	 *  @type string
    	 *  @default DT_RowId
    	 *
    	 *  @name DataTable.defaults.rowId
    	 */
    	"rowId": "DT_RowId"
    };

    _fnHungarianMap( DataTable.defaults );



    /*
     * Developer note - See note in model.defaults.js about the use of Hungarian
     * notation and camel case.
     */

    /**
     * Column options that can be given to DataTables at initialisation time.
     *  @namespace
     */
    DataTable.defaults.column = {
    	/**
    	 * Define which column(s) an order will occur on for this column. This
    	 * allows a column's ordering to take multiple columns into account when
    	 * doing a sort or use the data from a different column. For example first
    	 * name / last name columns make sense to do a multi-column sort over the
    	 * two columns.
    	 *  @type array|int
    	 *  @default null <i>Takes the value of the column index automatically</i>
    	 *
    	 *  @name DataTable.defaults.column.orderData
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Using `columnDefs`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [
    	 *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
    	 *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
    	 *          { "orderData": 2, "targets": [ 2 ] }
    	 *        ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using `columns`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columns": [
    	 *          { "orderData": [ 0, 1 ] },
    	 *          { "orderData": [ 1, 0 ] },
    	 *          { "orderData": 2 },
    	 *          null,
    	 *          null
    	 *        ]
    	 *      } );
    	 *    } );
    	 */
    	"aDataSort": null,
    	"iDataSort": -1,


    	/**
    	 * You can control the default ordering direction, and even alter the
    	 * behaviour of the sort handler (i.e. only allow ascending ordering etc)
    	 * using this parameter.
    	 *  @type array
    	 *  @default [ 'asc', 'desc' ]
    	 *
    	 *  @name DataTable.defaults.column.orderSequence
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Using `columnDefs`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [
    	 *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
    	 *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
    	 *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
    	 *        ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using `columns`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columns": [
    	 *          null,
    	 *          { "orderSequence": [ "asc" ] },
    	 *          { "orderSequence": [ "desc", "asc", "asc" ] },
    	 *          { "orderSequence": [ "desc" ] },
    	 *          null
    	 *        ]
    	 *      } );
    	 *    } );
    	 */
    	"asSorting": [ 'asc', 'desc' ],


    	/**
    	 * Enable or disable filtering on the data in this column.
    	 *  @type boolean
    	 *  @default true
    	 *
    	 *  @name DataTable.defaults.column.searchable
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Using `columnDefs`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [
    	 *          { "searchable": false, "targets": [ 0 ] }
    	 *        ] } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using `columns`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columns": [
    	 *          { "searchable": false },
    	 *          null,
    	 *          null,
    	 *          null,
    	 *          null
    	 *        ] } );
    	 *    } );
    	 */
    	"bSearchable": true,


    	/**
    	 * Enable or disable ordering on this column.
    	 *  @type boolean
    	 *  @default true
    	 *
    	 *  @name DataTable.defaults.column.orderable
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Using `columnDefs`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [
    	 *          { "orderable": false, "targets": [ 0 ] }
    	 *        ] } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using `columns`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columns": [
    	 *          { "orderable": false },
    	 *          null,
    	 *          null,
    	 *          null,
    	 *          null
    	 *        ] } );
    	 *    } );
    	 */
    	"bSortable": true,


    	/**
    	 * Enable or disable the display of this column.
    	 *  @type boolean
    	 *  @default true
    	 *
    	 *  @name DataTable.defaults.column.visible
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Using `columnDefs`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [
    	 *          { "visible": false, "targets": [ 0 ] }
    	 *        ] } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using `columns`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columns": [
    	 *          { "visible": false },
    	 *          null,
    	 *          null,
    	 *          null,
    	 *          null
    	 *        ] } );
    	 *    } );
    	 */
    	"bVisible": true,


    	/**
    	 * Developer definable function that is called whenever a cell is created (Ajax source,
    	 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
    	 * allowing you to modify the DOM element (add background colour for example) when the
    	 * element is available.
    	 *  @type function
    	 *  @param {element} td The TD node that has been created
    	 *  @param {*} cellData The Data for the cell
    	 *  @param {array|object} rowData The data for the whole row
    	 *  @param {int} row The row index for the aoData data store
    	 *  @param {int} col The column index for aoColumns
    	 *
    	 *  @name DataTable.defaults.column.createdCell
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [ {
    	 *          "targets": [3],
    	 *          "createdCell": function (td, cellData, rowData, row, col) {
    	 *            if ( cellData == "1.7" ) {
    	 *              $(td).css('color', 'blue')
    	 *            }
    	 *          }
    	 *        } ]
    	 *      });
    	 *    } );
    	 */
    	"fnCreatedCell": null,


    	/**
    	 * This parameter has been replaced by `data` in DataTables to ensure naming
    	 * consistency. `dataProp` can still be used, as there is backwards
    	 * compatibility in DataTables for this option, but it is strongly
    	 * recommended that you use `data` in preference to `dataProp`.
    	 *  @name DataTable.defaults.column.dataProp
    	 */


    	/**
    	 * This property can be used to read data from any data source property,
    	 * including deeply nested objects / properties. `data` can be given in a
    	 * number of different ways which effect its behaviour:
    	 *
    	 * * `integer` - treated as an array index for the data source. This is the
    	 *   default that DataTables uses (incrementally increased for each column).
    	 * * `string` - read an object property from the data source. There are
    	 *   three 'special' options that can be used in the string to alter how
    	 *   DataTables reads the data from the source object:
    	 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
    	 *      Javascript to read from nested objects, so to can the options
    	 *      specified in `data`. For example: `browser.version` or
    	 *      `browser.name`. If your object parameter name contains a period, use
    	 *      `\\` to escape it - i.e. `first\\.name`.
    	 *    * `[]` - Array notation. DataTables can automatically combine data
    	 *      from and array source, joining the data with the characters provided
    	 *      between the two brackets. For example: `name[, ]` would provide a
    	 *      comma-space separated list from the source array. If no characters
    	 *      are provided between the brackets, the original array source is
    	 *      returned.
    	 *    * `()` - Function notation. Adding `()` to the end of a parameter will
    	 *      execute a function of the name given. For example: `browser()` for a
    	 *      simple function on the data source, `browser.version()` for a
    	 *      function in a nested property or even `browser().version` to get an
    	 *      object property if the function called returns an object. Note that
    	 *      function notation is recommended for use in `render` rather than
    	 *      `data` as it is much simpler to use as a renderer.
    	 * * `null` - use the original data source for the row rather than plucking
    	 *   data directly from it. This action has effects on two other
    	 *   initialisation options:
    	 *    * `defaultContent` - When null is given as the `data` option and
    	 *      `defaultContent` is specified for the column, the value defined by
    	 *      `defaultContent` will be used for the cell.
    	 *    * `render` - When null is used for the `data` option and the `render`
    	 *      option is specified for the column, the whole data source for the
    	 *      row is used for the renderer.
    	 * * `function` - the function given will be executed whenever DataTables
    	 *   needs to set or get the data for a cell in the column. The function
    	 *   takes three parameters:
    	 *    * Parameters:
    	 *      * `{array|object}` The data source for the row
    	 *      * `{string}` The type call data requested - this will be 'set' when
    	 *        setting data or 'filter', 'display', 'type', 'sort' or undefined
    	 *        when gathering data. Note that when `undefined` is given for the
    	 *        type DataTables expects to get the raw data for the object back<
    	 *      * `{*}` Data to set when the second parameter is 'set'.
    	 *    * Return:
    	 *      * The return value from the function is not required when 'set' is
    	 *        the type of call, but otherwise the return is what will be used
    	 *        for the data requested.
    	 *
    	 * Note that `data` is a getter and setter option. If you just require
    	 * formatting of data for output, you will likely want to use `render` which
    	 * is simply a getter and thus simpler to use.
    	 *
    	 * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
    	 * name change reflects the flexibility of this property and is consistent
    	 * with the naming of mRender. If 'mDataProp' is given, then it will still
    	 * be used by DataTables, as it automatically maps the old name to the new
    	 * if required.
    	 *
    	 *  @type string|int|function|null
    	 *  @default null <i>Use automatically calculated column index</i>
    	 *
    	 *  @name DataTable.defaults.column.data
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Read table data from objects
    	 *    // JSON structure for each row:
    	 *    //   {
    	 *    //      "engine": {value},
    	 *    //      "browser": {value},
    	 *    //      "platform": {value},
    	 *    //      "version": {value},
    	 *    //      "grade": {value}
    	 *    //   }
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "ajaxSource": "sources/objects.txt",
    	 *        "columns": [
    	 *          { "data": "engine" },
    	 *          { "data": "browser" },
    	 *          { "data": "platform" },
    	 *          { "data": "version" },
    	 *          { "data": "grade" }
    	 *        ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Read information from deeply nested objects
    	 *    // JSON structure for each row:
    	 *    //   {
    	 *    //      "engine": {value},
    	 *    //      "browser": {value},
    	 *    //      "platform": {
    	 *    //         "inner": {value}
    	 *    //      },
    	 *    //      "details": [
    	 *    //         {value}, {value}
    	 *    //      ]
    	 *    //   }
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "ajaxSource": "sources/deep.txt",
    	 *        "columns": [
    	 *          { "data": "engine" },
    	 *          { "data": "browser" },
    	 *          { "data": "platform.inner" },
    	 *          { "data": "details.0" },
    	 *          { "data": "details.1" }
    	 *        ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using `data` as a function to provide different information for
    	 *    // sorting, filtering and display. In this case, currency (price)
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [ {
    	 *          "targets": [ 0 ],
    	 *          "data": function ( source, type, val ) {
    	 *            if (type === 'set') {
    	 *              source.price = val;
    	 *              // Store the computed display and filter values for efficiency
    	 *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
    	 *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
    	 *              return;
    	 *            }
    	 *            else if (type === 'display') {
    	 *              return source.price_display;
    	 *            }
    	 *            else if (type === 'filter') {
    	 *              return source.price_filter;
    	 *            }
    	 *            // 'sort', 'type' and undefined all just use the integer
    	 *            return source.price;
    	 *          }
    	 *        } ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using default content
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [ {
    	 *          "targets": [ 0 ],
    	 *          "data": null,
    	 *          "defaultContent": "Click to edit"
    	 *        } ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using array notation - outputting a list from an array
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [ {
    	 *          "targets": [ 0 ],
    	 *          "data": "name[, ]"
    	 *        } ]
    	 *      } );
    	 *    } );
    	 *
    	 */
    	"mData": null,


    	/**
    	 * This property is the rendering partner to `data` and it is suggested that
    	 * when you want to manipulate data for display (including filtering,
    	 * sorting etc) without altering the underlying data for the table, use this
    	 * property. `render` can be considered to be the the read only companion to
    	 * `data` which is read / write (then as such more complex). Like `data`
    	 * this option can be given in a number of different ways to effect its
    	 * behaviour:
    	 *
    	 * * `integer` - treated as an array index for the data source. This is the
    	 *   default that DataTables uses (incrementally increased for each column).
    	 * * `string` - read an object property from the data source. There are
    	 *   three 'special' options that can be used in the string to alter how
    	 *   DataTables reads the data from the source object:
    	 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
    	 *      Javascript to read from nested objects, so to can the options
    	 *      specified in `data`. For example: `browser.version` or
    	 *      `browser.name`. If your object parameter name contains a period, use
    	 *      `\\` to escape it - i.e. `first\\.name`.
    	 *    * `[]` - Array notation. DataTables can automatically combine data
    	 *      from and array source, joining the data with the characters provided
    	 *      between the two brackets. For example: `name[, ]` would provide a
    	 *      comma-space separated list from the source array. If no characters
    	 *      are provided between the brackets, the original array source is
    	 *      returned.
    	 *    * `()` - Function notation. Adding `()` to the end of a parameter will
    	 *      execute a function of the name given. For example: `browser()` for a
    	 *      simple function on the data source, `browser.version()` for a
    	 *      function in a nested property or even `browser().version` to get an
    	 *      object property if the function called returns an object.
    	 * * `object` - use different data for the different data types requested by
    	 *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
    	 *   of the object is the data type the property refers to and the value can
    	 *   defined using an integer, string or function using the same rules as
    	 *   `render` normally does. Note that an `_` option _must_ be specified.
    	 *   This is the default value to use if you haven't specified a value for
    	 *   the data type requested by DataTables.
    	 * * `function` - the function given will be executed whenever DataTables
    	 *   needs to set or get the data for a cell in the column. The function
    	 *   takes three parameters:
    	 *    * Parameters:
    	 *      * {array|object} The data source for the row (based on `data`)
    	 *      * {string} The type call data requested - this will be 'filter',
    	 *        'display', 'type' or 'sort'.
    	 *      * {array|object} The full data source for the row (not based on
    	 *        `data`)
    	 *    * Return:
    	 *      * The return value from the function is what will be used for the
    	 *        data requested.
    	 *
    	 *  @type string|int|function|object|null
    	 *  @default null Use the data source value.
    	 *
    	 *  @name DataTable.defaults.column.render
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Create a comma separated list from an array of objects
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "ajaxSource": "sources/deep.txt",
    	 *        "columns": [
    	 *          { "data": "engine" },
    	 *          { "data": "browser" },
    	 *          {
    	 *            "data": "platform",
    	 *            "render": "[, ].name"
    	 *          }
    	 *        ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Execute a function to obtain data
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [ {
    	 *          "targets": [ 0 ],
    	 *          "data": null, // Use the full data source object for the renderer's source
    	 *          "render": "browserName()"
    	 *        } ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // As an object, extracting different data for the different types
    	 *    // This would be used with a data source such as:
    	 *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
    	 *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
    	 *    // (which has both forms) is used for filtering for if a user inputs either format, while
    	 *    // the formatted phone number is the one that is shown in the table.
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [ {
    	 *          "targets": [ 0 ],
    	 *          "data": null, // Use the full data source object for the renderer's source
    	 *          "render": {
    	 *            "_": "phone",
    	 *            "filter": "phone_filter",
    	 *            "display": "phone_display"
    	 *          }
    	 *        } ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Use as a function to create a link from the data source
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [ {
    	 *          "targets": [ 0 ],
    	 *          "data": "download_link",
    	 *          "render": function ( data, type, full ) {
    	 *            return '<a href="'+data+'">Download</a>';
    	 *          }
    	 *        } ]
    	 *      } );
    	 *    } );
    	 */
    	"mRender": null,


    	/**
    	 * Change the cell type created for the column - either TD cells or TH cells. This
    	 * can be useful as TH cells have semantic meaning in the table body, allowing them
    	 * to act as a header for a row (you may wish to add scope='row' to the TH elements).
    	 *  @type string
    	 *  @default td
    	 *
    	 *  @name DataTable.defaults.column.cellType
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Make the first column use TH cells
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [ {
    	 *          "targets": [ 0 ],
    	 *          "cellType": "th"
    	 *        } ]
    	 *      } );
    	 *    } );
    	 */
    	"sCellType": "td",


    	/**
    	 * Class to give to each cell in this column.
    	 *  @type string
    	 *  @default <i>Empty string</i>
    	 *
    	 *  @name DataTable.defaults.column.class
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Using `columnDefs`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [
    	 *          { "class": "my_class", "targets": [ 0 ] }
    	 *        ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using `columns`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columns": [
    	 *          { "class": "my_class" },
    	 *          null,
    	 *          null,
    	 *          null,
    	 *          null
    	 *        ]
    	 *      } );
    	 *    } );
    	 */
    	"sClass": "",

    	/**
    	 * When DataTables calculates the column widths to assign to each column,
    	 * it finds the longest string in each column and then constructs a
    	 * temporary table and reads the widths from that. The problem with this
    	 * is that "mmm" is much wider then "iiii", but the latter is a longer
    	 * string - thus the calculation can go wrong (doing it properly and putting
    	 * it into an DOM object and measuring that is horribly(!) slow). Thus as
    	 * a "work around" we provide this option. It will append its value to the
    	 * text that is found to be the longest string for the column - i.e. padding.
    	 * Generally you shouldn't need this!
    	 *  @type string
    	 *  @default <i>Empty string<i>
    	 *
    	 *  @name DataTable.defaults.column.contentPadding
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Using `columns`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columns": [
    	 *          null,
    	 *          null,
    	 *          null,
    	 *          {
    	 *            "contentPadding": "mmm"
    	 *          }
    	 *        ]
    	 *      } );
    	 *    } );
    	 */
    	"sContentPadding": "",


    	/**
    	 * Allows a default value to be given for a column's data, and will be used
    	 * whenever a null data source is encountered (this can be because `data`
    	 * is set to null, or because the data source itself is null).
    	 *  @type string
    	 *  @default null
    	 *
    	 *  @name DataTable.defaults.column.defaultContent
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Using `columnDefs`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [
    	 *          {
    	 *            "data": null,
    	 *            "defaultContent": "Edit",
    	 *            "targets": [ -1 ]
    	 *          }
    	 *        ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using `columns`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columns": [
    	 *          null,
    	 *          null,
    	 *          null,
    	 *          {
    	 *            "data": null,
    	 *            "defaultContent": "Edit"
    	 *          }
    	 *        ]
    	 *      } );
    	 *    } );
    	 */
    	"sDefaultContent": null,


    	/**
    	 * This parameter is only used in DataTables' server-side processing. It can
    	 * be exceptionally useful to know what columns are being displayed on the
    	 * client side, and to map these to database fields. When defined, the names
    	 * also allow DataTables to reorder information from the server if it comes
    	 * back in an unexpected order (i.e. if you switch your columns around on the
    	 * client-side, your server-side code does not also need updating).
    	 *  @type string
    	 *  @default <i>Empty string</i>
    	 *
    	 *  @name DataTable.defaults.column.name
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Using `columnDefs`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [
    	 *          { "name": "engine", "targets": [ 0 ] },
    	 *          { "name": "browser", "targets": [ 1 ] },
    	 *          { "name": "platform", "targets": [ 2 ] },
    	 *          { "name": "version", "targets": [ 3 ] },
    	 *          { "name": "grade", "targets": [ 4 ] }
    	 *        ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using `columns`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columns": [
    	 *          { "name": "engine" },
    	 *          { "name": "browser" },
    	 *          { "name": "platform" },
    	 *          { "name": "version" },
    	 *          { "name": "grade" }
    	 *        ]
    	 *      } );
    	 *    } );
    	 */
    	"sName": "",


    	/**
    	 * Defines a data source type for the ordering which can be used to read
    	 * real-time information from the table (updating the internally cached
    	 * version) prior to ordering. This allows ordering to occur on user
    	 * editable elements such as form inputs.
    	 *  @type string
    	 *  @default std
    	 *
    	 *  @name DataTable.defaults.column.orderDataType
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Using `columnDefs`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [
    	 *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
    	 *          { "type": "numeric", "targets": [ 3 ] },
    	 *          { "orderDataType": "dom-select", "targets": [ 4 ] },
    	 *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
    	 *        ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using `columns`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columns": [
    	 *          null,
    	 *          null,
    	 *          { "orderDataType": "dom-text" },
    	 *          { "orderDataType": "dom-text", "type": "numeric" },
    	 *          { "orderDataType": "dom-select" },
    	 *          { "orderDataType": "dom-checkbox" }
    	 *        ]
    	 *      } );
    	 *    } );
    	 */
    	"sSortDataType": "std",


    	/**
    	 * The title of this column.
    	 *  @type string
    	 *  @default null <i>Derived from the 'TH' value for this column in the
    	 *    original HTML table.</i>
    	 *
    	 *  @name DataTable.defaults.column.title
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Using `columnDefs`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [
    	 *          { "title": "My column title", "targets": [ 0 ] }
    	 *        ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using `columns`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columns": [
    	 *          { "title": "My column title" },
    	 *          null,
    	 *          null,
    	 *          null,
    	 *          null
    	 *        ]
    	 *      } );
    	 *    } );
    	 */
    	"sTitle": null,


    	/**
    	 * The type allows you to specify how the data for this column will be
    	 * ordered. Four types (string, numeric, date and html (which will strip
    	 * HTML tags before ordering)) are currently available. Note that only date
    	 * formats understood by Javascript's Date() object will be accepted as type
    	 * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
    	 * 'numeric', 'date' or 'html' (by default). Further types can be adding
    	 * through plug-ins.
    	 *  @type string
    	 *  @default null <i>Auto-detected from raw data</i>
    	 *
    	 *  @name DataTable.defaults.column.type
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Using `columnDefs`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [
    	 *          { "type": "html", "targets": [ 0 ] }
    	 *        ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using `columns`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columns": [
    	 *          { "type": "html" },
    	 *          null,
    	 *          null,
    	 *          null,
    	 *          null
    	 *        ]
    	 *      } );
    	 *    } );
    	 */
    	"sType": null,


    	/**
    	 * Defining the width of the column, this parameter may take any CSS value
    	 * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
    	 * been given a specific width through this interface ensuring that the table
    	 * remains readable.
    	 *  @type string
    	 *  @default null <i>Automatic</i>
    	 *
    	 *  @name DataTable.defaults.column.width
    	 *  @dtopt Columns
    	 *
    	 *  @example
    	 *    // Using `columnDefs`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columnDefs": [
    	 *          { "width": "20%", "targets": [ 0 ] }
    	 *        ]
    	 *      } );
    	 *    } );
    	 *
    	 *  @example
    	 *    // Using `columns`
    	 *    $(document).ready( function() {
    	 *      $('#example').dataTable( {
    	 *        "columns": [
    	 *          { "width": "20%" },
    	 *          null,
    	 *          null,
    	 *          null,
    	 *          null
    	 *        ]
    	 *      } );
    	 *    } );
    	 */
    	"sWidth": null
    };

    _fnHungarianMap( DataTable.defaults.column );



    /**
     * DataTables settings object - this holds all the information needed for a
     * given table, including configuration, data and current application of the
     * table options. DataTables does not have a single instance for each DataTable
     * with the settings attached to that instance, but rather instances of the
     * DataTable "class" are created on-the-fly as needed (typically by a
     * $().dataTable() call) and the settings object is then applied to that
     * instance.
     *
     * Note that this object is related to {@link DataTable.defaults} but this
     * one is the internal data store for DataTables's cache of columns. It should
     * NOT be manipulated outside of DataTables. Any configuration should be done
     * through the initialisation options.
     *  @namespace
     *  @todo Really should attach the settings object to individual instances so we
     *    don't need to create new instances on each $().dataTable() call (if the
     *    table already exists). It would also save passing oSettings around and
     *    into every single function. However, this is a very significant
     *    architecture change for DataTables and will almost certainly break
     *    backwards compatibility with older installations. This is something that
     *    will be done in 2.0.
     */
    DataTable.models.oSettings = {
    	/**
    	 * Primary features of DataTables and their enablement state.
    	 *  @namespace
    	 */
    	"oFeatures": {

    		/**
    		 * Flag to say if DataTables should automatically try to calculate the
    		 * optimum table and columns widths (true) or not (false).
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type boolean
    		 */
    		"bAutoWidth": null,

    		/**
    		 * Delay the creation of TR and TD elements until they are actually
    		 * needed by a driven page draw. This can give a significant speed
    		 * increase for Ajax source and Javascript source data, but makes no
    		 * difference at all for DOM and server-side processing tables.
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type boolean
    		 */
    		"bDeferRender": null,

    		/**
    		 * Enable filtering on the table or not. Note that if this is disabled
    		 * then there is no filtering at all on the table, including fnFilter.
    		 * To just remove the filtering input use sDom and remove the 'f' option.
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type boolean
    		 */
    		"bFilter": null,

    		/**
    		 * Table information element (the 'Showing x of y records' div) enable
    		 * flag.
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type boolean
    		 */
    		"bInfo": null,

    		/**
    		 * Present a user control allowing the end user to change the page size
    		 * when pagination is enabled.
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type boolean
    		 */
    		"bLengthChange": null,

    		/**
    		 * Pagination enabled or not. Note that if this is disabled then length
    		 * changing must also be disabled.
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type boolean
    		 */
    		"bPaginate": null,

    		/**
    		 * Processing indicator enable flag whenever DataTables is enacting a
    		 * user request - typically an Ajax request for server-side processing.
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type boolean
    		 */
    		"bProcessing": null,

    		/**
    		 * Server-side processing enabled flag - when enabled DataTables will
    		 * get all data from the server for every draw - there is no filtering,
    		 * sorting or paging done on the client-side.
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type boolean
    		 */
    		"bServerSide": null,

    		/**
    		 * Sorting enablement flag.
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type boolean
    		 */
    		"bSort": null,

    		/**
    		 * Multi-column sorting
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type boolean
    		 */
    		"bSortMulti": null,

    		/**
    		 * Apply a class to the columns which are being sorted to provide a
    		 * visual highlight or not. This can slow things down when enabled since
    		 * there is a lot of DOM interaction.
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type boolean
    		 */
    		"bSortClasses": null,

    		/**
    		 * State saving enablement flag.
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type boolean
    		 */
    		"bStateSave": null
    	},


    	/**
    	 * Scrolling settings for a table.
    	 *  @namespace
    	 */
    	"oScroll": {
    		/**
    		 * When the table is shorter in height than sScrollY, collapse the
    		 * table container down to the height of the table (when true).
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type boolean
    		 */
    		"bCollapse": null,

    		/**
    		 * Width of the scrollbar for the web-browser's platform. Calculated
    		 * during table initialisation.
    		 *  @type int
    		 *  @default 0
    		 */
    		"iBarWidth": 0,

    		/**
    		 * Viewport width for horizontal scrolling. Horizontal scrolling is
    		 * disabled if an empty string.
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type string
    		 */
    		"sX": null,

    		/**
    		 * Width to expand the table to when using x-scrolling. Typically you
    		 * should not need to use this.
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type string
    		 *  @deprecated
    		 */
    		"sXInner": null,

    		/**
    		 * Viewport height for vertical scrolling. Vertical scrolling is disabled
    		 * if an empty string.
    		 * Note that this parameter will be set by the initialisation routine. To
    		 * set a default use {@link DataTable.defaults}.
    		 *  @type string
    		 */
    		"sY": null
    	},

    	/**
    	 * Language information for the table.
    	 *  @namespace
    	 *  @extends DataTable.defaults.oLanguage
    	 */
    	"oLanguage": {
    		/**
    		 * Information callback function. See
    		 * {@link DataTable.defaults.fnInfoCallback}
    		 *  @type function
    		 *  @default null
    		 */
    		"fnInfoCallback": null
    	},

    	/**
    	 * Browser support parameters
    	 *  @namespace
    	 */
    	"oBrowser": {
    		/**
    		 * Indicate if the browser incorrectly calculates width:100% inside a
    		 * scrolling element (IE6/7)
    		 *  @type boolean
    		 *  @default false
    		 */
    		"bScrollOversize": false,

    		/**
    		 * Determine if the vertical scrollbar is on the right or left of the
    		 * scrolling container - needed for rtl language layout, although not
    		 * all browsers move the scrollbar (Safari).
    		 *  @type boolean
    		 *  @default false
    		 */
    		"bScrollbarLeft": false,

    		/**
    		 * Flag for if `getBoundingClientRect` is fully supported or not
    		 *  @type boolean
    		 *  @default false
    		 */
    		"bBounding": false,

    		/**
    		 * Browser scrollbar width
    		 *  @type integer
    		 *  @default 0
    		 */
    		"barWidth": 0
    	},


    	"ajax": null,


    	/**
    	 * Array referencing the nodes which are used for the features. The
    	 * parameters of this object match what is allowed by sDom - i.e.
    	 *   <ul>
    	 *     <li>'l' - Length changing</li>
    	 *     <li>'f' - Filtering input</li>
    	 *     <li>'t' - The table!</li>
    	 *     <li>'i' - Information</li>
    	 *     <li>'p' - Pagination</li>
    	 *     <li>'r' - pRocessing</li>
    	 *   </ul>
    	 *  @type array
    	 *  @default []
    	 */
    	"aanFeatures": [],

    	/**
    	 * Store data information - see {@link DataTable.models.oRow} for detailed
    	 * information.
    	 *  @type array
    	 *  @default []
    	 */
    	"aoData": [],

    	/**
    	 * Array of indexes which are in the current display (after filtering etc)
    	 *  @type array
    	 *  @default []
    	 */
    	"aiDisplay": [],

    	/**
    	 * Array of indexes for display - no filtering
    	 *  @type array
    	 *  @default []
    	 */
    	"aiDisplayMaster": [],

    	/**
    	 * Map of row ids to data indexes
    	 *  @type object
    	 *  @default {}
    	 */
    	"aIds": {},

    	/**
    	 * Store information about each column that is in use
    	 *  @type array
    	 *  @default []
    	 */
    	"aoColumns": [],

    	/**
    	 * Store information about the table's header
    	 *  @type array
    	 *  @default []
    	 */
    	"aoHeader": [],

    	/**
    	 * Store information about the table's footer
    	 *  @type array
    	 *  @default []
    	 */
    	"aoFooter": [],

    	/**
    	 * Store the applied global search information in case we want to force a
    	 * research or compare the old search to a new one.
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @namespace
    	 *  @extends DataTable.models.oSearch
    	 */
    	"oPreviousSearch": {},

    	/**
    	 * Store the applied search for each column - see
    	 * {@link DataTable.models.oSearch} for the format that is used for the
    	 * filtering information for each column.
    	 *  @type array
    	 *  @default []
    	 */
    	"aoPreSearchCols": [],

    	/**
    	 * Sorting that is applied to the table. Note that the inner arrays are
    	 * used in the following manner:
    	 * <ul>
    	 *   <li>Index 0 - column number</li>
    	 *   <li>Index 1 - current sorting direction</li>
    	 * </ul>
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type array
    	 *  @todo These inner arrays should really be objects
    	 */
    	"aaSorting": null,

    	/**
    	 * Sorting that is always applied to the table (i.e. prefixed in front of
    	 * aaSorting).
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type array
    	 *  @default []
    	 */
    	"aaSortingFixed": [],

    	/**
    	 * Classes to use for the striping of a table.
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type array
    	 *  @default []
    	 */
    	"asStripeClasses": null,

    	/**
    	 * If restoring a table - we should restore its striping classes as well
    	 *  @type array
    	 *  @default []
    	 */
    	"asDestroyStripes": [],

    	/**
    	 * If restoring a table - we should restore its width
    	 *  @type int
    	 *  @default 0
    	 */
    	"sDestroyWidth": 0,

    	/**
    	 * Callback functions array for every time a row is inserted (i.e. on a draw).
    	 *  @type array
    	 *  @default []
    	 */
    	"aoRowCallback": [],

    	/**
    	 * Callback functions for the header on each draw.
    	 *  @type array
    	 *  @default []
    	 */
    	"aoHeaderCallback": [],

    	/**
    	 * Callback function for the footer on each draw.
    	 *  @type array
    	 *  @default []
    	 */
    	"aoFooterCallback": [],

    	/**
    	 * Array of callback functions for draw callback functions
    	 *  @type array
    	 *  @default []
    	 */
    	"aoDrawCallback": [],

    	/**
    	 * Array of callback functions for row created function
    	 *  @type array
    	 *  @default []
    	 */
    	"aoRowCreatedCallback": [],

    	/**
    	 * Callback functions for just before the table is redrawn. A return of
    	 * false will be used to cancel the draw.
    	 *  @type array
    	 *  @default []
    	 */
    	"aoPreDrawCallback": [],

    	/**
    	 * Callback functions for when the table has been initialised.
    	 *  @type array
    	 *  @default []
    	 */
    	"aoInitComplete": [],


    	/**
    	 * Callbacks for modifying the settings to be stored for state saving, prior to
    	 * saving state.
    	 *  @type array
    	 *  @default []
    	 */
    	"aoStateSaveParams": [],

    	/**
    	 * Callbacks for modifying the settings that have been stored for state saving
    	 * prior to using the stored values to restore the state.
    	 *  @type array
    	 *  @default []
    	 */
    	"aoStateLoadParams": [],

    	/**
    	 * Callbacks for operating on the settings object once the saved state has been
    	 * loaded
    	 *  @type array
    	 *  @default []
    	 */
    	"aoStateLoaded": [],

    	/**
    	 * Cache the table ID for quick access
    	 *  @type string
    	 *  @default <i>Empty string</i>
    	 */
    	"sTableId": "",

    	/**
    	 * The TABLE node for the main table
    	 *  @type node
    	 *  @default null
    	 */
    	"nTable": null,

    	/**
    	 * Permanent ref to the thead element
    	 *  @type node
    	 *  @default null
    	 */
    	"nTHead": null,

    	/**
    	 * Permanent ref to the tfoot element - if it exists
    	 *  @type node
    	 *  @default null
    	 */
    	"nTFoot": null,

    	/**
    	 * Permanent ref to the tbody element
    	 *  @type node
    	 *  @default null
    	 */
    	"nTBody": null,

    	/**
    	 * Cache the wrapper node (contains all DataTables controlled elements)
    	 *  @type node
    	 *  @default null
    	 */
    	"nTableWrapper": null,

    	/**
    	 * Indicate if when using server-side processing the loading of data
    	 * should be deferred until the second draw.
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type boolean
    	 *  @default false
    	 */
    	"bDeferLoading": false,

    	/**
    	 * Indicate if all required information has been read in
    	 *  @type boolean
    	 *  @default false
    	 */
    	"bInitialised": false,

    	/**
    	 * Information about open rows. Each object in the array has the parameters
    	 * 'nTr' and 'nParent'
    	 *  @type array
    	 *  @default []
    	 */
    	"aoOpenRows": [],

    	/**
    	 * Dictate the positioning of DataTables' control elements - see
    	 * {@link DataTable.model.oInit.sDom}.
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type string
    	 *  @default null
    	 */
    	"sDom": null,

    	/**
    	 * Search delay (in mS)
    	 *  @type integer
    	 *  @default null
    	 */
    	"searchDelay": null,

    	/**
    	 * Which type of pagination should be used.
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type string
    	 *  @default two_button
    	 */
    	"sPaginationType": "two_button",

    	/**
    	 * The state duration (for `stateSave`) in seconds.
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type int
    	 *  @default 0
    	 */
    	"iStateDuration": 0,

    	/**
    	 * Array of callback functions for state saving. Each array element is an
    	 * object with the following parameters:
    	 *   <ul>
    	 *     <li>function:fn - function to call. Takes two parameters, oSettings
    	 *       and the JSON string to save that has been thus far created. Returns
    	 *       a JSON string to be inserted into a json object
    	 *       (i.e. '"param": [ 0, 1, 2]')</li>
    	 *     <li>string:sName - name of callback</li>
    	 *   </ul>
    	 *  @type array
    	 *  @default []
    	 */
    	"aoStateSave": [],

    	/**
    	 * Array of callback functions for state loading. Each array element is an
    	 * object with the following parameters:
    	 *   <ul>
    	 *     <li>function:fn - function to call. Takes two parameters, oSettings
    	 *       and the object stored. May return false to cancel state loading</li>
    	 *     <li>string:sName - name of callback</li>
    	 *   </ul>
    	 *  @type array
    	 *  @default []
    	 */
    	"aoStateLoad": [],

    	/**
    	 * State that was saved. Useful for back reference
    	 *  @type object
    	 *  @default null
    	 */
    	"oSavedState": null,

    	/**
    	 * State that was loaded. Useful for back reference
    	 *  @type object
    	 *  @default null
    	 */
    	"oLoadedState": null,

    	/**
    	 * Source url for AJAX data for the table.
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type string
    	 *  @default null
    	 */
    	"sAjaxSource": null,

    	/**
    	 * Property from a given object from which to read the table data from. This
    	 * can be an empty string (when not server-side processing), in which case
    	 * it is  assumed an an array is given directly.
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type string
    	 */
    	"sAjaxDataProp": null,

    	/**
    	 * The last jQuery XHR object that was used for server-side data gathering.
    	 * This can be used for working with the XHR information in one of the
    	 * callbacks
    	 *  @type object
    	 *  @default null
    	 */
    	"jqXHR": null,

    	/**
    	 * JSON returned from the server in the last Ajax request
    	 *  @type object
    	 *  @default undefined
    	 */
    	"json": undefined,

    	/**
    	 * Data submitted as part of the last Ajax request
    	 *  @type object
    	 *  @default undefined
    	 */
    	"oAjaxData": undefined,

    	/**
    	 * Function to get the server-side data.
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type function
    	 */
    	"fnServerData": null,

    	/**
    	 * Functions which are called prior to sending an Ajax request so extra
    	 * parameters can easily be sent to the server
    	 *  @type array
    	 *  @default []
    	 */
    	"aoServerParams": [],

    	/**
    	 * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
    	 * required).
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type string
    	 */
    	"sServerMethod": null,

    	/**
    	 * Format numbers for display.
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type function
    	 */
    	"fnFormatNumber": null,

    	/**
    	 * List of options that can be used for the user selectable length menu.
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type array
    	 *  @default []
    	 */
    	"aLengthMenu": null,

    	/**
    	 * Counter for the draws that the table does. Also used as a tracker for
    	 * server-side processing
    	 *  @type int
    	 *  @default 0
    	 */
    	"iDraw": 0,

    	/**
    	 * Indicate if a redraw is being done - useful for Ajax
    	 *  @type boolean
    	 *  @default false
    	 */
    	"bDrawing": false,

    	/**
    	 * Draw index (iDraw) of the last error when parsing the returned data
    	 *  @type int
    	 *  @default -1
    	 */
    	"iDrawError": -1,

    	/**
    	 * Paging display length
    	 *  @type int
    	 *  @default 10
    	 */
    	"_iDisplayLength": 10,

    	/**
    	 * Paging start point - aiDisplay index
    	 *  @type int
    	 *  @default 0
    	 */
    	"_iDisplayStart": 0,

    	/**
    	 * Server-side processing - number of records in the result set
    	 * (i.e. before filtering), Use fnRecordsTotal rather than
    	 * this property to get the value of the number of records, regardless of
    	 * the server-side processing setting.
    	 *  @type int
    	 *  @default 0
    	 *  @private
    	 */
    	"_iRecordsTotal": 0,

    	/**
    	 * Server-side processing - number of records in the current display set
    	 * (i.e. after filtering). Use fnRecordsDisplay rather than
    	 * this property to get the value of the number of records, regardless of
    	 * the server-side processing setting.
    	 *  @type boolean
    	 *  @default 0
    	 *  @private
    	 */
    	"_iRecordsDisplay": 0,

    	/**
    	 * The classes to use for the table
    	 *  @type object
    	 *  @default {}
    	 */
    	"oClasses": {},

    	/**
    	 * Flag attached to the settings object so you can check in the draw
    	 * callback if filtering has been done in the draw. Deprecated in favour of
    	 * events.
    	 *  @type boolean
    	 *  @default false
    	 *  @deprecated
    	 */
    	"bFiltered": false,

    	/**
    	 * Flag attached to the settings object so you can check in the draw
    	 * callback if sorting has been done in the draw. Deprecated in favour of
    	 * events.
    	 *  @type boolean
    	 *  @default false
    	 *  @deprecated
    	 */
    	"bSorted": false,

    	/**
    	 * Indicate that if multiple rows are in the header and there is more than
    	 * one unique cell per column, if the top one (true) or bottom one (false)
    	 * should be used for sorting / title by DataTables.
    	 * Note that this parameter will be set by the initialisation routine. To
    	 * set a default use {@link DataTable.defaults}.
    	 *  @type boolean
    	 */
    	"bSortCellsTop": null,

    	/**
    	 * Initialisation object that is used for the table
    	 *  @type object
    	 *  @default null
    	 */
    	"oInit": null,

    	/**
    	 * Destroy callback functions - for plug-ins to attach themselves to the
    	 * destroy so they can clean up markup and events.
    	 *  @type array
    	 *  @default []
    	 */
    	"aoDestroyCallback": [],


    	/**
    	 * Get the number of records in the current record set, before filtering
    	 *  @type function
    	 */
    	"fnRecordsTotal": function ()
    	{
    		return _fnDataSource( this ) == 'ssp' ?
    			this._iRecordsTotal * 1 :
    			this.aiDisplayMaster.length;
    	},

    	/**
    	 * Get the number of records in the current record set, after filtering
    	 *  @type function
    	 */
    	"fnRecordsDisplay": function ()
    	{
    		return _fnDataSource( this ) == 'ssp' ?
    			this._iRecordsDisplay * 1 :
    			this.aiDisplay.length;
    	},

    	/**
    	 * Get the display end point - aiDisplay index
    	 *  @type function
    	 */
    	"fnDisplayEnd": function ()
    	{
    		var
    			len      = this._iDisplayLength,
    			start    = this._iDisplayStart,
    			calc     = start + len,
    			records  = this.aiDisplay.length,
    			features = this.oFeatures,
    			paginate = features.bPaginate;

    		if ( features.bServerSide ) {
    			return paginate === false || len === -1 ?
    				start + records :
    				Math.min( start+len, this._iRecordsDisplay );
    		}
    		else {
    			return ! paginate || calc>records || len===-1 ?
    				records :
    				calc;
    		}
    	},

    	/**
    	 * The DataTables object for this table
    	 *  @type object
    	 *  @default null
    	 */
    	"oInstance": null,

    	/**
    	 * Unique identifier for each instance of the DataTables object. If there
    	 * is an ID on the table node, then it takes that value, otherwise an
    	 * incrementing internal counter is used.
    	 *  @type string
    	 *  @default null
    	 */
    	"sInstance": null,

    	/**
    	 * tabindex attribute value that is added to DataTables control elements, allowing
    	 * keyboard navigation of the table and its controls.
    	 */
    	"iTabIndex": 0,

    	/**
    	 * DIV container for the footer scrolling table if scrolling
    	 */
    	"nScrollHead": null,

    	/**
    	 * DIV container for the footer scrolling table if scrolling
    	 */
    	"nScrollFoot": null,

    	/**
    	 * Last applied sort
    	 *  @type array
    	 *  @default []
    	 */
    	"aLastSort": [],

    	/**
    	 * Stored plug-in instances
    	 *  @type object
    	 *  @default {}
    	 */
    	"oPlugins": {},

    	/**
    	 * Function used to get a row's id from the row's data
    	 *  @type function
    	 *  @default null
    	 */
    	"rowIdFn": null,

    	/**
    	 * Data location where to store a row's id
    	 *  @type string
    	 *  @default null
    	 */
    	"rowId": null
    };

    /**
     * Extension object for DataTables that is used to provide all extension
     * options.
     *
     * Note that the `DataTable.ext` object is available through
     * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
     * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
     *  @namespace
     *  @extends DataTable.models.ext
     */


    /**
     * DataTables extensions
     * 
     * This namespace acts as a collection area for plug-ins that can be used to
     * extend DataTables capabilities. Indeed many of the build in methods
     * use this method to provide their own capabilities (sorting methods for
     * example).
     *
     * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
     * reasons
     *
     *  @namespace
     */
    DataTable.ext = _ext = {
    	/**
    	 * Buttons. For use with the Buttons extension for DataTables. This is
    	 * defined here so other extensions can define buttons regardless of load
    	 * order. It is _not_ used by DataTables core.
    	 *
    	 *  @type object
    	 *  @default {}
    	 */
    	buttons: {},


    	/**
    	 * Element class names
    	 *
    	 *  @type object
    	 *  @default {}
    	 */
    	classes: {},


    	/**
    	 * DataTables build type (expanded by the download builder)
    	 *
    	 *  @type string
    	 */
    	builder: "-source-",


    	/**
    	 * Error reporting.
    	 * 
    	 * How should DataTables report an error. Can take the value 'alert',
    	 * 'throw', 'none' or a function.
    	 *
    	 *  @type string|function
    	 *  @default alert
    	 */
    	errMode: "alert",


    	/**
    	 * Feature plug-ins.
    	 * 
    	 * This is an array of objects which describe the feature plug-ins that are
    	 * available to DataTables. These feature plug-ins are then available for
    	 * use through the `dom` initialisation option.
    	 * 
    	 * Each feature plug-in is described by an object which must have the
    	 * following properties:
    	 * 
    	 * * `fnInit` - function that is used to initialise the plug-in,
    	 * * `cFeature` - a character so the feature can be enabled by the `dom`
    	 *   instillation option. This is case sensitive.
    	 *
    	 * The `fnInit` function has the following input parameters:
    	 *
    	 * 1. `{object}` DataTables settings object: see
    	 *    {@link DataTable.models.oSettings}
    	 *
    	 * And the following return is expected:
    	 * 
    	 * * {node|null} The element which contains your feature. Note that the
    	 *   return may also be void if your plug-in does not require to inject any
    	 *   DOM elements into DataTables control (`dom`) - for example this might
    	 *   be useful when developing a plug-in which allows table control via
    	 *   keyboard entry
    	 *
    	 *  @type array
    	 *
    	 *  @example
    	 *    $.fn.dataTable.ext.features.push( {
    	 *      "fnInit": function( oSettings ) {
    	 *        return new TableTools( { "oDTSettings": oSettings } );
    	 *      },
    	 *      "cFeature": "T"
    	 *    } );
    	 */
    	feature: [],


    	/**
    	 * Row searching.
    	 * 
    	 * This method of searching is complimentary to the default type based
    	 * searching, and a lot more comprehensive as it allows you complete control
    	 * over the searching logic. Each element in this array is a function
    	 * (parameters described below) that is called for every row in the table,
    	 * and your logic decides if it should be included in the searching data set
    	 * or not.
    	 *
    	 * Searching functions have the following input parameters:
    	 *
    	 * 1. `{object}` DataTables settings object: see
    	 *    {@link DataTable.models.oSettings}
    	 * 2. `{array|object}` Data for the row to be processed (same as the
    	 *    original format that was passed in as the data source, or an array
    	 *    from a DOM data source
    	 * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
    	 *    can be useful to retrieve the `TR` element if you need DOM interaction.
    	 *
    	 * And the following return is expected:
    	 *
    	 * * {boolean} Include the row in the searched result set (true) or not
    	 *   (false)
    	 *
    	 * Note that as with the main search ability in DataTables, technically this
    	 * is "filtering", since it is subtractive. However, for consistency in
    	 * naming we call it searching here.
    	 *
    	 *  @type array
    	 *  @default []
    	 *
    	 *  @example
    	 *    // The following example shows custom search being applied to the
    	 *    // fourth column (i.e. the data[3] index) based on two input values
    	 *    // from the end-user, matching the data in a certain range.
    	 *    $.fn.dataTable.ext.search.push(
    	 *      function( settings, data, dataIndex ) {
    	 *        var min = document.getElementById('min').value * 1;
    	 *        var max = document.getElementById('max').value * 1;
    	 *        var version = data[3] == "-" ? 0 : data[3]*1;
    	 *
    	 *        if ( min == "" && max == "" ) {
    	 *          return true;
    	 *        }
    	 *        else if ( min == "" && version < max ) {
    	 *          return true;
    	 *        }
    	 *        else if ( min < version && "" == max ) {
    	 *          return true;
    	 *        }
    	 *        else if ( min < version && version < max ) {
    	 *          return true;
    	 *        }
    	 *        return false;
    	 *      }
    	 *    );
    	 */
    	search: [],


    	/**
    	 * Selector extensions
    	 *
    	 * The `selector` option can be used to extend the options available for the
    	 * selector modifier options (`selector-modifier` object data type) that
    	 * each of the three built in selector types offer (row, column and cell +
    	 * their plural counterparts). For example the Select extension uses this
    	 * mechanism to provide an option to select only rows, columns and cells
    	 * that have been marked as selected by the end user (`{selected: true}`),
    	 * which can be used in conjunction with the existing built in selector
    	 * options.
    	 *
    	 * Each property is an array to which functions can be pushed. The functions
    	 * take three attributes:
    	 *
    	 * * Settings object for the host table
    	 * * Options object (`selector-modifier` object type)
    	 * * Array of selected item indexes
    	 *
    	 * The return is an array of the resulting item indexes after the custom
    	 * selector has been applied.
    	 *
    	 *  @type object
    	 */
    	selector: {
    		cell: [],
    		column: [],
    		row: []
    	},


    	/**
    	 * Internal functions, exposed for used in plug-ins.
    	 * 
    	 * Please note that you should not need to use the internal methods for
    	 * anything other than a plug-in (and even then, try to avoid if possible).
    	 * The internal function may change between releases.
    	 *
    	 *  @type object
    	 *  @default {}
    	 */
    	internal: {},


    	/**
    	 * Legacy configuration options. Enable and disable legacy options that
    	 * are available in DataTables.
    	 *
    	 *  @type object
    	 */
    	legacy: {
    		/**
    		 * Enable / disable DataTables 1.9 compatible server-side processing
    		 * requests
    		 *
    		 *  @type boolean
    		 *  @default null
    		 */
    		ajax: null
    	},


    	/**
    	 * Pagination plug-in methods.
    	 * 
    	 * Each entry in this object is a function and defines which buttons should
    	 * be shown by the pagination rendering method that is used for the table:
    	 * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
    	 * buttons are displayed in the document, while the functions here tell it
    	 * what buttons to display. This is done by returning an array of button
    	 * descriptions (what each button will do).
    	 *
    	 * Pagination types (the four built in options and any additional plug-in
    	 * options defined here) can be used through the `paginationType`
    	 * initialisation parameter.
    	 *
    	 * The functions defined take two parameters:
    	 *
    	 * 1. `{int} page` The current page index
    	 * 2. `{int} pages` The number of pages in the table
    	 *
    	 * Each function is expected to return an array where each element of the
    	 * array can be one of:
    	 *
    	 * * `first` - Jump to first page when activated
    	 * * `last` - Jump to last page when activated
    	 * * `previous` - Show previous page when activated
    	 * * `next` - Show next page when activated
    	 * * `{int}` - Show page of the index given
    	 * * `{array}` - A nested array containing the above elements to add a
    	 *   containing 'DIV' element (might be useful for styling).
    	 *
    	 * Note that DataTables v1.9- used this object slightly differently whereby
    	 * an object with two functions would be defined for each plug-in. That
    	 * ability is still supported by DataTables 1.10+ to provide backwards
    	 * compatibility, but this option of use is now decremented and no longer
    	 * documented in DataTables 1.10+.
    	 *
    	 *  @type object
    	 *  @default {}
    	 *
    	 *  @example
    	 *    // Show previous, next and current page buttons only
    	 *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
    	 *      return [ 'previous', page, 'next' ];
    	 *    };
    	 */
    	pager: {},


    	renderer: {
    		pageButton: {},
    		header: {}
    	},


    	/**
    	 * Ordering plug-ins - custom data source
    	 * 
    	 * The extension options for ordering of data available here is complimentary
    	 * to the default type based ordering that DataTables typically uses. It
    	 * allows much greater control over the the data that is being used to
    	 * order a column, but is necessarily therefore more complex.
    	 * 
    	 * This type of ordering is useful if you want to do ordering based on data
    	 * live from the DOM (for example the contents of an 'input' element) rather
    	 * than just the static string that DataTables knows of.
    	 * 
    	 * The way these plug-ins work is that you create an array of the values you
    	 * wish to be ordering for the column in question and then return that
    	 * array. The data in the array much be in the index order of the rows in
    	 * the table (not the currently ordering order!). Which order data gathering
    	 * function is run here depends on the `dt-init columns.orderDataType`
    	 * parameter that is used for the column (if any).
    	 *
    	 * The functions defined take two parameters:
    	 *
    	 * 1. `{object}` DataTables settings object: see
    	 *    {@link DataTable.models.oSettings}
    	 * 2. `{int}` Target column index
    	 *
    	 * Each function is expected to return an array:
    	 *
    	 * * `{array}` Data for the column to be ordering upon
    	 *
    	 *  @type array
    	 *
    	 *  @example
    	 *    // Ordering using `input` node values
    	 *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
    	 *    {
    	 *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
    	 *        return $('input', td).val();
    	 *      } );
    	 *    }
    	 */
    	order: {},


    	/**
    	 * Type based plug-ins.
    	 *
    	 * Each column in DataTables has a type assigned to it, either by automatic
    	 * detection or by direct assignment using the `type` option for the column.
    	 * The type of a column will effect how it is ordering and search (plug-ins
    	 * can also make use of the column type if required).
    	 *
    	 * @namespace
    	 */
    	type: {
    		/**
    		 * Type detection functions.
    		 *
    		 * The functions defined in this object are used to automatically detect
    		 * a column's type, making initialisation of DataTables super easy, even
    		 * when complex data is in the table.
    		 *
    		 * The functions defined take two parameters:
    		 *
    	     *  1. `{*}` Data from the column cell to be analysed
    	     *  2. `{settings}` DataTables settings object. This can be used to
    	     *     perform context specific type detection - for example detection
    	     *     based on language settings such as using a comma for a decimal
    	     *     place. Generally speaking the options from the settings will not
    	     *     be required
    		 *
    		 * Each function is expected to return:
    		 *
    		 * * `{string|null}` Data type detected, or null if unknown (and thus
    		 *   pass it on to the other type detection functions.
    		 *
    		 *  @type array
    		 *
    		 *  @example
    		 *    // Currency type detection plug-in:
    		 *    $.fn.dataTable.ext.type.detect.push(
    		 *      function ( data, settings ) {
    		 *        // Check the numeric part
    		 *        if ( ! data.substring(1).match(/[0-9]/) ) {
    		 *          return null;
    		 *        }
    		 *
    		 *        // Check prefixed by currency
    		 *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
    		 *          return 'currency';
    		 *        }
    		 *        return null;
    		 *      }
    		 *    );
    		 */
    		detect: [],


    		/**
    		 * Type based search formatting.
    		 *
    		 * The type based searching functions can be used to pre-format the
    		 * data to be search on. For example, it can be used to strip HTML
    		 * tags or to de-format telephone numbers for numeric only searching.
    		 *
    		 * Note that is a search is not defined for a column of a given type,
    		 * no search formatting will be performed.
    		 * 
    		 * Pre-processing of searching data plug-ins - When you assign the sType
    		 * for a column (or have it automatically detected for you by DataTables
    		 * or a type detection plug-in), you will typically be using this for
    		 * custom sorting, but it can also be used to provide custom searching
    		 * by allowing you to pre-processing the data and returning the data in
    		 * the format that should be searched upon. This is done by adding
    		 * functions this object with a parameter name which matches the sType
    		 * for that target column. This is the corollary of <i>afnSortData</i>
    		 * for searching data.
    		 *
    		 * The functions defined take a single parameter:
    		 *
    	     *  1. `{*}` Data from the column cell to be prepared for searching
    		 *
    		 * Each function is expected to return:
    		 *
    		 * * `{string|null}` Formatted string that will be used for the searching.
    		 *
    		 *  @type object
    		 *  @default {}
    		 *
    		 *  @example
    		 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
    		 *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
    		 *    }
    		 */
    		search: {},


    		/**
    		 * Type based ordering.
    		 *
    		 * The column type tells DataTables what ordering to apply to the table
    		 * when a column is sorted upon. The order for each type that is defined,
    		 * is defined by the functions available in this object.
    		 *
    		 * Each ordering option can be described by three properties added to
    		 * this object:
    		 *
    		 * * `{type}-pre` - Pre-formatting function
    		 * * `{type}-asc` - Ascending order function
    		 * * `{type}-desc` - Descending order function
    		 *
    		 * All three can be used together, only `{type}-pre` or only
    		 * `{type}-asc` and `{type}-desc` together. It is generally recommended
    		 * that only `{type}-pre` is used, as this provides the optimal
    		 * implementation in terms of speed, although the others are provided
    		 * for compatibility with existing Javascript sort functions.
    		 *
    		 * `{type}-pre`: Functions defined take a single parameter:
    		 *
    	     *  1. `{*}` Data from the column cell to be prepared for ordering
    		 *
    		 * And return:
    		 *
    		 * * `{*}` Data to be sorted upon
    		 *
    		 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
    		 * functions, taking two parameters:
    		 *
    	     *  1. `{*}` Data to compare to the second parameter
    	     *  2. `{*}` Data to compare to the first parameter
    		 *
    		 * And returning:
    		 *
    		 * * `{*}` Ordering match: <0 if first parameter should be sorted lower
    		 *   than the second parameter, ===0 if the two parameters are equal and
    		 *   >0 if the first parameter should be sorted height than the second
    		 *   parameter.
    		 * 
    		 *  @type object
    		 *  @default {}
    		 *
    		 *  @example
    		 *    // Numeric ordering of formatted numbers with a pre-formatter
    		 *    $.extend( $.fn.dataTable.ext.type.order, {
    		 *      "string-pre": function(x) {
    		 *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
    		 *        return parseFloat( a );
    		 *      }
    		 *    } );
    		 *
    		 *  @example
    		 *    // Case-sensitive string ordering, with no pre-formatting method
    		 *    $.extend( $.fn.dataTable.ext.order, {
    		 *      "string-case-asc": function(x,y) {
    		 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    		 *      },
    		 *      "string-case-desc": function(x,y) {
    		 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
    		 *      }
    		 *    } );
    		 */
    		order: {}
    	},

    	/**
    	 * Unique DataTables instance counter
    	 *
    	 * @type int
    	 * @private
    	 */
    	_unique: 0,


    	//
    	// Depreciated
    	// The following properties are retained for backwards compatibility only.
    	// The should not be used in new projects and will be removed in a future
    	// version
    	//

    	/**
    	 * Version check function.
    	 *  @type function
    	 *  @depreciated Since 1.10
    	 */
    	fnVersionCheck: DataTable.fnVersionCheck,


    	/**
    	 * Index for what 'this' index API functions should use
    	 *  @type int
    	 *  @deprecated Since v1.10
    	 */
    	iApiIndex: 0,


    	/**
    	 * jQuery UI class container
    	 *  @type object
    	 *  @deprecated Since v1.10
    	 */
    	oJUIClasses: {},


    	/**
    	 * Software version
    	 *  @type string
    	 *  @deprecated Since v1.10
    	 */
    	sVersion: DataTable.version
    };


    //
    // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
    //
    $$7.extend( _ext, {
    	afnFiltering: _ext.search,
    	aTypes:       _ext.type.detect,
    	ofnSearch:    _ext.type.search,
    	oSort:        _ext.type.order,
    	afnSortData:  _ext.order,
    	aoFeatures:   _ext.feature,
    	oApi:         _ext.internal,
    	oStdClasses:  _ext.classes,
    	oPagination:  _ext.pager
    } );


    $$7.extend( DataTable.ext.classes, {
    	"sTable": "dataTable",
    	"sNoFooter": "no-footer",

    	/* Paging buttons */
    	"sPageButton": "paginate_button",
    	"sPageButtonActive": "current",
    	"sPageButtonDisabled": "disabled",

    	/* Striping classes */
    	"sStripeOdd": "odd",
    	"sStripeEven": "even",

    	/* Empty row */
    	"sRowEmpty": "dataTables_empty",

    	/* Features */
    	"sWrapper": "dataTables_wrapper",
    	"sFilter": "dataTables_filter",
    	"sInfo": "dataTables_info",
    	"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
    	"sLength": "dataTables_length",
    	"sProcessing": "dataTables_processing",

    	/* Sorting */
    	"sSortAsc": "sorting_asc",
    	"sSortDesc": "sorting_desc",
    	"sSortable": "sorting", /* Sortable in both directions */
    	"sSortableAsc": "sorting_desc_disabled",
    	"sSortableDesc": "sorting_asc_disabled",
    	"sSortableNone": "sorting_disabled",
    	"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */

    	/* Filtering */
    	"sFilterInput": "",

    	/* Page length */
    	"sLengthSelect": "",

    	/* Scrolling */
    	"sScrollWrapper": "dataTables_scroll",
    	"sScrollHead": "dataTables_scrollHead",
    	"sScrollHeadInner": "dataTables_scrollHeadInner",
    	"sScrollBody": "dataTables_scrollBody",
    	"sScrollFoot": "dataTables_scrollFoot",
    	"sScrollFootInner": "dataTables_scrollFootInner",

    	/* Misc */
    	"sHeaderTH": "",
    	"sFooterTH": "",

    	// Deprecated
    	"sSortJUIAsc": "",
    	"sSortJUIDesc": "",
    	"sSortJUI": "",
    	"sSortJUIAscAllowed": "",
    	"sSortJUIDescAllowed": "",
    	"sSortJUIWrapper": "",
    	"sSortIcon": "",
    	"sJUIHeader": "",
    	"sJUIFooter": ""
    } );


    var extPagination = DataTable.ext.pager;

    function _numbers ( page, pages ) {
    	var numbers = [],
    		buttons = extPagination.numbers_length,
    		half = Math.floor( buttons / 2 );

    	if ( pages <= buttons ) {
    		numbers = _range( 0, pages );
    	}
    	else if ( page <= half ) {
    		numbers = _range( 0, buttons-2 );
    		numbers.push( 'ellipsis' );
    		numbers.push( pages-1 );
    	}
    	else if ( page >= pages - 1 - half ) {
    		numbers = _range( pages-(buttons-2), pages );
    		numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6
    		numbers.splice( 0, 0, 0 );
    	}
    	else {
    		numbers = _range( page-half+2, page+half-1 );
    		numbers.push( 'ellipsis' );
    		numbers.push( pages-1 );
    		numbers.splice( 0, 0, 'ellipsis' );
    		numbers.splice( 0, 0, 0 );
    	}

    	numbers.DT_el = 'span';
    	return numbers;
    }


    $$7.extend( extPagination, {
    	simple: function ( page, pages ) {
    		return [ 'previous', 'next' ];
    	},

    	full: function ( page, pages ) {
    		return [  'first', 'previous', 'next', 'last' ];
    	},

    	numbers: function ( page, pages ) {
    		return [ _numbers(page, pages) ];
    	},

    	simple_numbers: function ( page, pages ) {
    		return [ 'previous', _numbers(page, pages), 'next' ];
    	},

    	full_numbers: function ( page, pages ) {
    		return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];
    	},
    	
    	first_last_numbers: function (page, pages) {
     		return ['first', _numbers(page, pages), 'last'];
     	},

    	// For testing and plug-ins to use
    	_numbers: _numbers,

    	// Number of number buttons (including ellipsis) to show. _Must be odd!_
    	numbers_length: 7
    } );


    $$7.extend( true, DataTable.ext.renderer, {
    	pageButton: {
    		_: function ( settings, host, idx, buttons, page, pages ) {
    			var classes = settings.oClasses;
    			var lang = settings.oLanguage.oPaginate;
    			var aria = settings.oLanguage.oAria.paginate || {};
    			var btnDisplay, btnClass;

    			var attach = function( container, buttons ) {
    				var i, ien, node, button, tabIndex;
    				var disabledClass = classes.sPageButtonDisabled;
    				var clickHandler = function ( e ) {
    					_fnPageChange( settings, e.data.action, true );
    				};

    				for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
    					button = buttons[i];

    					if ( Array.isArray( button ) ) {
    						var inner = $$7( '<'+(button.DT_el || 'div')+'/>' )
    							.appendTo( container );
    						attach( inner, button );
    					}
    					else {
    						btnDisplay = null;
    						btnClass = button;
    						tabIndex = settings.iTabIndex;

    						switch ( button ) {
    							case 'ellipsis':
    								container.append('<span class="ellipsis">&#x2026;</span>');
    								break;

    							case 'first':
    								btnDisplay = lang.sFirst;

    								if ( page === 0 ) {
    									tabIndex = -1;
    									btnClass += ' ' + disabledClass;
    								}
    								break;

    							case 'previous':
    								btnDisplay = lang.sPrevious;

    								if ( page === 0 ) {
    									tabIndex = -1;
    									btnClass += ' ' + disabledClass;
    								}
    								break;

    							case 'next':
    								btnDisplay = lang.sNext;

    								if ( pages === 0 || page === pages-1 ) {
    									tabIndex = -1;
    									btnClass += ' ' + disabledClass;
    								}
    								break;

    							case 'last':
    								btnDisplay = lang.sLast;

    								if ( pages === 0 || page === pages-1 ) {
    									tabIndex = -1;
    									btnClass += ' ' + disabledClass;
    								}
    								break;

    							default:
    								btnDisplay = settings.fnFormatNumber( button + 1 );
    								btnClass = page === button ?
    									classes.sPageButtonActive : '';
    								break;
    						}

    						if ( btnDisplay !== null ) {
    							var tag = settings.oInit.pagingTag || 'a';
    							var disabled = btnClass.indexOf(disabledClass) !== -1;
    		

    							node = $$7('<'+tag+'>', {
    									'class': classes.sPageButton+' '+btnClass,
    									'aria-controls': settings.sTableId,
    									'aria-disabled': disabled ? 'true' : null,
    									'aria-label': aria[ button ],
    									'role': 'link',
    									'aria-current': btnClass === classes.sPageButtonActive ? 'page' : null,
    									'data-dt-idx': button,
    									'tabindex': tabIndex,
    									'id': idx === 0 && typeof button === 'string' ?
    										settings.sTableId +'_'+ button :
    										null
    								} )
    								.html( btnDisplay )
    								.appendTo( container );

    							_fnBindAction(
    								node, {action: button}, clickHandler
    							);
    						}
    					}
    				}
    			};

    			// IE9 throws an 'unknown error' if document.activeElement is used
    			// inside an iframe or frame. Try / catch the error. Not good for
    			// accessibility, but neither are frames.
    			var activeEl;

    			try {
    				// Because this approach is destroying and recreating the paging
    				// elements, focus is lost on the select button which is bad for
    				// accessibility. So we want to restore focus once the draw has
    				// completed
    				activeEl = $$7(host).find(document.activeElement).data('dt-idx');
    			}
    			catch (e) {}

    			attach( $$7(host).empty(), buttons );

    			if ( activeEl !== undefined ) {
    				$$7(host).find( '[data-dt-idx='+activeEl+']' ).trigger('focus');
    			}
    		}
    	}
    } );



    // Built in type detection. See model.ext.aTypes for information about
    // what is required from this methods.
    $$7.extend( DataTable.ext.type.detect, [
    	// Plain numbers - first since V8 detects some plain numbers as dates
    	// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
    	function ( d, settings )
    	{
    		var decimal = settings.oLanguage.sDecimal;
    		return _isNumber( d, decimal ) ? 'num'+decimal : null;
    	},

    	// Dates (only those recognised by the browser's Date.parse)
    	function ( d, settings )
    	{
    		// V8 tries _very_ hard to make a string passed into `Date.parse()`
    		// valid, so we need to use a regex to restrict date formats. Use a
    		// plug-in for anything other than ISO8601 style strings
    		if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {
    			return null;
    		}
    		var parsed = Date.parse(d);
    		return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
    	},

    	// Formatted numbers
    	function ( d, settings )
    	{
    		var decimal = settings.oLanguage.sDecimal;
    		return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;
    	},

    	// HTML numeric
    	function ( d, settings )
    	{
    		var decimal = settings.oLanguage.sDecimal;
    		return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;
    	},

    	// HTML numeric, formatted
    	function ( d, settings )
    	{
    		var decimal = settings.oLanguage.sDecimal;
    		return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;
    	},

    	// HTML (this is strict checking - there must be html)
    	function ( d, settings )
    	{
    		return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
    			'html' : null;
    	}
    ] );



    // Filter formatting functions. See model.ext.ofnSearch for information about
    // what is required from these methods.
    // 
    // Note that additional search methods are added for the html numbers and
    // html formatted numbers by `_addNumericSort()` when we know what the decimal
    // place is


    $$7.extend( DataTable.ext.type.search, {
    	html: function ( data ) {
    		return _empty(data) ?
    			data :
    			typeof data === 'string' ?
    				data
    					.replace( _re_new_lines, " " )
    					.replace( _re_html, "" ) :
    				'';
    	},

    	string: function ( data ) {
    		return _empty(data) ?
    			data :
    			typeof data === 'string' ?
    				data.replace( _re_new_lines, " " ) :
    				data;
    	}
    } );



    var __numericReplace = function ( d, decimalPlace, re1, re2 ) {
    	if ( d !== 0 && (!d || d === '-') ) {
    		return -Infinity;
    	}
    	
    	var type = typeof d;

    	if (type === 'number' || type === 'bigint') {
    		return d;
    	}

    	// If a decimal place other than `.` is used, it needs to be given to the
    	// function so we can detect it and replace with a `.` which is the only
    	// decimal place Javascript recognises - it is not locale aware.
    	if ( decimalPlace ) {
    		d = _numToDecimal( d, decimalPlace );
    	}

    	if ( d.replace ) {
    		if ( re1 ) {
    			d = d.replace( re1, '' );
    		}

    		if ( re2 ) {
    			d = d.replace( re2, '' );
    		}
    	}

    	return d * 1;
    };


    // Add the numeric 'deformatting' functions for sorting and search. This is done
    // in a function to provide an easy ability for the language options to add
    // additional methods if a non-period decimal place is used.
    function _addNumericSort ( decimalPlace ) {
    	$$7.each(
    		{
    			// Plain numbers
    			"num": function ( d ) {
    				return __numericReplace( d, decimalPlace );
    			},

    			// Formatted numbers
    			"num-fmt": function ( d ) {
    				return __numericReplace( d, decimalPlace, _re_formatted_numeric );
    			},

    			// HTML numeric
    			"html-num": function ( d ) {
    				return __numericReplace( d, decimalPlace, _re_html );
    			},

    			// HTML numeric, formatted
    			"html-num-fmt": function ( d ) {
    				return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );
    			}
    		},
    		function ( key, fn ) {
    			// Add the ordering method
    			_ext.type.order[ key+decimalPlace+'-pre' ] = fn;

    			// For HTML types add a search formatter that will strip the HTML
    			if ( key.match(/^html\-/) ) {
    				_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;
    			}
    		}
    	);
    }


    // Default sort methods
    $$7.extend( _ext.type.order, {
    	// Dates
    	"date-pre": function ( d ) {
    		var ts = Date.parse( d );
    		return isNaN(ts) ? -Infinity : ts;
    	},

    	// html
    	"html-pre": function ( a ) {
    		return _empty(a) ?
    			'' :
    			a.replace ?
    				a.replace( /<.*?>/g, "" ).toLowerCase() :
    				a+'';
    	},

    	// string
    	"string-pre": function ( a ) {
    		// This is a little complex, but faster than always calling toString,
    		// http://jsperf.com/tostring-v-check
    		return _empty(a) ?
    			'' :
    			typeof a === 'string' ?
    				a.toLowerCase() :
    				! a.toString ?
    					'' :
    					a.toString();
    	},

    	// string-asc and -desc are retained only for compatibility with the old
    	// sort methods
    	"string-asc": function ( x, y ) {
    		return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    	},

    	"string-desc": function ( x, y ) {
    		return ((x < y) ? 1 : ((x > y) ? -1 : 0));
    	}
    } );


    // Numeric sorting types - order doesn't matter here
    _addNumericSort( '' );


    $$7.extend( true, DataTable.ext.renderer, {
    	header: {
    		_: function ( settings, cell, column, classes ) {
    			// No additional mark-up required
    			// Attach a sort listener to update on sort - note that using the
    			// `DT` namespace will allow the event to be removed automatically
    			// on destroy, while the `dt` namespaced event is the one we are
    			// listening for
    			$$7(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
    				if ( settings !== ctx ) { // need to check this this is the host
    					return;               // table, not a nested one
    				}

    				var colIdx = column.idx;

    				cell
    					.removeClass(
    						classes.sSortAsc +' '+
    						classes.sSortDesc
    					)
    					.addClass( columns[ colIdx ] == 'asc' ?
    						classes.sSortAsc : columns[ colIdx ] == 'desc' ?
    							classes.sSortDesc :
    							column.sSortingClass
    					);
    			} );
    		},

    		jqueryui: function ( settings, cell, column, classes ) {
    			$$7('<div/>')
    				.addClass( classes.sSortJUIWrapper )
    				.append( cell.contents() )
    				.append( $$7('<span/>')
    					.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )
    				)
    				.appendTo( cell );

    			// Attach a sort listener to update on sort
    			$$7(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
    				if ( settings !== ctx ) {
    					return;
    				}

    				var colIdx = column.idx;

    				cell
    					.removeClass( classes.sSortAsc +" "+classes.sSortDesc )
    					.addClass( columns[ colIdx ] == 'asc' ?
    						classes.sSortAsc : columns[ colIdx ] == 'desc' ?
    							classes.sSortDesc :
    							column.sSortingClass
    					);

    				cell
    					.find( 'span.'+classes.sSortIcon )
    					.removeClass(
    						classes.sSortJUIAsc +" "+
    						classes.sSortJUIDesc +" "+
    						classes.sSortJUI +" "+
    						classes.sSortJUIAscAllowed +" "+
    						classes.sSortJUIDescAllowed
    					)
    					.addClass( columns[ colIdx ] == 'asc' ?
    						classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?
    							classes.sSortJUIDesc :
    							column.sSortingClassJUI
    					);
    			} );
    		}
    	}
    } );

    /*
     * Public helper functions. These aren't used internally by DataTables, or
     * called by any of the options passed into DataTables, but they can be used
     * externally by developers working with DataTables. They are helper functions
     * to make working with DataTables a little bit easier.
     */

    var __htmlEscapeEntities = function ( d ) {
    	if (Array.isArray(d)) {
    		d = d.join(',');
    	}

    	return typeof d === 'string' ?
    		d
    			.replace(/&/g, '&amp;')
    			.replace(/</g, '&lt;')
    			.replace(/>/g, '&gt;')
    			.replace(/"/g, '&quot;') :
    		d;
    };

    // Common logic for moment, luxon or a date action
    function __mld( dt, momentFn, luxonFn, dateFn, arg1 ) {
    	if (window.moment) {
    		return dt[momentFn]( arg1 );
    	}
    	else if (window.luxon) {
    		return dt[luxonFn]( arg1 );
    	}
    	
    	return dateFn ? dt[dateFn]( arg1 ) : dt;
    }


    var __mlWarning = false;
    function __mldObj (d, format, locale) {
    	var dt;

    	if (window.moment) {
    		dt = window.moment.utc( d, format, locale, true );

    		if (! dt.isValid()) {
    			return null;
    		}
    	}
    	else if (window.luxon) {
    		dt = format && typeof d === 'string'
    			? window.luxon.DateTime.fromFormat( d, format )
    			: window.luxon.DateTime.fromISO( d );

    		if (! dt.isValid) {
    			return null;
    		}

    		dt.setLocale(locale);
    	}
    	else if (! format) {
    		// No format given, must be ISO
    		dt = new Date(d);
    	}
    	else {
    		if (! __mlWarning) {
    			alert('DataTables warning: Formatted date without Moment.js or Luxon - https://datatables.net/tn/17');
    		}

    		__mlWarning = true;
    	}

    	return dt;
    }

    // Wrapper for date, datetime and time which all operate the same way with the exception of
    // the output string for auto locale support
    function __mlHelper (localeString) {
    	return function ( from, to, locale, def ) {
    		// Luxon and Moment support
    		// Argument shifting
    		if ( arguments.length === 0 ) {
    			locale = 'en';
    			to = null; // means toLocaleString
    			from = null; // means iso8601
    		}
    		else if ( arguments.length === 1 ) {
    			locale = 'en';
    			to = from;
    			from = null;
    		}
    		else if ( arguments.length === 2 ) {
    			locale = to;
    			to = from;
    			from = null;
    		}

    		var typeName = 'datetime-' + to;

    		// Add type detection and sorting specific to this date format - we need to be able to identify
    		// date type columns as such, rather than as numbers in extensions. Hence the need for this.
    		if (! DataTable.ext.type.order[typeName]) {
    			// The renderer will give the value to type detect as the type!
    			DataTable.ext.type.detect.unshift(function (d) {
    				return d === typeName ? typeName : false;
    			});

    			// The renderer gives us Moment, Luxon or Date obects for the sorting, all of which have a
    			// `valueOf` which gives milliseconds epoch
    			DataTable.ext.type.order[typeName + '-asc'] = function (a, b) {
    				var x = a.valueOf();
    				var y = b.valueOf();

    				return x === y
    					? 0
    					: x < y
    						? -1
    						: 1;
    			};

    			DataTable.ext.type.order[typeName + '-desc'] = function (a, b) {
    				var x = a.valueOf();
    				var y = b.valueOf();

    				return x === y
    					? 0
    					: x > y
    						? -1
    						: 1;
    			};
    		}
    	
    		return function ( d, type ) {
    			// Allow for a default value
    			if (d === null || d === undefined) {
    				if (def === '--now') {
    					// We treat everything as UTC further down, so no changes are
    					// made, as such need to get the local date / time as if it were
    					// UTC
    					var local = new Date();
    					d = new Date( Date.UTC(
    						local.getFullYear(), local.getMonth(), local.getDate(),
    						local.getHours(), local.getMinutes(), local.getSeconds()
    					) );
    				}
    				else {
    					d = '';
    				}
    			}

    			if (type === 'type') {
    				// Typing uses the type name for fast matching
    				return typeName;
    			}

    			if (d === '') {
    				return type !== 'sort'
    					? ''
    					: __mldObj('0000-01-01 00:00:00', null, locale);
    			}

    			// Shortcut. If `from` and `to` are the same, we are using the renderer to
    			// format for ordering, not display - its already in the display format.
    			if ( to !== null && from === to && type !== 'sort' && type !== 'type' && ! (d instanceof Date) ) {
    				return d;
    			}

    			var dt = __mldObj(d, from, locale);

    			if (dt === null) {
    				return d;
    			}

    			if (type === 'sort') {
    				return dt;
    			}
    			
    			var formatted = to === null
    				? __mld(dt, 'toDate', 'toJSDate', '')[localeString]()
    				: __mld(dt, 'format', 'toFormat', 'toISOString', to);

    			// XSS protection
    			return type === 'display' ?
    				__htmlEscapeEntities( formatted ) :
    				formatted;
    		};
    	}
    }

    // Based on locale, determine standard number formatting
    // Fallback for legacy browsers is US English
    var __thousands = ',';
    var __decimal = '.';

    if (window.Intl !== undefined) {
    	try {
    		var num = new Intl.NumberFormat().formatToParts(100000.1);
    	
    		for (var i=0 ; i<num.length ; i++) {
    			if (num[i].type === 'group') {
    				__thousands = num[i].value;
    			}
    			else if (num[i].type === 'decimal') {
    				__decimal = num[i].value;
    			}
    		}
    	}
    	catch (e) {
    		// noop
    	}
    }

    // Formatted date time detection - use by declaring the formats you are going to use
    DataTable.datetime = function ( format, locale ) {
    	var typeName = 'datetime-detect-' + format;

    	if (! locale) {
    		locale = 'en';
    	}

    	if (! DataTable.ext.type.order[typeName]) {
    		DataTable.ext.type.detect.unshift(function (d) {
    			var dt = __mldObj(d, format, locale);
    			return d === '' || dt ? typeName : false;
    		});

    		DataTable.ext.type.order[typeName + '-pre'] = function (d) {
    			return __mldObj(d, format, locale) || 0;
    		};
    	}
    };

    /**
     * Helpers for `columns.render`.
     *
     * The options defined here can be used with the `columns.render` initialisation
     * option to provide a display renderer. The following functions are defined:
     *
     * * `number` - Will format numeric data (defined by `columns.data`) for
     *   display, retaining the original unformatted data for sorting and filtering.
     *   It takes 5 parameters:
     *   * `string` - Thousands grouping separator
     *   * `string` - Decimal point indicator
     *   * `integer` - Number of decimal points to show
     *   * `string` (optional) - Prefix.
     *   * `string` (optional) - Postfix (/suffix).
     * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
     *   parameters.
     *
     * @example
     *   // Column definition using the number renderer
     *   {
     *     data: "salary",
     *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
     *   }
     *
     * @namespace
     */
    DataTable.render = {
    	date: __mlHelper('toLocaleDateString'),
    	datetime: __mlHelper('toLocaleString'),
    	time: __mlHelper('toLocaleTimeString'),
    	number: function ( thousands, decimal, precision, prefix, postfix ) {
    		// Auto locale detection
    		if (thousands === null || thousands === undefined) {
    			thousands = __thousands;
    		}

    		if (decimal === null || decimal === undefined) {
    			decimal = __decimal;
    		}

    		return {
    			display: function ( d ) {
    				if ( typeof d !== 'number' && typeof d !== 'string' ) {
    					return d;
    				}

    				if (d === '' || d === null) {
    					return d;
    				}

    				var negative = d < 0 ? '-' : '';
    				var flo = parseFloat( d );

    				// If NaN then there isn't much formatting that we can do - just
    				// return immediately, escaping any HTML (this was supposed to
    				// be a number after all)
    				if ( isNaN( flo ) ) {
    					return __htmlEscapeEntities( d );
    				}

    				flo = flo.toFixed( precision );
    				d = Math.abs( flo );

    				var intPart = parseInt( d, 10 );
    				var floatPart = precision ?
    					decimal+(d - intPart).toFixed( precision ).substring( 2 ):
    					'';

    				// If zero, then can't have a negative prefix
    				if (intPart === 0 && parseFloat(floatPart) === 0) {
    					negative = '';
    				}

    				return negative + (prefix||'') +
    					intPart.toString().replace(
    						/\B(?=(\d{3})+(?!\d))/g, thousands
    					) +
    					floatPart +
    					(postfix||'');
    			}
    		};
    	},

    	text: function () {
    		return {
    			display: __htmlEscapeEntities,
    			filter: __htmlEscapeEntities
    		};
    	}
    };


    /*
     * This is really a good bit rubbish this method of exposing the internal methods
     * publicly... - To be fixed in 2.0 using methods on the prototype
     */


    /**
     * Create a wrapper function for exporting an internal functions to an external API.
     *  @param {string} fn API function name
     *  @returns {function} wrapped function
     *  @memberof DataTable#internal
     */
    function _fnExternApiFunc (fn)
    {
    	return function() {
    		var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(
    			Array.prototype.slice.call(arguments)
    		);
    		return DataTable.ext.internal[fn].apply( this, args );
    	};
    }


    /**
     * Reference to internal functions for use by plug-in developers. Note that
     * these methods are references to internal functions and are considered to be
     * private. If you use these methods, be aware that they are liable to change
     * between versions.
     *  @namespace
     */
    $$7.extend( DataTable.ext.internal, {
    	_fnExternApiFunc: _fnExternApiFunc,
    	_fnBuildAjax: _fnBuildAjax,
    	_fnAjaxUpdate: _fnAjaxUpdate,
    	_fnAjaxParameters: _fnAjaxParameters,
    	_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
    	_fnAjaxDataSrc: _fnAjaxDataSrc,
    	_fnAddColumn: _fnAddColumn,
    	_fnColumnOptions: _fnColumnOptions,
    	_fnAdjustColumnSizing: _fnAdjustColumnSizing,
    	_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
    	_fnColumnIndexToVisible: _fnColumnIndexToVisible,
    	_fnVisbleColumns: _fnVisbleColumns,
    	_fnGetColumns: _fnGetColumns,
    	_fnColumnTypes: _fnColumnTypes,
    	_fnApplyColumnDefs: _fnApplyColumnDefs,
    	_fnHungarianMap: _fnHungarianMap,
    	_fnCamelToHungarian: _fnCamelToHungarian,
    	_fnLanguageCompat: _fnLanguageCompat,
    	_fnBrowserDetect: _fnBrowserDetect,
    	_fnAddData: _fnAddData,
    	_fnAddTr: _fnAddTr,
    	_fnNodeToDataIndex: _fnNodeToDataIndex,
    	_fnNodeToColumnIndex: _fnNodeToColumnIndex,
    	_fnGetCellData: _fnGetCellData,
    	_fnSetCellData: _fnSetCellData,
    	_fnSplitObjNotation: _fnSplitObjNotation,
    	_fnGetObjectDataFn: _fnGetObjectDataFn,
    	_fnSetObjectDataFn: _fnSetObjectDataFn,
    	_fnGetDataMaster: _fnGetDataMaster,
    	_fnClearTable: _fnClearTable,
    	_fnDeleteIndex: _fnDeleteIndex,
    	_fnInvalidate: _fnInvalidate,
    	_fnGetRowElements: _fnGetRowElements,
    	_fnCreateTr: _fnCreateTr,
    	_fnBuildHead: _fnBuildHead,
    	_fnDrawHead: _fnDrawHead,
    	_fnDraw: _fnDraw,
    	_fnReDraw: _fnReDraw,
    	_fnAddOptionsHtml: _fnAddOptionsHtml,
    	_fnDetectHeader: _fnDetectHeader,
    	_fnGetUniqueThs: _fnGetUniqueThs,
    	_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
    	_fnFilterComplete: _fnFilterComplete,
    	_fnFilterCustom: _fnFilterCustom,
    	_fnFilterColumn: _fnFilterColumn,
    	_fnFilter: _fnFilter,
    	_fnFilterCreateSearch: _fnFilterCreateSearch,
    	_fnEscapeRegex: _fnEscapeRegex,
    	_fnFilterData: _fnFilterData,
    	_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
    	_fnUpdateInfo: _fnUpdateInfo,
    	_fnInfoMacros: _fnInfoMacros,
    	_fnInitialise: _fnInitialise,
    	_fnInitComplete: _fnInitComplete,
    	_fnLengthChange: _fnLengthChange,
    	_fnFeatureHtmlLength: _fnFeatureHtmlLength,
    	_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
    	_fnPageChange: _fnPageChange,
    	_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
    	_fnProcessingDisplay: _fnProcessingDisplay,
    	_fnFeatureHtmlTable: _fnFeatureHtmlTable,
    	_fnScrollDraw: _fnScrollDraw,
    	_fnApplyToChildren: _fnApplyToChildren,
    	_fnCalculateColumnWidths: _fnCalculateColumnWidths,
    	_fnThrottle: _fnThrottle,
    	_fnConvertToWidth: _fnConvertToWidth,
    	_fnGetWidestNode: _fnGetWidestNode,
    	_fnGetMaxLenString: _fnGetMaxLenString,
    	_fnStringToCss: _fnStringToCss,
    	_fnSortFlatten: _fnSortFlatten,
    	_fnSort: _fnSort,
    	_fnSortAria: _fnSortAria,
    	_fnSortListener: _fnSortListener,
    	_fnSortAttachListener: _fnSortAttachListener,
    	_fnSortingClasses: _fnSortingClasses,
    	_fnSortData: _fnSortData,
    	_fnSaveState: _fnSaveState,
    	_fnLoadState: _fnLoadState,
    	_fnImplementState: _fnImplementState,
    	_fnSettingsFromNode: _fnSettingsFromNode,
    	_fnLog: _fnLog,
    	_fnMap: _fnMap,
    	_fnBindAction: _fnBindAction,
    	_fnCallbackReg: _fnCallbackReg,
    	_fnCallbackFire: _fnCallbackFire,
    	_fnLengthOverflow: _fnLengthOverflow,
    	_fnRenderer: _fnRenderer,
    	_fnDataSource: _fnDataSource,
    	_fnRowAttributes: _fnRowAttributes,
    	_fnExtend: _fnExtend,
    	_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant
    	                                // in 1.10, so this dead-end function is
    	                                // added to prevent errors
    } );


    // jQuery access
    $$7.fn.dataTable = DataTable;

    // Provide access to the host jQuery object (circular reference)
    DataTable.$ = $$7;

    // Legacy aliases
    $$7.fn.dataTableSettings = DataTable.settings;
    $$7.fn.dataTableExt = DataTable.ext;

    // With a capital `D` we return a DataTables API instance rather than a
    // jQuery object
    $$7.fn.DataTable = function ( opts ) {
    	return $$7(this).dataTable( opts ).api();
    };

    // All properties that are available to $.fn.dataTable should also be
    // available on $.fn.DataTable
    $$7.each( DataTable, function ( prop, val ) {
    	$$7.fn.DataTable[ prop ] = val;
    } );

    /*! Buttons for DataTables 2.4.0
     * © SpryMedia Ltd - datatables.net/license
     */


    // Allow reassignment of the $ variable
    let $$6 = j;


    // Used for namespacing events added to the document by each instance, so they
    // can be removed on destroy
    var _instCounter$1 = 0;

    // Button namespacing counter for namespacing events on individual buttons
    var _buttonCounter = 0;

    var _dtButtons = DataTable.ext.buttons;

    // Allow for jQuery slim
    function _fadeIn(el, duration, fn) {
    	if ($$6.fn.animate) {
    		el.stop().fadeIn(duration, fn);
    	}
    	else {
    		el.css('display', 'block');

    		if (fn) {
    			fn.call(el);
    		}
    	}
    }

    function _fadeOut(el, duration, fn) {
    	if ($$6.fn.animate) {
    		el.stop().fadeOut(duration, fn);
    	}
    	else {
    		el.css('display', 'none');

    		if (fn) {
    			fn.call(el);
    		}
    	}
    }

    /**
     * [Buttons description]
     * @param {[type]}
     * @param {[type]}
     */
    var Buttons = function (dt, config) {
    	// If not created with a `new` keyword then we return a wrapper function that
    	// will take the settings object for a DT. This allows easy use of new instances
    	// with the `layout` option - e.g. `topLeft: $.fn.dataTable.Buttons( ... )`.
    	if (!(this instanceof Buttons)) {
    		return function (settings) {
    			return new Buttons(settings, dt).container();
    		};
    	}

    	// If there is no config set it to an empty object
    	if (typeof config === 'undefined') {
    		config = {};
    	}

    	// Allow a boolean true for defaults
    	if (config === true) {
    		config = {};
    	}

    	// For easy configuration of buttons an array can be given
    	if (Array.isArray(config)) {
    		config = { buttons: config };
    	}

    	this.c = $$6.extend(true, {}, Buttons.defaults, config);

    	// Don't want a deep copy for the buttons
    	if (config.buttons) {
    		this.c.buttons = config.buttons;
    	}

    	this.s = {
    		dt: new DataTable.Api(dt),
    		buttons: [],
    		listenKeys: '',
    		namespace: 'dtb' + _instCounter$1++
    	};

    	this.dom = {
    		container: $$6('<' + this.c.dom.container.tag + '/>').addClass(this.c.dom.container.className)
    	};

    	this._constructor();
    };

    $$6.extend(Buttons.prototype, {
    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * Public methods
    	 */

    	/**
    	 * Get the action of a button
    	 * @param  {int|string} Button index
    	 * @return {function}
    	 */ /**
    	 * Set the action of a button
    	 * @param  {node} node Button element
    	 * @param  {function} action Function to set
    	 * @return {Buttons} Self for chaining
    	 */
    	action: function (node, action) {
    		var button = this._nodeToButton(node);

    		if (action === undefined) {
    			return button.conf.action;
    		}

    		button.conf.action = action;

    		return this;
    	},

    	/**
    	 * Add an active class to the button to make to look active or get current
    	 * active state.
    	 * @param  {node} node Button element
    	 * @param  {boolean} [flag] Enable / disable flag
    	 * @return {Buttons} Self for chaining or boolean for getter
    	 */
    	active: function (node, flag) {
    		var button = this._nodeToButton(node);
    		var klass = this.c.dom.button.active;
    		var jqNode = $$6(button.node);

    		if (
    			button.inCollection &&
    			this.c.dom.collection.button &&
    			this.c.dom.collection.button.active !== undefined
    		) {
    			klass = this.c.dom.collection.button.active;
    		}

    		if (flag === undefined) {
    			return jqNode.hasClass(klass);
    		}

    		jqNode.toggleClass(klass, flag === undefined ? true : flag);

    		return this;
    	},

    	/**
    	 * Add a new button
    	 * @param {object} config Button configuration object, base string name or function
    	 * @param {int|string} [idx] Button index for where to insert the button
    	 * @param {boolean} [draw=true] Trigger a draw. Set a false when adding
    	 *   lots of buttons, until the last button.
    	 * @return {Buttons} Self for chaining
    	 */
    	add: function (config, idx, draw) {
    		var buttons = this.s.buttons;

    		if (typeof idx === 'string') {
    			var split = idx.split('-');
    			var base = this.s;

    			for (var i = 0, ien = split.length - 1; i < ien; i++) {
    				base = base.buttons[split[i] * 1];
    			}

    			buttons = base.buttons;
    			idx = split[split.length - 1] * 1;
    		}

    		this._expandButton(
    			buttons,
    			config,
    			config !== undefined ? config.split : undefined,
    			(config === undefined || config.split === undefined || config.split.length === 0) &&
    				base !== undefined,
    			false,
    			idx
    		);

    		if (draw === undefined || draw === true) {
    			this._draw();
    		}

    		return this;
    	},

    	/**
    	 * Clear buttons from a collection and then insert new buttons
    	 */
    	collectionRebuild: function (node, newButtons) {
    		var button = this._nodeToButton(node);

    		if (newButtons !== undefined) {
    			var i;
    			// Need to reverse the array
    			for (i = button.buttons.length - 1; i >= 0; i--) {
    				this.remove(button.buttons[i].node);
    			}

    			// If the collection has prefix and / or postfix buttons we need to add them in
    			if (button.conf.prefixButtons) {
    				newButtons.unshift.apply(newButtons, button.conf.prefixButtons);
    			}

    			if (button.conf.postfixButtons) {
    				newButtons.push.apply(newButtons, button.conf.postfixButtons);
    			}

    			for (i = 0; i < newButtons.length; i++) {
    				var newBtn = newButtons[i];

    				this._expandButton(
    					button.buttons,
    					newBtn,
    					newBtn !== undefined &&
    						newBtn.config !== undefined &&
    						newBtn.config.split !== undefined,
    					true,
    					newBtn.parentConf !== undefined && newBtn.parentConf.split !== undefined,
    					null,
    					newBtn.parentConf
    				);
    			}
    		}

    		this._draw(button.collection, button.buttons);
    	},

    	/**
    	 * Get the container node for the buttons
    	 * @return {jQuery} Buttons node
    	 */
    	container: function () {
    		return this.dom.container;
    	},

    	/**
    	 * Disable a button
    	 * @param  {node} node Button node
    	 * @return {Buttons} Self for chaining
    	 */
    	disable: function (node) {
    		var button = this._nodeToButton(node);

    		$$6(button.node).addClass(this.c.dom.button.disabled).prop('disabled', true);

    		return this;
    	},

    	/**
    	 * Destroy the instance, cleaning up event handlers and removing DOM
    	 * elements
    	 * @return {Buttons} Self for chaining
    	 */
    	destroy: function () {
    		// Key event listener
    		$$6('body').off('keyup.' + this.s.namespace);

    		// Individual button destroy (so they can remove their own events if
    		// needed). Take a copy as the array is modified by `remove`
    		var buttons = this.s.buttons.slice();
    		var i, ien;

    		for (i = 0, ien = buttons.length; i < ien; i++) {
    			this.remove(buttons[i].node);
    		}

    		// Container
    		this.dom.container.remove();

    		// Remove from the settings object collection
    		var buttonInsts = this.s.dt.settings()[0];

    		for (i = 0, ien = buttonInsts.length; i < ien; i++) {
    			if (buttonInsts.inst === this) {
    				buttonInsts.splice(i, 1);
    				break;
    			}
    		}

    		return this;
    	},

    	/**
    	 * Enable / disable a button
    	 * @param  {node} node Button node
    	 * @param  {boolean} [flag=true] Enable / disable flag
    	 * @return {Buttons} Self for chaining
    	 */
    	enable: function (node, flag) {
    		if (flag === false) {
    			return this.disable(node);
    		}

    		var button = this._nodeToButton(node);
    		$$6(button.node).removeClass(this.c.dom.button.disabled).prop('disabled', false);

    		return this;
    	},

    	/**
    	 * Get a button's index
    	 *
    	 * This is internally recursive
    	 * @param {element} node Button to get the index of
    	 * @return {string} Button index
    	 */
    	index: function (node, nested, buttons) {
    		if (!nested) {
    			nested = '';
    			buttons = this.s.buttons;
    		}

    		for (var i = 0, ien = buttons.length; i < ien; i++) {
    			var inner = buttons[i].buttons;

    			if (buttons[i].node === node) {
    				return nested + i;
    			}

    			if (inner && inner.length) {
    				var match = this.index(node, i + '-', inner);

    				if (match !== null) {
    					return match;
    				}
    			}
    		}

    		return null;
    	},

    	/**
    	 * Get the instance name for the button set selector
    	 * @return {string} Instance name
    	 */
    	name: function () {
    		return this.c.name;
    	},

    	/**
    	 * Get a button's node of the buttons container if no button is given
    	 * @param  {node} [node] Button node
    	 * @return {jQuery} Button element, or container
    	 */
    	node: function (node) {
    		if (!node) {
    			return this.dom.container;
    		}

    		var button = this._nodeToButton(node);
    		return $$6(button.node);
    	},

    	/**
    	 * Set / get a processing class on the selected button
    	 * @param {element} node Triggering button node
    	 * @param  {boolean} flag true to add, false to remove, undefined to get
    	 * @return {boolean|Buttons} Getter value or this if a setter.
    	 */
    	processing: function (node, flag) {
    		var dt = this.s.dt;
    		var button = this._nodeToButton(node);

    		if (flag === undefined) {
    			return $$6(button.node).hasClass('processing');
    		}

    		$$6(button.node).toggleClass('processing', flag);

    		$$6(dt.table().node()).triggerHandler('buttons-processing.dt', [
    			flag,
    			dt.button(node),
    			dt,
    			$$6(node),
    			button.conf
    		]);

    		return this;
    	},

    	/**
    	 * Remove a button.
    	 * @param  {node} node Button node
    	 * @return {Buttons} Self for chaining
    	 */
    	remove: function (node) {
    		var button = this._nodeToButton(node);
    		var host = this._nodeToHost(node);
    		var dt = this.s.dt;

    		// Remove any child buttons first
    		if (button.buttons.length) {
    			for (var i = button.buttons.length - 1; i >= 0; i--) {
    				this.remove(button.buttons[i].node);
    			}
    		}

    		button.conf.destroying = true;

    		// Allow the button to remove event handlers, etc
    		if (button.conf.destroy) {
    			button.conf.destroy.call(dt.button(node), dt, $$6(node), button.conf);
    		}

    		this._removeKey(button.conf);

    		$$6(button.node).remove();

    		var idx = $$6.inArray(button, host);
    		host.splice(idx, 1);

    		return this;
    	},

    	/**
    	 * Get the text for a button
    	 * @param  {int|string} node Button index
    	 * @return {string} Button text
    	 */ /**
    	 * Set the text for a button
    	 * @param  {int|string|function} node Button index
    	 * @param  {string} label Text
    	 * @return {Buttons} Self for chaining
    	 */
    	text: function (node, label) {
    		var button = this._nodeToButton(node);
    		var textNode = button.textNode;
    		var dt = this.s.dt;
    		var jqNode = $$6(button.node);
    		var text = function (opt) {
    			return typeof opt === 'function' ? opt(dt, jqNode, button.conf) : opt;
    		};

    		if (label === undefined) {
    			return text(button.conf.text);
    		}

    		button.conf.text = label;
    		textNode.html(text(label));

    		return this;
    	},

    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * Constructor
    	 */

    	/**
    	 * Buttons constructor
    	 * @private
    	 */
    	_constructor: function () {
    		var that = this;
    		var dt = this.s.dt;
    		var dtSettings = dt.settings()[0];
    		var buttons = this.c.buttons;

    		if (!dtSettings._buttons) {
    			dtSettings._buttons = [];
    		}

    		dtSettings._buttons.push({
    			inst: this,
    			name: this.c.name
    		});

    		for (var i = 0, ien = buttons.length; i < ien; i++) {
    			this.add(buttons[i]);
    		}

    		dt.on('destroy', function (e, settings) {
    			if (settings === dtSettings) {
    				that.destroy();
    			}
    		});

    		// Global key event binding to listen for button keys
    		$$6('body').on('keyup.' + this.s.namespace, function (e) {
    			if (!document.activeElement || document.activeElement === document.body) {
    				// SUse a string of characters for fast lookup of if we need to
    				// handle this
    				var character = String.fromCharCode(e.keyCode).toLowerCase();

    				if (that.s.listenKeys.toLowerCase().indexOf(character) !== -1) {
    					that._keypress(character, e);
    				}
    			}
    		});
    	},

    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * Private methods
    	 */

    	/**
    	 * Add a new button to the key press listener
    	 * @param {object} conf Resolved button configuration object
    	 * @private
    	 */
    	_addKey: function (conf) {
    		if (conf.key) {
    			this.s.listenKeys += $$6.isPlainObject(conf.key) ? conf.key.key : conf.key;
    		}
    	},

    	/**
    	 * Insert the buttons into the container. Call without parameters!
    	 * @param  {node} [container] Recursive only - Insert point
    	 * @param  {array} [buttons] Recursive only - Buttons array
    	 * @private
    	 */
    	_draw: function (container, buttons) {
    		if (!container) {
    			container = this.dom.container;
    			buttons = this.s.buttons;
    		}

    		container.children().detach();

    		for (var i = 0, ien = buttons.length; i < ien; i++) {
    			container.append(buttons[i].inserter);
    			container.append(' ');

    			if (buttons[i].buttons && buttons[i].buttons.length) {
    				this._draw(buttons[i].collection, buttons[i].buttons);
    			}
    		}
    	},

    	/**
    	 * Create buttons from an array of buttons
    	 * @param  {array} attachTo Buttons array to attach to
    	 * @param  {object} button Button definition
    	 * @param  {boolean} inCollection true if the button is in a collection
    	 * @private
    	 */
    	_expandButton: function (
    		attachTo,
    		button,
    		split,
    		inCollection,
    		inSplit,
    		attachPoint,
    		parentConf
    	) {
    		var dt = this.s.dt;
    		var isSplit = false;
    		var domCollection = this.c.dom.collection;
    		var buttons = !Array.isArray(button) ? [button] : button;

    		if (button === undefined) {
    			buttons = !Array.isArray(split) ? [split] : split;
    		}

    		for (var i = 0, ien = buttons.length; i < ien; i++) {
    			var conf = this._resolveExtends(buttons[i]);

    			if (!conf) {
    				continue;
    			}

    			isSplit = conf.config && conf.config.split ? true : false;

    			// If the configuration is an array, then expand the buttons at this
    			// point
    			if (Array.isArray(conf)) {
    				this._expandButton(
    					attachTo,
    					conf,
    					built !== undefined && built.conf !== undefined ? built.conf.split : undefined,
    					inCollection,
    					parentConf !== undefined && parentConf.split !== undefined,
    					attachPoint,
    					parentConf
    				);
    				continue;
    			}

    			var built = this._buildButton(
    				conf,
    				inCollection,
    				conf.split !== undefined ||
    					(conf.config !== undefined && conf.config.split !== undefined),
    				inSplit
    			);
    			if (!built) {
    				continue;
    			}

    			if (attachPoint !== undefined && attachPoint !== null) {
    				attachTo.splice(attachPoint, 0, built);
    				attachPoint++;
    			}
    			else {
    				attachTo.push(built);
    			}

    			// Create the dropdown for a collection
    			if (built.conf.buttons) {
    				built.collection = $$6('<' + domCollection.container.content.tag + '/>');
    				built.conf._collection = built.collection;

    				$$6(built.node).append(domCollection.action.dropHtml);

    				this._expandButton(
    					built.buttons,
    					built.conf.buttons,
    					built.conf.split,
    					!isSplit,
    					isSplit,
    					attachPoint,
    					built.conf
    				);
    			}

    			// And the split collection
    			if (built.conf.split) {
    				built.collection = $$6('<' + domCollection.container.tag + '/>');
    				built.conf._collection = built.collection;

    				for (var j = 0; j < built.conf.split.length; j++) {
    					var item = built.conf.split[j];

    					if (typeof item === 'object') {
    						item.parent = parentConf;

    						if (item.collectionLayout === undefined) {
    							item.collectionLayout = built.conf.collectionLayout;
    						}

    						if (item.dropup === undefined) {
    							item.dropup = built.conf.dropup;
    						}

    						if (item.fade === undefined) {
    							item.fade = built.conf.fade;
    						}
    					}
    				}

    				this._expandButton(
    					built.buttons,
    					built.conf.buttons,
    					built.conf.split,
    					!isSplit,
    					isSplit,
    					attachPoint,
    					built.conf
    				);
    			}

    			built.conf.parent = parentConf;

    			// init call is made here, rather than buildButton as it needs to
    			// be selectable, and for that it needs to be in the buttons array
    			if (conf.init) {
    				conf.init.call(dt.button(built.node), dt, $$6(built.node), conf);
    			}
    		}
    	},

    	/**
    	 * Create an individual button
    	 * @param  {object} config            Resolved button configuration
    	 * @param  {boolean} inCollection `true` if a collection button
    	 * @return {object} Completed button description object
    	 * @private
    	 */
    	_buildButton: function (config, inCollection, isSplit, inSplit) {
    		var configDom = this.c.dom;
    		var textNode;
    		var dt = this.s.dt;
    		var text = function (opt) {
    			return typeof opt === 'function' ? opt(dt, button, config) : opt;
    		};

    		// Create an object that describes the button which can be in `dom.button`, or
    		// `dom.collection.button` or `dom.split.button` or `dom.collection.split.button`!
    		// Each should extend from `dom.button`.
    		var dom = $$6.extend(true, {}, configDom.button);

    		if (inCollection && isSplit && configDom.collection.split) {
    			$$6.extend(true, dom, configDom.collection.split.action);
    		}
    		else if (inSplit || inCollection) {
    			$$6.extend(true, dom, configDom.collection.button);
    		}
    		else if (isSplit) {
    			$$6.extend(true, dom, configDom.split.button);
    		}

    		// Spacers don't do much other than insert an element into the DOM
    		if (config.spacer) {
    			var spacer = $$6('<' + dom.spacer.tag + '/>')
    				.addClass('dt-button-spacer ' + config.style + ' ' + dom.spacer.className)
    				.html(text(config.text));

    			return {
    				conf: config,
    				node: spacer,
    				inserter: spacer,
    				buttons: [],
    				inCollection: inCollection,
    				isSplit: isSplit,
    				collection: null,
    				textNode: spacer
    			};
    		}

    		// Make sure that the button is available based on whatever requirements
    		// it has. For example, PDF button require pdfmake
    		if (config.available && !config.available(dt, config) && !config.hasOwnProperty('html')) {
    			return false;
    		}

    		var button;

    		if (!config.hasOwnProperty('html')) {
    			var action = function (e, dt, button, config) {
    				config.action.call(dt.button(button), e, dt, button, config);

    				$$6(dt.table().node()).triggerHandler('buttons-action.dt', [
    					dt.button(button),
    					dt,
    					button,
    					config
    				]);
    			};

    			var tag = config.tag || dom.tag;
    			var clickBlurs = config.clickBlurs === undefined ? true : config.clickBlurs;

    			button = $$6('<' + tag + '/>')
    				.addClass(dom.className)
    				.attr('tabindex', this.s.dt.settings()[0].iTabIndex)
    				.attr('aria-controls', this.s.dt.table().node().id)
    				.on('click.dtb', function (e) {
    					e.preventDefault();

    					if (!button.hasClass(dom.disabled) && config.action) {
    						action(e, dt, button, config);
    					}

    					if (clickBlurs) {
    						button.trigger('blur');
    					}
    				})
    				.on('keypress.dtb', function (e) {
    					if (e.keyCode === 13) {
    						e.preventDefault();

    						if (!button.hasClass(dom.disabled) && config.action) {
    							action(e, dt, button, config);
    						}
    					}
    				});

    			// Make `a` tags act like a link
    			if (tag.toLowerCase() === 'a') {
    				button.attr('href', '#');
    			}

    			// Button tags should have `type=button` so they don't have any default behaviour
    			if (tag.toLowerCase() === 'button') {
    				button.attr('type', 'button');
    			}

    			if (dom.liner.tag) {
    				var liner = $$6('<' + dom.liner.tag + '/>')
    					.html(text(config.text))
    					.addClass(dom.liner.className);

    				if (dom.liner.tag.toLowerCase() === 'a') {
    					liner.attr('href', '#');
    				}

    				button.append(liner);
    				textNode = liner;
    			}
    			else {
    				button.html(text(config.text));
    				textNode = button;
    			}

    			if (config.enabled === false) {
    				button.addClass(dom.disabled);
    			}

    			if (config.className) {
    				button.addClass(config.className);
    			}

    			if (config.titleAttr) {
    				button.attr('title', text(config.titleAttr));
    			}

    			if (config.attr) {
    				button.attr(config.attr);
    			}

    			if (!config.namespace) {
    				config.namespace = '.dt-button-' + _buttonCounter++;
    			}

    			if (config.config !== undefined && config.config.split) {
    				config.split = config.config.split;
    			}
    		}
    		else {
    			button = $$6(config.html);
    		}

    		var buttonContainer = this.c.dom.buttonContainer;
    		var inserter;
    		if (buttonContainer && buttonContainer.tag) {
    			inserter = $$6('<' + buttonContainer.tag + '/>')
    				.addClass(buttonContainer.className)
    				.append(button);
    		}
    		else {
    			inserter = button;
    		}

    		this._addKey(config);

    		// Style integration callback for DOM manipulation
    		// Note that this is _not_ documented. It is currently
    		// for style integration only
    		if (this.c.buttonCreated) {
    			inserter = this.c.buttonCreated(config, inserter);
    		}

    		var splitDiv;

    		if (isSplit) {
    			var dropdownConf = inCollection
    				? $$6.extend(true, this.c.dom.split, this.c.dom.collection.split)
    				: this.c.dom.split;
    			var wrapperConf = dropdownConf.wrapper;

    			splitDiv = $$6('<' + wrapperConf.tag + '/>')
    				.addClass(wrapperConf.className)
    				.append(button);

    			var dropButtonConfig = $$6.extend(config, {
    				align: dropdownConf.dropdown.align,
    				attr: {
    					'aria-haspopup': 'dialog',
    					'aria-expanded': false
    				},
    				className: dropdownConf.dropdown.className,
    				closeButton: false,
    				splitAlignClass: dropdownConf.dropdown.splitAlignClass,
    				text: dropdownConf.dropdown.text
    			});

    			this._addKey(dropButtonConfig);

    			var splitAction = function (e, dt, button, config) {
    				_dtButtons.split.action.call(dt.button(splitDiv), e, dt, button, config);

    				$$6(dt.table().node()).triggerHandler('buttons-action.dt', [
    					dt.button(button),
    					dt,
    					button,
    					config
    				]);
    				button.attr('aria-expanded', true);
    			};

    			var dropButton = $$6(
    				'<button class="' + dropdownConf.dropdown.className + ' dt-button"></button>'
    			)
    				.html(dropdownConf.dropdown.dropHtml)
    				.on('click.dtb', function (e) {
    					e.preventDefault();
    					e.stopPropagation();

    					if (!dropButton.hasClass(dom.disabled)) {
    						splitAction(e, dt, dropButton, dropButtonConfig);
    					}
    					if (clickBlurs) {
    						dropButton.trigger('blur');
    					}
    				})
    				.on('keypress.dtb', function (e) {
    					if (e.keyCode === 13) {
    						e.preventDefault();

    						if (!dropButton.hasClass(dom.disabled)) {
    							splitAction(e, dt, dropButton, dropButtonConfig);
    						}
    					}
    				});

    			if (config.split.length === 0) {
    				dropButton.addClass('dtb-hide-drop');
    			}

    			splitDiv.append(dropButton).attr(dropButtonConfig.attr);
    		}

    		return {
    			conf: config,
    			node: isSplit ? splitDiv.get(0) : button.get(0),
    			inserter: isSplit ? splitDiv : inserter,
    			buttons: [],
    			inCollection: inCollection,
    			isSplit: isSplit,
    			inSplit: inSplit,
    			collection: null,
    			textNode: textNode
    		};
    	},

    	/**
    	 * Get the button object from a node (recursive)
    	 * @param  {node} node Button node
    	 * @param  {array} [buttons] Button array, uses base if not defined
    	 * @return {object} Button object
    	 * @private
    	 */
    	_nodeToButton: function (node, buttons) {
    		if (!buttons) {
    			buttons = this.s.buttons;
    		}

    		for (var i = 0, ien = buttons.length; i < ien; i++) {
    			if (buttons[i].node === node) {
    				return buttons[i];
    			}

    			if (buttons[i].buttons.length) {
    				var ret = this._nodeToButton(node, buttons[i].buttons);

    				if (ret) {
    					return ret;
    				}
    			}
    		}
    	},

    	/**
    	 * Get container array for a button from a button node (recursive)
    	 * @param  {node} node Button node
    	 * @param  {array} [buttons] Button array, uses base if not defined
    	 * @return {array} Button's host array
    	 * @private
    	 */
    	_nodeToHost: function (node, buttons) {
    		if (!buttons) {
    			buttons = this.s.buttons;
    		}

    		for (var i = 0, ien = buttons.length; i < ien; i++) {
    			if (buttons[i].node === node) {
    				return buttons;
    			}

    			if (buttons[i].buttons.length) {
    				var ret = this._nodeToHost(node, buttons[i].buttons);

    				if (ret) {
    					return ret;
    				}
    			}
    		}
    	},

    	/**
    	 * Handle a key press - determine if any button's key configured matches
    	 * what was typed and trigger the action if so.
    	 * @param  {string} character The character pressed
    	 * @param  {object} e Key event that triggered this call
    	 * @private
    	 */
    	_keypress: function (character, e) {
    		// Check if this button press already activated on another instance of Buttons
    		if (e._buttonsHandled) {
    			return;
    		}

    		var run = function (conf, node) {
    			if (!conf.key) {
    				return;
    			}

    			if (conf.key === character) {
    				e._buttonsHandled = true;
    				$$6(node).click();
    			}
    			else if ($$6.isPlainObject(conf.key)) {
    				if (conf.key.key !== character) {
    					return;
    				}

    				if (conf.key.shiftKey && !e.shiftKey) {
    					return;
    				}

    				if (conf.key.altKey && !e.altKey) {
    					return;
    				}

    				if (conf.key.ctrlKey && !e.ctrlKey) {
    					return;
    				}

    				if (conf.key.metaKey && !e.metaKey) {
    					return;
    				}

    				// Made it this far - it is good
    				e._buttonsHandled = true;
    				$$6(node).click();
    			}
    		};

    		var recurse = function (a) {
    			for (var i = 0, ien = a.length; i < ien; i++) {
    				run(a[i].conf, a[i].node);

    				if (a[i].buttons.length) {
    					recurse(a[i].buttons);
    				}
    			}
    		};

    		recurse(this.s.buttons);
    	},

    	/**
    	 * Remove a key from the key listener for this instance (to be used when a
    	 * button is removed)
    	 * @param  {object} conf Button configuration
    	 * @private
    	 */
    	_removeKey: function (conf) {
    		if (conf.key) {
    			var character = $$6.isPlainObject(conf.key) ? conf.key.key : conf.key;

    			// Remove only one character, as multiple buttons could have the
    			// same listening key
    			var a = this.s.listenKeys.split('');
    			var idx = $$6.inArray(character, a);
    			a.splice(idx, 1);
    			this.s.listenKeys = a.join('');
    		}
    	},

    	/**
    	 * Resolve a button configuration
    	 * @param  {string|function|object} conf Button config to resolve
    	 * @return {object} Button configuration
    	 * @private
    	 */
    	_resolveExtends: function (conf) {
    		var that = this;
    		var dt = this.s.dt;
    		var i, ien;
    		var toConfObject = function (base) {
    			var loop = 0;

    			// Loop until we have resolved to a button configuration, or an
    			// array of button configurations (which will be iterated
    			// separately)
    			while (!$$6.isPlainObject(base) && !Array.isArray(base)) {
    				if (base === undefined) {
    					return;
    				}

    				if (typeof base === 'function') {
    					base = base.call(that, dt, conf);

    					if (!base) {
    						return false;
    					}
    				}
    				else if (typeof base === 'string') {
    					if (!_dtButtons[base]) {
    						return { html: base };
    					}

    					base = _dtButtons[base];
    				}

    				loop++;
    				if (loop > 30) {
    					// Protect against misconfiguration killing the browser
    					throw 'Buttons: Too many iterations';
    				}
    			}

    			return Array.isArray(base) ? base : $$6.extend({}, base);
    		};

    		conf = toConfObject(conf);

    		while (conf && conf.extend) {
    			// Use `toConfObject` in case the button definition being extended
    			// is itself a string or a function
    			if (!_dtButtons[conf.extend]) {
    				throw 'Cannot extend unknown button type: ' + conf.extend;
    			}

    			var objArray = toConfObject(_dtButtons[conf.extend]);
    			if (Array.isArray(objArray)) {
    				return objArray;
    			}
    			else if (!objArray) {
    				// This is a little brutal as it might be possible to have a
    				// valid button without the extend, but if there is no extend
    				// then the host button would be acting in an undefined state
    				return false;
    			}

    			// Stash the current class name
    			var originalClassName = objArray.className;

    			if (conf.config !== undefined && objArray.config !== undefined) {
    				conf.config = $$6.extend({}, objArray.config, conf.config);
    			}

    			conf = $$6.extend({}, objArray, conf);

    			// The extend will have overwritten the original class name if the
    			// `conf` object also assigned a class, but we want to concatenate
    			// them so they are list that is combined from all extended buttons
    			if (originalClassName && conf.className !== originalClassName) {
    				conf.className = originalClassName + ' ' + conf.className;
    			}

    			// Although we want the `conf` object to overwrite almost all of
    			// the properties of the object being extended, the `extend`
    			// property should come from the object being extended
    			conf.extend = objArray.extend;
    		}

    		// Buttons to be added to a collection  -gives the ability to define
    		// if buttons should be added to the start or end of a collection
    		var postfixButtons = conf.postfixButtons;
    		if (postfixButtons) {
    			if (!conf.buttons) {
    				conf.buttons = [];
    			}

    			for (i = 0, ien = postfixButtons.length; i < ien; i++) {
    				conf.buttons.push(postfixButtons[i]);
    			}
    		}

    		var prefixButtons = conf.prefixButtons;
    		if (prefixButtons) {
    			if (!conf.buttons) {
    				conf.buttons = [];
    			}

    			for (i = 0, ien = prefixButtons.length; i < ien; i++) {
    				conf.buttons.splice(i, 0, prefixButtons[i]);
    			}
    		}

    		return conf;
    	},

    	/**
    	 * Display (and replace if there is an existing one) a popover attached to a button
    	 * @param {string|node} content Content to show
    	 * @param {DataTable.Api} hostButton DT API instance of the button
    	 * @param {object} inOpts Options (see object below for all options)
    	 */
    	_popover: function (content, hostButton, inOpts, e) {
    		var dt = hostButton;
    		var c = this.c;
    		var closed = false;
    		var options = $$6.extend(
    			{
    				align: 'button-left', // button-right, dt-container, split-left, split-right
    				autoClose: false,
    				background: true,
    				backgroundClassName: 'dt-button-background',
    				closeButton: true,
    				containerClassName: c.dom.collection.container.className,
    				contentClassName: c.dom.collection.container.content.className,
    				collectionLayout: '',
    				collectionTitle: '',
    				dropup: false,
    				fade: 400,
    				popoverTitle: '',
    				rightAlignClassName: 'dt-button-right',
    				tag: c.dom.collection.container.tag
    			},
    			inOpts
    		);

    		var containerSelector = options.tag + '.' + options.containerClassName.replace(/ /g, '.');
    		var hostNode = hostButton.node();

    		var close = function () {
    			closed = true;

    			_fadeOut($$6(containerSelector), options.fade, function () {
    				$$6(this).detach();
    			});

    			$$6(dt.buttons('[aria-haspopup="dialog"][aria-expanded="true"]').nodes()).attr(
    				'aria-expanded',
    				'false'
    			);

    			$$6('div.dt-button-background').off('click.dtb-collection');
    			Buttons.background(false, options.backgroundClassName, options.fade, hostNode);

    			$$6(window).off('resize.resize.dtb-collection');
    			$$6('body').off('.dtb-collection');
    			dt.off('buttons-action.b-internal');
    			dt.off('destroy');
    		};

    		if (content === false) {
    			close();
    			return;
    		}

    		var existingExpanded = $$6(
    			dt.buttons('[aria-haspopup="dialog"][aria-expanded="true"]').nodes()
    		);
    		if (existingExpanded.length) {
    			// Reuse the current position if the button that was triggered is inside an existing collection
    			if (hostNode.closest(containerSelector).length) {
    				hostNode = existingExpanded.eq(0);
    			}

    			close();
    		}

    		// Try to be smart about the layout
    		var cnt = $$6('.dt-button', content).length;
    		var mod = '';

    		if (cnt === 3) {
    			mod = 'dtb-b3';
    		}
    		else if (cnt === 2) {
    			mod = 'dtb-b2';
    		}
    		else if (cnt === 1) {
    			mod = 'dtb-b1';
    		}

    		var display = $$6('<' + options.tag + '/>')
    			.addClass(options.containerClassName)
    			.addClass(options.collectionLayout)
    			.addClass(options.splitAlignClass)
    			.addClass(mod)
    			.css('display', 'none')
    			.attr({
    				'aria-modal': true,
    				role: 'dialog'
    			});

    		content = $$6(content)
    			.addClass(options.contentClassName)
    			.attr('role', 'menu')
    			.appendTo(display);

    		hostNode.attr('aria-expanded', 'true');

    		if (hostNode.parents('body')[0] !== document.body) {
    			hostNode = document.body.lastChild;
    		}

    		if (options.popoverTitle) {
    			display.prepend(
    				'<div class="dt-button-collection-title">' + options.popoverTitle + '</div>'
    			);
    		}
    		else if (options.collectionTitle) {
    			display.prepend(
    				'<div class="dt-button-collection-title">' + options.collectionTitle + '</div>'
    			);
    		}

    		if (options.closeButton) {
    			display
    				.prepend('<div class="dtb-popover-close">&times;</div>')
    				.addClass('dtb-collection-closeable');
    		}

    		_fadeIn(display.insertAfter(hostNode), options.fade);

    		var tableContainer = $$6(hostButton.table().container());
    		var position = display.css('position');

    		if (options.span === 'container' || options.align === 'dt-container') {
    			hostNode = hostNode.parent();
    			display.css('width', tableContainer.width());
    		}

    		// Align the popover relative to the DataTables container
    		// Useful for wide popovers such as SearchPanes
    		if (position === 'absolute') {
    			// Align relative to the host button
    			var offsetParent = $$6(hostNode[0].offsetParent);
    			var buttonPosition = hostNode.position();
    			var buttonOffset = hostNode.offset();
    			var tableSizes = offsetParent.offset();
    			var containerPosition = offsetParent.position();
    			var computed = window.getComputedStyle(offsetParent[0]);

    			tableSizes.height = offsetParent.outerHeight();
    			tableSizes.width = offsetParent.width() + parseFloat(computed.paddingLeft);
    			tableSizes.right = tableSizes.left + tableSizes.width;
    			tableSizes.bottom = tableSizes.top + tableSizes.height;

    			// Set the initial position so we can read height / width
    			var top = buttonPosition.top + hostNode.outerHeight();
    			var left = buttonPosition.left;

    			display.css({
    				top: top,
    				left: left
    			});

    			// Get the popover position
    			computed = window.getComputedStyle(display[0]);
    			var popoverSizes = display.offset();

    			popoverSizes.height = display.outerHeight();
    			popoverSizes.width = display.outerWidth();
    			popoverSizes.right = popoverSizes.left + popoverSizes.width;
    			popoverSizes.bottom = popoverSizes.top + popoverSizes.height;
    			popoverSizes.marginTop = parseFloat(computed.marginTop);
    			popoverSizes.marginBottom = parseFloat(computed.marginBottom);

    			// First position per the class requirements - pop up and right align
    			if (options.dropup) {
    				top =
    					buttonPosition.top -
    					popoverSizes.height -
    					popoverSizes.marginTop -
    					popoverSizes.marginBottom;
    			}

    			if (options.align === 'button-right' || display.hasClass(options.rightAlignClassName)) {
    				left = buttonPosition.left - popoverSizes.width + hostNode.outerWidth();
    			}

    			// Container alignment - make sure it doesn't overflow the table container
    			if (options.align === 'dt-container' || options.align === 'container') {
    				if (left < buttonPosition.left) {
    					left = -buttonPosition.left;
    				}

    				if (left + popoverSizes.width > tableSizes.width) {
    					left = tableSizes.width - popoverSizes.width;
    				}
    			}

    			// Window adjustment
    			if (containerPosition.left + left + popoverSizes.width > $$6(window).width()) {
    				// Overflowing the document to the right
    				left = $$6(window).width() - popoverSizes.width - containerPosition.left;
    			}

    			if (buttonOffset.left + left < 0) {
    				// Off to the left of the document
    				left = -buttonOffset.left;
    			}

    			if (
    				containerPosition.top + top + popoverSizes.height >
    				$$6(window).height() + $$6(window).scrollTop()
    			) {
    				// Pop up if otherwise we'd need the user to scroll down
    				top =
    					buttonPosition.top -
    					popoverSizes.height -
    					popoverSizes.marginTop -
    					popoverSizes.marginBottom;
    			}

    			if (containerPosition.top + top < $$6(window).scrollTop()) {
    				// Correction for when the top is beyond the top of the page
    				top = buttonPosition.top + hostNode.outerHeight();
    			}

    			// Calculations all done - now set it
    			display.css({
    				top: top,
    				left: left
    			});
    		}
    		else {
    			// Fix position - centre on screen
    			var position = function () {
    				var half = $$6(window).height() / 2;

    				var top = display.height() / 2;
    				if (top > half) {
    					top = half;
    				}

    				display.css('marginTop', top * -1);
    			};

    			position();

    			$$6(window).on('resize.dtb-collection', function () {
    				position();
    			});
    		}

    		if (options.background) {
    			Buttons.background(
    				true,
    				options.backgroundClassName,
    				options.fade,
    				options.backgroundHost || hostNode
    			);
    		}

    		// This is bonkers, but if we don't have a click listener on the
    		// background element, iOS Safari will ignore the body click
    		// listener below. An empty function here is all that is
    		// required to make it work...
    		$$6('div.dt-button-background').on('click.dtb-collection', function () {});

    		if (options.autoClose) {
    			setTimeout(function () {
    				dt.on('buttons-action.b-internal', function (e, btn, dt, node) {
    					if (node[0] === hostNode[0]) {
    						return;
    					}
    					close();
    				});
    			}, 0);
    		}

    		$$6(display).trigger('buttons-popover.dt');

    		dt.on('destroy', close);

    		setTimeout(function () {
    			closed = false;
    			$$6('body')
    				.on('click.dtb-collection', function (e) {
    					if (closed) {
    						return;
    					}

    					// andSelf is deprecated in jQ1.8, but we want 1.7 compat
    					var back = $$6.fn.addBack ? 'addBack' : 'andSelf';
    					var parent = $$6(e.target).parent()[0];

    					if (
    						(!$$6(e.target).parents()[back]().filter(content).length &&
    							!$$6(parent).hasClass('dt-buttons')) ||
    						$$6(e.target).hasClass('dt-button-background')
    					) {
    						close();
    					}
    				})
    				.on('keyup.dtb-collection', function (e) {
    					if (e.keyCode === 27) {
    						close();
    					}
    				})
    				.on('keydown.dtb-collection', function (e) {
    					// Focus trap for tab key
    					var elements = $$6('a, button', content);
    					var active = document.activeElement;

    					if (e.keyCode !== 9) {
    						// tab
    						return;
    					}

    					if (elements.index(active) === -1) {
    						// If current focus is not inside the popover
    						elements.first().focus();
    						e.preventDefault();
    					}
    					else if (e.shiftKey) {
    						// Reverse tabbing order when shift key is pressed
    						if (active === elements[0]) {
    							elements.last().focus();
    							e.preventDefault();
    						}
    					}
    					else {
    						if (active === elements.last()[0]) {
    							elements.first().focus();
    							e.preventDefault();
    						}
    					}
    				});
    		}, 0);
    	}
    });

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Statics
     */

    /**
     * Show / hide a background layer behind a collection
     * @param  {boolean} Flag to indicate if the background should be shown or
     *   hidden
     * @param  {string} Class to assign to the background
     * @static
     */
    Buttons.background = function (show, className, fade, insertPoint) {
    	if (fade === undefined) {
    		fade = 400;
    	}
    	if (!insertPoint) {
    		insertPoint = document.body;
    	}

    	if (show) {
    		_fadeIn(
    			$$6('<div/>').addClass(className).css('display', 'none').insertAfter(insertPoint),
    			fade
    		);
    	}
    	else {
    		_fadeOut($$6('div.' + className), fade, function () {
    			$$6(this).removeClass(className).remove();
    		});
    	}
    };

    /**
     * Instance selector - select Buttons instances based on an instance selector
     * value from the buttons assigned to a DataTable. This is only useful if
     * multiple instances are attached to a DataTable.
     * @param  {string|int|array} Instance selector - see `instance-selector`
     *   documentation on the DataTables site
     * @param  {array} Button instance array that was attached to the DataTables
     *   settings object
     * @return {array} Buttons instances
     * @static
     */
    Buttons.instanceSelector = function (group, buttons) {
    	if (group === undefined || group === null) {
    		return $$6.map(buttons, function (v) {
    			return v.inst;
    		});
    	}

    	var ret = [];
    	var names = $$6.map(buttons, function (v) {
    		return v.name;
    	});

    	// Flatten the group selector into an array of single options
    	var process = function (input) {
    		if (Array.isArray(input)) {
    			for (var i = 0, ien = input.length; i < ien; i++) {
    				process(input[i]);
    			}
    			return;
    		}

    		if (typeof input === 'string') {
    			if (input.indexOf(',') !== -1) {
    				// String selector, list of names
    				process(input.split(','));
    			}
    			else {
    				// String selector individual name
    				var idx = $$6.inArray(input.trim(), names);

    				if (idx !== -1) {
    					ret.push(buttons[idx].inst);
    				}
    			}
    		}
    		else if (typeof input === 'number') {
    			// Index selector
    			ret.push(buttons[input].inst);
    		}
    		else if (typeof input === 'object') {
    			// Actual instance selector
    			ret.push(input);
    		}
    	};

    	process(group);

    	return ret;
    };

    /**
     * Button selector - select one or more buttons from a selector input so some
     * operation can be performed on them.
     * @param  {array} Button instances array that the selector should operate on
     * @param  {string|int|node|jQuery|array} Button selector - see
     *   `button-selector` documentation on the DataTables site
     * @return {array} Array of objects containing `inst` and `idx` properties of
     *   the selected buttons so you know which instance each button belongs to.
     * @static
     */
    Buttons.buttonSelector = function (insts, selector) {
    	var ret = [];
    	var nodeBuilder = function (a, buttons, baseIdx) {
    		var button;
    		var idx;

    		for (var i = 0, ien = buttons.length; i < ien; i++) {
    			button = buttons[i];

    			if (button) {
    				idx = baseIdx !== undefined ? baseIdx + i : i + '';

    				a.push({
    					node: button.node,
    					name: button.conf.name,
    					idx: idx
    				});

    				if (button.buttons) {
    					nodeBuilder(a, button.buttons, idx + '-');
    				}
    			}
    		}
    	};

    	var run = function (selector, inst) {
    		var i, ien;
    		var buttons = [];
    		nodeBuilder(buttons, inst.s.buttons);

    		var nodes = $$6.map(buttons, function (v) {
    			return v.node;
    		});

    		if (Array.isArray(selector) || selector instanceof $$6) {
    			for (i = 0, ien = selector.length; i < ien; i++) {
    				run(selector[i], inst);
    			}
    			return;
    		}

    		if (selector === null || selector === undefined || selector === '*') {
    			// Select all
    			for (i = 0, ien = buttons.length; i < ien; i++) {
    				ret.push({
    					inst: inst,
    					node: buttons[i].node
    				});
    			}
    		}
    		else if (typeof selector === 'number') {
    			// Main button index selector
    			if (inst.s.buttons[selector]) {
    				ret.push({
    					inst: inst,
    					node: inst.s.buttons[selector].node
    				});
    			}
    		}
    		else if (typeof selector === 'string') {
    			if (selector.indexOf(',') !== -1) {
    				// Split
    				var a = selector.split(',');

    				for (i = 0, ien = a.length; i < ien; i++) {
    					run(a[i].trim(), inst);
    				}
    			}
    			else if (selector.match(/^\d+(\-\d+)*$/)) {
    				// Sub-button index selector
    				var indexes = $$6.map(buttons, function (v) {
    					return v.idx;
    				});

    				ret.push({
    					inst: inst,
    					node: buttons[$$6.inArray(selector, indexes)].node
    				});
    			}
    			else if (selector.indexOf(':name') !== -1) {
    				// Button name selector
    				var name = selector.replace(':name', '');

    				for (i = 0, ien = buttons.length; i < ien; i++) {
    					if (buttons[i].name === name) {
    						ret.push({
    							inst: inst,
    							node: buttons[i].node
    						});
    					}
    				}
    			}
    			else {
    				// jQuery selector on the nodes
    				$$6(nodes)
    					.filter(selector)
    					.each(function () {
    						ret.push({
    							inst: inst,
    							node: this
    						});
    					});
    			}
    		}
    		else if (typeof selector === 'object' && selector.nodeName) {
    			// Node selector
    			var idx = $$6.inArray(selector, nodes);

    			if (idx !== -1) {
    				ret.push({
    					inst: inst,
    					node: nodes[idx]
    				});
    			}
    		}
    	};

    	for (var i = 0, ien = insts.length; i < ien; i++) {
    		var inst = insts[i];

    		run(selector, inst);
    	}

    	return ret;
    };

    /**
     * Default function used for formatting output data.
     * @param {*} str Data to strip
     */
    Buttons.stripData = function (str, config) {
    	if (typeof str !== 'string') {
    		return str;
    	}

    	// Always remove script tags
    	str = str.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');

    	// Always remove comments
    	str = str.replace(/<!\-\-.*?\-\->/g, '');

    	if (!config || config.stripHtml) {
    		str = str.replace(/<[^>]*>/g, '');
    	}

    	if (!config || config.trim) {
    		str = str.replace(/^\s+|\s+$/g, '');
    	}

    	if (!config || config.stripNewlines) {
    		str = str.replace(/\n/g, ' ');
    	}

    	if (!config || config.decodeEntities) {
    		_exportTextarea.innerHTML = str;
    		str = _exportTextarea.value;
    	}

    	return str;
    };

    /**
     * Buttons defaults. For full documentation, please refer to the docs/option
     * directory or the DataTables site.
     * @type {Object}
     * @static
     */
    Buttons.defaults = {
    	buttons: ['copy', 'excel', 'csv', 'pdf', 'print'],
    	name: 'main',
    	tabIndex: 0,
    	dom: {
    		container: {
    			tag: 'div',
    			className: 'dt-buttons'
    		},
    		collection: {
    			action: {
    				// action button
    				dropHtml: '<span class="dt-button-down-arrow">&#x25BC;</span>'
    			},
    			container: {
    				// The element used for the dropdown
    				className: 'dt-button-collection',
    				content: {
    					className: '',
    					tag: 'div'
    				},
    				tag: 'div'
    			}
    			// optionally
    			// , button: IButton - buttons inside the collection container
    			// , split: ISplit - splits inside the collection container
    		},
    		button: {
    			tag: 'button',
    			className: 'dt-button',
    			active: 'dt-button-active', // class name
    			disabled: 'disabled', // class name
    			spacer: {
    				className: 'dt-button-spacer',
    				tag: 'span'
    			},
    			liner: {
    				tag: 'span',
    				className: ''
    			}
    		},
    		split: {
    			action: {
    				// action button
    				className: 'dt-button-split-drop-button dt-button',
    				tag: 'button'
    			},
    			dropdown: {
    				// button to trigger the dropdown
    				align: 'split-right',
    				className: 'dt-button-split-drop',
    				dropHtml: '<span class="dt-button-down-arrow">&#x25BC;</span>',
    				splitAlignClass: 'dt-button-split-left',
    				tag: 'button'
    			},
    			wrapper: {
    				// wrap around both
    				className: 'dt-button-split',
    				tag: 'div'
    			}
    		}
    	}
    };

    /**
     * Version information
     * @type {string}
     * @static
     */
    Buttons.version = '2.4.0';

    $$6.extend(_dtButtons, {
    	collection: {
    		text: function (dt) {
    			return dt.i18n('buttons.collection', 'Collection');
    		},
    		className: 'buttons-collection',
    		closeButton: false,
    		init: function (dt, button, config) {
    			button.attr('aria-expanded', false);
    		},
    		action: function (e, dt, button, config) {
    			if (config._collection.parents('body').length) {
    				this.popover(false, config);
    			}
    			else {
    				this.popover(config._collection, config);
    			}

    			// When activated using a key - auto focus on the
    			// first item in the popover
    			if (e.type === 'keypress') {
    				$$6('a, button', config._collection).eq(0).focus();
    			}
    		},
    		attr: {
    			'aria-haspopup': 'dialog'
    		}
    		// Also the popover options, defined in Buttons.popover
    	},
    	split: {
    		text: function (dt) {
    			return dt.i18n('buttons.split', 'Split');
    		},
    		className: 'buttons-split',
    		closeButton: false,
    		init: function (dt, button, config) {
    			return button.attr('aria-expanded', false);
    		},
    		action: function (e, dt, button, config) {
    			this.popover(config._collection, config);
    		},
    		attr: {
    			'aria-haspopup': 'dialog'
    		}
    		// Also the popover options, defined in Buttons.popover
    	},
    	copy: function (dt, conf) {
    		if (_dtButtons.copyHtml5) {
    			return 'copyHtml5';
    		}
    	},
    	csv: function (dt, conf) {
    		if (_dtButtons.csvHtml5 && _dtButtons.csvHtml5.available(dt, conf)) {
    			return 'csvHtml5';
    		}
    	},
    	excel: function (dt, conf) {
    		if (_dtButtons.excelHtml5 && _dtButtons.excelHtml5.available(dt, conf)) {
    			return 'excelHtml5';
    		}
    	},
    	pdf: function (dt, conf) {
    		if (_dtButtons.pdfHtml5 && _dtButtons.pdfHtml5.available(dt, conf)) {
    			return 'pdfHtml5';
    		}
    	},
    	pageLength: function (dt) {
    		var lengthMenu = dt.settings()[0].aLengthMenu;
    		var vals = [];
    		var lang = [];
    		var text = function (dt) {
    			return dt.i18n(
    				'buttons.pageLength',
    				{
    					'-1': 'Show all rows',
    					_: 'Show %d rows'
    				},
    				dt.page.len()
    			);
    		};

    		// Support for DataTables 1.x 2D array
    		if (Array.isArray(lengthMenu[0])) {
    			vals = lengthMenu[0];
    			lang = lengthMenu[1];
    		}
    		else {
    			for (var i = 0; i < lengthMenu.length; i++) {
    				var option = lengthMenu[i];

    				// Support for DataTables 2 object in the array
    				if ($$6.isPlainObject(option)) {
    					vals.push(option.value);
    					lang.push(option.label);
    				}
    				else {
    					vals.push(option);
    					lang.push(option);
    				}
    			}
    		}

    		return {
    			extend: 'collection',
    			text: text,
    			className: 'buttons-page-length',
    			autoClose: true,
    			buttons: $$6.map(vals, function (val, i) {
    				return {
    					text: lang[i],
    					className: 'button-page-length',
    					action: function (e, dt) {
    						dt.page.len(val).draw();
    					},
    					init: function (dt, node, conf) {
    						var that = this;
    						var fn = function () {
    							that.active(dt.page.len() === val);
    						};

    						dt.on('length.dt' + conf.namespace, fn);
    						fn();
    					},
    					destroy: function (dt, node, conf) {
    						dt.off('length.dt' + conf.namespace);
    					}
    				};
    			}),
    			init: function (dt, node, conf) {
    				var that = this;
    				dt.on('length.dt' + conf.namespace, function () {
    					that.text(conf.text);
    				});
    			},
    			destroy: function (dt, node, conf) {
    				dt.off('length.dt' + conf.namespace);
    			}
    		};
    	},
    	spacer: {
    		style: 'empty',
    		spacer: true,
    		text: function (dt) {
    			return dt.i18n('buttons.spacer', '');
    		}
    	}
    });

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * DataTables API
     *
     * For complete documentation, please refer to the docs/api directory or the
     * DataTables site
     */

    // Buttons group and individual button selector
    DataTable.Api.register('buttons()', function (group, selector) {
    	// Argument shifting
    	if (selector === undefined) {
    		selector = group;
    		group = undefined;
    	}

    	this.selector.buttonGroup = group;

    	var res = this.iterator(
    		true,
    		'table',
    		function (ctx) {
    			if (ctx._buttons) {
    				return Buttons.buttonSelector(
    					Buttons.instanceSelector(group, ctx._buttons),
    					selector
    				);
    			}
    		},
    		true
    	);

    	res._groupSelector = group;
    	return res;
    });

    // Individual button selector
    DataTable.Api.register('button()', function (group, selector) {
    	// just run buttons() and truncate
    	var buttons = this.buttons(group, selector);

    	if (buttons.length > 1) {
    		buttons.splice(1, buttons.length);
    	}

    	return buttons;
    });

    // Active buttons
    DataTable.Api.registerPlural('buttons().active()', 'button().active()', function (flag) {
    	if (flag === undefined) {
    		return this.map(function (set) {
    			return set.inst.active(set.node);
    		});
    	}

    	return this.each(function (set) {
    		set.inst.active(set.node, flag);
    	});
    });

    // Get / set button action
    DataTable.Api.registerPlural('buttons().action()', 'button().action()', function (action) {
    	if (action === undefined) {
    		return this.map(function (set) {
    			return set.inst.action(set.node);
    		});
    	}

    	return this.each(function (set) {
    		set.inst.action(set.node, action);
    	});
    });

    // Collection control
    DataTable.Api.registerPlural(
    	'buttons().collectionRebuild()',
    	'button().collectionRebuild()',
    	function (buttons) {
    		return this.each(function (set) {
    			for (var i = 0; i < buttons.length; i++) {
    				if (typeof buttons[i] === 'object') {
    					buttons[i].parentConf = set;
    				}
    			}
    			set.inst.collectionRebuild(set.node, buttons);
    		});
    	}
    );

    // Enable / disable buttons
    DataTable.Api.register(['buttons().enable()', 'button().enable()'], function (flag) {
    	return this.each(function (set) {
    		set.inst.enable(set.node, flag);
    	});
    });

    // Disable buttons
    DataTable.Api.register(['buttons().disable()', 'button().disable()'], function () {
    	return this.each(function (set) {
    		set.inst.disable(set.node);
    	});
    });

    // Button index
    DataTable.Api.register('button().index()', function () {
    	var idx = null;

    	this.each(function (set) {
    		var res = set.inst.index(set.node);

    		if (res !== null) {
    			idx = res;
    		}
    	});

    	return idx;
    });

    // Get button nodes
    DataTable.Api.registerPlural('buttons().nodes()', 'button().node()', function () {
    	var jq = $$6();

    	// jQuery will automatically reduce duplicates to a single entry
    	$$6(
    		this.each(function (set) {
    			jq = jq.add(set.inst.node(set.node));
    		})
    	);

    	return jq;
    });

    // Get / set button processing state
    DataTable.Api.registerPlural('buttons().processing()', 'button().processing()', function (flag) {
    	if (flag === undefined) {
    		return this.map(function (set) {
    			return set.inst.processing(set.node);
    		});
    	}

    	return this.each(function (set) {
    		set.inst.processing(set.node, flag);
    	});
    });

    // Get / set button text (i.e. the button labels)
    DataTable.Api.registerPlural('buttons().text()', 'button().text()', function (label) {
    	if (label === undefined) {
    		return this.map(function (set) {
    			return set.inst.text(set.node);
    		});
    	}

    	return this.each(function (set) {
    		set.inst.text(set.node, label);
    	});
    });

    // Trigger a button's action
    DataTable.Api.registerPlural('buttons().trigger()', 'button().trigger()', function () {
    	return this.each(function (set) {
    		set.inst.node(set.node).trigger('click');
    	});
    });

    // Button resolver to the popover
    DataTable.Api.register('button().popover()', function (content, options) {
    	return this.map(function (set) {
    		return set.inst._popover(content, this.button(this[0].node), options);
    	});
    });

    // Get the container elements
    DataTable.Api.register('buttons().containers()', function () {
    	var jq = $$6();
    	var groupSelector = this._groupSelector;

    	// We need to use the group selector directly, since if there are no buttons
    	// the result set will be empty
    	this.iterator(true, 'table', function (ctx) {
    		if (ctx._buttons) {
    			var insts = Buttons.instanceSelector(groupSelector, ctx._buttons);

    			for (var i = 0, ien = insts.length; i < ien; i++) {
    				jq = jq.add(insts[i].container());
    			}
    		}
    	});

    	return jq;
    });

    DataTable.Api.register('buttons().container()', function () {
    	// API level of nesting is `buttons()` so we can zip into the containers method
    	return this.containers().eq(0);
    });

    // Add a new button
    DataTable.Api.register('button().add()', function (idx, conf, draw) {
    	var ctx = this.context;

    	// Don't use `this` as it could be empty - select the instances directly
    	if (ctx.length) {
    		var inst = Buttons.instanceSelector(this._groupSelector, ctx[0]._buttons);

    		if (inst.length) {
    			inst[0].add(conf, idx, draw);
    		}
    	}

    	return this.button(this._groupSelector, idx);
    });

    // Destroy the button sets selected
    DataTable.Api.register('buttons().destroy()', function () {
    	this.pluck('inst')
    		.unique()
    		.each(function (inst) {
    			inst.destroy();
    		});

    	return this;
    });

    // Remove a button
    DataTable.Api.registerPlural('buttons().remove()', 'buttons().remove()', function () {
    	this.each(function (set) {
    		set.inst.remove(set.node);
    	});

    	return this;
    });

    // Information box that can be used by buttons
    var _infoTimer;
    DataTable.Api.register('buttons.info()', function (title, message, time) {
    	var that = this;

    	if (title === false) {
    		this.off('destroy.btn-info');
    		_fadeOut($$6('#datatables_buttons_info'), 400, function () {
    			$$6(this).remove();
    		});
    		clearTimeout(_infoTimer);
    		_infoTimer = null;

    		return this;
    	}

    	if (_infoTimer) {
    		clearTimeout(_infoTimer);
    	}

    	if ($$6('#datatables_buttons_info').length) {
    		$$6('#datatables_buttons_info').remove();
    	}

    	title = title ? '<h2>' + title + '</h2>' : '';

    	_fadeIn(
    		$$6('<div id="datatables_buttons_info" class="dt-button-info"/>')
    			.html(title)
    			.append($$6('<div/>')[typeof message === 'string' ? 'html' : 'append'](message))
    			.css('display', 'none')
    			.appendTo('body')
    	);

    	if (time !== undefined && time !== 0) {
    		_infoTimer = setTimeout(function () {
    			that.buttons.info(false);
    		}, time);
    	}

    	this.on('destroy.btn-info', function () {
    		that.buttons.info(false);
    	});

    	return this;
    });

    // Get data from the table for export - this is common to a number of plug-in
    // buttons so it is included in the Buttons core library
    DataTable.Api.register('buttons.exportData()', function (options) {
    	if (this.context.length) {
    		return _exportData(new DataTable.Api(this.context[0]), options);
    	}
    });

    // Get information about the export that is common to many of the export data
    // types (DRY)
    DataTable.Api.register('buttons.exportInfo()', function (conf) {
    	if (!conf) {
    		conf = {};
    	}

    	return {
    		filename: _filename(conf),
    		title: _title(conf),
    		messageTop: _message(this, conf.message || conf.messageTop, 'top'),
    		messageBottom: _message(this, conf.messageBottom, 'bottom')
    	};
    });

    /**
     * Get the file name for an exported file.
     *
     * @param {object}	config Button configuration
     * @param {boolean} incExtension Include the file name extension
     */
    var _filename = function (config) {
    	// Backwards compatibility
    	var filename =
    		config.filename === '*' &&
    		config.title !== '*' &&
    		config.title !== undefined &&
    		config.title !== null &&
    		config.title !== ''
    			? config.title
    			: config.filename;

    	if (typeof filename === 'function') {
    		filename = filename();
    	}

    	if (filename === undefined || filename === null) {
    		return null;
    	}

    	if (filename.indexOf('*') !== -1) {
    		filename = filename.replace('*', $$6('head > title').text()).trim();
    	}

    	// Strip characters which the OS will object to
    	filename = filename.replace(/[^a-zA-Z0-9_\u00A1-\uFFFF\.,\-_ !\(\)]/g, '');

    	var extension = _stringOrFunction(config.extension);
    	if (!extension) {
    		extension = '';
    	}

    	return filename + extension;
    };

    /**
     * Simply utility method to allow parameters to be given as a function
     *
     * @param {undefined|string|function} option Option
     * @return {null|string} Resolved value
     */
    var _stringOrFunction = function (option) {
    	if (option === null || option === undefined) {
    		return null;
    	}
    	else if (typeof option === 'function') {
    		return option();
    	}
    	return option;
    };

    /**
     * Get the title for an exported file.
     *
     * @param {object} config	Button configuration
     */
    var _title = function (config) {
    	var title = _stringOrFunction(config.title);

    	return title === null
    		? null
    		: title.indexOf('*') !== -1
    		? title.replace('*', $$6('head > title').text() || 'Exported data')
    		: title;
    };

    var _message = function (dt, option, position) {
    	var message = _stringOrFunction(option);
    	if (message === null) {
    		return null;
    	}

    	var caption = $$6('caption', dt.table().container()).eq(0);
    	if (message === '*') {
    		var side = caption.css('caption-side');
    		if (side !== position) {
    			return null;
    		}

    		return caption.length ? caption.text() : '';
    	}

    	return message;
    };

    var _exportTextarea = $$6('<textarea/>')[0];
    var _exportData = function (dt, inOpts) {
    	var config = $$6.extend(
    		true,
    		{},
    		{
    			rows: null,
    			columns: '',
    			modifier: {
    				search: 'applied',
    				order: 'applied'
    			},
    			orthogonal: 'display',
    			stripHtml: true,
    			stripNewlines: true,
    			decodeEntities: true,
    			trim: true,
    			format: {
    				header: function (d) {
    					return Buttons.stripData(d, config);
    				},
    				footer: function (d) {
    					return Buttons.stripData(d, config);
    				},
    				body: function (d) {
    					return Buttons.stripData(d, config);
    				}
    			},
    			customizeData: null
    		},
    		inOpts
    	);

    	var header = dt
    		.columns(config.columns)
    		.indexes()
    		.map(function (idx) {
    			var el = dt.column(idx).header();
    			return config.format.header(el.innerHTML, idx, el);
    		})
    		.toArray();

    	var footer = dt.table().footer()
    		? dt
    				.columns(config.columns)
    				.indexes()
    				.map(function (idx) {
    					var el = dt.column(idx).footer();
    					return config.format.footer(el ? el.innerHTML : '', idx, el);
    				})
    				.toArray()
    		: null;

    	// If Select is available on this table, and any rows are selected, limit the export
    	// to the selected rows. If no rows are selected, all rows will be exported. Specify
    	// a `selected` modifier to control directly.
    	var modifier = $$6.extend({}, config.modifier);
    	if (dt.select && typeof dt.select.info === 'function' && modifier.selected === undefined) {
    		if (dt.rows(config.rows, $$6.extend({ selected: true }, modifier)).any()) {
    			$$6.extend(modifier, { selected: true });
    		}
    	}

    	var rowIndexes = dt.rows(config.rows, modifier).indexes().toArray();
    	var selectedCells = dt.cells(rowIndexes, config.columns);
    	var cells = selectedCells.render(config.orthogonal).toArray();
    	var cellNodes = selectedCells.nodes().toArray();

    	var columns = header.length;
    	var rows = columns > 0 ? cells.length / columns : 0;
    	var body = [];
    	var cellCounter = 0;

    	for (var i = 0, ien = rows; i < ien; i++) {
    		var row = [columns];

    		for (var j = 0; j < columns; j++) {
    			row[j] = config.format.body(cells[cellCounter], i, j, cellNodes[cellCounter]);
    			cellCounter++;
    		}

    		body[i] = row;
    	}

    	var data = {
    		header: header,
    		footer: footer,
    		body: body
    	};

    	if (config.customizeData) {
    		config.customizeData(data);
    	}

    	return data;
    };

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * DataTables interface
     */

    // Attach to DataTables objects for global access
    $$6.fn.dataTable.Buttons = Buttons;
    $$6.fn.DataTable.Buttons = Buttons;

    // DataTables creation - check if the buttons have been defined for this table,
    // they will have been if the `B` option was used in `dom`, otherwise we should
    // create the buttons instance here so they can be inserted into the document
    // using the API. Listen for `init` for compatibility with pre 1.10.10, but to
    // be removed in future.
    $$6(document).on('init.dt plugin-init.dt', function (e, settings) {
    	if (e.namespace !== 'dt') {
    		return;
    	}

    	var opts = settings.oInit.buttons || DataTable.defaults.buttons;

    	if (opts && !settings._buttons) {
    		new Buttons(settings, opts).container();
    	}
    });

    function _init(settings, options) {
    	var api = new DataTable.Api(settings);
    	var opts = options ? options : api.init().buttons || DataTable.defaults.buttons;

    	return new Buttons(api, opts).container();
    }

    // DataTables `dom` feature option
    DataTable.ext.feature.push({
    	fnInit: _init,
    	cFeature: 'B'
    });

    // DataTables 2 layout feature
    if (DataTable.ext.features) {
    	DataTable.ext.features.register('buttons', _init);
    }

    /*! FixedHeader 3.4.0
     * © SpryMedia Ltd - datatables.net/license
     */


    // Allow reassignment of the $ variable
    let $$5 = j;


    /**
     * @summary     FixedHeader
     * @description Fix a table's header or footer, so it is always visible while
     *              scrolling
     * @version     3.4.0
     * @author      SpryMedia Ltd (www.sprymedia.co.uk)
     * @contact     www.sprymedia.co.uk
     * @copyright   SpryMedia Ltd.
     *
     * This source file is free software, available under the following license:
     *   MIT license - http://datatables.net/license/mit
     *
     * This source file is distributed in the hope that it will be useful, but
     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
     * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
     *
     * For details please refer to: http://www.datatables.net
     */

    var _instCounter = 0;

    var FixedHeader = function (dt, config) {
    	// Sanity check - you just know it will happen
    	if (!(this instanceof FixedHeader)) {
    		throw "FixedHeader must be initialised with the 'new' keyword.";
    	}

    	// Allow a boolean true for defaults
    	if (config === true) {
    		config = {};
    	}

    	dt = new DataTable.Api(dt);

    	this.c = $$5.extend(true, {}, FixedHeader.defaults, config);

    	this.s = {
    		dt: dt,
    		position: {
    			theadTop: 0,
    			tbodyTop: 0,
    			tfootTop: 0,
    			tfootBottom: 0,
    			width: 0,
    			left: 0,
    			tfootHeight: 0,
    			theadHeight: 0,
    			windowHeight: $$5(window).height(),
    			visible: true
    		},
    		headerMode: null,
    		footerMode: null,
    		autoWidth: dt.settings()[0].oFeatures.bAutoWidth,
    		namespace: '.dtfc' + _instCounter++,
    		scrollLeft: {
    			header: -1,
    			footer: -1
    		},
    		enable: true,
    		autoDisable: false
    	};

    	this.dom = {
    		floatingHeader: null,
    		thead: $$5(dt.table().header()),
    		tbody: $$5(dt.table().body()),
    		tfoot: $$5(dt.table().footer()),
    		header: {
    			host: null,
    			floating: null,
    			floatingParent: $$5('<div class="dtfh-floatingparent">'),
    			placeholder: null
    		},
    		footer: {
    			host: null,
    			floating: null,
    			floatingParent: $$5('<div class="dtfh-floatingparent">'),
    			placeholder: null
    		}
    	};

    	this.dom.header.host = this.dom.thead.parent();
    	this.dom.footer.host = this.dom.tfoot.parent();

    	var dtSettings = dt.settings()[0];
    	if (dtSettings._fixedHeader) {
    		throw 'FixedHeader already initialised on table ' + dtSettings.nTable.id;
    	}

    	dtSettings._fixedHeader = this;

    	this._constructor();
    };

    /*
     * Variable: FixedHeader
     * Purpose:  Prototype for FixedHeader
     * Scope:    global
     */
    $$5.extend(FixedHeader.prototype, {
    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * API methods
    	 */

    	/**
    	 * Kill off FH and any events
    	 */
    	destroy: function () {
    		var dom = this.dom;

    		this.s.dt.off('.dtfc');
    		$$5(window).off(this.s.namespace);

    		// Remove clones of FC blockers
    		if (dom.header.rightBlocker) {
    			dom.header.rightBlocker.remove();
    		}
    		if (dom.header.leftBlocker) {
    			dom.header.leftBlocker.remove();
    		}
    		if (dom.footer.rightBlocker) {
    			dom.footer.rightBlocker.remove();
    		}
    		if (dom.footer.leftBlocker) {
    			dom.footer.leftBlocker.remove();
    		}

    		if (this.c.header) {
    			this._modeChange('in-place', 'header', true);
    		}

    		if (this.c.footer && dom.tfoot.length) {
    			this._modeChange('in-place', 'footer', true);
    		}
    	},

    	/**
    	 * Enable / disable the fixed elements
    	 *
    	 * @param  {boolean} enable `true` to enable, `false` to disable
    	 */
    	enable: function (enable, update, type) {
    		this.s.enable = enable;

    		this.s.enableType = type;

    		if (update || update === undefined) {
    			this._positions();
    			this._scroll(true);
    		}
    	},

    	/**
    	 * Get enabled status
    	 */
    	enabled: function () {
    		return this.s.enable;
    	},

    	/**
    	 * Set header offset
    	 *
    	 * @param  {int} new value for headerOffset
    	 */
    	headerOffset: function (offset) {
    		if (offset !== undefined) {
    			this.c.headerOffset = offset;
    			this.update();
    		}

    		return this.c.headerOffset;
    	},

    	/**
    	 * Set footer offset
    	 *
    	 * @param  {int} new value for footerOffset
    	 */
    	footerOffset: function (offset) {
    		if (offset !== undefined) {
    			this.c.footerOffset = offset;
    			this.update();
    		}

    		return this.c.footerOffset;
    	},

    	/**
    	 * Recalculate the position of the fixed elements and force them into place
    	 */
    	update: function (force) {
    		var table = this.s.dt.table().node();

    		// Update should only do something if enabled by the dev.
    		if (!this.s.enable && !this.s.autoDisable) {
    			return;
    		}

    		if ($$5(table).is(':visible')) {
    			this.s.autoDisable = false;
    			this.enable(true, false);
    		}
    		else {
    			this.s.autoDisable = true;
    			this.enable(false, false);
    		}

    		// Don't update if header is not in the document atm (due to
    		// async events)
    		if ($$5(table).children('thead').length === 0) {
    			return;
    		}

    		this._positions();
    		this._scroll(force !== undefined ? force : true);
    	},

    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * Constructor
    	 */

    	/**
    	 * FixedHeader constructor - adding the required event listeners and
    	 * simple initialisation
    	 *
    	 * @private
    	 */
    	_constructor: function () {
    		var that = this;
    		var dt = this.s.dt;

    		$$5(window)
    			.on('scroll' + this.s.namespace, function () {
    				that._scroll();
    			})
    			.on(
    				'resize' + this.s.namespace,
    				DataTable.util.throttle(function () {
    					that.s.position.windowHeight = $$5(window).height();
    					that.update();
    				}, 50)
    			);

    		var autoHeader = $$5('.fh-fixedHeader');
    		if (!this.c.headerOffset && autoHeader.length) {
    			this.c.headerOffset = autoHeader.outerHeight();
    		}

    		var autoFooter = $$5('.fh-fixedFooter');
    		if (!this.c.footerOffset && autoFooter.length) {
    			this.c.footerOffset = autoFooter.outerHeight();
    		}

    		dt.on(
    			'column-reorder.dt.dtfc column-visibility.dt.dtfc column-sizing.dt.dtfc responsive-display.dt.dtfc',
    			function (e, ctx) {
    				that.update();
    			}
    		).on('draw.dt.dtfc', function (e, ctx) {
    			// For updates from our own table, don't reclone, but for all others, do
    			that.update(ctx === dt.settings()[0] ? false : true);
    		});

    		dt.on('destroy.dtfc', function () {
    			that.destroy();
    		});

    		this._positions();
    		this._scroll();
    	},

    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * Private methods
    	 */

    	/**
    	 * Clone a fixed item to act as a place holder for the original element
    	 * which is moved into a clone of the table element, and moved around the
    	 * document to give the fixed effect.
    	 *
    	 * @param  {string}  item  'header' or 'footer'
    	 * @param  {boolean} force Force the clone to happen, or allow automatic
    	 *   decision (reuse existing if available)
    	 * @private
    	 */
    	_clone: function (item, force) {
    		var that = this;
    		var dt = this.s.dt;
    		var itemDom = this.dom[item];
    		var itemElement = item === 'header' ? this.dom.thead : this.dom.tfoot;

    		// If footer and scrolling is enabled then we don't clone
    		// Instead the table's height is decreased accordingly - see `_scroll()`
    		if (item === 'footer' && this._scrollEnabled()) {
    			return;
    		}

    		if (!force && itemDom.floating) {
    			// existing floating element - reuse it
    			itemDom.floating.removeClass('fixedHeader-floating fixedHeader-locked');
    		}
    		else {
    			if (itemDom.floating) {
    				if (itemDom.placeholder !== null) {
    					itemDom.placeholder.remove();
    				}
    				this._unsize(item);
    				itemDom.floating.children().detach();
    				itemDom.floating.remove();
    			}

    			var tableNode = $$5(dt.table().node());
    			var scrollBody = $$5(tableNode.parent());
    			var scrollEnabled = this._scrollEnabled();

    			itemDom.floating = $$5(dt.table().node().cloneNode(false))
    				.attr('aria-hidden', 'true')
    				.css({
    					'table-layout': 'fixed',
    					top: 0,
    					left: 0
    				})
    				.removeAttr('id')
    				.append(itemElement);

    			itemDom.floatingParent
    				.css({
    					width: scrollBody.width(),
    					overflow: 'hidden',
    					height: 'fit-content',
    					position: 'fixed',
    					left: scrollEnabled ? tableNode.offset().left + scrollBody.scrollLeft() : 0
    				})
    				.css(
    					item === 'header'
    						? {
    								top: this.c.headerOffset,
    								bottom: ''
    						  }
    						: {
    								top: '',
    								bottom: this.c.footerOffset
    						  }
    				)
    				.addClass(item === 'footer' ? 'dtfh-floatingparentfoot' : 'dtfh-floatingparenthead')
    				.append(itemDom.floating)
    				.appendTo('body');

    			this._stickyPosition(itemDom.floating, '-');

    			var scrollLeftUpdate = function () {
    				var scrollLeft = scrollBody.scrollLeft();
    				that.s.scrollLeft = { footer: scrollLeft, header: scrollLeft };
    				itemDom.floatingParent.scrollLeft(that.s.scrollLeft.header);
    			};

    			scrollLeftUpdate();
    			scrollBody.off('scroll.dtfh').on('scroll.dtfh', scrollLeftUpdate);

    			// Insert a fake thead/tfoot into the DataTable to stop it jumping around
    			itemDom.placeholder = itemElement.clone(false);
    			itemDom.placeholder.find('*[id]').removeAttr('id');

    			itemDom.host.prepend(itemDom.placeholder);

    			// Clone widths
    			this._matchWidths(itemDom.placeholder, itemDom.floating);
    		}
    	},

    	/**
    	 * This method sets the sticky position of the header elements to match fixed columns
    	 * @param {JQuery<HTMLElement>} el
    	 * @param {string} sign
    	 */
    	_stickyPosition: function (el, sign) {
    		if (this._scrollEnabled()) {
    			var that = this;
    			var rtl = $$5(that.s.dt.table().node()).css('direction') === 'rtl';

    			el.find('th').each(function () {
    				// Find out if fixed header has previously set this column
    				if ($$5(this).css('position') === 'sticky') {
    					var right = $$5(this).css('right');
    					var left = $$5(this).css('left');
    					if (right !== 'auto' && !rtl) {
    						// New position either adds or dismisses the barWidth
    						var potential =
    							+right.replace(/px/g, '') +
    							(sign === '-' ? -1 : 1) * that.s.dt.settings()[0].oBrowser.barWidth;
    						$$5(this).css('right', potential > 0 ? potential : 0);
    					}
    					else if (left !== 'auto' && rtl) {
    						var potential =
    							+left.replace(/px/g, '') +
    							(sign === '-' ? -1 : 1) * that.s.dt.settings()[0].oBrowser.barWidth;
    						$$5(this).css('left', potential > 0 ? potential : 0);
    					}
    				}
    			});
    		}
    	},

    	/**
    	 * Copy widths from the cells in one element to another. This is required
    	 * for the footer as the footer in the main table takes its sizes from the
    	 * header columns. That isn't present in the footer so to have it still
    	 * align correctly, the sizes need to be copied over. It is also required
    	 * for the header when auto width is not enabled
    	 *
    	 * @param  {jQuery} from Copy widths from
    	 * @param  {jQuery} to   Copy widths to
    	 * @private
    	 */
    	_matchWidths: function (from, to) {
    		var get = function (name) {
    			return $$5(name, from)
    				.map(function () {
    					return (
    						$$5(this)
    							.css('width')
    							.replace(/[^\d\.]/g, '') * 1
    					);
    				})
    				.toArray();
    		};

    		var set = function (name, toWidths) {
    			$$5(name, to).each(function (i) {
    				$$5(this).css({
    					width: toWidths[i],
    					minWidth: toWidths[i]
    				});
    			});
    		};

    		var thWidths = get('th');
    		var tdWidths = get('td');

    		set('th', thWidths);
    		set('td', tdWidths);
    	},

    	/**
    	 * Remove assigned widths from the cells in an element. This is required
    	 * when inserting the footer back into the main table so the size is defined
    	 * by the header columns and also when auto width is disabled in the
    	 * DataTable.
    	 *
    	 * @param  {string} item The `header` or `footer`
    	 * @private
    	 */
    	_unsize: function (item) {
    		var el = this.dom[item].floating;

    		if (el && (item === 'footer' || (item === 'header' && !this.s.autoWidth))) {
    			$$5('th, td', el).css({
    				width: '',
    				minWidth: ''
    			});
    		}
    		else if (el && item === 'header') {
    			$$5('th, td', el).css('min-width', '');
    		}
    	},

    	/**
    	 * Reposition the floating elements to take account of horizontal page
    	 * scroll
    	 *
    	 * @param  {string} item       The `header` or `footer`
    	 * @param  {int}    scrollLeft Document scrollLeft
    	 * @private
    	 */
    	_horizontal: function (item, scrollLeft) {
    		var itemDom = this.dom[item];
    		this.s.position;
    		var lastScrollLeft = this.s.scrollLeft;

    		if (itemDom.floating && lastScrollLeft[item] !== scrollLeft) {
    			// If scrolling is enabled we need to match the floating header to the body
    			if (this._scrollEnabled()) {
    				var newScrollLeft = $$5($$5(this.s.dt.table().node()).parent()).scrollLeft();
    				itemDom.floating.scrollLeft(newScrollLeft);
    				itemDom.floatingParent.scrollLeft(newScrollLeft);
    			}

    			lastScrollLeft[item] = scrollLeft;
    		}
    	},

    	/**
    	 * Change from one display mode to another. Each fixed item can be in one
    	 * of:
    	 *
    	 * * `in-place` - In the main DataTable
    	 * * `in` - Floating over the DataTable
    	 * * `below` - (Header only) Fixed to the bottom of the table body
    	 * * `above` - (Footer only) Fixed to the top of the table body
    	 *
    	 * @param  {string}  mode        Mode that the item should be shown in
    	 * @param  {string}  item        'header' or 'footer'
    	 * @param  {boolean} forceChange Force a redraw of the mode, even if already
    	 *     in that mode.
    	 * @private
    	 */
    	_modeChange: function (mode, item, forceChange) {
    		this.s.dt;
    		var itemDom = this.dom[item];
    		var position = this.s.position;

    		// Just determine if scroll is enabled once
    		var scrollEnabled = this._scrollEnabled();

    		// If footer and scrolling is enabled then we don't clone
    		// Instead the table's height is decreased accordingly - see `_scroll()`
    		if (item === 'footer' && scrollEnabled) {
    			return;
    		}

    		// It isn't trivial to add a !important css attribute...
    		var importantWidth = function (w) {
    			itemDom.floating.attr('style', function (i, s) {
    				return (s || '') + 'width: ' + w + 'px !important;';
    			});

    			// If not scrolling also have to update the floatingParent
    			if (!scrollEnabled) {
    				itemDom.floatingParent.attr('style', function (i, s) {
    					return (s || '') + 'width: ' + w + 'px !important;';
    				});
    			}
    		};

    		// Record focus. Browser's will cause input elements to loose focus if
    		// they are inserted else where in the doc
    		var tablePart = this.dom[item === 'footer' ? 'tfoot' : 'thead'];
    		var focus = $$5.contains(tablePart[0], document.activeElement)
    			? document.activeElement
    			: null;
    		var scrollBody = $$5($$5(this.s.dt.table().node()).parent());

    		if (mode === 'in-place') {
    			// Insert the header back into the table's real header
    			if (itemDom.placeholder) {
    				itemDom.placeholder.remove();
    				itemDom.placeholder = null;
    			}

    			this._unsize(item);

    			if (item === 'header') {
    				itemDom.host.prepend(tablePart);
    			}
    			else {
    				itemDom.host.append(tablePart);
    			}

    			if (itemDom.floating) {
    				itemDom.floating.remove();
    				itemDom.floating = null;
    				this._stickyPosition(itemDom.host, '+');
    			}

    			if (itemDom.floatingParent) {
    				itemDom.floatingParent.remove();
    			}

    			$$5($$5(itemDom.host.parent()).parent()).scrollLeft(scrollBody.scrollLeft());
    		}
    		else if (mode === 'in') {
    			// Remove the header from the read header and insert into a fixed
    			// positioned floating table clone
    			this._clone(item, forceChange);

    			// Get useful position values
    			var scrollOffset = scrollBody.offset();
    			var windowTop = $$5(document).scrollTop();
    			var windowHeight = $$5(window).height();
    			var windowBottom = windowTop + windowHeight;
    			var bodyTop = scrollEnabled ? scrollOffset.top : position.tbodyTop;
    			var bodyBottom = scrollEnabled
    				? scrollOffset.top + scrollBody.outerHeight()
    				: position.tfootTop;

    			// Calculate the amount that the footer or header needs to be shuffled
    			var shuffle =
    				item === 'footer'
    					? // footer and top of body isn't on screen
    					  bodyTop > windowBottom
    						? // Yes - push the footer below
    						  position.tfootHeight
    						: // No - bottom set to the gap between the top of the body and the bottom of the window
    						  bodyTop + position.tfootHeight - windowBottom
    					: // Otherwise must be a header so get the difference from the bottom of the
    					  //  desired floating header and the bottom of the table body
    					  windowTop + this.c.headerOffset + position.theadHeight - bodyBottom;

    			// Set the top or bottom based off of the offset and the shuffle value
    			var prop = item === 'header' ? 'top' : 'bottom';
    			var val = this.c[item + 'Offset'] - (shuffle > 0 ? shuffle : 0);

    			itemDom.floating.addClass('fixedHeader-floating');
    			itemDom.floatingParent
    				.css(prop, val)
    				.css({
    					left: position.left,
    					height: item === 'header' ? position.theadHeight : position.tfootHeight,
    					'z-index': 2
    				})
    				.append(itemDom.floating);

    			importantWidth(position.width);

    			if (item === 'footer') {
    				itemDom.floating.css('top', '');
    			}
    		}
    		else if (mode === 'below') {
    			// only used for the header
    			// Fix the position of the floating header at base of the table body
    			this._clone(item, forceChange);

    			itemDom.floating.addClass('fixedHeader-locked');
    			itemDom.floatingParent.css({
    				position: 'absolute',
    				top: position.tfootTop - position.theadHeight,
    				left: position.left + 'px'
    			});

    			importantWidth(position.width);
    		}
    		else if (mode === 'above') {
    			// only used for the footer
    			// Fix the position of the floating footer at top of the table body
    			this._clone(item, forceChange);

    			itemDom.floating.addClass('fixedHeader-locked');
    			itemDom.floatingParent.css({
    				position: 'absolute',
    				top: position.tbodyTop,
    				left: position.left + 'px'
    			});

    			importantWidth(position.width);
    		}

    		// Restore focus if it was lost
    		if (focus && focus !== document.activeElement) {
    			setTimeout(function () {
    				focus.focus();
    			}, 10);
    		}

    		this.s.scrollLeft.header = -1;
    		this.s.scrollLeft.footer = -1;
    		this.s[item + 'Mode'] = mode;
    	},

    	/**
    	 * Cache the positional information that is required for the mode
    	 * calculations that FixedHeader performs.
    	 *
    	 * @private
    	 */
    	_positions: function () {
    		var dt = this.s.dt;
    		var table = dt.table();
    		var position = this.s.position;
    		var dom = this.dom;
    		var tableNode = $$5(table.node());
    		var scrollEnabled = this._scrollEnabled();

    		// Need to use the header and footer that are in the main table,
    		// regardless of if they are clones, since they hold the positions we
    		// want to measure from
    		var thead = $$5(dt.table().header());
    		var tfoot = $$5(dt.table().footer());
    		var tbody = dom.tbody;
    		var scrollBody = tableNode.parent();

    		position.visible = tableNode.is(':visible');
    		position.width = tableNode.outerWidth();
    		position.left = tableNode.offset().left;
    		position.theadTop = thead.offset().top;
    		position.tbodyTop = scrollEnabled ? scrollBody.offset().top : tbody.offset().top;
    		position.tbodyHeight = scrollEnabled ? scrollBody.outerHeight() : tbody.outerHeight();
    		position.theadHeight = thead.outerHeight();
    		position.theadBottom = position.theadTop + position.theadHeight;

    		if (tfoot.length) {
    			position.tfootTop = position.tbodyTop + position.tbodyHeight; //tfoot.offset().top;
    			position.tfootBottom = position.tfootTop + tfoot.outerHeight();
    			position.tfootHeight = tfoot.outerHeight();
    		}
    		else {
    			position.tfootTop = position.tbodyTop + tbody.outerHeight();
    			position.tfootBottom = position.tfootTop;
    			position.tfootHeight = position.tfootTop;
    		}
    	},

    	/**
    	 * Mode calculation - determine what mode the fixed items should be placed
    	 * into.
    	 *
    	 * @param  {boolean} forceChange Force a redraw of the mode, even if already
    	 *     in that mode.
    	 * @private
    	 */
    	_scroll: function (forceChange) {
    		if (this.s.dt.settings()[0].bDestroying) {
    			return;
    		}

    		// ScrollBody details
    		var scrollEnabled = this._scrollEnabled();
    		var scrollBody = $$5(this.s.dt.table().node()).parent();
    		var scrollOffset = scrollBody.offset();
    		var scrollHeight = scrollBody.outerHeight();

    		// Window details
    		var windowLeft = $$5(document).scrollLeft();
    		var windowTop = $$5(document).scrollTop();
    		var windowHeight = $$5(window).height();
    		var windowBottom = windowHeight + windowTop;

    		var position = this.s.position;
    		var headerMode, footerMode;

    		// Body Details
    		var bodyTop = scrollEnabled ? scrollOffset.top : position.tbodyTop;
    		var bodyLeft = scrollEnabled ? scrollOffset.left : position.left;
    		var bodyBottom = scrollEnabled ? scrollOffset.top + scrollHeight : position.tfootTop;
    		var bodyWidth = scrollEnabled ? scrollBody.outerWidth() : position.tbodyWidth;

    		var windowBottom = windowTop + windowHeight;

    		if (this.c.header) {
    			if (!this.s.enable) {
    				headerMode = 'in-place';
    			}
    			// The header is in it's normal place if the body top is lower than
    			//  the scroll of the window plus the headerOffset and the height of the header
    			else if (
    				!position.visible ||
    				windowTop + this.c.headerOffset + position.theadHeight <= bodyTop
    			) {
    				headerMode = 'in-place';
    			}
    			// The header should be floated if
    			else if (
    				// The scrolling plus the header offset plus the height of the header is lower than the top of the body
    				windowTop + this.c.headerOffset + position.theadHeight > bodyTop &&
    				// And the scrolling at the top plus the header offset is above the bottom of the body
    				windowTop + this.c.headerOffset + position.theadHeight < bodyBottom
    			) {
    				headerMode = 'in';
    				var scrollBody = $$5($$5(this.s.dt.table().node()).parent());

    				// Further to the above, If the scrolling plus the header offset plus the header height is lower
    				// than the bottom of the table a shuffle is required so have to force the calculation
    				if (
    					windowTop + this.c.headerOffset + position.theadHeight > bodyBottom ||
    					this.dom.header.floatingParent === undefined
    				) {
    					forceChange = true;
    				}
    				else {
    					this.dom.header.floatingParent
    						.css({
    							top: this.c.headerOffset,
    							position: 'fixed'
    						})
    						.append(this.dom.header.floating);
    				}
    			}
    			// Anything else and the view is below the table
    			else {
    				headerMode = 'below';
    			}

    			if (forceChange || headerMode !== this.s.headerMode) {
    				this._modeChange(headerMode, 'header', forceChange);
    			}

    			this._horizontal('header', windowLeft);
    		}

    		var header = {
    			offset: { top: 0, left: 0 },
    			height: 0
    		};
    		var footer = {
    			offset: { top: 0, left: 0 },
    			height: 0
    		};

    		if (this.c.footer && this.dom.tfoot.length) {
    			if (!this.s.enable) {
    				footerMode = 'in-place';
    			}
    			else if (
    				!position.visible ||
    				position.tfootBottom + this.c.footerOffset <= windowBottom
    			) {
    				footerMode = 'in-place';
    			}
    			else if (
    				bodyBottom + position.tfootHeight + this.c.footerOffset > windowBottom &&
    				bodyTop + this.c.footerOffset < windowBottom
    			) {
    				footerMode = 'in';
    				forceChange = true;
    			}
    			else {
    				footerMode = 'above';
    			}

    			if (forceChange || footerMode !== this.s.footerMode) {
    				this._modeChange(footerMode, 'footer', forceChange);
    			}

    			this._horizontal('footer', windowLeft);

    			var getOffsetHeight = function (el) {
    				return {
    					offset: el.offset(),
    					height: el.outerHeight()
    				};
    			};

    			header = this.dom.header.floating
    				? getOffsetHeight(this.dom.header.floating)
    				: getOffsetHeight(this.dom.thead);
    			footer = this.dom.footer.floating
    				? getOffsetHeight(this.dom.footer.floating)
    				: getOffsetHeight(this.dom.tfoot);

    			// If scrolling is enabled and the footer is off the screen
    			if (scrollEnabled && footer.offset.top > windowTop) {
    				// && footer.offset.top >= windowBottom) {
    				// Calculate the gap between the top of the scrollBody and the top of the window
    				var overlap = windowTop - scrollOffset.top;
    				// The new height is the bottom of the window
    				var newHeight =
    					windowBottom +
    					// If the gap between the top of the scrollbody and the window is more than
    					//  the height of the header then the top of the table is still visible so add that gap
    					// Doing this has effectively calculated the height from the top of the table to the bottom of the current page
    					(overlap > -header.height ? overlap : 0) -
    					// Take from that
    					// The top of the header plus
    					(header.offset.top +
    						// The header height if the standard header is present
    						(overlap < -header.height ? header.height : 0) +
    						// And the height of the footer
    						footer.height);

    				// Don't want a negative height
    				if (newHeight < 0) {
    					newHeight = 0;
    				}

    				// At the end of the above calculation the space between the header (top of the page if floating)
    				// and the point just above the footer should be the new value for the height of the table.
    				scrollBody.outerHeight(newHeight);

    				// Need some rounding here as sometimes very small decimal places are encountered
    				// If the actual height is bigger or equal to the height we just applied then the footer is "Floating"
    				if (Math.round(scrollBody.outerHeight()) >= Math.round(newHeight)) {
    					$$5(this.dom.tfoot.parent()).addClass('fixedHeader-floating');
    				}
    				// Otherwise max-width has kicked in so it is not floating
    				else {
    					$$5(this.dom.tfoot.parent()).removeClass('fixedHeader-floating');
    				}
    			}
    		}

    		if (this.dom.header.floating) {
    			this.dom.header.floatingParent.css('left', bodyLeft - windowLeft);
    		}
    		if (this.dom.footer.floating) {
    			this.dom.footer.floatingParent.css('left', bodyLeft - windowLeft);
    		}

    		// If fixed columns is being used on this table then the blockers need to be copied across
    		// Cloning these is cleaner than creating as our own as it will keep consistency with fixedColumns automatically
    		// ASSUMING that the class remains the same
    		if (this.s.dt.settings()[0]._fixedColumns !== undefined) {
    			var adjustBlocker = function (side, end, el) {
    				if (el === undefined) {
    					var blocker = $$5('div.dtfc-' + side + '-' + end + '-blocker');

    					el = blocker.length === 0 ? null : blocker.clone().css('z-index', 1);
    				}

    				if (el !== null) {
    					if (headerMode === 'in' || headerMode === 'below') {
    						el.appendTo('body').css({
    							top: end === 'top' ? header.offset.top : footer.offset.top,
    							left: side === 'right' ? bodyLeft + bodyWidth - el.width() : bodyLeft
    						});
    					}
    					else {
    						el.detach();
    					}
    				}

    				return el;
    			};

    			// Adjust all blockers
    			this.dom.header.rightBlocker = adjustBlocker(
    				'right',
    				'top',
    				this.dom.header.rightBlocker
    			);
    			this.dom.header.leftBlocker = adjustBlocker('left', 'top', this.dom.header.leftBlocker);
    			this.dom.footer.rightBlocker = adjustBlocker(
    				'right',
    				'bottom',
    				this.dom.footer.rightBlocker
    			);
    			this.dom.footer.leftBlocker = adjustBlocker(
    				'left',
    				'bottom',
    				this.dom.footer.leftBlocker
    			);
    		}
    	},

    	/**
    	 * Function to check if scrolling is enabled on the table or not
    	 * @returns Boolean value indicating if scrolling on the table is enabled or not
    	 */
    	_scrollEnabled: function () {
    		var oScroll = this.s.dt.settings()[0].oScroll;
    		if (oScroll.sY !== '' || oScroll.sX !== '') {
    			return true;
    		}
    		return false;
    	}
    });

    /**
     * Version
     * @type {String}
     * @static
     */
    FixedHeader.version = '3.4.0';

    /**
     * Defaults
     * @type {Object}
     * @static
     */
    FixedHeader.defaults = {
    	header: true,
    	footer: false,
    	headerOffset: 0,
    	footerOffset: 0
    };

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * DataTables interfaces
     */

    // Attach for constructor access
    $$5.fn.dataTable.FixedHeader = FixedHeader;
    $$5.fn.DataTable.FixedHeader = FixedHeader;

    // DataTables creation - check if the FixedHeader option has been defined on the
    // table and if so, initialise
    $$5(document).on('init.dt.dtfh', function (e, settings, json) {
    	if (e.namespace !== 'dt') {
    		return;
    	}

    	var init = settings.oInit.fixedHeader;
    	var defaults = DataTable.defaults.fixedHeader;

    	if ((init || defaults) && !settings._fixedHeader) {
    		var opts = $$5.extend({}, defaults, init);

    		if (init !== false) {
    			new FixedHeader(settings, opts);
    		}
    	}
    });

    // DataTables API methods
    DataTable.Api.register('fixedHeader()', function () {});

    DataTable.Api.register('fixedHeader.adjust()', function () {
    	return this.iterator('table', function (ctx) {
    		var fh = ctx._fixedHeader;

    		if (fh) {
    			fh.update();
    		}
    	});
    });

    DataTable.Api.register('fixedHeader.enable()', function (flag) {
    	return this.iterator('table', function (ctx) {
    		var fh = ctx._fixedHeader;

    		flag = flag !== undefined ? flag : true;
    		if (fh && flag !== fh.enabled()) {
    			fh.enable(flag);
    		}
    	});
    });

    DataTable.Api.register('fixedHeader.enabled()', function () {
    	if (this.context.length) {
    		var fh = this.context[0]._fixedHeader;

    		if (fh) {
    			return fh.enabled();
    		}
    	}

    	return false;
    });

    DataTable.Api.register('fixedHeader.disable()', function () {
    	return this.iterator('table', function (ctx) {
    		var fh = ctx._fixedHeader;

    		if (fh && fh.enabled()) {
    			fh.enable(false);
    		}
    	});
    });

    $$5.each(['header', 'footer'], function (i, el) {
    	DataTable.Api.register('fixedHeader.' + el + 'Offset()', function (offset) {
    		var ctx = this.context;

    		if (offset === undefined) {
    			return ctx.length && ctx[0]._fixedHeader
    				? ctx[0]._fixedHeader[el + 'Offset']()
    				: undefined;
    		}

    		return this.iterator('table', function (ctx) {
    			var fh = ctx._fixedHeader;

    			if (fh) {
    				fh[el + 'Offset'](offset);
    			}
    		});
    	});
    });

    /*! KeyTable 2.10.0
     * © SpryMedia Ltd - datatables.net/license
     */


    // Allow reassignment of the $ variable
    let $$4 = j;


    /**
     * @summary     KeyTable
     * @description Spreadsheet like keyboard navigation for DataTables
     * @version     2.10.0
     * @file        dataTables.keyTable.js
     * @author      SpryMedia Ltd
     * @contact     datatables.net
     * @copyright   Copyright SpryMedia Ltd.
     *
     * This source file is free software, available under the following license:
     *   MIT license - http://datatables.net/license/mit
     *
     * This source file is distributed in the hope that it will be useful, but
     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
     * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
     *
     * For details please refer to: http://www.datatables.net
     */

    var namespaceCounter = 0;
    var editorNamespaceCounter = 0;

    var KeyTable = function (dt, opts) {
    	// Sanity check that we are using DataTables 1.10 or newer
    	if (!DataTable.versionCheck || !DataTable.versionCheck('1.10.8')) {
    		throw 'KeyTable requires DataTables 1.10.8 or newer';
    	}

    	// User and defaults configuration object
    	this.c = $$4.extend(true, {}, DataTable.defaults.keyTable, KeyTable.defaults, opts);

    	// Internal settings
    	this.s = {
    		/** @type {DataTable.Api} DataTables' API instance */
    		dt: new DataTable.Api(dt),

    		enable: true,

    		/** @type {bool} Flag for if a draw is triggered by focus */
    		focusDraw: false,

    		/** @type {bool} Flag to indicate when waiting for a draw to happen.
    		 *   Will ignore key presses at this point
    		 */
    		waitingForDraw: false,

    		/** @type {object} Information about the last cell that was focused */
    		lastFocus: null,

    		/** @type {string} Unique namespace per instance */
    		namespace: '.keyTable-' + namespaceCounter++,

    		/** @type {Node} Input element for tabbing into the table */
    		tabInput: null
    	};

    	// DOM items
    	this.dom = {};

    	// Check if row reorder has already been initialised on this table
    	var settings = this.s.dt.settings()[0];
    	var exisiting = settings.keytable;
    	if (exisiting) {
    		return exisiting;
    	}

    	settings.keytable = this;
    	this._constructor();
    };

    $$4.extend(KeyTable.prototype, {
    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * API methods for DataTables API interface
    	 */

    	/**
    	 * Blur the table's cell focus
    	 */
    	blur: function () {
    		this._blur();
    	},

    	/**
    	 * Enable cell focus for the table
    	 *
    	 * @param  {string} state Can be `true`, `false` or `-string navigation-only`
    	 */
    	enable: function (state) {
    		this.s.enable = state;
    	},

    	/**
    	 * Get enable status
    	 */
    	enabled: function () {
    		return this.s.enable;
    	},

    	/**
    	 * Focus on a cell
    	 * @param  {integer} row    Row index
    	 * @param  {integer} column Column index
    	 */
    	focus: function (row, column) {
    		this._focus(this.s.dt.cell(row, column));
    	},

    	/**
    	 * Is the cell focused
    	 * @param  {object} cell Cell index to check
    	 * @returns {boolean} true if focused, false otherwise
    	 */
    	focused: function (cell) {
    		var lastFocus = this.s.lastFocus;

    		if (!lastFocus) {
    			return false;
    		}

    		var lastIdx = this.s.lastFocus.cell.index();
    		return cell.row === lastIdx.row && cell.column === lastIdx.column;
    	},

    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * Constructor
    	 */

    	/**
    	 * Initialise the KeyTable instance
    	 *
    	 * @private
    	 */
    	_constructor: function () {
    		this._tabInput();

    		var that = this;
    		var dt = this.s.dt;
    		var table = $$4(dt.table().node());
    		var namespace = this.s.namespace;
    		var editorBlock = false;

    		// Need to be able to calculate the cell positions relative to the table
    		if (table.css('position') === 'static') {
    			table.css('position', 'relative');
    		}

    		// Click to focus
    		$$4(dt.table().body()).on('click' + namespace, 'th, td', function (e) {
    			if (that.s.enable === false) {
    				return;
    			}

    			var cell = dt.cell(this);

    			if (!cell.any()) {
    				return;
    			}

    			that._focus(cell, null, false, e);
    		});

    		// Key events
    		$$4(document).on('keydown' + namespace, function (e) {
    			if (!editorBlock) {
    				that._key(e);
    			}
    		});

    		// Click blur
    		if (this.c.blurable) {
    			$$4(document).on('mousedown' + namespace, function (e) {
    				// Click on the search input will blur focus
    				if ($$4(e.target).parents('.dataTables_filter').length) {
    					that._blur();
    				}

    				// If the click was inside the DataTables container, don't blur
    				if ($$4(e.target).parents().filter(dt.table().container()).length) {
    					return;
    				}

    				// Don't blur in Editor form
    				if ($$4(e.target).parents('div.DTE').length) {
    					return;
    				}

    				// Or an Editor date input
    				if (
    					$$4(e.target).parents('div.editor-datetime').length ||
    					$$4(e.target).parents('div.dt-datetime').length
    				) {
    					return;
    				}

    				//If the click was inside the fixed columns container, don't blur
    				if ($$4(e.target).parents().filter('.DTFC_Cloned').length) {
    					return;
    				}

    				that._blur();
    			});
    		}

    		if (this.c.editor) {
    			var editor = this.c.editor;

    			// Need to disable KeyTable when the main editor is shown
    			editor.on('open.keyTableMain', function (e, mode, action) {
    				if (mode !== 'inline' && that.s.enable) {
    					that.enable(false);

    					editor.one('close' + namespace, function () {
    						that.enable(true);
    					});
    				}
    			});

    			if (this.c.editOnFocus) {
    				dt.on(
    					'key-focus' + namespace + ' key-refocus' + namespace,
    					function (e, dt, cell, orig) {
    						that._editor(null, orig, true);
    					}
    				);
    			}

    			// Activate Editor when a key is pressed (will be ignored, if
    			// already active).
    			dt.on('key' + namespace, function (e, dt, key, cell, orig) {
    				that._editor(key, orig, false);
    			});

    			// Active editing on double click - it will already have focus from
    			// the click event handler above
    			$$4(dt.table().body()).on('dblclick' + namespace, 'th, td', function (e) {
    				if (that.s.enable === false) {
    					return;
    				}

    				var cell = dt.cell(this);

    				if (!cell.any()) {
    					return;
    				}

    				if (that.s.lastFocus && this !== that.s.lastFocus.cell.node()) {
    					return;
    				}

    				that._editor(null, e, true);
    			});

    			// While Editor is busy processing, we don't want to process any key events
    			editor
    				.on('preSubmit', function () {
    					editorBlock = true;
    				})
    				.on('preSubmitCancelled', function () {
    					editorBlock = false;
    				})
    				.on('submitComplete', function () {
    					editorBlock = false;
    				});
    		}

    		// Stave saving
    		// if ( dt.settings()[0].oFeatures.bStateSave ) {
    		dt.on('stateSaveParams' + namespace, function (e, s, d) {
    			d.keyTable = that.s.lastFocus ? that.s.lastFocus.cell.index() : null;
    		});
    		// }

    		dt.on('column-visibility' + namespace, function (e) {
    			that._tabInput();
    		});

    		dt.on('column-reorder' + namespace, function (e, s, d) {
    			// Need to update the last focus cell's index
    			var lastFocus = that.s.lastFocus;

    			if (lastFocus && lastFocus.cell) {
    				var curr = lastFocus.relative.column;

    				// Manipulate the API instance to correct the column index
    				lastFocus.cell[0][0].column = d.mapping.indexOf(curr);
    				lastFocus.relative.column = d.mapping.indexOf(curr);
    			}
    		});

    		// Redraw - retain focus on the current cell
    		dt.on('draw' + namespace, function (e) {
    			that._tabInput();

    			if (that.s.focusDraw) {
    				return;
    			}

    			var lastFocus = that.s.lastFocus;

    			if (lastFocus) {
    				var relative = that.s.lastFocus.relative;
    				var info = dt.page.info();
    				var row = relative.row + info.start;

    				if (info.recordsDisplay === 0) {
    					return;
    				}

    				// Reverse if needed
    				if (row >= info.recordsDisplay) {
    					row = info.recordsDisplay - 1;
    				}

    				that._focus(row, relative.column, true, e);
    			}
    		});

    		// Clipboard support
    		if (this.c.clipboard) {
    			this._clipboard();
    		}

    		dt.on('destroy' + namespace, function () {
    			that._blur(true);

    			// Event tidy up
    			dt.off(namespace);

    			$$4(dt.table().body())
    				.off('click' + namespace, 'th, td')
    				.off('dblclick' + namespace, 'th, td');

    			$$4(document)
    				.off('mousedown' + namespace)
    				.off('keydown' + namespace)
    				.off('copy' + namespace)
    				.off('paste' + namespace);
    		});

    		// Initial focus comes from state or options
    		var state = dt.state.loaded();

    		if (state && state.keyTable) {
    			// Wait until init is done
    			dt.one('init', function () {
    				var cell = dt.cell(state.keyTable);

    				// Ensure that the saved cell still exists
    				if (cell.any()) {
    					cell.focus();
    				}
    			});
    		}
    		else if (this.c.focus) {
    			dt.cell(this.c.focus).focus();
    		}
    	},

    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * Private methods
    	 */

    	/**
    	 * Blur the control
    	 *
    	 * @param {boolean} [noEvents=false] Don't trigger updates / events (for destroying)
    	 * @private
    	 */
    	_blur: function (noEvents) {
    		if (!this.s.enable || !this.s.lastFocus) {
    			return;
    		}

    		var cell = this.s.lastFocus.cell;

    		$$4(cell.node()).removeClass(this.c.className);
    		this.s.lastFocus = null;

    		if (!noEvents) {
    			this._updateFixedColumns(cell.index().column);

    			this._emitEvent('key-blur', [this.s.dt, cell]);
    		}
    	},

    	/**
    	 * Clipboard interaction handlers
    	 *
    	 * @private
    	 */
    	_clipboard: function () {
    		var dt = this.s.dt;
    		var that = this;
    		var namespace = this.s.namespace;

    		// IE8 doesn't support getting selected text
    		if (!window.getSelection) {
    			return;
    		}

    		$$4(document).on('copy' + namespace, function (ejq) {
    			var e = ejq.originalEvent;
    			var selection = window.getSelection().toString();
    			var focused = that.s.lastFocus;

    			// Only copy cell text to clipboard if there is no other selection
    			// and there is a focused cell
    			if (!selection && focused) {
    				e.clipboardData.setData(
    					'text/plain',
    					focused.cell.render(that.c.clipboardOrthogonal)
    				);
    				e.preventDefault();
    			}
    		});

    		$$4(document).on('paste' + namespace, function (ejq) {
    			var e = ejq.originalEvent;
    			var focused = that.s.lastFocus;
    			var activeEl = document.activeElement;
    			var editor = that.c.editor;
    			var pastedText;

    			if (focused && (!activeEl || activeEl.nodeName.toLowerCase() === 'body')) {
    				e.preventDefault();

    				if (window.clipboardData && window.clipboardData.getData) {
    					// IE
    					pastedText = window.clipboardData.getData('Text');
    				}
    				else if (e.clipboardData && e.clipboardData.getData) {
    					// Everything else
    					pastedText = e.clipboardData.getData('text/plain');
    				}

    				if (editor) {
    					// Got Editor - need to activate inline editing,
    					// set the value and submit
    					var options = that._inlineOptions(focused.cell.index());

    					editor
    						.inline(options.cell, options.field, options.options)
    						.set(editor.displayed()[0], pastedText)
    						.submit();
    				}
    				else {
    					// No editor, so just dump the data in
    					focused.cell.data(pastedText);
    					dt.draw(false);
    				}
    			}
    		});
    	},

    	/**
    	 * Get an array of the column indexes that KeyTable can operate on. This
    	 * is a merge of the user supplied columns and the visible columns.
    	 *
    	 * @private
    	 */
    	_columns: function () {
    		var dt = this.s.dt;
    		var user = dt.columns(this.c.columns).indexes();
    		var out = [];

    		dt.columns(':visible').every(function (i) {
    			if (user.indexOf(i) !== -1) {
    				out.push(i);
    			}
    		});

    		return out;
    	},

    	/**
    	 * Perform excel like navigation for Editor by triggering an edit on key
    	 * press
    	 *
    	 * @param  {integer} key Key code for the pressed key
    	 * @param  {object} orig Original event
    	 * @private
    	 */
    	_editor: function (key, orig, hardEdit) {
    		// If nothing focused, we can't take any action
    		if (!this.s.lastFocus) {
    			return;
    		}

    		// DataTables draw event
    		if (orig && orig.type === 'draw') {
    			return;
    		}

    		var that = this;
    		var dt = this.s.dt;
    		var editor = this.c.editor;
    		var editCell = this.s.lastFocus.cell;
    		var namespace = this.s.namespace + 'e' + editorNamespaceCounter++;

    		// Do nothing if there is already an inline edit in this cell
    		if ($$4('div.DTE', editCell.node()).length) {
    			return;
    		}

    		// Don't activate Editor on control key presses
    		if (
    			key !== null &&
    			((key >= 0x00 && key <= 0x09) ||
    				key === 0x0b ||
    				key === 0x0c ||
    				(key >= 0x0e && key <= 0x1f) ||
    				(key >= 0x70 && key <= 0x7b) ||
    				(key >= 0x7f && key <= 0x9f))
    		) {
    			return;
    		}

    		if (orig) {
    			orig.stopPropagation();

    			// Return key should do nothing - for textareas it would empty the
    			// contents
    			if (key === 13) {
    				orig.preventDefault();
    			}
    		}

    		var editInline = function () {
    			var options = that._inlineOptions(editCell.index());

    			editor
    				.one('open' + namespace, function () {
    					// Remove cancel open
    					editor.off('cancelOpen' + namespace);

    					// Excel style - select all text
    					if (!hardEdit) {
    						$$4(
    							'div.DTE_Field_InputControl input, div.DTE_Field_InputControl textarea'
    						).select();
    					}

    					// Reduce the keys the Keys listens for
    					dt.keys.enable(hardEdit ? 'tab-only' : 'navigation-only');

    					// On blur of the navigation submit
    					dt.on('key-blur.editor', function (e, dt, cell) {
    						// When Editor has its own blur enabled - do nothing here
    						if (editor.s.editOpts.onBlur === 'submit') {
    							return;
    						}

    						if (editor.displayed() && cell.node() === editCell.node()) {
    							editor.submit();
    						}
    					});

    					// Highlight the cell a different colour on full edit
    					if (hardEdit) {
    						$$4(dt.table().container()).addClass('dtk-focus-alt');
    					}

    					// If the dev cancels the submit, we need to return focus
    					editor.on('preSubmitCancelled' + namespace, function () {
    						setTimeout(function () {
    							that._focus(editCell, null, false);
    						}, 50);
    					});

    					editor.on('submitUnsuccessful' + namespace, function () {
    						that._focus(editCell, null, false);
    					});

    					// Restore full key navigation on close
    					editor.one('close' + namespace, function () {
    						dt.keys.enable(true);
    						dt.off('key-blur.editor');
    						editor.off(namespace);
    						$$4(dt.table().container()).removeClass('dtk-focus-alt');

    						if (that.s.returnSubmit) {
    							that.s.returnSubmit = false;
    							that._emitEvent('key-return-submit', [dt, editCell]);
    						}
    					});
    				})
    				.one('cancelOpen' + namespace, function () {
    					// `preOpen` can cancel the display of the form, so it
    					// might be that the open event handler isn't needed
    					editor.off(namespace);
    				})
    				.inline(options.cell, options.field, options.options);
    		};

    		// Editor 1.7 listens for `return` on keyup, so if return is the trigger
    		// key, we need to wait for `keyup` otherwise Editor would just submit
    		// the content triggered by this keypress.
    		if (key === 13) {
    			hardEdit = true;

    			$$4(document).one('keyup', function () {
    				// immediately removed
    				editInline();
    			});
    		}
    		else {
    			editInline();
    		}
    	},

    	_inlineOptions: function (cellIdx) {
    		if (this.c.editorOptions) {
    			return this.c.editorOptions(cellIdx);
    		}

    		return {
    			cell: cellIdx,
    			field: undefined,
    			options: undefined
    		};
    	},

    	/**
    	 * Emit an event on the DataTable for listeners
    	 *
    	 * @param  {string} name Event name
    	 * @param  {array} args Event arguments
    	 * @private
    	 */
    	_emitEvent: function (name, args) {
    		return this.s.dt.iterator('table', function (ctx, i) {
    			return $$4(ctx.nTable).triggerHandler(name, args);
    		});
    	},

    	/**
    	 * Focus on a particular cell, shifting the table's paging if required
    	 *
    	 * @param  {DataTables.Api|integer} row Can be given as an API instance that
    	 *   contains the cell to focus or as an integer. As the latter it is the
    	 *   visible row index (from the whole data set) - NOT the data index
    	 * @param  {integer} [column] Not required if a cell is given as the first
    	 *   parameter. Otherwise this is the column data index for the cell to
    	 *   focus on
    	 * @param {boolean} [shift=true] Should the viewport be moved to show cell
    	 * @private
    	 */
    	_focus: function (row, column, shift, originalEvent) {
    		var that = this;
    		var dt = this.s.dt;
    		var pageInfo = dt.page.info();
    		var lastFocus = this.s.lastFocus;

    		if (!originalEvent) {
    			originalEvent = null;
    		}

    		if (!this.s.enable) {
    			return;
    		}

    		if (typeof row !== 'number') {
    			// Its an API instance - check that there is actually a row
    			if (!row.any()) {
    				return;
    			}

    			// Convert the cell to a row and column
    			var index = row.index();
    			column = index.column;
    			row = dt.rows({ filter: 'applied', order: 'applied' }).indexes().indexOf(index.row);

    			// Don't focus rows that were filtered out.
    			if (row < 0) {
    				return;
    			}

    			// For server-side processing normalise the row by adding the start
    			// point, since `rows().indexes()` includes only rows that are
    			// available at the client-side
    			if (pageInfo.serverSide) {
    				row += pageInfo.start;
    			}
    		}

    		// Is the row on the current page? If not, we need to redraw to show the
    		// page
    		if (
    			pageInfo.length !== -1 &&
    			(row < pageInfo.start || row >= pageInfo.start + pageInfo.length)
    		) {
    			this.s.focusDraw = true;
    			this.s.waitingForDraw = true;

    			dt.one('draw', function () {
    				that.s.focusDraw = false;
    				that.s.waitingForDraw = false;
    				that._focus(row, column, undefined, originalEvent);
    			})
    				.page(Math.floor(row / pageInfo.length))
    				.draw(false);

    			return;
    		}

    		// In the available columns?
    		if ($$4.inArray(column, this._columns()) === -1) {
    			return;
    		}

    		// De-normalise the server-side processing row, so we select the row
    		// in its displayed position
    		if (pageInfo.serverSide) {
    			row -= pageInfo.start;
    		}

    		// Get the cell from the current position - ignoring any cells which might
    		// not have been rendered (therefore can't use `:eq()` selector).
    		var cells = dt.cells(null, column, { search: 'applied', order: 'applied' }).flatten();
    		var cell = dt.cell(cells[row]);

    		// Prefocus check - this event allows a focus action to be disallowed.
    		var preFocus = this._emitEvent('key-prefocus', [this.s.dt, cell, originalEvent || null]);
    		if (preFocus.indexOf(false) !== -1) {
    			return;
    		}

    		if (lastFocus) {
    			// Don't trigger a refocus on the same cell
    			if (lastFocus.node === cell.node()) {
    				this._emitEvent('key-refocus', [this.s.dt, cell, originalEvent || null]);
    				return;
    			}

    			// Otherwise blur the old focus
    			this._blur();
    		}

    		// Clear focus from other tables
    		this._removeOtherFocus();

    		var node = $$4(cell.node());
    		node.addClass(this.c.className);

    		this._updateFixedColumns(column);

    		// Shift viewpoint and page to make cell visible
    		if (shift === undefined || shift === true) {
    			this._scroll($$4(window), $$4(document.body), node, 'offset');

    			var bodyParent = dt.table().body().parentNode;
    			if (bodyParent !== dt.table().header().parentNode) {
    				var parent = $$4(bodyParent.parentNode);

    				this._scroll(parent, parent, node, 'position');
    			}
    		}

    		// Event and finish
    		this.s.lastFocus = {
    			cell: cell,
    			node: cell.node(),
    			relative: {
    				row: dt.rows({ page: 'current' }).indexes().indexOf(cell.index().row),
    				column: cell.index().column
    			}
    		};

    		this._emitEvent('key-focus', [this.s.dt, cell, originalEvent || null]);
    		dt.state.save();
    	},

    	/**
    	 * Handle key press
    	 *
    	 * @param  {object} e Event
    	 * @private
    	 */
    	_key: function (e) {
    		// If we are waiting for a draw to happen from another key event, then
    		// do nothing for this new key press.
    		if (this.s.waitingForDraw) {
    			e.preventDefault();
    			return;
    		}

    		var enable = this.s.enable;
    		this.s.returnSubmit =
    			(enable === 'navigation-only' || enable === 'tab-only') && e.keyCode === 13
    				? true
    				: false;

    		var navEnable = enable === true || enable === 'navigation-only';
    		if (!enable) {
    			return;
    		}

    		if ((e.keyCode === 0 || e.ctrlKey || e.metaKey || e.altKey) && !(e.ctrlKey && e.altKey)) {
    			return;
    		}

    		// If not focused, then there is no key action to take
    		var lastFocus = this.s.lastFocus;
    		if (!lastFocus) {
    			return;
    		}

    		// And the last focus still exists!
    		if (!this.s.dt.cell(lastFocus.node).any()) {
    			this.s.lastFocus = null;
    			return;
    		}

    		var that = this;
    		var dt = this.s.dt;
    		var scrolling = this.s.dt.settings()[0].oScroll.sY ? true : false;

    		// If we are not listening for this key, do nothing
    		if (this.c.keys && $$4.inArray(e.keyCode, this.c.keys) === -1) {
    			return;
    		}

    		switch (e.keyCode) {
    			case 9: // tab
    				// `enable` can be tab-only
    				e.preventDefault();

    				this._keyAction(function () {
    					that._shift(e, e.shiftKey ? 'left' : 'right', true);
    				});
    				break;

    			case 27: // esc
    				if (this.c.blurable && enable === true) {
    					this._blur();
    				}
    				break;

    			case 33: // page up (previous page)
    			case 34: // page down (next page)
    				if (navEnable && !scrolling) {
    					e.preventDefault();

    					this._keyAction(function () {
    						dt.page(e.keyCode === 33 ? 'previous' : 'next').draw(false);
    					});
    				}
    				break;

    			case 35: // end (end of current page)
    			case 36: // home (start of current page)
    				if (navEnable) {
    					e.preventDefault();

    					this._keyAction(function () {
    						var indexes = dt.cells({ page: 'current' }).indexes();
    						var colIndexes = that._columns();

    						that._focus(
    							dt.cell(indexes[e.keyCode === 35 ? indexes.length - 1 : colIndexes[0]]),
    							null,
    							true,
    							e
    						);
    					});
    				}
    				break;

    			case 37: // left arrow
    				if (navEnable) {
    					this._keyAction(function () {
    						that._shift(e, 'left');
    					});
    				}
    				break;

    			case 38: // up arrow
    				if (navEnable) {
    					this._keyAction(function () {
    						that._shift(e, 'up');
    					});
    				}
    				break;

    			case 39: // right arrow
    				if (navEnable) {
    					this._keyAction(function () {
    						that._shift(e, 'right');
    					});
    				}
    				break;

    			case 40: // down arrow
    				if (navEnable) {
    					this._keyAction(function () {
    						that._shift(e, 'down');
    					});
    				}
    				break;

    			case 113: // F2 - Excel like hard edit
    				if (this.c.editor) {
    					this._editor(null, e, true);
    					break;
    				}
    			// else fallthrough

    			default:
    				// Everything else - pass through only when fully enabled
    				if (enable === true) {
    					this._emitEvent('key', [dt, e.keyCode, this.s.lastFocus.cell, e]);
    				}
    				break;
    		}
    	},

    	/**
    	 * Whether we perform a key shift action immediately or not depends
    	 * upon if Editor is being used. If it is, then we wait until it
    	 * completes its action
    	 * @param {*} action Function to trigger when ready
    	 */
    	_keyAction: function (action) {
    		var editor = this.c.editor;

    		if (editor && editor.mode()) {
    			editor.submit(action);
    		}
    		else {
    			action();
    		}
    	},

    	/**
    	 * Remove focus from all tables other than this one
    	 */
    	_removeOtherFocus: function () {
    		var thisTable = this.s.dt.table().node();

    		$$4.fn.dataTable.tables({ api: true }).iterator('table', function (settings) {
    			if (this.table().node() !== thisTable) {
    				this.cell.blur();
    			}
    		});
    	},

    	/**
    	 * Scroll a container to make a cell visible in it. This can be used for
    	 * both DataTables scrolling and native window scrolling.
    	 *
    	 * @param  {jQuery} container Scrolling container
    	 * @param  {jQuery} scroller  Item being scrolled
    	 * @param  {jQuery} cell      Cell in the scroller
    	 * @param  {string} posOff    `position` or `offset` - which to use for the
    	 *   calculation. `offset` for the document, otherwise `position`
    	 * @private
    	 */
    	_scroll: function (container, scroller, cell, posOff) {
    		var offset = cell[posOff]();
    		var height = cell.outerHeight();
    		var width = cell.outerWidth();

    		var scrollTop = scroller.scrollTop();
    		var scrollLeft = scroller.scrollLeft();
    		var containerHeight = container.height();
    		var containerWidth = container.width();

    		// If Scroller is being used, the table can be `position: absolute` and that
    		// needs to be taken account of in the offset. If no Scroller, this will be 0
    		if (posOff === 'position') {
    			offset.top += parseInt(cell.closest('table').css('top'), 10);
    		}

    		// Top correction (partially in view)
    		if (offset.top < scrollTop && offset.top + height > scrollTop - 5) {
    			scroller.scrollTop(offset.top);
    		}

    		// Left correction
    		if (offset.left < scrollLeft) {
    			scroller.scrollLeft(offset.left);
    		}

    		// Bottom correction plus in view correction. Note that the magic 5 is to allow
    		// for the edge just passing the bottom of the view
    		if (
    			offset.top + height > scrollTop + containerHeight &&
    			offset.top < scrollTop + containerHeight + 5 &&
    			height < containerHeight
    		) {
    			scroller.scrollTop(offset.top + height - containerHeight);
    		}

    		// Right correction
    		if (offset.left + width > scrollLeft + containerWidth && width < containerWidth) {
    			scroller.scrollLeft(offset.left + width - containerWidth);
    		}
    	},

    	/**
    	 * Calculate a single offset movement in the table - up, down, left and
    	 * right and then perform the focus if possible
    	 *
    	 * @param  {object}  e           Event object
    	 * @param  {string}  direction   Movement direction
    	 * @param  {boolean} keyBlurable `true` if the key press can result in the
    	 *   table being blurred. This is so arrow keys won't blur the table, but
    	 *   tab will.
    	 * @private
    	 */
    	_shift: function (e, direction, keyBlurable) {
    		var dt = this.s.dt;
    		var pageInfo = dt.page.info();
    		var rows = pageInfo.recordsDisplay;
    		var columns = this._columns();
    		var last = this.s.lastFocus;
    		if (!last) {
    			return;
    		}

    		var currentCell = last.cell;
    		if (!currentCell) {
    			return;
    		}

    		var currRow = dt
    			.rows({ filter: 'applied', order: 'applied' })
    			.indexes()
    			.indexOf(currentCell.index().row);

    		// When server-side processing, `rows().indexes()` only gives the rows
    		// that are available at the client-side, so we need to normalise the
    		// row's current position by the display start point
    		if (pageInfo.serverSide) {
    			currRow += pageInfo.start;
    		}

    		var currCol = dt.columns(columns).indexes().indexOf(currentCell.index().column);

    		var row = currRow,
    			column = columns[currCol]; // row is the display, column is an index

    		// If the direction is rtl then the logic needs to be inverted from this point forwards
    		if ($$4(dt.table().node()).css('direction') === 'rtl') {
    			if (direction === 'right') {
    				direction = 'left';
    			}
    			else if (direction === 'left') {
    				direction = 'right';
    			}
    		}

    		if (direction === 'right') {
    			if (currCol >= columns.length - 1) {
    				row++;
    				column = columns[0];
    			}
    			else {
    				column = columns[currCol + 1];
    			}
    		}
    		else if (direction === 'left') {
    			if (currCol === 0) {
    				row--;
    				column = columns[columns.length - 1];
    			}
    			else {
    				column = columns[currCol - 1];
    			}
    		}
    		else if (direction === 'up') {
    			row--;
    		}
    		else if (direction === 'down') {
    			row++;
    		}

    		if (row >= 0 && row < rows && $$4.inArray(column, columns) !== -1) {
    			if (e) {
    				e.preventDefault();
    			}

    			this._focus(row, column, true, e);
    		}
    		else if (!keyBlurable || !this.c.blurable) {
    			// No new focus, but if the table isn't blurable, then don't loose
    			// focus
    			if (e) {
    				e.preventDefault();
    			}
    		}
    		else {
    			this._blur();
    		}
    	},

    	/**
    	 * Create and insert a hidden input element that can receive focus on behalf
    	 * of the table
    	 *
    	 * @private
    	 */
    	_tabInput: function () {
    		var that = this;
    		var dt = this.s.dt;
    		var tabIndex = this.c.tabIndex !== null ? this.c.tabIndex : dt.settings()[0].iTabIndex;

    		if (tabIndex == -1) {
    			return;
    		}

    		// Only create the input element once on first class
    		if (!this.s.tabInput) {
    			var div = $$4('<div><input type="text" tabindex="' + tabIndex + '"/></div>').css({
    				position: 'absolute',
    				height: 1,
    				width: 0,
    				overflow: 'hidden'
    			});

    			div.children().on('focus', function (e) {
    				var cell = dt.cell(':eq(0)', that._columns(), { page: 'current' });

    				if (cell.any()) {
    					that._focus(cell, null, true, e);
    				}
    			});

    			this.s.tabInput = div;
    		}

    		// Insert the input element into the first cell in the table's body
    		var cell = this.s.dt
    			.cell(':eq(0)', '0:visible', { page: 'current', order: 'current' })
    			.node();
    		if (cell) {
    			$$4(cell).prepend(this.s.tabInput);
    		}
    	},

    	/**
    	 * Update fixed columns if they are enabled and if the cell we are
    	 * focusing is inside a fixed column
    	 * @param  {integer} column Index of the column being changed
    	 * @private
    	 */
    	_updateFixedColumns: function (column) {
    		var dt = this.s.dt;
    		var settings = dt.settings()[0];

    		if (settings._oFixedColumns) {
    			var leftCols = settings._oFixedColumns.s.iLeftColumns;
    			var rightCols = settings.aoColumns.length - settings._oFixedColumns.s.iRightColumns;

    			if (column < leftCols || column >= rightCols) {
    				dt.fixedColumns().update();
    			}
    		}
    	}
    });

    /**
     * KeyTable default settings for initialisation
     *
     * @namespace
     * @name KeyTable.defaults
     * @static
     */
    KeyTable.defaults = {
    	/**
    	 * Can focus be removed from the table
    	 * @type {Boolean}
    	 */
    	blurable: true,

    	/**
    	 * Class to give to the focused cell
    	 * @type {String}
    	 */
    	className: 'focus',

    	/**
    	 * Enable or disable clipboard support
    	 * @type {Boolean}
    	 */
    	clipboard: true,

    	/**
    	 * Orthogonal data that should be copied to clipboard
    	 * @type {string}
    	 */
    	clipboardOrthogonal: 'display',

    	/**
    	 * Columns that can be focused. This is automatically merged with the
    	 * visible columns as only visible columns can gain focus.
    	 * @type {String}
    	 */
    	columns: '', // all

    	/**
    	 * Editor instance to automatically perform Excel like navigation
    	 * @type {Editor}
    	 */
    	editor: null,

    	/**
    	 * Trigger editing immediately on focus
    	 * @type {boolean}
    	 */
    	editOnFocus: false,

    	/**
    	 * Options to pass to Editor's inline method
    	 * @type {function}
    	 */
    	editorOptions: null,

    	/**
    	 * Select a cell to automatically select on start up. `null` for no
    	 * automatic selection
    	 * @type {cell-selector}
    	 */
    	focus: null,

    	/**
    	 * Array of keys to listen for
    	 * @type {null|array}
    	 */
    	keys: null,

    	/**
    	 * Tab index for where the table should sit in the document's tab flow
    	 * @type {integer|null}
    	 */
    	tabIndex: null
    };

    KeyTable.version = '2.10.0';

    $$4.fn.dataTable.KeyTable = KeyTable;
    $$4.fn.DataTable.KeyTable = KeyTable;

    DataTable.Api.register('cell.blur()', function () {
    	return this.iterator('table', function (ctx) {
    		if (ctx.keytable) {
    			ctx.keytable.blur();
    		}
    	});
    });

    DataTable.Api.register('cell().focus()', function () {
    	return this.iterator('cell', function (ctx, row, column) {
    		if (ctx.keytable) {
    			ctx.keytable.focus(row, column);
    		}
    	});
    });

    DataTable.Api.register('keys.disable()', function () {
    	return this.iterator('table', function (ctx) {
    		if (ctx.keytable) {
    			ctx.keytable.enable(false);
    		}
    	});
    });

    DataTable.Api.register('keys.enable()', function (opts) {
    	return this.iterator('table', function (ctx) {
    		if (ctx.keytable) {
    			ctx.keytable.enable(opts === undefined ? true : opts);
    		}
    	});
    });

    DataTable.Api.register('keys.enabled()', function (opts) {
    	var ctx = this.context;

    	if (ctx.length) {
    		return ctx[0].keytable ? ctx[0].keytable.enabled() : false;
    	}

    	return false;
    });

    DataTable.Api.register('keys.move()', function (dir) {
    	return this.iterator('table', function (ctx) {
    		if (ctx.keytable) {
    			ctx.keytable._shift(null, dir, false);
    		}
    	});
    });

    // Cell selector
    DataTable.ext.selector.cell.push(function (settings, opts, cells) {
    	var focused = opts.focused;
    	var kt = settings.keytable;
    	var out = [];

    	if (!kt || focused === undefined) {
    		return cells;
    	}

    	for (var i = 0, ien = cells.length; i < ien; i++) {
    		if (
    			(focused === true && kt.focused(cells[i])) ||
    			(focused === false && !kt.focused(cells[i]))
    		) {
    			out.push(cells[i]);
    		}
    	}

    	return out;
    });

    // Attach a listener to the document which listens for DataTables initialisation
    // events so we can automatically initialise
    $$4(document).on('preInit.dt.dtk', function (e, settings, json) {
    	if (e.namespace !== 'dt') {
    		return;
    	}

    	var init = settings.oInit.keys;
    	var defaults = DataTable.defaults.keys;

    	if (init || defaults) {
    		var opts = $$4.extend({}, defaults, init);

    		if (init !== false) {
    			new KeyTable(settings, opts);
    		}
    	}
    });

    /*! Responsive 2.5.0
     * © SpryMedia Ltd - datatables.net/license
     */


    // Allow reassignment of the $ variable
    let $$3 = j;


    /**
     * @summary     Responsive
     * @description Responsive tables plug-in for DataTables
     * @version     2.5.0
     * @author      SpryMedia Ltd
     * @copyright   SpryMedia Ltd.
     *
     * This source file is free software, available under the following license:
     *   MIT license - http://datatables.net/license/mit
     *
     * This source file is distributed in the hope that it will be useful, but
     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
     * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
     *
     * For details please refer to: http://www.datatables.net
     */

    /**
     * Responsive is a plug-in for the DataTables library that makes use of
     * DataTables' ability to change the visibility of columns, changing the
     * visibility of columns so the displayed columns fit into the table container.
     * The end result is that complex tables will be dynamically adjusted to fit
     * into the viewport, be it on a desktop, tablet or mobile browser.
     *
     * Responsive for DataTables has two modes of operation, which can used
     * individually or combined:
     *
     * * Class name based control - columns assigned class names that match the
     *   breakpoint logic can be shown / hidden as required for each breakpoint.
     * * Automatic control - columns are automatically hidden when there is no
     *   room left to display them. Columns removed from the right.
     *
     * In additional to column visibility control, Responsive also has built into
     * options to use DataTables' child row display to show / hide the information
     * from the table that has been hidden. There are also two modes of operation
     * for this child row display:
     *
     * * Inline - when the control element that the user can use to show / hide
     *   child rows is displayed inside the first column of the table.
     * * Column - where a whole column is dedicated to be the show / hide control.
     *
     * Initialisation of Responsive is performed by:
     *
     * * Adding the class `responsive` or `dt-responsive` to the table. In this case
     *   Responsive will automatically be initialised with the default configuration
     *   options when the DataTable is created.
     * * Using the `responsive` option in the DataTables configuration options. This
     *   can also be used to specify the configuration options, or simply set to
     *   `true` to use the defaults.
     *
     *  @class
     *  @param {object} settings DataTables settings object for the host table
     *  @param {object} [opts] Configuration options
     *  @requires jQuery 1.7+
     *  @requires DataTables 1.10.3+
     *
     *  @example
     *      $('#example').DataTable( {
     *        responsive: true
     *      } );
     *    } );
     */
    var Responsive = function (settings, opts) {
    	// Sanity check that we are using DataTables 1.10 or newer
    	if (!DataTable.versionCheck || !DataTable.versionCheck('1.10.10')) {
    		throw 'DataTables Responsive requires DataTables 1.10.10 or newer';
    	}

    	this.s = {
    		childNodeStore: {},
    		columns: [],
    		current: [],
    		dt: new DataTable.Api(settings)
    	};

    	// Check if responsive has already been initialised on this table
    	if (this.s.dt.settings()[0].responsive) {
    		return;
    	}

    	// details is an object, but for simplicity the user can give it as a string
    	// or a boolean
    	if (opts && typeof opts.details === 'string') {
    		opts.details = { type: opts.details };
    	}
    	else if (opts && opts.details === false) {
    		opts.details = { type: false };
    	}
    	else if (opts && opts.details === true) {
    		opts.details = { type: 'inline' };
    	}

    	this.c = $$3.extend(true, {}, Responsive.defaults, DataTable.defaults.responsive, opts);
    	settings.responsive = this;
    	this._constructor();
    };

    $$3.extend(Responsive.prototype, {
    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * Constructor
    	 */

    	/**
    	 * Initialise the Responsive instance
    	 *
    	 * @private
    	 */
    	_constructor: function () {
    		var that = this;
    		var dt = this.s.dt;
    		var dtPrivateSettings = dt.settings()[0];
    		var oldWindowWidth = $$3(window).innerWidth();

    		dt.settings()[0]._responsive = this;

    		// Use DataTables' throttle function to avoid processor thrashing on
    		// resize
    		$$3(window).on(
    			'resize.dtr orientationchange.dtr',
    			DataTable.util.throttle(function () {
    				// iOS has a bug whereby resize can fire when only scrolling
    				// See: http://stackoverflow.com/questions/8898412
    				var width = $$3(window).innerWidth();

    				if (width !== oldWindowWidth) {
    					that._resize();
    					oldWindowWidth = width;
    				}
    			})
    		);

    		// DataTables doesn't currently trigger an event when a row is added, so
    		// we need to hook into its private API to enforce the hidden rows when
    		// new data is added
    		dtPrivateSettings.oApi._fnCallbackReg(
    			dtPrivateSettings,
    			'aoRowCreatedCallback',
    			function (tr, data, idx) {
    				if ($$3.inArray(false, that.s.current) !== -1) {
    					$$3('>td, >th', tr).each(function (i) {
    						var idx = dt.column.index('toData', i);

    						if (that.s.current[idx] === false) {
    							$$3(this).css('display', 'none');
    						}
    					});
    				}
    			}
    		);

    		// Destroy event handler
    		dt.on('destroy.dtr', function () {
    			dt.off('.dtr');
    			$$3(dt.table().body()).off('.dtr');
    			$$3(window).off('resize.dtr orientationchange.dtr');
    			dt.cells('.dtr-control').nodes().to$().removeClass('dtr-control');

    			// Restore the columns that we've hidden
    			$$3.each(that.s.current, function (i, val) {
    				if (val === false) {
    					that._setColumnVis(i, true);
    				}
    			});
    		});

    		// Reorder the breakpoints array here in case they have been added out
    		// of order
    		this.c.breakpoints.sort(function (a, b) {
    			return a.width < b.width ? 1 : a.width > b.width ? -1 : 0;
    		});

    		this._classLogic();
    		this._resizeAuto();

    		// Details handler
    		var details = this.c.details;

    		if (details.type !== false) {
    			that._detailsInit();

    			// DataTables will trigger this event on every column it shows and
    			// hides individually
    			dt.on('column-visibility.dtr', function () {
    				// Use a small debounce to allow multiple columns to be set together
    				if (that._timer) {
    					clearTimeout(that._timer);
    				}

    				that._timer = setTimeout(function () {
    					that._timer = null;

    					that._classLogic();
    					that._resizeAuto();
    					that._resize(true);

    					that._redrawChildren();
    				}, 100);
    			});

    			// Redraw the details box on each draw which will happen if the data
    			// has changed. This is used until DataTables implements a native
    			// `updated` event for rows
    			dt.on('draw.dtr', function () {
    				that._redrawChildren();
    			});

    			$$3(dt.table().node()).addClass('dtr-' + details.type);
    		}

    		dt.on('column-reorder.dtr', function (e, settings, details) {
    			that._classLogic();
    			that._resizeAuto();
    			that._resize(true);
    		});

    		// Change in column sizes means we need to calc
    		dt.on('column-sizing.dtr', function () {
    			that._resizeAuto();
    			that._resize();
    		});

    		// DT2 let's us tell it if we are hiding columns
    		dt.on('column-calc.dt', function (e, d) {
    			var curr = that.s.current;

    			for (var i = 0; i < curr.length; i++) {
    				var idx = d.visible.indexOf(i);

    				if (curr[i] === false && idx >= 0) {
    					d.visible.splice(idx, 1);
    				}
    			}
    		});

    		// On Ajax reload we want to reopen any child rows which are displayed
    		// by responsive
    		dt.on('preXhr.dtr', function () {
    			var rowIds = [];
    			dt.rows().every(function () {
    				if (this.child.isShown()) {
    					rowIds.push(this.id(true));
    				}
    			});

    			dt.one('draw.dtr', function () {
    				that._resizeAuto();
    				that._resize();

    				dt.rows(rowIds).every(function () {
    					that._detailsDisplay(this, false);
    				});
    			});
    		});

    		dt.on('draw.dtr', function () {
    			that._controlClass();
    		}).on('init.dtr', function (e, settings, details) {
    			if (e.namespace !== 'dt') {
    				return;
    			}

    			that._resizeAuto();
    			that._resize();

    			// If columns were hidden, then DataTables needs to adjust the
    			// column sizing
    			if ($$3.inArray(false, that.s.current)) {
    				dt.columns.adjust();
    			}
    		});

    		// First pass - draw the table for the current viewport size
    		this._resize();
    	},

    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * Private methods
    	 */

    	/**
    	 * Get and store nodes from a cell - use for node moving renderers
    	 *
    	 * @param {*} dt DT instance
    	 * @param {*} row Row index
    	 * @param {*} col Column index
    	 */
    	_childNodes: function (dt, row, col) {
    		var name = row + '-' + col;

    		if (this.s.childNodeStore[name]) {
    			return this.s.childNodeStore[name];
    		}

    		// https://jsperf.com/childnodes-array-slice-vs-loop
    		var nodes = [];
    		var children = dt.cell(row, col).node().childNodes;
    		for (var i = 0, ien = children.length; i < ien; i++) {
    			nodes.push(children[i]);
    		}

    		this.s.childNodeStore[name] = nodes;

    		return nodes;
    	},

    	/**
    	 * Restore nodes from the cache to a table cell
    	 *
    	 * @param {*} dt DT instance
    	 * @param {*} row Row index
    	 * @param {*} col Column index
    	 */
    	_childNodesRestore: function (dt, row, col) {
    		var name = row + '-' + col;

    		if (!this.s.childNodeStore[name]) {
    			return;
    		}

    		var node = dt.cell(row, col).node();
    		var store = this.s.childNodeStore[name];
    		var parent = store[0].parentNode;
    		var parentChildren = parent.childNodes;
    		var a = [];

    		for (var i = 0, ien = parentChildren.length; i < ien; i++) {
    			a.push(parentChildren[i]);
    		}

    		for (var j = 0, jen = a.length; j < jen; j++) {
    			node.appendChild(a[j]);
    		}

    		this.s.childNodeStore[name] = undefined;
    	},

    	/**
    	 * Calculate the visibility for the columns in a table for a given
    	 * breakpoint. The result is pre-determined based on the class logic if
    	 * class names are used to control all columns, but the width of the table
    	 * is also used if there are columns which are to be automatically shown
    	 * and hidden.
    	 *
    	 * @param  {string} breakpoint Breakpoint name to use for the calculation
    	 * @return {array} Array of boolean values initiating the visibility of each
    	 *   column.
    	 *  @private
    	 */
    	_columnsVisiblity: function (breakpoint) {
    		var dt = this.s.dt;
    		var columns = this.s.columns;
    		var i, ien;

    		// Create an array that defines the column ordering based first on the
    		// column's priority, and secondly the column index. This allows the
    		// columns to be removed from the right if the priority matches
    		var order = columns
    			.map(function (col, idx) {
    				return {
    					columnIdx: idx,
    					priority: col.priority
    				};
    			})
    			.sort(function (a, b) {
    				if (a.priority !== b.priority) {
    					return a.priority - b.priority;
    				}
    				return a.columnIdx - b.columnIdx;
    			});

    		// Class logic - determine which columns are in this breakpoint based
    		// on the classes. If no class control (i.e. `auto`) then `-` is used
    		// to indicate this to the rest of the function
    		var display = $$3.map(columns, function (col, i) {
    			if (dt.column(i).visible() === false) {
    				return 'not-visible';
    			}
    			return col.auto && col.minWidth === null
    				? false
    				: col.auto === true
    				? '-'
    				: $$3.inArray(breakpoint, col.includeIn) !== -1;
    		});

    		// Auto column control - first pass: how much width is taken by the
    		// ones that must be included from the non-auto columns
    		var requiredWidth = 0;
    		for (i = 0, ien = display.length; i < ien; i++) {
    			if (display[i] === true) {
    				requiredWidth += columns[i].minWidth;
    			}
    		}

    		// Second pass, use up any remaining width for other columns. For
    		// scrolling tables we need to subtract the width of the scrollbar. It
    		// may not be requires which makes this sub-optimal, but it would
    		// require another full redraw to make complete use of those extra few
    		// pixels
    		var scrolling = dt.settings()[0].oScroll;
    		var bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;
    		var widthAvailable = dt.table().container().offsetWidth - bar;
    		var usedWidth = widthAvailable - requiredWidth;

    		// Control column needs to always be included. This makes it sub-
    		// optimal in terms of using the available with, but to stop layout
    		// thrashing or overflow. Also we need to account for the control column
    		// width first so we know how much width is available for the other
    		// columns, since the control column might not be the first one shown
    		for (i = 0, ien = display.length; i < ien; i++) {
    			if (columns[i].control) {
    				usedWidth -= columns[i].minWidth;
    			}
    		}

    		// Allow columns to be shown (counting by priority and then right to
    		// left) until we run out of room
    		var empty = false;
    		for (i = 0, ien = order.length; i < ien; i++) {
    			var colIdx = order[i].columnIdx;

    			if (display[colIdx] === '-' && !columns[colIdx].control && columns[colIdx].minWidth) {
    				// Once we've found a column that won't fit we don't let any
    				// others display either, or columns might disappear in the
    				// middle of the table
    				if (empty || usedWidth - columns[colIdx].minWidth < 0) {
    					empty = true;
    					display[colIdx] = false;
    				}
    				else {
    					display[colIdx] = true;
    				}

    				usedWidth -= columns[colIdx].minWidth;
    			}
    		}

    		// Determine if the 'control' column should be shown (if there is one).
    		// This is the case when there is a hidden column (that is not the
    		// control column). The two loops look inefficient here, but they are
    		// trivial and will fly through. We need to know the outcome from the
    		// first , before the action in the second can be taken
    		var showControl = false;

    		for (i = 0, ien = columns.length; i < ien; i++) {
    			if (!columns[i].control && !columns[i].never && display[i] === false) {
    				showControl = true;
    				break;
    			}
    		}

    		for (i = 0, ien = columns.length; i < ien; i++) {
    			if (columns[i].control) {
    				display[i] = showControl;
    			}

    			// Replace not visible string with false from the control column detection above
    			if (display[i] === 'not-visible') {
    				display[i] = false;
    			}
    		}

    		// Finally we need to make sure that there is at least one column that
    		// is visible
    		if ($$3.inArray(true, display) === -1) {
    			display[0] = true;
    		}

    		return display;
    	},

    	/**
    	 * Create the internal `columns` array with information about the columns
    	 * for the table. This includes determining which breakpoints the column
    	 * will appear in, based upon class names in the column, which makes up the
    	 * vast majority of this method.
    	 *
    	 * @private
    	 */
    	_classLogic: function () {
    		var that = this;
    		var breakpoints = this.c.breakpoints;
    		var dt = this.s.dt;
    		var columns = dt
    			.columns()
    			.eq(0)
    			.map(function (i) {
    				var column = this.column(i);
    				var className = column.header().className;
    				var priority = dt.settings()[0].aoColumns[i].responsivePriority;
    				var dataPriority = column.header().getAttribute('data-priority');

    				if (priority === undefined) {
    					priority =
    						dataPriority === undefined || dataPriority === null
    							? 10000
    							: dataPriority * 1;
    				}

    				return {
    					className: className,
    					includeIn: [],
    					auto: false,
    					control: false,
    					never: className.match(/\b(dtr\-)?never\b/) ? true : false,
    					priority: priority
    				};
    			});

    		// Simply add a breakpoint to `includeIn` array, ensuring that there are
    		// no duplicates
    		var add = function (colIdx, name) {
    			var includeIn = columns[colIdx].includeIn;

    			if ($$3.inArray(name, includeIn) === -1) {
    				includeIn.push(name);
    			}
    		};

    		var column = function (colIdx, name, operator, matched) {
    			var size, i, ien;

    			if (!operator) {
    				columns[colIdx].includeIn.push(name);
    			}
    			else if (operator === 'max-') {
    				// Add this breakpoint and all smaller
    				size = that._find(name).width;

    				for (i = 0, ien = breakpoints.length; i < ien; i++) {
    					if (breakpoints[i].width <= size) {
    						add(colIdx, breakpoints[i].name);
    					}
    				}
    			}
    			else if (operator === 'min-') {
    				// Add this breakpoint and all larger
    				size = that._find(name).width;

    				for (i = 0, ien = breakpoints.length; i < ien; i++) {
    					if (breakpoints[i].width >= size) {
    						add(colIdx, breakpoints[i].name);
    					}
    				}
    			}
    			else if (operator === 'not-') {
    				// Add all but this breakpoint
    				for (i = 0, ien = breakpoints.length; i < ien; i++) {
    					if (breakpoints[i].name.indexOf(matched) === -1) {
    						add(colIdx, breakpoints[i].name);
    					}
    				}
    			}
    		};

    		// Loop over each column and determine if it has a responsive control
    		// class
    		columns.each(function (col, i) {
    			var classNames = col.className.split(' ');
    			var hasClass = false;

    			// Split the class name up so multiple rules can be applied if needed
    			for (var k = 0, ken = classNames.length; k < ken; k++) {
    				var className = classNames[k].trim();

    				if (className === 'all' || className === 'dtr-all') {
    					// Include in all
    					hasClass = true;
    					col.includeIn = $$3.map(breakpoints, function (a) {
    						return a.name;
    					});
    					return;
    				}
    				else if (className === 'none' || className === 'dtr-none' || col.never) {
    					// Include in none (default) and no auto
    					hasClass = true;
    					return;
    				}
    				else if (className === 'control' || className === 'dtr-control') {
    					// Special column that is only visible, when one of the other
    					// columns is hidden. This is used for the details control
    					hasClass = true;
    					col.control = true;
    					return;
    				}

    				$$3.each(breakpoints, function (j, breakpoint) {
    					// Does this column have a class that matches this breakpoint?
    					var brokenPoint = breakpoint.name.split('-');
    					var re = new RegExp(
    						'(min\\-|max\\-|not\\-)?(' + brokenPoint[0] + ')(\\-[_a-zA-Z0-9])?'
    					);
    					var match = className.match(re);

    					if (match) {
    						hasClass = true;

    						if (match[2] === brokenPoint[0] && match[3] === '-' + brokenPoint[1]) {
    							// Class name matches breakpoint name fully
    							column(i, breakpoint.name, match[1], match[2] + match[3]);
    						}
    						else if (match[2] === brokenPoint[0] && !match[3]) {
    							// Class name matched primary breakpoint name with no qualifier
    							column(i, breakpoint.name, match[1], match[2]);
    						}
    					}
    				});
    			}

    			// If there was no control class, then automatic sizing is used
    			if (!hasClass) {
    				col.auto = true;
    			}
    		});

    		this.s.columns = columns;
    	},

    	/**
    	 * Update the cells to show the correct control class / button
    	 * @private
    	 */
    	_controlClass: function () {
    		if (this.c.details.type === 'inline') {
    			var dt = this.s.dt;
    			var columnsVis = this.s.current;
    			var firstVisible = $$3.inArray(true, columnsVis);

    			// Remove from any cells which shouldn't have it
    			dt.cells(
    				null,
    				function (idx) {
    					return idx !== firstVisible;
    				},
    				{ page: 'current' }
    			)
    				.nodes()
    				.to$()
    				.filter('.dtr-control')
    				.removeClass('dtr-control');

    			dt.cells(null, firstVisible, { page: 'current' }).nodes().to$().addClass('dtr-control');
    		}
    	},

    	/**
    	 * Show the details for the child row
    	 *
    	 * @param  {DataTables.Api} row    API instance for the row
    	 * @param  {boolean}        update Update flag
    	 * @private
    	 */
    	_detailsDisplay: function (row, update) {
    		var that = this;
    		var dt = this.s.dt;
    		var details = this.c.details;
    		var event = function (res) {
    			$$3(row.node()).toggleClass('parent', res !== false);
    			$$3(dt.table().node()).triggerHandler('responsive-display.dt', [dt, row, res, update]);
    		};

    		if (details && details.type !== false) {
    			var renderer =
    				typeof details.renderer === 'string'
    					? Responsive.renderer[details.renderer]()
    					: details.renderer;

    			var res = details.display(
    				row,
    				update,
    				function () {
    					return renderer.call(that, dt, row[0], that._detailsObj(row[0]));
    				},
    				function () {
    					event(false);
    				}
    			);

    			if (typeof res === 'boolean') {
    				event(res);
    			}
    		}
    	},

    	/**
    	 * Initialisation for the details handler
    	 *
    	 * @private
    	 */
    	_detailsInit: function () {
    		var that = this;
    		var dt = this.s.dt;
    		var details = this.c.details;

    		// The inline type always uses the first child as the target
    		if (details.type === 'inline') {
    			details.target = 'td.dtr-control, th.dtr-control';
    		}

    		// Keyboard accessibility
    		dt.on('draw.dtr', function () {
    			that._tabIndexes();
    		});
    		that._tabIndexes(); // Initial draw has already happened

    		$$3(dt.table().body()).on('keyup.dtr', 'td, th', function (e) {
    			if (e.keyCode === 13 && $$3(this).data('dtr-keyboard')) {
    				$$3(this).click();
    			}
    		});

    		// type.target can be a string jQuery selector or a column index
    		var target = details.target;
    		var selector = typeof target === 'string' ? target : 'td, th';

    		if (target !== undefined || target !== null) {
    			// Click handler to show / hide the details rows when they are available
    			$$3(dt.table().body()).on('click.dtr mousedown.dtr mouseup.dtr', selector, function (e) {
    				// If the table is not collapsed (i.e. there is no hidden columns)
    				// then take no action
    				if (!$$3(dt.table().node()).hasClass('collapsed')) {
    					return;
    				}

    				// Check that the row is actually a DataTable's controlled node
    				if ($$3.inArray($$3(this).closest('tr').get(0), dt.rows().nodes().toArray()) === -1) {
    					return;
    				}

    				// For column index, we determine if we should act or not in the
    				// handler - otherwise it is already okay
    				if (typeof target === 'number') {
    					var targetIdx = target < 0 ? dt.columns().eq(0).length + target : target;

    					if (dt.cell(this).index().column !== targetIdx) {
    						return;
    					}
    				}

    				// $().closest() includes itself in its check
    				var row = dt.row($$3(this).closest('tr'));

    				// Check event type to do an action
    				if (e.type === 'click') {
    					// The renderer is given as a function so the caller can execute it
    					// only when they need (i.e. if hiding there is no point is running
    					// the renderer)
    					that._detailsDisplay(row, false);
    				}
    				else if (e.type === 'mousedown') {
    					// For mouse users, prevent the focus ring from showing
    					$$3(this).css('outline', 'none');
    				}
    				else if (e.type === 'mouseup') {
    					// And then re-allow at the end of the click
    					$$3(this).trigger('blur').css('outline', '');
    				}
    			});
    		}
    	},

    	/**
    	 * Get the details to pass to a renderer for a row
    	 * @param  {int} rowIdx Row index
    	 * @private
    	 */
    	_detailsObj: function (rowIdx) {
    		var that = this;
    		var dt = this.s.dt;

    		return $$3.map(this.s.columns, function (col, i) {
    			// Never and control columns should not be passed to the renderer
    			if (col.never || col.control) {
    				return;
    			}

    			var dtCol = dt.settings()[0].aoColumns[i];

    			return {
    				className: dtCol.sClass,
    				columnIndex: i,
    				data: dt.cell(rowIdx, i).render(that.c.orthogonal),
    				hidden: dt.column(i).visible() && !that.s.current[i],
    				rowIndex: rowIdx,
    				title: dtCol.sTitle !== null ? dtCol.sTitle : $$3(dt.column(i).header()).text()
    			};
    		});
    	},

    	/**
    	 * Find a breakpoint object from a name
    	 *
    	 * @param  {string} name Breakpoint name to find
    	 * @return {object}      Breakpoint description object
    	 * @private
    	 */
    	_find: function (name) {
    		var breakpoints = this.c.breakpoints;

    		for (var i = 0, ien = breakpoints.length; i < ien; i++) {
    			if (breakpoints[i].name === name) {
    				return breakpoints[i];
    			}
    		}
    	},

    	/**
    	 * Re-create the contents of the child rows as the display has changed in
    	 * some way.
    	 *
    	 * @private
    	 */
    	_redrawChildren: function () {
    		var that = this;
    		var dt = this.s.dt;

    		dt.rows({ page: 'current' }).iterator('row', function (settings, idx) {
    			that._detailsDisplay(dt.row(idx), true);
    		});
    	},

    	/**
    	 * Alter the table display for a resized viewport. This involves first
    	 * determining what breakpoint the window currently is in, getting the
    	 * column visibilities to apply and then setting them.
    	 *
    	 * @param  {boolean} forceRedraw Force a redraw
    	 * @private
    	 */
    	_resize: function (forceRedraw) {
    		var that = this;
    		var dt = this.s.dt;
    		var width = $$3(window).innerWidth();
    		var breakpoints = this.c.breakpoints;
    		var breakpoint = breakpoints[0].name;
    		var columns = this.s.columns;
    		var i, ien;
    		var oldVis = this.s.current.slice();

    		// Determine what breakpoint we are currently at
    		for (i = breakpoints.length - 1; i >= 0; i--) {
    			if (width <= breakpoints[i].width) {
    				breakpoint = breakpoints[i].name;
    				break;
    			}
    		}

    		// Show the columns for that break point
    		var columnsVis = this._columnsVisiblity(breakpoint);
    		this.s.current = columnsVis;

    		// Set the class before the column visibility is changed so event
    		// listeners know what the state is. Need to determine if there are
    		// any columns that are not visible but can be shown
    		var collapsedClass = false;

    		for (i = 0, ien = columns.length; i < ien; i++) {
    			if (
    				columnsVis[i] === false &&
    				!columns[i].never &&
    				!columns[i].control &&
    				!dt.column(i).visible() === false
    			) {
    				collapsedClass = true;
    				break;
    			}
    		}

    		$$3(dt.table().node()).toggleClass('collapsed', collapsedClass);

    		var changed = false;
    		var visible = 0;

    		dt.columns()
    			.eq(0)
    			.each(function (colIdx, i) {
    				if (columnsVis[i] === true) {
    					visible++;
    				}

    				if (forceRedraw || columnsVis[i] !== oldVis[i]) {
    					changed = true;
    					that._setColumnVis(colIdx, columnsVis[i]);
    				}
    			});

    		// Always need to update the display, regardless of if it has changed or not, so nodes
    		// can be re-inserted for listHiddenNodes
    		this._redrawChildren();

    		if (changed) {
    			// Inform listeners of the change
    			$$3(dt.table().node()).trigger('responsive-resize.dt', [dt, this.s.current]);

    			// If no records, update the "No records" display element
    			if (dt.page.info().recordsDisplay === 0) {
    				$$3('td', dt.table().body()).eq(0).attr('colspan', visible);
    			}
    		}

    		that._controlClass();
    	},

    	/**
    	 * Determine the width of each column in the table so the auto column hiding
    	 * has that information to work with. This method is never going to be 100%
    	 * perfect since column widths can change slightly per page, but without
    	 * seriously compromising performance this is quite effective.
    	 *
    	 * @private
    	 */
    	_resizeAuto: function () {
    		var dt = this.s.dt;
    		var columns = this.s.columns;
    		var that = this;

    		// Are we allowed to do auto sizing?
    		if (!this.c.auto) {
    			return;
    		}

    		// Are there any columns that actually need auto-sizing, or do they all
    		// have classes defined
    		if (
    			$$3.inArray(
    				true,
    				$$3.map(columns, function (c) {
    					return c.auto;
    				})
    			) === -1
    		) {
    			return;
    		}

    		// Need to restore all children. They will be reinstated by a re-render
    		if (!$$3.isEmptyObject(this.s.childNodeStore)) {
    			$$3.each(this.s.childNodeStore, function (key) {
    				var idx = key.split('-');

    				that._childNodesRestore(dt, idx[0] * 1, idx[1] * 1);
    			});
    		}

    		// Clone the table with the current data in it
    		dt.table().node().offsetWidth;
    		dt.columns;
    		var clonedTable = dt.table().node().cloneNode(false);
    		var clonedHeader = $$3(dt.table().header().cloneNode(false)).appendTo(clonedTable);
    		var clonedBody = $$3(dt.table().body()).clone(false, false).empty().appendTo(clonedTable); // use jQuery because of IE8

    		clonedTable.style.width = 'auto';

    		// Header
    		var headerCells = dt
    			.columns()
    			.header()
    			.filter(function (idx) {
    				return dt.column(idx).visible();
    			})
    			.to$()
    			.clone(false)
    			.css('display', 'table-cell')
    			.css('width', 'auto')
    			.css('min-width', 0);

    		// Body rows - we don't need to take account of DataTables' column
    		// visibility since we implement our own here (hence the `display` set)
    		$$3(clonedBody)
    			.append($$3(dt.rows({ page: 'current' }).nodes()).clone(false))
    			.find('th, td')
    			.css('display', '');

    		// Footer
    		var footer = dt.table().footer();
    		if (footer) {
    			var clonedFooter = $$3(footer.cloneNode(false)).appendTo(clonedTable);
    			var footerCells = dt
    				.columns()
    				.footer()
    				.filter(function (idx) {
    					return dt.column(idx).visible();
    				})
    				.to$()
    				.clone(false)
    				.css('display', 'table-cell');

    			$$3('<tr/>').append(footerCells).appendTo(clonedFooter);
    		}

    		$$3('<tr/>').append(headerCells).appendTo(clonedHeader);

    		// In the inline case extra padding is applied to the first column to
    		// give space for the show / hide icon. We need to use this in the
    		// calculation
    		if (this.c.details.type === 'inline') {
    			$$3(clonedTable).addClass('dtr-inline collapsed');
    		}

    		// It is unsafe to insert elements with the same name into the DOM
    		// multiple times. For example, cloning and inserting a checked radio
    		// clears the chcecked state of the original radio.
    		$$3(clonedTable).find('[name]').removeAttr('name');

    		// A position absolute table would take the table out of the flow of
    		// our container element, bypassing the height and width (Scroller)
    		$$3(clonedTable).css('position', 'relative');

    		var inserted = $$3('<div/>')
    			.css({
    				width: 1,
    				height: 1,
    				overflow: 'hidden',
    				clear: 'both'
    			})
    			.append(clonedTable);

    		inserted.insertBefore(dt.table().node());

    		// The cloned header now contains the smallest that each column can be
    		headerCells.each(function (i) {
    			var idx = dt.column.index('fromVisible', i);
    			columns[idx].minWidth = this.offsetWidth || 0;
    		});

    		inserted.remove();
    	},

    	/**
    	 * Get the state of the current hidden columns - controlled by Responsive only
    	 */
    	_responsiveOnlyHidden: function () {
    		var dt = this.s.dt;

    		return $$3.map(this.s.current, function (v, i) {
    			// If the column is hidden by DataTables then it can't be hidden by
    			// Responsive!
    			if (dt.column(i).visible() === false) {
    				return true;
    			}
    			return v;
    		});
    	},

    	/**
    	 * Set a column's visibility.
    	 *
    	 * We don't use DataTables' column visibility controls in order to ensure
    	 * that column visibility can Responsive can no-exist. Since only IE8+ is
    	 * supported (and all evergreen browsers of course) the control of the
    	 * display attribute works well.
    	 *
    	 * @param {integer} col      Column index
    	 * @param {boolean} showHide Show or hide (true or false)
    	 * @private
    	 */
    	_setColumnVis: function (col, showHide) {
    		var that = this;
    		var dt = this.s.dt;
    		var display = showHide ? '' : 'none'; // empty string will remove the attr

    		$$3(dt.column(col).header()).css('display', display).toggleClass('dtr-hidden', !showHide);

    		$$3(dt.column(col).footer()).css('display', display).toggleClass('dtr-hidden', !showHide);

    		dt.column(col).nodes().to$().css('display', display).toggleClass('dtr-hidden', !showHide);

    		// If the are child nodes stored, we might need to reinsert them
    		if (!$$3.isEmptyObject(this.s.childNodeStore)) {
    			dt.cells(null, col)
    				.indexes()
    				.each(function (idx) {
    					that._childNodesRestore(dt, idx.row, idx.column);
    				});
    		}
    	},

    	/**
    	 * Update the cell tab indexes for keyboard accessibility. This is called on
    	 * every table draw - that is potentially inefficient, but also the least
    	 * complex option given that column visibility can change on the fly. Its a
    	 * shame user-focus was removed from CSS 3 UI, as it would have solved this
    	 * issue with a single CSS statement.
    	 *
    	 * @private
    	 */
    	_tabIndexes: function () {
    		var dt = this.s.dt;
    		var cells = dt.cells({ page: 'current' }).nodes().to$();
    		var ctx = dt.settings()[0];
    		var target = this.c.details.target;

    		cells.filter('[data-dtr-keyboard]').removeData('[data-dtr-keyboard]');

    		if (typeof target === 'number') {
    			dt.cells(null, target, { page: 'current' })
    				.nodes()
    				.to$()
    				.attr('tabIndex', ctx.iTabIndex)
    				.data('dtr-keyboard', 1);
    		}
    		else {
    			// This is a bit of a hack - we need to limit the selected nodes to just
    			// those of this table
    			if (target === 'td:first-child, th:first-child') {
    				target = '>td:first-child, >th:first-child';
    			}

    			$$3(target, dt.rows({ page: 'current' }).nodes())
    				.attr('tabIndex', ctx.iTabIndex)
    				.data('dtr-keyboard', 1);
    		}
    	}
    });

    /**
     * List of default breakpoints. Each item in the array is an object with two
     * properties:
     *
     * * `name` - the breakpoint name.
     * * `width` - the breakpoint width
     *
     * @name Responsive.breakpoints
     * @static
     */
    Responsive.breakpoints = [
    	{ name: 'desktop', width: Infinity },
    	{ name: 'tablet-l', width: 1024 },
    	{ name: 'tablet-p', width: 768 },
    	{ name: 'mobile-l', width: 480 },
    	{ name: 'mobile-p', width: 320 }
    ];

    /**
     * Display methods - functions which define how the hidden data should be shown
     * in the table.
     *
     * @namespace
     * @name Responsive.defaults
     * @static
     */
    Responsive.display = {
    	childRow: function (row, update, render) {
    		if (update) {
    			if ($$3(row.node()).hasClass('parent')) {
    				row.child(render(), 'child').show();

    				return true;
    			}
    		}
    		else {
    			if (!row.child.isShown()) {
    				row.child(render(), 'child').show();

    				return true;
    			}
    			else {
    				row.child(false);

    				return false;
    			}
    		}
    	},

    	childRowImmediate: function (row, update, render) {
    		if ((!update && row.child.isShown()) || !row.responsive.hasHidden()) {
    			// User interaction and the row is show, or nothing to show
    			row.child(false);

    			return false;
    		}
    		else {
    			// Display
    			row.child(render(), 'child').show();

    			return true;
    		}
    	},

    	// This is a wrapper so the modal options for Bootstrap and jQuery UI can
    	// have options passed into them. This specific one doesn't need to be a
    	// function but it is for consistency in the `modal` name
    	modal: function (options) {
    		return function (row, update, render, closeCallback) {
    			if (!update) {
    				// Show a modal
    				var close = function () {
    					modal.remove(); // will tidy events for us
    					$$3(document).off('keypress.dtr');
    					$$3(row.node()).removeClass('parent');

    					closeCallback();
    				};

    				var modal = $$3('<div class="dtr-modal"/>')
    					.append(
    						$$3('<div class="dtr-modal-display"/>')
    							.append(
    								$$3('<div class="dtr-modal-content"/>')
    									.data('dtr-row-idx', row.index())
    									.append(render())
    							)
    							.append(
    								$$3('<div class="dtr-modal-close">&times;</div>').click(function () {
    									close();
    								})
    							)
    					)
    					.append(
    						$$3('<div class="dtr-modal-background"/>').click(function () {
    							close();
    						})
    					)
    					.appendTo('body');

    				$$3(row.node()).addClass('parent');

    				$$3(document).on('keyup.dtr', function (e) {
    					if (e.keyCode === 27) {
    						e.stopPropagation();

    						close();
    					}
    				});
    			}
    			else {
    				var modal = $$3('div.dtr-modal-content');

    				if (modal.length && row.index() === modal.data('dtr-row-idx')) {
    					modal.empty().append(render());
    				}
    				else {
    					// Modal not shown, nothing to update
    					return null;
    				}
    			}

    			if (options && options.header) {
    				$$3('div.dtr-modal-content').prepend('<h2>' + options.header(row) + '</h2>');
    			}

    			return true;
    		};
    	}
    };

    /**
     * Display methods - functions which define how the hidden data should be shown
     * in the table.
     *
     * @namespace
     * @name Responsive.defaults
     * @static
     */
    Responsive.renderer = {
    	listHiddenNodes: function () {
    		return function (api, rowIdx, columns) {
    			var that = this;
    			var ul = $$3('<ul data-dtr-index="' + rowIdx + '" class="dtr-details"/>');
    			var found = false;

    			$$3.each(columns, function (i, col) {
    				if (col.hidden) {
    					var klass = col.className ? 'class="' + col.className + '"' : '';

    					$$3(
    						'<li ' +
    							klass +
    							' data-dtr-index="' +
    							col.columnIndex +
    							'" data-dt-row="' +
    							col.rowIndex +
    							'" data-dt-column="' +
    							col.columnIndex +
    							'">' +
    							'<span class="dtr-title">' +
    							col.title +
    							'</span> ' +
    							'</li>'
    					)
    						.append(
    							$$3('<span class="dtr-data"/>').append(
    								that._childNodes(api, col.rowIndex, col.columnIndex)
    							)
    						) // api.cell( col.rowIndex, col.columnIndex ).node().childNodes ) )
    						.appendTo(ul);

    					found = true;
    				}
    			});

    			return found ? ul : false;
    		};
    	},

    	listHidden: function () {
    		return function (api, rowIdx, columns) {
    			var data = $$3.map(columns, function (col) {
    				var klass = col.className ? 'class="' + col.className + '"' : '';

    				return col.hidden
    					? '<li ' +
    							klass +
    							' data-dtr-index="' +
    							col.columnIndex +
    							'" data-dt-row="' +
    							col.rowIndex +
    							'" data-dt-column="' +
    							col.columnIndex +
    							'">' +
    							'<span class="dtr-title">' +
    							col.title +
    							'</span> ' +
    							'<span class="dtr-data">' +
    							col.data +
    							'</span>' +
    							'</li>'
    					: '';
    			}).join('');

    			return data
    				? $$3('<ul data-dtr-index="' + rowIdx + '" class="dtr-details"/>').append(data)
    				: false;
    		};
    	},

    	tableAll: function (options) {
    		options = $$3.extend(
    			{
    				tableClass: ''
    			},
    			options
    		);

    		return function (api, rowIdx, columns) {
    			var data = $$3.map(columns, function (col) {
    				var klass = col.className ? 'class="' + col.className + '"' : '';

    				return (
    					'<tr ' +
    					klass +
    					' data-dt-row="' +
    					col.rowIndex +
    					'" data-dt-column="' +
    					col.columnIndex +
    					'">' +
    					'<td>' +
    					col.title +
    					':' +
    					'</td> ' +
    					'<td>' +
    					col.data +
    					'</td>' +
    					'</tr>'
    				);
    			}).join('');

    			return $$3('<table class="' + options.tableClass + ' dtr-details" width="100%"/>').append(
    				data
    			);
    		};
    	}
    };

    /**
     * Responsive default settings for initialisation
     *
     * @namespace
     * @name Responsive.defaults
     * @static
     */
    Responsive.defaults = {
    	/**
    	 * List of breakpoints for the instance. Note that this means that each
    	 * instance can have its own breakpoints. Additionally, the breakpoints
    	 * cannot be changed once an instance has been creased.
    	 *
    	 * @type {Array}
    	 * @default Takes the value of `Responsive.breakpoints`
    	 */
    	breakpoints: Responsive.breakpoints,

    	/**
    	 * Enable / disable auto hiding calculations. It can help to increase
    	 * performance slightly if you disable this option, but all columns would
    	 * need to have breakpoint classes assigned to them
    	 *
    	 * @type {Boolean}
    	 * @default  `true`
    	 */
    	auto: true,

    	/**
    	 * Details control. If given as a string value, the `type` property of the
    	 * default object is set to that value, and the defaults used for the rest
    	 * of the object - this is for ease of implementation.
    	 *
    	 * The object consists of the following properties:
    	 *
    	 * * `display` - A function that is used to show and hide the hidden details
    	 * * `renderer` - function that is called for display of the child row data.
    	 *   The default function will show the data from the hidden columns
    	 * * `target` - Used as the selector for what objects to attach the child
    	 *   open / close to
    	 * * `type` - `false` to disable the details display, `inline` or `column`
    	 *   for the two control types
    	 *
    	 * @type {Object|string}
    	 */
    	details: {
    		display: Responsive.display.childRow,

    		renderer: Responsive.renderer.listHidden(),

    		target: 0,

    		type: 'inline'
    	},

    	/**
    	 * Orthogonal data request option. This is used to define the data type
    	 * requested when Responsive gets the data to show in the child row.
    	 *
    	 * @type {String}
    	 */
    	orthogonal: 'display'
    };

    /*
     * API
     */
    var Api$1 = $$3.fn.dataTable.Api;

    // Doesn't do anything - work around for a bug in DT... Not documented
    Api$1.register('responsive()', function () {
    	return this;
    });

    Api$1.register('responsive.index()', function (li) {
    	li = $$3(li);

    	return {
    		column: li.data('dtr-index'),
    		row: li.parent().data('dtr-index')
    	};
    });

    Api$1.register('responsive.rebuild()', function () {
    	return this.iterator('table', function (ctx) {
    		if (ctx._responsive) {
    			ctx._responsive._classLogic();
    		}
    	});
    });

    Api$1.register('responsive.recalc()', function () {
    	return this.iterator('table', function (ctx) {
    		if (ctx._responsive) {
    			ctx._responsive._resizeAuto();
    			ctx._responsive._resize();
    		}
    	});
    });

    Api$1.register('responsive.hasHidden()', function () {
    	var ctx = this.context[0];

    	return ctx._responsive
    		? $$3.inArray(false, ctx._responsive._responsiveOnlyHidden()) !== -1
    		: false;
    });

    Api$1.registerPlural('columns().responsiveHidden()', 'column().responsiveHidden()', function () {
    	return this.iterator(
    		'column',
    		function (settings, column) {
    			return settings._responsive
    				? settings._responsive._responsiveOnlyHidden()[column]
    				: false;
    		},
    		1
    	);
    });

    /**
     * Version information
     *
     * @name Responsive.version
     * @static
     */
    Responsive.version = '2.5.0';

    $$3.fn.dataTable.Responsive = Responsive;
    $$3.fn.DataTable.Responsive = Responsive;

    // Attach a listener to the document which listens for DataTables initialisation
    // events so we can automatically initialise
    $$3(document).on('preInit.dt.dtr', function (e, settings, json) {
    	if (e.namespace !== 'dt') {
    		return;
    	}

    	if (
    		$$3(settings.nTable).hasClass('responsive') ||
    		$$3(settings.nTable).hasClass('dt-responsive') ||
    		settings.oInit.responsive ||
    		DataTable.defaults.responsive
    	) {
    		var init = settings.oInit.responsive;

    		if (init !== false) {
    			new Responsive(settings, $$3.isPlainObject(init) ? init : {});
    		}
    	}
    });

    /*! Scroller 2.2.0
     * © SpryMedia Ltd - datatables.net/license
     */


    // Allow reassignment of the $ variable
    let $$2 = j;


    /**
     * @summary     Scroller
     * @description Virtual rendering for DataTables
     * @version     2.2.0
     * @author      SpryMedia Ltd (www.sprymedia.co.uk)
     * @contact     www.sprymedia.co.uk/contact
     * @copyright   SpryMedia Ltd.
     *
     * This source file is free software, available under the following license:
     *   MIT license - http://datatables.net/license/mit
     *
     * This source file is distributed in the hope that it will be useful, but
     * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
     * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
     *
     * For details please refer to: http://www.datatables.net
     */

    /**
     * Scroller is a virtual rendering plug-in for DataTables which allows large
     * datasets to be drawn on screen every quickly. What the virtual rendering means
     * is that only the visible portion of the table (and a bit to either side to make
     * the scrolling smooth) is drawn, while the scrolling container gives the
     * visual impression that the whole table is visible. This is done by making use
     * of the pagination abilities of DataTables and moving the table around in the
     * scrolling container DataTables adds to the page. The scrolling container is
     * forced to the height it would be for the full table display using an extra
     * element.
     *
     * Note that rows in the table MUST all be the same height. Information in a cell
     * which expands on to multiple lines will cause some odd behaviour in the scrolling.
     *
     * Scroller is initialised by simply including the letter 'S' in the sDom for the
     * table you want to have this feature enabled on. Note that the 'S' must come
     * AFTER the 't' parameter in `dom`.
     *
     * Key features include:
     *   <ul class="limit_length">
     *     <li>Speed! The aim of Scroller for DataTables is to make rendering large data sets fast</li>
     *     <li>Full compatibility with deferred rendering in DataTables for maximum speed</li>
     *     <li>Display millions of rows</li>
     *     <li>Integration with state saving in DataTables (scrolling position is saved)</li>
     *     <li>Easy to use</li>
     *   </ul>
     *
     *  @class
     *  @constructor
     *  @global
     *  @param {object} dt DataTables settings object or API instance
     *  @param {object} [opts={}] Configuration object for Scroller. Options
     *    are defined by {@link Scroller.defaults}
     *
     *  @requires jQuery 1.7+
     *  @requires DataTables 1.10.0+
     *
     *  @example
     *    $(document).ready(function() {
     *        $('#example').DataTable( {
     *            "scrollY": "200px",
     *            "ajax": "media/dataset/large.txt",
     *            "scroller": true,
     *            "deferRender": true
     *        } );
     *    } );
     */
    var Scroller = function (dt, opts) {
    	/* Sanity check - you just know it will happen */
    	if (!(this instanceof Scroller)) {
    		alert("Scroller warning: Scroller must be initialised with the 'new' keyword.");
    		return;
    	}

    	if (opts === undefined) {
    		opts = {};
    	}

    	var dtApi = $$2.fn.dataTable.Api(dt);

    	/**
    	 * Settings object which contains customisable information for the Scroller instance
    	 * @namespace
    	 * @private
    	 * @extends Scroller.defaults
    	 */
    	this.s = {
    		/**
    		 * DataTables settings object
    		 *  @type     object
    		 *  @default  Passed in as first parameter to constructor
    		 */
    		dt: dtApi.settings()[0],

    		/**
    		 * DataTables API instance
    		 *  @type     DataTable.Api
    		 */
    		dtApi: dtApi,

    		/**
    		 * Pixel location of the top of the drawn table in the viewport
    		 *  @type     int
    		 *  @default  0
    		 */
    		tableTop: 0,

    		/**
    		 * Pixel location of the bottom of the drawn table in the viewport
    		 *  @type     int
    		 *  @default  0
    		 */
    		tableBottom: 0,

    		/**
    		 * Pixel location of the boundary for when the next data set should be loaded and drawn
    		 * when scrolling up the way.
    		 *  @type     int
    		 *  @default  0
    		 *  @private
    		 */
    		redrawTop: 0,

    		/**
    		 * Pixel location of the boundary for when the next data set should be loaded and drawn
    		 * when scrolling down the way. Note that this is actually calculated as the offset from
    		 * the top.
    		 *  @type     int
    		 *  @default  0
    		 *  @private
    		 */
    		redrawBottom: 0,

    		/**
    		 * Auto row height or not indicator
    		 *  @type     bool
    		 *  @default  0
    		 */
    		autoHeight: true,

    		/**
    		 * Number of rows calculated as visible in the visible viewport
    		 *  @type     int
    		 *  @default  0
    		 */
    		viewportRows: 0,

    		/**
    		 * setTimeout reference for state saving, used when state saving is enabled in the DataTable
    		 * and when the user scrolls the viewport in order to stop the cookie set taking too much
    		 * CPU!
    		 *  @type     int
    		 *  @default  0
    		 */
    		stateTO: null,

    		stateSaveThrottle: function () {},

    		/**
    		 * setTimeout reference for the redraw, used when server-side processing is enabled in the
    		 * DataTables in order to prevent DoSing the server
    		 *  @type     int
    		 *  @default  null
    		 */
    		drawTO: null,

    		heights: {
    			jump: null,
    			page: null,
    			virtual: null,
    			scroll: null,

    			/**
    			 * Height of rows in the table
    			 *  @type     int
    			 *  @default  0
    			 */
    			row: null,

    			/**
    			 * Pixel height of the viewport
    			 *  @type     int
    			 *  @default  0
    			 */
    			viewport: null,
    			labelHeight: 0,
    			xbar: 0
    		},

    		topRowFloat: 0,
    		scrollDrawDiff: null,
    		loaderVisible: false,
    		forceReposition: false,
    		baseRowTop: 0,
    		baseScrollTop: 0,
    		mousedown: false,
    		lastScrollTop: 0
    	};

    	// @todo The defaults should extend a `c` property and the internal settings
    	// only held in the `s` property. At the moment they are mixed
    	this.s = $$2.extend(this.s, Scroller.oDefaults, opts);

    	// Workaround for row height being read from height object (see above comment)
    	this.s.heights.row = this.s.rowHeight;

    	/**
    	 * DOM elements used by the class instance
    	 * @private
    	 * @namespace
    	 *
    	 */
    	this.dom = {
    		force: document.createElement('div'),
    		label: $$2('<div class="dts_label">0</div>'),
    		scroller: null,
    		table: null,
    		loader: null
    	};

    	// Attach the instance to the DataTables instance so it can be accessed in
    	// future. Don't initialise Scroller twice on the same table
    	if (this.s.dt.oScroller) {
    		return;
    	}

    	this.s.dt.oScroller = this;

    	/* Let's do it */
    	this.construct();
    };

    $$2.extend(Scroller.prototype, {
    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * Public methods - to be exposed via the DataTables API
    	 */

    	/**
    	 * Calculate and store information about how many rows are to be displayed
    	 * in the scrolling viewport, based on current dimensions in the browser's
    	 * rendering. This can be particularly useful if the table is initially
    	 * drawn in a hidden element - for example in a tab.
    	 *  @param {bool} [redraw=true] Redraw the table automatically after the recalculation, with
    	 *    the new dimensions forming the basis for the draw.
    	 *  @returns {void}
    	 */
    	measure: function (redraw) {
    		if (this.s.autoHeight) {
    			this._calcRowHeight();
    		}

    		var heights = this.s.heights;

    		if (heights.row) {
    			heights.viewport = this._parseHeight($$2(this.dom.scroller).css('max-height'));

    			this.s.viewportRows = parseInt(heights.viewport / heights.row, 10) + 1;
    			this.s.dt._iDisplayLength = this.s.viewportRows * this.s.displayBuffer;
    		}

    		var label = this.dom.label.outerHeight();

    		heights.xbar = this.dom.scroller.offsetHeight - this.dom.scroller.clientHeight;
    		heights.labelHeight = label;

    		if (redraw === undefined || redraw) {
    			this.s.dt.oInstance.fnDraw(false);
    		}
    	},

    	/**
    	 * Get information about current displayed record range. This corresponds to
    	 * the information usually displayed in the "Info" block of the table.
    	 *
    	 * @returns {object} info as an object:
    	 *  {
    	 *      start: {int}, // the 0-indexed record at the top of the viewport
    	 *      end:   {int}, // the 0-indexed record at the bottom of the viewport
    	 *  }
    	 */
    	pageInfo: function () {
    		var dt = this.s.dt,
    			iScrollTop = this.dom.scroller.scrollTop,
    			iTotal = dt.fnRecordsDisplay(),
    			iPossibleEnd = Math.ceil(
    				this.pixelsToRow(iScrollTop + this.s.heights.viewport, false, this.s.ani)
    			);

    		return {
    			start: Math.floor(this.pixelsToRow(iScrollTop, false, this.s.ani)),
    			end: iTotal < iPossibleEnd ? iTotal - 1 : iPossibleEnd - 1
    		};
    	},

    	/**
    	 * Calculate the row number that will be found at the given pixel position
    	 * (y-scroll).
    	 *
    	 * Please note that when the height of the full table exceeds 1 million
    	 * pixels, Scroller switches into a non-linear mode for the scrollbar to fit
    	 * all of the records into a finite area, but this function returns a linear
    	 * value (relative to the last non-linear positioning).
    	 *  @param {int} pixels Offset from top to calculate the row number of
    	 *  @param {int} [intParse=true] If an integer value should be returned
    	 *  @param {int} [virtual=false] Perform the calculations in the virtual domain
    	 *  @returns {int} Row index
    	 */
    	pixelsToRow: function (pixels, intParse, virtual) {
    		var diff = pixels - this.s.baseScrollTop;
    		var row = virtual
    			? (this._domain('physicalToVirtual', this.s.baseScrollTop) + diff) / this.s.heights.row
    			: diff / this.s.heights.row + this.s.baseRowTop;

    		return intParse || intParse === undefined ? parseInt(row, 10) : row;
    	},

    	/**
    	 * Calculate the pixel position from the top of the scrolling container for
    	 * a given row
    	 *  @param {int} iRow Row number to calculate the position of
    	 *  @returns {int} Pixels
    	 */
    	rowToPixels: function (rowIdx, intParse, virtual) {
    		var pixels;
    		var diff = rowIdx - this.s.baseRowTop;

    		if (virtual) {
    			pixels = this._domain('virtualToPhysical', this.s.baseScrollTop);
    			pixels += diff * this.s.heights.row;
    		}
    		else {
    			pixels = this.s.baseScrollTop;
    			pixels += diff * this.s.heights.row;
    		}

    		return intParse || intParse === undefined ? parseInt(pixels, 10) : pixels;
    	},

    	/**
    	 * Calculate the row number that will be found at the given pixel position (y-scroll)
    	 *  @param {int} row Row index to scroll to
    	 *  @param {bool} [animate=true] Animate the transition or not
    	 *  @returns {void}
    	 */
    	scrollToRow: function (row, animate) {
    		var that = this;
    		var ani = false;
    		var px = this.rowToPixels(row);

    		// We need to know if the table will redraw or not before doing the
    		// scroll. If it will not redraw, then we need to use the currently
    		// displayed table, and scroll with the physical pixels. Otherwise, we
    		// need to calculate the table's new position from the virtual
    		// transform.
    		var preRows = ((this.s.displayBuffer - 1) / 2) * this.s.viewportRows;
    		var drawRow = row - preRows;
    		if (drawRow < 0) {
    			drawRow = 0;
    		}

    		if (
    			(px > this.s.redrawBottom || px < this.s.redrawTop) &&
    			this.s.dt._iDisplayStart !== drawRow
    		) {
    			ani = true;
    			px = this._domain('virtualToPhysical', row * this.s.heights.row);

    			// If we need records outside the current draw region, but the new
    			// scrolling position is inside that (due to the non-linear nature
    			// for larger numbers of records), we need to force position update.
    			if (this.s.redrawTop < px && px < this.s.redrawBottom) {
    				this.s.forceReposition = true;
    				animate = false;
    			}
    		}

    		if (animate === undefined || animate) {
    			this.s.ani = ani;
    			$$2(this.dom.scroller).animate(
    				{
    					scrollTop: px
    				},
    				function () {
    					// This needs to happen after the animation has completed and
    					// the final scroll event fired
    					setTimeout(function () {
    						that.s.ani = false;
    					}, 250);
    				}
    			);
    		}
    		else {
    			$$2(this.dom.scroller).scrollTop(px);
    		}
    	},

    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * Constructor
    	 */

    	/**
    	 * Initialisation for Scroller
    	 *  @returns {void}
    	 *  @private
    	 */
    	construct: function () {
    		var that = this;
    		var dt = this.s.dtApi;

    		/* Sanity check */
    		if (!this.s.dt.oFeatures.bPaginate) {
    			this.s.dt.oApi._fnLog(this.s.dt, 0, 'Pagination must be enabled for Scroller');
    			return;
    		}

    		/* Insert a div element that we can use to force the DT scrolling container to
    		 * the height that would be required if the whole table was being displayed
    		 */
    		this.dom.force.style.position = 'relative';
    		this.dom.force.style.top = '0px';
    		this.dom.force.style.left = '0px';
    		this.dom.force.style.width = '1px';

    		this.dom.scroller = $$2('div.' + this.s.dt.oClasses.sScrollBody, this.s.dt.nTableWrapper)[0];
    		this.dom.scroller.appendChild(this.dom.force);
    		this.dom.scroller.style.position = 'relative';

    		this.dom.table = $$2('>table', this.dom.scroller)[0];
    		this.dom.table.style.position = 'absolute';
    		this.dom.table.style.top = '0px';
    		this.dom.table.style.left = '0px';

    		// Add class to 'announce' that we are a Scroller table
    		$$2(dt.table().container()).addClass('dts DTS');

    		// Add a 'loading' indicator
    		if (this.s.loadingIndicator) {
    			this.dom.loader = $$2(
    				'<div class="dataTables_processing dts_loading">' +
    					this.s.dt.oLanguage.sLoadingRecords +
    					'</div>'
    			).css('display', 'none');

    			$$2(this.dom.scroller.parentNode).css('position', 'relative').append(this.dom.loader);
    		}

    		this.dom.label.appendTo(this.dom.scroller);

    		/* Initial size calculations */
    		if (this.s.heights.row && this.s.heights.row != 'auto') {
    			this.s.autoHeight = false;
    		}

    		// Scrolling callback to see if a page change is needed
    		this.s.ingnoreScroll = true;
    		$$2(this.dom.scroller).on('scroll.dt-scroller', function (e) {
    			that._scroll.call(that);
    		});

    		// In iOS we catch the touchstart event in case the user tries to scroll
    		// while the display is already scrolling
    		$$2(this.dom.scroller).on('touchstart.dt-scroller', function () {
    			that._scroll.call(that);
    		});

    		$$2(this.dom.scroller)
    			.on('mousedown.dt-scroller', function () {
    				that.s.mousedown = true;
    			})
    			.on('mouseup.dt-scroller', function () {
    				that.s.labelVisible = false;
    				that.s.mousedown = false;
    				that.dom.label.css('display', 'none');
    			});

    		// On resize, update the information element, since the number of rows shown might change
    		$$2(window).on('resize.dt-scroller', function () {
    			that.measure(false);
    			that._info();
    		});

    		// Add a state saving parameter to the DT state saving so we can restore the exact
    		// position of the scrolling.
    		var initialStateSave = true;
    		var loadedState = dt.state.loaded();

    		dt.on('stateSaveParams.scroller', function (e, settings, data) {
    			if (initialStateSave && loadedState) {
    				data.scroller = loadedState.scroller;
    				initialStateSave = false;

    				if (data.scroller) {
    					that.s.lastScrollTop = data.scroller.scrollTop;
    				}
    			}
    			else {
    				// Need to used the saved position on init
    				data.scroller = {
    					topRow: that.s.topRowFloat,
    					baseScrollTop: that.s.baseScrollTop,
    					baseRowTop: that.s.baseRowTop,
    					scrollTop: that.s.lastScrollTop
    				};
    			}
    		});

    		dt.on('stateLoadParams.scroller', function (e, settings, data) {
    			if (data.scroller !== undefined) {
    				that.scrollToRow(data.scroller.topRow);
    			}
    		});

    		if (loadedState && loadedState.scroller) {
    			this.s.topRowFloat = loadedState.scroller.topRow;
    			this.s.baseScrollTop = loadedState.scroller.baseScrollTop;
    			this.s.baseRowTop = loadedState.scroller.baseRowTop;
    		}

    		this.measure(false);

    		that.s.stateSaveThrottle = that.s.dt.oApi._fnThrottle(function () {
    			that.s.dtApi.state.save();
    		}, 500);

    		dt.on('init.scroller', function () {
    			that.measure(false);

    			// Setting to `jump` will instruct _draw to calculate the scroll top
    			// position
    			that.s.scrollType = 'jump';
    			that._draw();

    			// Update the scroller when the DataTable is redrawn
    			dt.on('draw.scroller', function () {
    				that._draw();
    			});
    		});

    		// Set height before the draw happens, allowing everything else to update
    		// on draw complete without worry for roder.
    		dt.on('preDraw.dt.scroller', function () {
    			that._scrollForce();
    		});

    		// Destructor
    		dt.on('destroy.scroller', function () {
    			$$2(window).off('resize.dt-scroller');
    			$$2(that.dom.scroller).off('.dt-scroller');
    			$$2(that.s.dt.nTable).off('.scroller');

    			$$2(that.s.dt.nTableWrapper).removeClass('DTS');
    			$$2('div.DTS_Loading', that.dom.scroller.parentNode).remove();

    			that.dom.table.style.position = '';
    			that.dom.table.style.top = '';
    			that.dom.table.style.left = '';
    		});
    	},

    	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    	 * Private methods
    	 */

    	/**
    	 * Automatic calculation of table row height. This is just a little tricky here as using
    	 * initialisation DataTables has tale the table out of the document, so we need to create
    	 * a new table and insert it into the document, calculate the row height and then whip the
    	 * table out.
    	 *  @returns {void}
    	 *  @private
    	 */
    	_calcRowHeight: function () {
    		var dt = this.s.dt;
    		var origTable = dt.nTable;
    		var nTable = origTable.cloneNode(false);
    		var tbody = $$2('<tbody/>').appendTo(nTable);
    		var container = $$2(
    			'<div class="' +
    				dt.oClasses.sWrapper +
    				' DTS">' +
    				'<div class="' +
    				dt.oClasses.sScrollWrapper +
    				'">' +
    				'<div class="' +
    				dt.oClasses.sScrollBody +
    				'"></div>' +
    				'</div>' +
    				'</div>'
    		);

    		// Want 3 rows in the sizing table so :first-child and :last-child
    		// CSS styles don't come into play - take the size of the middle row
    		$$2('tbody tr:lt(4)', origTable).clone().appendTo(tbody);
    		var rowsCount = $$2('tr', tbody).length;

    		if (rowsCount === 1) {
    			tbody.prepend('<tr><td>&#160;</td></tr>');
    			tbody.append('<tr><td>&#160;</td></tr>');
    		}
    		else {
    			for (; rowsCount < 3; rowsCount++) {
    				tbody.append('<tr><td>&#160;</td></tr>');
    			}
    		}

    		$$2('div.' + dt.oClasses.sScrollBody, container).append(nTable);

    		// If initialised using `dom`, use the holding element as the insert point
    		var insertEl = this.s.dt.nHolding || origTable.parentNode;

    		if (!$$2(insertEl).is(':visible')) {
    			insertEl = 'body';
    		}

    		// Remove form element links as they might select over others (particularly radio and checkboxes)
    		container.find('input').removeAttr('name');

    		container.appendTo(insertEl);
    		this.s.heights.row = $$2('tr', tbody).eq(1).outerHeight();

    		container.remove();
    	},

    	/**
    	 * Draw callback function which is fired when the DataTable is redrawn. The main function of
    	 * this method is to position the drawn table correctly the scrolling container for the rows
    	 * that is displays as a result of the scrolling position.
    	 *  @returns {void}
    	 *  @private
    	 */
    	_draw: function () {
    		var that = this,
    			heights = this.s.heights,
    			iScrollTop = this.dom.scroller.scrollTop,
    			iTableHeight = $$2(this.s.dt.nTable).height(),
    			displayStart = this.s.dt._iDisplayStart,
    			displayLen = this.s.dt._iDisplayLength,
    			displayEnd = this.s.dt.fnRecordsDisplay(),
    			viewportEndY = iScrollTop + heights.viewport;

    		// Disable the scroll event listener while we are updating the DOM
    		this.s.skip = true;

    		// If paging is reset
    		if (
    			(this.s.dt.bSorted || this.s.dt.bFiltered) &&
    			displayStart === 0 &&
    			!this.s.dt._drawHold
    		) {
    			this.s.topRowFloat = 0;
    		}

    		iScrollTop =
    			this.s.scrollType === 'jump'
    				? this._domain('virtualToPhysical', this.s.topRowFloat * heights.row)
    				: iScrollTop;

    		// Store positional information so positional calculations can be based
    		// upon the current table draw position
    		this.s.baseScrollTop = iScrollTop;
    		this.s.baseRowTop = this.s.topRowFloat;

    		// Position the table in the virtual scroller
    		var tableTop = iScrollTop - (this.s.topRowFloat - displayStart) * heights.row;
    		if (displayStart === 0) {
    			tableTop = 0;
    		}
    		else if (displayStart + displayLen >= displayEnd) {
    			tableTop = heights.scroll - iTableHeight;
    		}
    		else {
    			var iTableBottomY = tableTop + iTableHeight;
    			if (iTableBottomY < viewportEndY) {
    				// The last row of the data is above the end of the viewport.
    				// This means the background is visible, which is not what the user expects.
    				var newTableTop = viewportEndY - iTableHeight;
    				var diffPx = newTableTop - tableTop;
    				this.s.baseScrollTop += diffPx + 1; // Update start row number in footer.
    				tableTop = newTableTop; // Move table so last line of data is at the bottom of the viewport.
    			}
    		}

    		this.dom.table.style.top = tableTop + 'px';

    		/* Cache some information for the scroller */
    		this.s.tableTop = tableTop;
    		this.s.tableBottom = iTableHeight + this.s.tableTop;

    		// Calculate the boundaries for where a redraw will be triggered by the
    		// scroll event listener
    		var boundaryPx = (iScrollTop - this.s.tableTop) * this.s.boundaryScale;
    		this.s.redrawTop = iScrollTop - boundaryPx;
    		this.s.redrawBottom =
    			iScrollTop + boundaryPx > heights.scroll - heights.viewport - heights.row
    				? heights.scroll - heights.viewport - heights.row
    				: iScrollTop + boundaryPx;

    		this.s.skip = false;

    		if (that.s.ingnoreScroll) {
    			// Restore the scrolling position that was saved by DataTable's state
    			// saving Note that this is done on the second draw when data is Ajax
    			// sourced, and the first draw when DOM soured
    			if (
    				this.s.dt.oFeatures.bStateSave &&
    				this.s.dt.oLoadedState !== null &&
    				typeof this.s.dt.oLoadedState.scroller != 'undefined'
    			) {
    				// A quirk of DataTables is that the draw callback will occur on an
    				// empty set if Ajax sourced, but not if server-side processing.
    				var ajaxSourced =
    					(this.s.dt.sAjaxSource || that.s.dt.ajax) && !this.s.dt.oFeatures.bServerSide
    						? true
    						: false;

    				if (
    					(ajaxSourced && this.s.dt.iDraw >= 2) ||
    					(!ajaxSourced && this.s.dt.iDraw >= 1)
    				) {
    					setTimeout(function () {
    						$$2(that.dom.scroller).scrollTop(that.s.dt.oLoadedState.scroller.scrollTop);

    						// In order to prevent layout thrashing we need another
    						// small delay
    						setTimeout(function () {
    							that.s.ingnoreScroll = false;
    						}, 0);
    					}, 0);
    				}
    			}
    			else {
    				that.s.ingnoreScroll = false;
    			}
    		}

    		// Because of the order of the DT callbacks, the info update will
    		// take precedence over the one we want here. So a 'thread' break is
    		// needed.  Only add the thread break if bInfo is set
    		if (this.s.dt.oFeatures.bInfo) {
    			setTimeout(function () {
    				that._info.call(that);
    			}, 0);
    		}

    		$$2(this.s.dt.nTable).triggerHandler('position.dts.dt', tableTop);

    		// Hide the loading indicator
    		if (this.dom.loader && this.s.loaderVisible) {
    			this.dom.loader.css('display', 'none');
    			this.s.loaderVisible = false;
    		}
    	},

    	/**
    	 * Convert from one domain to another. The physical domain is the actual
    	 * pixel count on the screen, while the virtual is if we had browsers which
    	 * had scrolling containers of infinite height (i.e. the absolute value)
    	 *
    	 *  @param {string} dir Domain transform direction, `virtualToPhysical` or
    	 *    `physicalToVirtual`
    	 *  @returns {number} Calculated transform
    	 *  @private
    	 */
    	_domain: function (dir, val) {
    		var heights = this.s.heights;
    		var diff;
    		var magic = 10000; // the point at which the non-linear calculations start to happen

    		// If the virtual and physical height match, then we use a linear
    		// transform between the two, allowing the scrollbar to be linear
    		if (heights.virtual === heights.scroll) {
    			return val;
    		}

    		// In the first 10k pixels and the last 10k pixels, we want the scrolling
    		// to be linear. After that it can be non-linear. It would be unusual for
    		// anyone to mouse wheel through that much.
    		if (val < magic) {
    			return val;
    		}
    		else if (dir === 'virtualToPhysical' && val >= heights.virtual - magic) {
    			diff = heights.virtual - val;
    			return heights.scroll - diff;
    		}
    		else if (dir === 'physicalToVirtual' && val >= heights.scroll - magic) {
    			diff = heights.scroll - val;
    			return heights.virtual - diff;
    		}

    		// Otherwise, we want a non-linear scrollbar to take account of the
    		// redrawing regions at the start and end of the table, otherwise these
    		// can stutter badly - on large tables 30px (for example) scroll might
    		// be hundreds of rows, so the table would be redrawing every few px at
    		// the start and end. Use a simple linear eq. to stop this, effectively
    		// causing a kink in the scrolling ratio. It does mean the scrollbar is
    		// non-linear, but with such massive data sets, the scrollbar is going
    		// to be a best guess anyway
    		var m = (heights.virtual - magic - magic) / (heights.scroll - magic - magic);
    		var c = magic - m * magic;

    		return dir === 'virtualToPhysical' ? (val - c) / m : m * val + c;
    	},

    	/**
    	 * Update any information elements that are controlled by the DataTable based on the scrolling
    	 * viewport and what rows are visible in it. This function basically acts in the same way as
    	 * _fnUpdateInfo in DataTables, and effectively replaces that function.
    	 *  @returns {void}
    	 *  @private
    	 */
    	_info: function () {
    		if (!this.s.dt.oFeatures.bInfo) {
    			return;
    		}

    		var dt = this.s.dt,
    			language = dt.oLanguage,
    			iScrollTop = this.dom.scroller.scrollTop,
    			iStart = Math.floor(this.pixelsToRow(iScrollTop, false, this.s.ani) + 1),
    			iMax = dt.fnRecordsTotal(),
    			iTotal = dt.fnRecordsDisplay(),
    			iPossibleEnd = Math.ceil(
    				this.pixelsToRow(iScrollTop + this.s.heights.viewport, false, this.s.ani)
    			),
    			iEnd = iTotal < iPossibleEnd ? iTotal : iPossibleEnd,
    			sStart = dt.fnFormatNumber(iStart),
    			sEnd = dt.fnFormatNumber(iEnd),
    			sMax = dt.fnFormatNumber(iMax),
    			sTotal = dt.fnFormatNumber(iTotal),
    			sOut;

    		if (dt.fnRecordsDisplay() === 0 && dt.fnRecordsDisplay() == dt.fnRecordsTotal()) {
    			/* Empty record set */
    			sOut = language.sInfoEmpty + language.sInfoPostFix;
    		}
    		else if (dt.fnRecordsDisplay() === 0) {
    			/* Empty record set after filtering */
    			sOut =
    				language.sInfoEmpty +
    				' ' +
    				language.sInfoFiltered.replace('_MAX_', sMax) +
    				language.sInfoPostFix;
    		}
    		else if (dt.fnRecordsDisplay() == dt.fnRecordsTotal()) {
    			/* Normal record set */
    			sOut =
    				language.sInfo
    					.replace('_START_', sStart)
    					.replace('_END_', sEnd)
    					.replace('_MAX_', sMax)
    					.replace('_TOTAL_', sTotal) + language.sInfoPostFix;
    		}
    		else {
    			/* Record set after filtering */
    			sOut =
    				language.sInfo
    					.replace('_START_', sStart)
    					.replace('_END_', sEnd)
    					.replace('_MAX_', sMax)
    					.replace('_TOTAL_', sTotal) +
    				' ' +
    				language.sInfoFiltered.replace('_MAX_', dt.fnFormatNumber(dt.fnRecordsTotal())) +
    				language.sInfoPostFix;
    		}

    		var callback = language.fnInfoCallback;
    		if (callback) {
    			sOut = callback.call(dt.oInstance, dt, iStart, iEnd, iMax, iTotal, sOut);
    		}

    		var n = dt.aanFeatures.i;
    		if (typeof n != 'undefined') {
    			for (var i = 0, iLen = n.length; i < iLen; i++) {
    				$$2(n[i]).html(sOut);
    			}
    		}

    		// DT doesn't actually (yet) trigger this event, but it will in future
    		$$2(dt.nTable).triggerHandler('info.dt');
    	},

    	/**
    	 * Parse CSS height property string as number
    	 *
    	 * An attempt is made to parse the string as a number. Currently supported units are 'px',
    	 * 'vh', and 'rem'. 'em' is partially supported; it works as long as the parent element's
    	 * font size matches the body element. Zero is returned for unrecognized strings.
    	 *  @param {string} cssHeight CSS height property string
    	 *  @returns {number} height
    	 *  @private
    	 */
    	_parseHeight: function (cssHeight) {
    		var height;
    		var matches = /^([+-]?(?:\d+(?:\.\d+)?|\.\d+))(px|em|rem|vh)$/.exec(cssHeight);

    		if (matches === null) {
    			return 0;
    		}

    		var value = parseFloat(matches[1]);
    		var unit = matches[2];

    		if (unit === 'px') {
    			height = value;
    		}
    		else if (unit === 'vh') {
    			height = (value / 100) * $$2(window).height();
    		}
    		else if (unit === 'rem') {
    			height = value * parseFloat($$2(':root').css('font-size'));
    		}
    		else if (unit === 'em') {
    			height = value * parseFloat($$2('body').css('font-size'));
    		}

    		return height ? height : 0;
    	},

    	/**
    	 * Scrolling function - fired whenever the scrolling position is changed.
    	 * This method needs to use the stored values to see if the table should be
    	 * redrawn as we are moving towards the end of the information that is
    	 * currently drawn or not. If needed, then it will redraw the table based on
    	 * the new position.
    	 *  @returns {void}
    	 *  @private
    	 */
    	_scroll: function () {
    		var that = this,
    			heights = this.s.heights,
    			iScrollTop = this.dom.scroller.scrollTop,
    			iTopRow;

    		if (this.s.skip) {
    			return;
    		}

    		if (this.s.ingnoreScroll) {
    			return;
    		}

    		if (iScrollTop === this.s.lastScrollTop) {
    			return;
    		}

    		/* If the table has been sorted or filtered, then we use the redraw that
    		 * DataTables as done, rather than performing our own
    		 */
    		if (this.s.dt.bFiltered || this.s.dt.bSorted) {
    			this.s.lastScrollTop = 0;
    			return;
    		}

    		/* Update the table's information display for what is now in the viewport */
    		this._info();

    		/* We don't want to state save on every scroll event - that's heavy
    		 * handed, so use a timeout to update the state saving only when the
    		 * scrolling has finished
    		 */
    		clearTimeout(this.s.stateTO);
    		this.s.stateTO = setTimeout(function () {
    			that.s.dtApi.state.save();
    		}, 250);

    		this.s.scrollType =
    			Math.abs(iScrollTop - this.s.lastScrollTop) > heights.viewport ? 'jump' : 'cont';

    		this.s.topRowFloat =
    			this.s.scrollType === 'cont'
    				? this.pixelsToRow(iScrollTop, false, false)
    				: this._domain('physicalToVirtual', iScrollTop) / heights.row;

    		if (this.s.topRowFloat < 0) {
    			this.s.topRowFloat = 0;
    		}

    		/* Check if the scroll point is outside the trigger boundary which would required
    		 * a DataTables redraw
    		 */
    		if (
    			this.s.forceReposition ||
    			iScrollTop < this.s.redrawTop ||
    			iScrollTop > this.s.redrawBottom
    		) {
    			var preRows = Math.ceil(((this.s.displayBuffer - 1) / 2) * this.s.viewportRows);

    			iTopRow = parseInt(this.s.topRowFloat, 10) - preRows;
    			this.s.forceReposition = false;

    			if (iTopRow <= 0) {
    				/* At the start of the table */
    				iTopRow = 0;
    			}
    			else if (iTopRow + this.s.dt._iDisplayLength > this.s.dt.fnRecordsDisplay()) {
    				/* At the end of the table */
    				iTopRow = this.s.dt.fnRecordsDisplay() - this.s.dt._iDisplayLength;
    				if (iTopRow < 0) {
    					iTopRow = 0;
    				}
    			}
    			else if (iTopRow % 2 !== 0) {
    				// For the row-striping classes (odd/even) we want only to start
    				// on evens otherwise the stripes will change between draws and
    				// look rubbish
    				iTopRow++;
    			}

    			// Store calcuated value, in case the following condition is not met, but so
    			// that the draw function will still use it.
    			this.s.targetTop = iTopRow;

    			if (iTopRow != this.s.dt._iDisplayStart) {
    				/* Cache the new table position for quick lookups */
    				this.s.tableTop = $$2(this.s.dt.nTable).offset().top;
    				this.s.tableBottom = $$2(this.s.dt.nTable).height() + this.s.tableTop;

    				var draw = function () {
    					that.s.dt._iDisplayStart = that.s.targetTop;
    					that.s.dt.oApi._fnDraw(that.s.dt);
    				};

    				/* Do the DataTables redraw based on the calculated start point - note that when
    				 * using server-side processing we introduce a small delay to not DoS the server...
    				 */
    				if (this.s.dt.oFeatures.bServerSide) {
    					this.s.forceReposition = true;

    					clearTimeout(this.s.drawTO);
    					this.s.drawTO = setTimeout(draw, this.s.serverWait);
    				}
    				else {
    					draw();
    				}

    				if (this.dom.loader && !this.s.loaderVisible) {
    					this.dom.loader.css('display', 'block');
    					this.s.loaderVisible = true;
    				}
    			}
    		}
    		else {
    			this.s.topRowFloat = this.pixelsToRow(iScrollTop, false, true);
    		}

    		this.s.lastScrollTop = iScrollTop;
    		this.s.stateSaveThrottle();

    		if (this.s.scrollType === 'jump' && this.s.mousedown) {
    			this.s.labelVisible = true;
    		}
    		if (this.s.labelVisible) {
    			var labelFactor =
    				(heights.viewport - heights.labelHeight - heights.xbar) / heights.scroll;

    			this.dom.label
    				.html(this.s.dt.fnFormatNumber(parseInt(this.s.topRowFloat, 10) + 1))
    				.css('top', iScrollTop + iScrollTop * labelFactor)
    				.css('display', 'block');
    		}
    	},

    	/**
    	 * Force the scrolling container to have height beyond that of just the
    	 * table that has been drawn so the user can scroll the whole data set.
    	 *
    	 * Note that if the calculated required scrolling height exceeds a maximum
    	 * value (1 million pixels - hard-coded) the forcing element will be set
    	 * only to that maximum value and virtual / physical domain transforms will
    	 * be used to allow Scroller to display tables of any number of records.
    	 *  @returns {void}
    	 *  @private
    	 */
    	_scrollForce: function () {
    		var heights = this.s.heights;
    		var max = 1000000;

    		heights.virtual = heights.row * this.s.dt.fnRecordsDisplay();
    		heights.scroll = heights.virtual;

    		if (heights.scroll > max) {
    			heights.scroll = max;
    		}

    		// Minimum height so there is always a row visible (the 'no rows found'
    		// if reduced to zero filtering)
    		this.dom.force.style.height =
    			heights.scroll > this.s.heights.row ? heights.scroll + 'px' : this.s.heights.row + 'px';
    	}
    });

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Statics
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

    /**
     * Scroller default settings for initialisation
     *  @namespace
     *  @name Scroller.defaults
     *  @static
     */
    Scroller.defaults = {
    	/**
    	 * Scroller uses the boundary scaling factor to decide when to redraw the table - which it
    	 * typically does before you reach the end of the currently loaded data set (in order to
    	 * allow the data to look continuous to a user scrolling through the data). If given as 0
    	 * then the table will be redrawn whenever the viewport is scrolled, while 1 would not
    	 * redraw the table until the currently loaded data has all been shown. You will want
    	 * something in the middle - the default factor of 0.5 is usually suitable.
    	 *  @type     float
    	 *  @default  0.5
    	 *  @static
    	 */
    	boundaryScale: 0.5,

    	/**
    	 * The display buffer is what Scroller uses to calculate how many rows it should pre-fetch
    	 * for scrolling. Scroller automatically adjusts DataTables' display length to pre-fetch
    	 * rows that will be shown in "near scrolling" (i.e. just beyond the current display area).
    	 * The value is based upon the number of rows that can be displayed in the viewport (i.e.
    	 * a value of 1), and will apply the display range to records before before and after the
    	 * current viewport - i.e. a factor of 3 will allow Scroller to pre-fetch 1 viewport's worth
    	 * of rows before the current viewport, the current viewport's rows and 1 viewport's worth
    	 * of rows after the current viewport. Adjusting this value can be useful for ensuring
    	 * smooth scrolling based on your data set.
    	 *  @type     int
    	 *  @default  7
    	 *  @static
    	 */
    	displayBuffer: 9,

    	/**
    	 * Show (or not) the loading element in the background of the table. Note that you should
    	 * include the dataTables.scroller.css file for this to be displayed correctly.
    	 *  @type     boolean
    	 *  @default  false
    	 *  @static
    	 */
    	loadingIndicator: false,

    	/**
    	 * Scroller will attempt to automatically calculate the height of rows for it's internal
    	 * calculations. However the height that is used can be overridden using this parameter.
    	 *  @type     int|string
    	 *  @default  auto
    	 *  @static
    	 */
    	rowHeight: 'auto',

    	/**
    	 * When using server-side processing, Scroller will wait a small amount of time to allow
    	 * the scrolling to finish before requesting more data from the server. This prevents
    	 * you from DoSing your own server! The wait time can be configured by this parameter.
    	 *  @type     int
    	 *  @default  200
    	 *  @static
    	 */
    	serverWait: 200
    };

    Scroller.oDefaults = Scroller.defaults;

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Constants
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

    /**
     * Scroller version
     *  @type      String
     *  @default   See code
     *  @name      Scroller.version
     *  @static
     */
    Scroller.version = '2.2.0';

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Initialisation
     * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

    // Attach a listener to the document which listens for DataTables initialisation
    // events so we can automatically initialise
    $$2(document).on('preInit.dt.dtscroller', function (e, settings) {
    	if (e.namespace !== 'dt') {
    		return;
    	}

    	var init = settings.oInit.scroller;
    	var defaults = DataTable.defaults.scroller;

    	if (init || defaults) {
    		var opts = $$2.extend({}, init, defaults);

    		if (init !== false) {
    			new Scroller(settings, opts);
    		}
    	}
    });

    // Attach Scroller to DataTables so it can be accessed as an 'extra'
    $$2.fn.dataTable.Scroller = Scroller;
    $$2.fn.DataTable.Scroller = Scroller;

    // DataTables 1.10 API method aliases
    var Api = $$2.fn.dataTable.Api;

    Api.register('scroller()', function () {
    	return this;
    });

    // Undocumented and deprecated - is it actually useful at all?
    Api.register('scroller().rowToPixels()', function (rowIdx, intParse, virtual) {
    	var ctx = this.context;

    	if (ctx.length && ctx[0].oScroller) {
    		return ctx[0].oScroller.rowToPixels(rowIdx, intParse, virtual);
    	}
    	// undefined
    });

    // Undocumented and deprecated - is it actually useful at all?
    Api.register('scroller().pixelsToRow()', function (pixels, intParse, virtual) {
    	var ctx = this.context;

    	if (ctx.length && ctx[0].oScroller) {
    		return ctx[0].oScroller.pixelsToRow(pixels, intParse, virtual);
    	}
    	// undefined
    });

    // `scroller().scrollToRow()` is undocumented and deprecated. Use `scroller.toPosition()
    Api.register(['scroller().scrollToRow()', 'scroller.toPosition()'], function (idx, ani) {
    	this.iterator('table', function (ctx) {
    		if (ctx.oScroller) {
    			ctx.oScroller.scrollToRow(idx, ani);
    		}
    	});

    	return this;
    });

    Api.register('row().scrollTo()', function (ani) {
    	var that = this;

    	this.iterator('row', function (ctx, rowIdx) {
    		if (ctx.oScroller) {
    			var displayIdx = that
    				.rows({ order: 'applied', search: 'applied' })
    				.indexes()
    				.indexOf(rowIdx);

    			ctx.oScroller.scrollToRow(displayIdx, ani);
    		}
    	});

    	return this;
    });

    Api.register('scroller.measure()', function (redraw) {
    	this.iterator('table', function (ctx) {
    		if (ctx.oScroller) {
    			ctx.oScroller.measure(redraw);
    		}
    	});

    	return this;
    });

    Api.register('scroller.page()', function () {
    	var ctx = this.context;

    	if (ctx.length && ctx[0].oScroller) {
    		return ctx[0].oScroller.pageInfo();
    	}
    	// undefined
    });

    /*! SearchBuilder 1.5.0
     * ©SpryMedia Ltd - datatables.net/license/mit
     */


    // Allow reassignment of the $ variable
    let $$1 = j;

    (function () {

        var $$3;
        var dataTable$3;
        function moment() {
            return window.moment;
        }
        function luxon() {
            return window.luxon;
        }
        /**
         * Sets the value of jQuery for use in the file
         *
         * @param jq the instance of jQuery to be set
         */
        function setJQuery$2(jq) {
            $$3 = jq;
            dataTable$3 = jq.fn.dataTable;
        }
        /**
         * The Criteria class is used within SearchBuilder to represent a search criteria
         */
        var Criteria = /** @class */ (function () {
            function Criteria(table, opts, topGroup, index, depth, serverData) {
                var _this = this;
                if (index === void 0) { index = 0; }
                if (depth === void 0) { depth = 1; }
                if (serverData === void 0) { serverData = undefined; }
                // Check that the required version of DataTables is included
                if (!dataTable$3 || !dataTable$3.versionCheck || !dataTable$3.versionCheck('1.10.0')) {
                    throw new Error('SearchPane requires DataTables 1.10 or newer');
                }
                this.classes = $$3.extend(true, {}, Criteria.classes);
                // Get options from user and any extra conditions/column types defined by plug-ins
                this.c = $$3.extend(true, {}, Criteria.defaults, $$3.fn.dataTable.ext.searchBuilder, opts);
                var i18n = this.c.i18n;
                this.s = {
                    condition: undefined,
                    conditions: {},
                    data: undefined,
                    dataIdx: -1,
                    dataPoints: [],
                    dateFormat: false,
                    depth: depth,
                    dt: table,
                    filled: false,
                    index: index,
                    origData: undefined,
                    preventRedraw: false,
                    serverData: serverData,
                    topGroup: topGroup,
                    type: '',
                    value: []
                };
                this.dom = {
                    buttons: $$3('<div/>')
                        .addClass(this.classes.buttonContainer),
                    condition: $$3('<select disabled/>')
                        .addClass(this.classes.condition)
                        .addClass(this.classes.dropDown)
                        .addClass(this.classes.italic)
                        .attr('autocomplete', 'hacking'),
                    conditionTitle: $$3('<option value="" disabled selected hidden/>')
                        .html(this.s.dt.i18n('searchBuilder.condition', i18n.condition)),
                    container: $$3('<div/>')
                        .addClass(this.classes.container),
                    data: $$3('<select/>')
                        .addClass(this.classes.data)
                        .addClass(this.classes.dropDown)
                        .addClass(this.classes.italic),
                    dataTitle: $$3('<option value="" disabled selected hidden/>')
                        .html(this.s.dt.i18n('searchBuilder.data', i18n.data)),
                    defaultValue: $$3('<select disabled/>')
                        .addClass(this.classes.value)
                        .addClass(this.classes.dropDown)
                        .addClass(this.classes.select)
                        .addClass(this.classes.italic),
                    "delete": $$3('<button/>')
                        .html(this.s.dt.i18n('searchBuilder.delete', i18n["delete"]))
                        .addClass(this.classes["delete"])
                        .addClass(this.classes.button)
                        .attr('title', this.s.dt.i18n('searchBuilder.deleteTitle', i18n.deleteTitle))
                        .attr('type', 'button'),
                    inputCont: $$3('<div/>')
                        .addClass(this.classes.inputCont),
                    // eslint-disable-next-line no-useless-escape
                    left: $$3('<button/>')
                        .html(this.s.dt.i18n('searchBuilder.left', i18n.left))
                        .addClass(this.classes.left)
                        .addClass(this.classes.button)
                        .attr('title', this.s.dt.i18n('searchBuilder.leftTitle', i18n.leftTitle))
                        .attr('type', 'button'),
                    // eslint-disable-next-line no-useless-escape
                    right: $$3('<button/>')
                        .html(this.s.dt.i18n('searchBuilder.right', i18n.right))
                        .addClass(this.classes.right)
                        .addClass(this.classes.button)
                        .attr('title', this.s.dt.i18n('searchBuilder.rightTitle', i18n.rightTitle))
                        .attr('type', 'button'),
                    value: [
                        $$3('<select disabled/>')
                            .addClass(this.classes.value)
                            .addClass(this.classes.dropDown)
                            .addClass(this.classes.italic)
                            .addClass(this.classes.select)
                    ],
                    valueTitle: $$3('<option value="--valueTitle--" disabled selected hidden/>')
                        .html(this.s.dt.i18n('searchBuilder.value', i18n.value))
                };
                // If the greyscale option is selected then add the class to add the grey colour to SearchBuilder
                if (this.c.greyscale) {
                    this.dom.data.addClass(this.classes.greyscale);
                    this.dom.condition.addClass(this.classes.greyscale);
                    this.dom.defaultValue.addClass(this.classes.greyscale);
                    for (var _i = 0, _a = this.dom.value; _i < _a.length; _i++) {
                        var val = _a[_i];
                        val.addClass(this.classes.greyscale);
                    }
                }
                $$3(window).on('resize.dtsb', dataTable$3.util.throttle(function () {
                    _this.s.topGroup.trigger('dtsb-redrawLogic');
                }));
                this._buildCriteria();
                return this;
            }
            /**
             * Escape html characters within a string
             *
             * @param txt the string to be escaped
             * @returns the escaped string
             */
            Criteria._escapeHTML = function (txt) {
                return txt
                    .toString()
                    .replace(/&amp;/g, '&')
                    .replace(/&lt;/g, '<')
                    .replace(/&gt;/g, '>')
                    .replace(/&quot;/g, '"');
            };
            /**
             * Parses formatted numbers down to a form where they can be compared
             *
             * @param val the value to convert
             * @returns the converted value
             */
            Criteria.parseNumFmt = function (val) {
                return +val.replace(/(?!^-)[^0-9.]/g, '');
            };
            /**
             * Adds the left button to the criteria
             */
            Criteria.prototype.updateArrows = function (hasSiblings) {
                if (hasSiblings === void 0) { hasSiblings = false; }
                // Empty the container and append all of the elements in the correct order
                this.dom.container.children().detach();
                this.dom.container
                    .append(this.dom.data)
                    .append(this.dom.condition)
                    .append(this.dom.inputCont);
                this.setListeners();
                // Trigger the inserted events for the value elements as they are inserted
                if (this.dom.value[0] !== undefined) {
                    this.dom.value[0].trigger('dtsb-inserted');
                }
                for (var i = 1; i < this.dom.value.length; i++) {
                    this.dom.inputCont.append(this.dom.value[i]);
                    this.dom.value[i].trigger('dtsb-inserted');
                }
                // If this is a top level criteria then don't let it move left
                if (this.s.depth > 1) {
                    this.dom.buttons.append(this.dom.left);
                }
                // If the depthLimit of the query has been hit then don't add the right button
                if ((this.c.depthLimit === false || this.s.depth < this.c.depthLimit) && hasSiblings) {
                    this.dom.buttons.append(this.dom.right);
                }
                else {
                    this.dom.right.remove();
                }
                this.dom.buttons.append(this.dom["delete"]);
                this.dom.container.append(this.dom.buttons);
            };
            /**
             * Destroys the criteria, removing listeners and container from the dom
             */
            Criteria.prototype.destroy = function () {
                // Turn off listeners
                this.dom.data.off('.dtsb');
                this.dom.condition.off('.dtsb');
                this.dom["delete"].off('.dtsb');
                for (var _i = 0, _a = this.dom.value; _i < _a.length; _i++) {
                    var val = _a[_i];
                    val.off('.dtsb');
                }
                // Remove container from the dom
                this.dom.container.remove();
            };
            /**
             * Passes in the data for the row and compares it against this single criteria
             *
             * @param rowData The data for the row to be compared
             * @returns boolean Whether the criteria has passed
             */
            Criteria.prototype.search = function (rowData, rowIdx) {
                var condition = this.s.conditions[this.s.condition];
                if (this.s.condition !== undefined && condition !== undefined) {
                    var filter = rowData[this.s.dataIdx];
                    // This check is in place for if a custom decimal character is in place
                    if (this.s.type.includes('num') &&
                        (this.s.dt.settings()[0].oLanguage.sDecimal !== '' ||
                            this.s.dt.settings()[0].oLanguage.sThousands !== '')) {
                        var splitRD = [rowData[this.s.dataIdx]];
                        if (this.s.dt.settings()[0].oLanguage.sDecimal !== '') {
                            splitRD = rowData[this.s.dataIdx].split(this.s.dt.settings()[0].oLanguage.sDecimal);
                        }
                        if (this.s.dt.settings()[0].oLanguage.sThousands !== '') {
                            for (var i = 0; i < splitRD.length; i++) {
                                splitRD[i] = splitRD[i].replace(this.s.dt.settings()[0].oLanguage.sThousands, ',');
                            }
                        }
                        filter = splitRD.join('.');
                    }
                    // If orthogonal data is in place we need to get it's values for searching
                    if (this.c.orthogonal.search !== 'filter') {
                        var settings = this.s.dt.settings()[0];
                        filter = settings.oApi._fnGetCellData(settings, rowIdx, this.s.dataIdx, typeof this.c.orthogonal === 'string' ?
                            this.c.orthogonal :
                            this.c.orthogonal.search);
                    }
                    if (this.s.type === 'array') {
                        // Make sure we are working with an array
                        if (!Array.isArray(filter)) {
                            filter = [filter];
                        }
                        filter.sort();
                        for (var _i = 0, filter_1 = filter; _i < filter_1.length; _i++) {
                            var filt = filter_1[_i];
                            if (filt && typeof filt === 'string') {
                                filt = filt.replace(/[\r\n\u2028]/g, ' ');
                            }
                        }
                    }
                    else if (filter !== null && typeof filter === 'string') {
                        filter = filter.replace(/[\r\n\u2028]/g, ' ');
                    }
                    if (this.s.type.includes('html') && typeof filter === 'string') {
                        filter = filter.replace(/(<([^>]+)>)/ig, '');
                    }
                    // Not ideal, but jqueries .val() returns an empty string even
                    // when the value set is null, so we shall assume the two are equal
                    if (filter === null) {
                        filter = '';
                    }
                    return condition.search(filter, this.s.value, this);
                }
            };
            /**
             * Gets the details required to rebuild the criteria
             */
            Criteria.prototype.getDetails = function (deFormatDates) {
                if (deFormatDates === void 0) { deFormatDates = false; }
                // This check is in place for if a custom decimal character is in place
                if (this.s.type !== null &&
                    this.s.type.includes('num') &&
                    (this.s.dt.settings()[0].oLanguage.sDecimal !== '' || this.s.dt.settings()[0].oLanguage.sThousands !== '')) {
                    for (var i = 0; i < this.s.value.length; i++) {
                        var splitRD = [this.s.value[i].toString()];
                        if (this.s.dt.settings()[0].oLanguage.sDecimal !== '') {
                            splitRD = this.s.value[i].split(this.s.dt.settings()[0].oLanguage.sDecimal);
                        }
                        if (this.s.dt.settings()[0].oLanguage.sThousands !== '') {
                            for (var j = 0; j < splitRD.length; j++) {
                                splitRD[j] = splitRD[j].replace(this.s.dt.settings()[0].oLanguage.sThousands, ',');
                            }
                        }
                        this.s.value[i] = splitRD.join('.');
                    }
                }
                else if (this.s.type !== null && deFormatDates) {
                    if (this.s.type.includes('date') ||
                        this.s.type.includes('time')) {
                        for (var i = 0; i < this.s.value.length; i++) {
                            if (this.s.value[i].match(/^\d{4}-([0]\d|1[0-2])-([0-2]\d|3[01])$/g) === null) {
                                this.s.value[i] = '';
                            }
                        }
                    }
                    else if (this.s.type.includes('moment')) {
                        for (var i = 0; i < this.s.value.length; i++) {
                            if (this.s.value[i] &&
                                this.s.value[i].length > 0 &&
                                moment()(this.s.value[i], this.s.dateFormat, true).isValid()) {
                                this.s.value[i] = moment()(this.s.value[i], this.s.dateFormat).format('YYYY-MM-DD HH:mm:ss');
                            }
                        }
                    }
                    else if (this.s.type.includes('luxon')) {
                        for (var i = 0; i < this.s.value.length; i++) {
                            if (this.s.value[i] &&
                                this.s.value[i].length > 0 &&
                                luxon().DateTime.fromFormat(this.s.value[i], this.s.dateFormat).invalid === null) {
                                this.s.value[i] = luxon().DateTime.fromFormat(this.s.value[i], this.s.dateFormat).toFormat('yyyy-MM-dd HH:mm:ss');
                            }
                        }
                    }
                }
                if (this.s.type.includes('num') && this.s.dt.page.info().serverSide) {
                    for (var i = 0; i < this.s.value.length; i++) {
                        this.s.value[i] = this.s.value[i].replace(/[^0-9.\-]/g, '');
                    }
                }
                return {
                    condition: this.s.condition,
                    data: this.s.data,
                    origData: this.s.origData,
                    type: this.s.type,
                    value: this.s.value.map(function (a) { return a !== null && a !== undefined ? a.toString() : a; })
                };
            };
            /**
             * Getter for the node for the container of the criteria
             *
             * @returns JQuery<HTMLElement> the node for the container
             */
            Criteria.prototype.getNode = function () {
                return this.dom.container;
            };
            /**
             * Populates the criteria data, condition and value(s) as far as has been selected
             */
            Criteria.prototype.populate = function () {
                this._populateData();
                // If the column index has been found attempt to select a condition
                if (this.s.dataIdx !== -1) {
                    this._populateCondition();
                    // If the condittion has been found attempt to select the values
                    if (this.s.condition !== undefined) {
                        this._populateValue();
                    }
                }
            };
            /**
             * Rebuilds the criteria based upon the details passed in
             *
             * @param loadedCriteria the details required to rebuild the criteria
             */
            Criteria.prototype.rebuild = function (loadedCriteria) {
                // Check to see if the previously selected data exists, if so select it
                var foundData = false;
                var dataIdx;
                this._populateData();
                // If a data selection has previously been made attempt to find and select it
                if (loadedCriteria.data !== undefined) {
                    var italic_1 = this.classes.italic;
                    var data_1 = this.dom.data;
                    this.dom.data.children('option').each(function () {
                        if (!foundData &&
                            ($$3(this).text() === loadedCriteria.data ||
                                loadedCriteria.origData && $$3(this).prop('origData') === loadedCriteria.origData)) {
                            $$3(this).prop('selected', true);
                            data_1.removeClass(italic_1);
                            foundData = true;
                            dataIdx = $$3(this).val();
                        }
                        else {
                            $$3(this).removeProp('selected');
                        }
                    });
                }
                // If the data has been found and selected then the condition can be populated and searched
                if (foundData) {
                    this.s.data = loadedCriteria.data;
                    this.s.origData = loadedCriteria.origData;
                    this.s.dataIdx = dataIdx;
                    this.c.orthogonal = this._getOptions().orthogonal;
                    this.dom.dataTitle.remove();
                    this._populateCondition();
                    this.dom.conditionTitle.remove();
                    var condition = void 0;
                    // Check to see if the previously selected condition exists, if so select it
                    var options = this.dom.condition.children('option');
                    // eslint-disable-next-line @typescript-eslint/prefer-for-of
                    for (var i = 0; i < options.length; i++) {
                        var option = $$3(options[i]);
                        if (loadedCriteria.condition !== undefined &&
                            option.val() === loadedCriteria.condition &&
                            typeof loadedCriteria.condition === 'string') {
                            option.prop('selected', true);
                            condition = option.val();
                        }
                        else {
                            option.removeProp('selected');
                        }
                    }
                    this.s.condition = condition;
                    // If the condition has been found and selected then the value can be populated and searched
                    if (this.s.condition !== undefined) {
                        this.dom.conditionTitle.removeProp('selected');
                        this.dom.conditionTitle.remove();
                        this.dom.condition.removeClass(this.classes.italic);
                        // eslint-disable-next-line @typescript-eslint/prefer-for-of
                        for (var i = 0; i < options.length; i++) {
                            var option = $$3(options[i]);
                            if (option.val() !== this.s.condition) {
                                option.removeProp('selected');
                            }
                        }
                        this._populateValue(loadedCriteria);
                    }
                    else {
                        this.dom.conditionTitle.prependTo(this.dom.condition).prop('selected', true);
                    }
                }
            };
            /**
             * Sets the listeners for the criteria
             */
            Criteria.prototype.setListeners = function () {
                var _this = this;
                this.dom.data
                    .unbind('change')
                    .on('change.dtsb', function () {
                    _this.dom.dataTitle.removeProp('selected');
                    // Need to go over every option to identify the correct selection
                    var options = _this.dom.data.children('option.' + _this.classes.option);
                    // eslint-disable-next-line @typescript-eslint/prefer-for-of
                    for (var i = 0; i < options.length; i++) {
                        var option = $$3(options[i]);
                        if (option.val() === _this.dom.data.val()) {
                            _this.dom.data.removeClass(_this.classes.italic);
                            option.prop('selected', true);
                            _this.s.dataIdx = +option.val();
                            _this.s.data = option.text();
                            _this.s.origData = option.prop('origData');
                            _this.c.orthogonal = _this._getOptions().orthogonal;
                            // When the data is changed, the values in condition and
                            // value may also change so need to renew them
                            _this._clearCondition();
                            _this._clearValue();
                            _this._populateCondition();
                            // If this criteria was previously active in the search then
                            // remove it from the search and trigger a new search
                            if (_this.s.filled) {
                                _this.s.filled = false;
                                _this.s.dt.draw();
                                _this.setListeners();
                            }
                            _this.s.dt.state.save();
                        }
                        else {
                            option.removeProp('selected');
                        }
                    }
                });
                this.dom.condition
                    .unbind('change')
                    .on('change.dtsb', function () {
                    _this.dom.conditionTitle.removeProp('selected');
                    // Need to go over every option to identify the correct selection
                    var options = _this.dom.condition.children('option.' + _this.classes.option);
                    // eslint-disable-next-line @typescript-eslint/prefer-for-of
                    for (var i = 0; i < options.length; i++) {
                        var option = $$3(options[i]);
                        if (option.val() === _this.dom.condition.val()) {
                            _this.dom.condition.removeClass(_this.classes.italic);
                            option.prop('selected', true);
                            var condDisp = option.val();
                            // Find the condition that has been selected and store it internally
                            for (var _i = 0, _a = Object.keys(_this.s.conditions); _i < _a.length; _i++) {
                                var cond = _a[_i];
                                if (cond === condDisp) {
                                    _this.s.condition = condDisp;
                                    break;
                                }
                            }
                            // When the condition is changed, the value selector may switch between
                            // a select element and an input element
                            _this._clearValue();
                            _this._populateValue();
                            for (var _b = 0, _c = _this.dom.value; _b < _c.length; _b++) {
                                var val = _c[_b];
                                // If this criteria was previously active in the search then remove
                                // it from the search and trigger a new search
                                if (_this.s.filled && val !== undefined && _this.dom.inputCont.has(val[0]).length !== 0) {
                                    _this.s.filled = false;
                                    _this.s.dt.draw();
                                    _this.setListeners();
                                }
                            }
                            if (_this.dom.value.length === 0 ||
                                _this.dom.value.length === 1 && _this.dom.value[0] === undefined) {
                                _this.s.dt.draw();
                            }
                        }
                        else {
                            option.removeProp('selected');
                        }
                    }
                });
            };
            Criteria.prototype.setupButtons = function () {
                if (window.innerWidth > 550) {
                    this.dom.container.removeClass(this.classes.vertical);
                    this.dom.buttons.css('left', null);
                    this.dom.buttons.css('top', null);
                    return;
                }
                this.dom.container.addClass(this.classes.vertical);
                this.dom.buttons.css('left', this.dom.data.innerWidth());
                this.dom.buttons.css('top', this.dom.data.position().top);
            };
            /**
             * Builds the elements of the dom together
             */
            Criteria.prototype._buildCriteria = function () {
                // Append Titles for select elements
                this.dom.data.append(this.dom.dataTitle);
                this.dom.condition.append(this.dom.conditionTitle);
                // Add elements to container
                this.dom.container
                    .append(this.dom.data)
                    .append(this.dom.condition);
                this.dom.inputCont.empty();
                for (var _i = 0, _a = this.dom.value; _i < _a.length; _i++) {
                    var val = _a[_i];
                    val.append(this.dom.valueTitle);
                    this.dom.inputCont.append(val);
                }
                // Add buttons to container
                this.dom.buttons
                    .append(this.dom["delete"])
                    .append(this.dom.right);
                this.dom.container.append(this.dom.inputCont).append(this.dom.buttons);
                this.setListeners();
            };
            /**
             * Clears the condition select element
             */
            Criteria.prototype._clearCondition = function () {
                this.dom.condition.empty();
                this.dom.conditionTitle.prop('selected', true).attr('disabled', 'true');
                this.dom.condition.prepend(this.dom.conditionTitle).prop('selectedIndex', 0);
                this.s.conditions = {};
                this.s.condition = undefined;
            };
            /**
             * Clears the value elements
             */
            Criteria.prototype._clearValue = function () {
                if (this.s.condition !== undefined) {
                    if (this.dom.value.length > 0 && this.dom.value[0] !== undefined) {
                        var _loop_1 = function (val) {
                            if (val !== undefined) {
                                // Timeout is annoying but because of IOS
                                setTimeout(function () {
                                    val.remove();
                                }, 50);
                            }
                        };
                        // Remove all of the value elements
                        for (var _i = 0, _a = this.dom.value; _i < _a.length; _i++) {
                            var val = _a[_i];
                            _loop_1(val);
                        }
                    }
                    // Call the init function to get the value elements for this condition
                    this.dom.value = [].concat(this.s.conditions[this.s.condition].init(this, Criteria.updateListener));
                    if (this.dom.value.length > 0 && this.dom.value[0] !== undefined) {
                        this.dom.inputCont
                            .empty()
                            .append(this.dom.value[0])
                            .insertAfter(this.dom.condition);
                        this.dom.value[0].trigger('dtsb-inserted');
                        // Insert all of the value elements
                        for (var i = 1; i < this.dom.value.length; i++) {
                            this.dom.inputCont.append(this.dom.value[i]);
                            this.dom.value[i].trigger('dtsb-inserted');
                        }
                    }
                }
                else {
                    var _loop_2 = function (val) {
                        if (val !== undefined) {
                            // Timeout is annoying but because of IOS
                            setTimeout(function () {
                                val.remove();
                            }, 50);
                        }
                    };
                    // Remove all of the value elements
                    for (var _b = 0, _c = this.dom.value; _b < _c.length; _b++) {
                        var val = _c[_b];
                        _loop_2(val);
                    }
                    // Append the default valueTitle to the default select element
                    this.dom.valueTitle
                        .prop('selected', true);
                    this.dom.defaultValue
                        .append(this.dom.valueTitle)
                        .insertAfter(this.dom.condition);
                }
                this.s.value = [];
                this.dom.value = [
                    $$3('<select disabled/>')
                        .addClass(this.classes.value)
                        .addClass(this.classes.dropDown)
                        .addClass(this.classes.italic)
                        .addClass(this.classes.select)
                        .append(this.dom.valueTitle.clone())
                ];
            };
            /**
             * Gets the options for the column
             *
             * @returns {object} The options for the column
             */
            Criteria.prototype._getOptions = function () {
                var table = this.s.dt;
                return $$3.extend(true, {}, Criteria.defaults, table.settings()[0].aoColumns[this.s.dataIdx].searchBuilder);
            };
            /**
             * Populates the condition dropdown
             */
            Criteria.prototype._populateCondition = function () {
                var conditionOpts = [];
                var conditionsLength = Object.keys(this.s.conditions).length;
                var colInits = this.s.dt.settings()[0].aoColumns;
                var column = +this.dom.data.children('option:selected').val();
                // If there are no conditions stored then we need to get them from the appropriate type
                if (conditionsLength === 0) {
                    this.s.type = this.s.dt.columns().type().toArray()[column];
                    if (colInits !== undefined) {
                        var colInit = colInits[column];
                        if (colInit.searchBuilderType !== undefined && colInit.searchBuilderType !== null) {
                            this.s.type = colInit.searchBuilderType;
                        }
                        else if (this.s.type === undefined || this.s.type === null) {
                            this.s.type = colInit.sType;
                        }
                    }
                    // If the column type is still unknown, call a draw to try reading it again
                    if (this.s.type === null || this.s.type === undefined) {
                        $$3.fn.dataTable.ext.oApi._fnColumnTypes(this.s.dt.settings()[0]);
                        this.s.type = this.s.dt.columns().type().toArray()[column];
                    }
                    // Enable the condition element
                    this.dom.condition
                        .removeAttr('disabled')
                        .empty()
                        .append(this.dom.conditionTitle)
                        .addClass(this.classes.italic);
                    this.dom.conditionTitle
                        .prop('selected', true);
                    var decimal = this.s.dt.settings()[0].oLanguage.sDecimal;
                    // This check is in place for if a custom decimal character is in place
                    if (decimal !== '' && this.s.type.indexOf(decimal) === this.s.type.length - decimal.length) {
                        if (this.s.type.includes('num-fmt')) {
                            this.s.type = this.s.type.replace(decimal, '');
                        }
                        else if (this.s.type.includes('num')) {
                            this.s.type = this.s.type.replace(decimal, '');
                        }
                    }
                    // Select which conditions are going to be used based on the column type
                    var conditionObj = this.c.conditions[this.s.type] !== undefined ?
                        this.c.conditions[this.s.type] :
                        this.s.type.includes('moment') ?
                            this.c.conditions.moment :
                            this.s.type.includes('luxon') ?
                                this.c.conditions.luxon :
                                this.c.conditions.string;
                    // If it is a moment format then extract the date format
                    if (this.s.type.includes('moment')) {
                        this.s.dateFormat = this.s.type.replace(/moment-/g, '');
                    }
                    else if (this.s.type.includes('luxon')) {
                        this.s.dateFormat = this.s.type.replace(/luxon-/g, '');
                    }
                    // Add all of the conditions to the select element
                    for (var _i = 0, _a = Object.keys(conditionObj); _i < _a.length; _i++) {
                        var condition = _a[_i];
                        if (conditionObj[condition] !== null) {
                            // Serverside processing does not supply the options for the select elements
                            // Instead input elements need to be used for these instead
                            if (this.s.dt.page.info().serverSide && conditionObj[condition].init === Criteria.initSelect) {
                                var col = colInits[column];
                                if (this.s.serverData && this.s.serverData[col.data]) {
                                    conditionObj[condition].init = Criteria.initSelectSSP;
                                    conditionObj[condition].inputValue = Criteria.inputValueSelect;
                                    conditionObj[condition].isInputValid = Criteria.isInputValidSelect;
                                }
                                else {
                                    conditionObj[condition].init = Criteria.initInput;
                                    conditionObj[condition].inputValue = Criteria.inputValueInput;
                                    conditionObj[condition].isInputValid = Criteria.isInputValidInput;
                                }
                            }
                            this.s.conditions[condition] = conditionObj[condition];
                            var condName = conditionObj[condition].conditionName;
                            if (typeof condName === 'function') {
                                condName = condName(this.s.dt, this.c.i18n);
                            }
                            conditionOpts.push($$3('<option>', {
                                text: condName,
                                value: condition
                            })
                                .addClass(this.classes.option)
                                .addClass(this.classes.notItalic));
                        }
                    }
                }
                // Otherwise we can just load them in
                else if (conditionsLength > 0) {
                    this.dom.condition.empty().removeAttr('disabled').addClass(this.classes.italic);
                    for (var _b = 0, _c = Object.keys(this.s.conditions); _b < _c.length; _b++) {
                        var condition = _c[_b];
                        var condName = this.s.conditions[condition].conditionName;
                        if (typeof condName === 'function') {
                            condName = condName(this.s.dt, this.c.i18n);
                        }
                        var newOpt = $$3('<option>', {
                            text: condName,
                            value: condition
                        })
                            .addClass(this.classes.option)
                            .addClass(this.classes.notItalic);
                        if (this.s.condition !== undefined && this.s.condition === condName) {
                            newOpt.prop('selected', true);
                            this.dom.condition.removeClass(this.classes.italic);
                        }
                        conditionOpts.push(newOpt);
                    }
                }
                else {
                    this.dom.condition
                        .attr('disabled', 'true')
                        .addClass(this.classes.italic);
                    return;
                }
                for (var _d = 0, conditionOpts_1 = conditionOpts; _d < conditionOpts_1.length; _d++) {
                    var opt = conditionOpts_1[_d];
                    this.dom.condition.append(opt);
                }
                // Selecting a default condition if one is set
                if (colInits[column].searchBuilder && colInits[column].searchBuilder.defaultCondition) {
                    var defaultCondition = colInits[column].searchBuilder.defaultCondition;
                    // If it is a number just use it as an index
                    if (typeof defaultCondition === 'number') {
                        this.dom.condition.prop('selectedIndex', defaultCondition);
                        this.dom.condition.trigger('change');
                    }
                    // If it is a string then things get slightly more tricly
                    else if (typeof defaultCondition === 'string') {
                        // We need to check each condition option to see if any will match
                        for (var i = 0; i < conditionOpts.length; i++) {
                            // Need to check against the stored conditions so we can match the token "cond" to the option
                            for (var _e = 0, _f = Object.keys(this.s.conditions); _e < _f.length; _e++) {
                                var cond = _f[_e];
                                var condName = this.s.conditions[cond].conditionName;
                                if (
                                // If the conditionName matches the text of the option
                                (typeof condName === 'string' ? condName : condName(this.s.dt, this.c.i18n)) ===
                                    conditionOpts[i].text() &&
                                    // and the tokens match
                                    cond === defaultCondition) {
                                    // Select that option
                                    this.dom.condition
                                        .prop('selectedIndex', this.dom.condition.children().toArray().indexOf(conditionOpts[i][0]))
                                        .removeClass(this.classes.italic);
                                    this.dom.condition.trigger('change');
                                    i = conditionOpts.length;
                                    break;
                                }
                            }
                        }
                    }
                }
                // If not default set then default to 0, the title
                else {
                    this.dom.condition.prop('selectedIndex', 0);
                }
            };
            /**
             * Populates the data / column select element
             */
            Criteria.prototype._populateData = function () {
                var columns = this.s.dt.settings()[0].aoColumns;
                var includeColumns = this.s.dt.columns(this.c.columns).indexes().toArray();
                this.dom.data.empty().append(this.dom.dataTitle);
                for (var index = 0; index < columns.length; index++) {
                    // Need to check that the column can be filtered on before adding it
                    if (this.c.columns === true || includeColumns.includes(index)) {
                        var col = columns[index];
                        var opt = {
                            index: index,
                            origData: col.data,
                            text: (col.searchBuilderTitle || col.sTitle)
                                .replace(/(<([^>]+)>)/ig, '')
                        };
                        this.dom.data.append($$3('<option>', {
                            text: opt.text,
                            value: opt.index
                        })
                            .addClass(this.classes.option)
                            .addClass(this.classes.notItalic)
                            .prop('origData', col.data)
                            .prop('selected', this.s.dataIdx === opt.index ? true : false));
                        if (this.s.dataIdx === opt.index) {
                            this.dom.dataTitle.removeProp('selected');
                        }
                    }
                }
            };
            /**
             * Populates the Value select element
             *
             * @param loadedCriteria optional, used to reload criteria from predefined filters
             */
            Criteria.prototype._populateValue = function (loadedCriteria) {
                var _this = this;
                var prevFilled = this.s.filled;
                this.s.filled = false;
                // Remove any previous value elements
                // Timeout is annoying but because of IOS
                setTimeout(function () {
                    _this.dom.defaultValue.remove();
                }, 50);
                var _loop_3 = function (val) {
                    // Timeout is annoying but because of IOS
                    setTimeout(function () {
                        if (val !== undefined) {
                            val.remove();
                        }
                    }, 50);
                };
                for (var _i = 0, _a = this.dom.value; _i < _a.length; _i++) {
                    var val = _a[_i];
                    _loop_3(val);
                }
                var children = this.dom.inputCont.children();
                if (children.length > 1) {
                    // eslint-disable-next-line @typescript-eslint/prefer-for-of
                    for (var i = 0; i < children.length; i++) {
                        $$3(children[i]).remove();
                    }
                }
                // Find the column with the title matching the data for the criteria and take note of the index
                if (loadedCriteria !== undefined) {
                    this.s.dt.columns().every(function (index) {
                        if (_this.s.dt.settings()[0].aoColumns[index].sTitle === loadedCriteria.data) {
                            _this.s.dataIdx = index;
                        }
                    });
                }
                // Initialise the value elements based on the condition
                this.dom.value = [].concat(this.s.conditions[this.s.condition].init(this, Criteria.updateListener, loadedCriteria !== undefined ? loadedCriteria.value : undefined));
                if (loadedCriteria !== undefined && loadedCriteria.value !== undefined) {
                    this.s.value = loadedCriteria.value;
                }
                this.dom.inputCont.empty();
                // Insert value elements and trigger the inserted event
                if (this.dom.value[0] !== undefined) {
                    this.dom.value[0]
                        .appendTo(this.dom.inputCont)
                        .trigger('dtsb-inserted');
                }
                for (var i = 1; i < this.dom.value.length; i++) {
                    this.dom.value[i]
                        .insertAfter(this.dom.value[i - 1])
                        .trigger('dtsb-inserted');
                }
                // Check if the criteria can be used in a search
                this.s.filled = this.s.conditions[this.s.condition].isInputValid(this.dom.value, this);
                this.setListeners();
                // If it can and this is different to before then trigger a draw
                if (!this.s.preventRedraw && prevFilled !== this.s.filled) {
                    // If using SSP we want to restrict the amount of server calls that take place
                    //  and this will already have taken place
                    if (!this.s.dt.page.info().serverSide) {
                        this.s.dt.draw();
                    }
                    this.setListeners();
                }
            };
            /**
             * Provides throttling capabilities to SearchBuilder without having to use dt's _fnThrottle function
             * This is because that function is not quite suitable for our needs as it runs initially rather than waiting
             *
             * @param args arguments supplied to the throttle function
             * @returns Function that is to be run that implements the throttling
             */
            Criteria.prototype._throttle = function (fn, frequency) {
                if (frequency === void 0) { frequency = 200; }
                var last = null;
                var timer = null;
                var that = this;
                if (frequency === null) {
                    frequency = 200;
                }
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var now = +new Date();
                    if (last !== null && now < last + frequency) {
                        clearTimeout(timer);
                    }
                    else {
                        last = now;
                    }
                    timer = setTimeout(function () {
                        last = null;
                        fn.apply(that, args);
                    }, frequency);
                };
            };
            Criteria.version = '1.1.0';
            Criteria.classes = {
                button: 'dtsb-button',
                buttonContainer: 'dtsb-buttonContainer',
                condition: 'dtsb-condition',
                container: 'dtsb-criteria',
                data: 'dtsb-data',
                "delete": 'dtsb-delete',
                dropDown: 'dtsb-dropDown',
                greyscale: 'dtsb-greyscale',
                input: 'dtsb-input',
                inputCont: 'dtsb-inputCont',
                italic: 'dtsb-italic',
                joiner: 'dtsp-joiner',
                left: 'dtsb-left',
                notItalic: 'dtsb-notItalic',
                option: 'dtsb-option',
                right: 'dtsb-right',
                select: 'dtsb-select',
                value: 'dtsb-value',
                vertical: 'dtsb-vertical'
            };
            /**
             * Default initialisation function for select conditions
             */
            Criteria.initSelect = function (that, fn, preDefined, array) {
                if (preDefined === void 0) { preDefined = null; }
                if (array === void 0) { array = false; }
                var column = that.dom.data.children('option:selected').val();
                var indexArray = that.s.dt.rows().indexes().toArray();
                var settings = that.s.dt.settings()[0];
                that.dom.valueTitle.prop('selected', true);
                // Declare select element to be used with all of the default classes and listeners.
                var el = $$3('<select/>')
                    .addClass(Criteria.classes.value)
                    .addClass(Criteria.classes.dropDown)
                    .addClass(Criteria.classes.italic)
                    .addClass(Criteria.classes.select)
                    .append(that.dom.valueTitle)
                    .on('change.dtsb', function () {
                    $$3(this).removeClass(Criteria.classes.italic);
                    fn(that, this);
                });
                if (that.c.greyscale) {
                    el.addClass(Criteria.classes.greyscale);
                }
                var added = [];
                var options = [];
                // Add all of the options from the table to the select element.
                // Only add one option for each possible value
                for (var _i = 0, indexArray_1 = indexArray; _i < indexArray_1.length; _i++) {
                    var index = indexArray_1[_i];
                    var filter = settings.oApi._fnGetCellData(settings, index, column, typeof that.c.orthogonal === 'string' ?
                        that.c.orthogonal :
                        that.c.orthogonal.search);
                    var value = {
                        filter: typeof filter === 'string' ?
                            filter.replace(/[\r\n\u2028]/g, ' ') : // Need to replace certain characters to match search values
                            filter,
                        index: index,
                        text: settings.oApi._fnGetCellData(settings, index, column, typeof that.c.orthogonal === 'string' ?
                            that.c.orthogonal :
                            that.c.orthogonal.display)
                    };
                    // If we are dealing with an array type, either make sure we are working with arrays, or sort them
                    if (that.s.type === 'array') {
                        value.filter = !Array.isArray(value.filter) ? [value.filter] : value.filter;
                        value.text = !Array.isArray(value.text) ? [value.text] : value.text;
                    }
                    // Function to add an option to the select element
                    var addOption = function (filt, text) {
                        if (that.s.type.includes('html') && filt !== null && typeof filt === 'string') {
                            filt.replace(/(<([^>]+)>)/ig, '');
                        }
                        // Add text and value, stripping out any html if that is the column type
                        var opt = $$3('<option>', {
                            type: Array.isArray(filt) ? 'Array' : 'String',
                            value: filt
                        })
                            .data('sbv', filt)
                            .addClass(that.classes.option)
                            .addClass(that.classes.notItalic)
                            // Have to add the text this way so that special html characters are not escaped - &amp; etc.
                            .html(typeof text === 'string' ?
                            text.replace(/(<([^>]+)>)/ig, '') :
                            text);
                        var val = opt.val();
                        // Check that this value has not already been added
                        if (added.indexOf(val) === -1) {
                            added.push(val);
                            options.push(opt);
                            if (preDefined !== null && Array.isArray(preDefined[0])) {
                                preDefined[0] = preDefined[0].sort().join(',');
                            }
                            // If this value was previously selected as indicated by preDefined, then select it again
                            if (preDefined !== null && opt.val() === preDefined[0]) {
                                opt.prop('selected', true);
                                el.removeClass(Criteria.classes.italic);
                                that.dom.valueTitle.removeProp('selected');
                            }
                        }
                    };
                    // If this is to add the individual values within the array we need to loop over the array
                    if (array) {
                        for (var i = 0; i < value.filter.length; i++) {
                            addOption(value.filter[i], value.text[i]);
                        }
                    }
                    // Otherwise the value that is in the cell is to be added
                    else {
                        addOption(value.filter, Array.isArray(value.text) ? value.text.join(', ') : value.text);
                    }
                }
                options.sort(function (a, b) {
                    if (that.s.type === 'array' ||
                        that.s.type === 'string' ||
                        that.s.type === 'html') {
                        if (a.val() < b.val()) {
                            return -1;
                        }
                        else if (a.val() > b.val()) {
                            return 1;
                        }
                        else {
                            return 0;
                        }
                    }
                    else if (that.s.type === 'num' ||
                        that.s.type === 'html-num') {
                        if (+a.val().replace(/(<([^>]+)>)/ig, '') < +b.val().replace(/(<([^>]+)>)/ig, '')) {
                            return -1;
                        }
                        else if (+a.val().replace(/(<([^>]+)>)/ig, '') > +b.val().replace(/(<([^>]+)>)/ig, '')) {
                            return 1;
                        }
                        else {
                            return 0;
                        }
                    }
                    else if (that.s.type === 'num-fmt' || that.s.type === 'html-num-fmt') {
                        if (+a.val().replace(/[^0-9.]/g, '') < +b.val().replace(/[^0-9.]/g, '')) {
                            return -1;
                        }
                        else if (+a.val().replace(/[^0-9.]/g, '') > +b.val().replace(/[^0-9.]/g, '')) {
                            return 1;
                        }
                        else {
                            return 0;
                        }
                    }
                });
                for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {
                    var opt = options_1[_a];
                    el.append(opt);
                }
                return el;
            };
            /**
             * Default initialisation function for select conditions
             */
            Criteria.initSelectSSP = function (that, fn, preDefined) {
                if (preDefined === void 0) { preDefined = null; }
                that.dom.valueTitle.prop('selected', true);
                // Declare select element to be used with all of the default classes and listeners.
                var el = $$3('<select/>')
                    .addClass(Criteria.classes.value)
                    .addClass(Criteria.classes.dropDown)
                    .addClass(Criteria.classes.italic)
                    .addClass(Criteria.classes.select)
                    .append(that.dom.valueTitle)
                    .on('change.dtsb', function () {
                    $$3(this).removeClass(Criteria.classes.italic);
                    fn(that, this);
                });
                if (that.c.greyscale) {
                    el.addClass(Criteria.classes.greyscale);
                }
                var options = [];
                for (var _i = 0, _a = that.s.serverData[that.s.origData]; _i < _a.length; _i++) {
                    var option = _a[_i];
                    var value = option.value;
                    var label = option.label;
                    // Function to add an option to the select element
                    var addOption = function (filt, text) {
                        if (that.s.type.includes('html') && filt !== null && typeof filt === 'string') {
                            filt.replace(/(<([^>]+)>)/ig, '');
                        }
                        // Add text and value, stripping out any html if that is the column type
                        var opt = $$3('<option>', {
                            type: Array.isArray(filt) ? 'Array' : 'String',
                            value: filt
                        })
                            .data('sbv', filt)
                            .addClass(that.classes.option)
                            .addClass(that.classes.notItalic)
                            // Have to add the text this way so that special html characters are not escaped - &amp; etc.
                            .html(typeof text === 'string' ?
                            text.replace(/(<([^>]+)>)/ig, '') :
                            text);
                        options.push(opt);
                        // If this value was previously selected as indicated by preDefined, then select it again
                        if (preDefined !== null && opt.val() === preDefined[0]) {
                            opt.prop('selected', true);
                            el.removeClass(Criteria.classes.italic);
                            that.dom.valueTitle.removeProp('selected');
                        }
                    };
                    addOption(value, label);
                }
                for (var _b = 0, options_2 = options; _b < options_2.length; _b++) {
                    var opt = options_2[_b];
                    el.append(opt);
                }
                return el;
            };
            /**
             * Default initialisation function for select array conditions
             *
             * This exists because there needs to be different select functionality for contains/without and equals/not
             */
            Criteria.initSelectArray = function (that, fn, preDefined) {
                if (preDefined === void 0) { preDefined = null; }
                return Criteria.initSelect(that, fn, preDefined, true);
            };
            /**
             * Default initialisation function for input conditions
             */
            Criteria.initInput = function (that, fn, preDefined) {
                if (preDefined === void 0) { preDefined = null; }
                // Declare the input element
                var searchDelay = that.s.dt.settings()[0].searchDelay;
                var el = $$3('<input/>')
                    .addClass(Criteria.classes.value)
                    .addClass(Criteria.classes.input)
                    .on('input.dtsb keypress.dtsb', that._throttle(function (e) {
                    var code = e.keyCode || e.which;
                    return fn(that, this, code);
                }, searchDelay === null ? 100 : searchDelay));
                if (that.c.greyscale) {
                    el.addClass(Criteria.classes.greyscale);
                }
                // If there is a preDefined value then add it
                if (preDefined !== null) {
                    el.val(preDefined[0]);
                }
                // This is add responsive functionality to the logic button without redrawing everything else
                that.s.dt.one('draw.dtsb', function () {
                    that.s.topGroup.trigger('dtsb-redrawLogic');
                });
                return el;
            };
            /**
             * Default initialisation function for conditions requiring 2 inputs
             */
            Criteria.init2Input = function (that, fn, preDefined) {
                if (preDefined === void 0) { preDefined = null; }
                // Declare all of the necessary jQuery elements
                var searchDelay = that.s.dt.settings()[0].searchDelay;
                var els = [
                    $$3('<input/>')
                        .addClass(Criteria.classes.value)
                        .addClass(Criteria.classes.input)
                        .on('input.dtsb keypress.dtsb', that._throttle(function (e) {
                        var code = e.keyCode || e.which;
                        return fn(that, this, code);
                    }, searchDelay === null ? 100 : searchDelay)),
                    $$3('<span>')
                        .addClass(that.classes.joiner)
                        .html(that.s.dt.i18n('searchBuilder.valueJoiner', that.c.i18n.valueJoiner)),
                    $$3('<input/>')
                        .addClass(Criteria.classes.value)
                        .addClass(Criteria.classes.input)
                        .on('input.dtsb keypress.dtsb', that._throttle(function (e) {
                        var code = e.keyCode || e.which;
                        return fn(that, this, code);
                    }, searchDelay === null ? 100 : searchDelay))
                ];
                if (that.c.greyscale) {
                    els[0].addClass(Criteria.classes.greyscale);
                    els[2].addClass(Criteria.classes.greyscale);
                }
                // If there is a preDefined value then add it
                if (preDefined !== null) {
                    els[0].val(preDefined[0]);
                    els[2].val(preDefined[1]);
                }
                // This is add responsive functionality to the logic button without redrawing everything else
                that.s.dt.one('draw.dtsb', function () {
                    that.s.topGroup.trigger('dtsb-redrawLogic');
                });
                return els;
            };
            /**
             * Default initialisation function for date conditions
             */
            Criteria.initDate = function (that, fn, preDefined) {
                if (preDefined === void 0) { preDefined = null; }
                var searchDelay = that.s.dt.settings()[0].searchDelay;
                var i18n = that.s.dt.i18n('datetime', {});
                // Declare date element using DataTables dateTime plugin
                var el = $$3('<input/>')
                    .addClass(Criteria.classes.value)
                    .addClass(Criteria.classes.input)
                    .dtDateTime({
                    attachTo: 'input',
                    format: that.s.dateFormat ? that.s.dateFormat : undefined,
                    i18n: i18n
                })
                    .on('change.dtsb', that._throttle(function () {
                    return fn(that, this);
                }, searchDelay === null ? 100 : searchDelay))
                    .on('input.dtsb keypress.dtsb', function (e) {
                    that._throttle(function () {
                        var code = e.keyCode || e.which;
                        return fn(that, this, code);
                    }, searchDelay === null ? 100 : searchDelay);
                });
                if (that.c.greyscale) {
                    el.addClass(Criteria.classes.greyscale);
                }
                // If there is a preDefined value then add it
                if (preDefined !== null) {
                    el.val(preDefined[0]);
                }
                // This is add responsive functionality to the logic button without redrawing everything else
                that.s.dt.one('draw.dtsb', function () {
                    that.s.topGroup.trigger('dtsb-redrawLogic');
                });
                return el;
            };
            Criteria.initNoValue = function (that) {
                // This is add responsive functionality to the logic button without redrawing everything else
                that.s.dt.one('draw.dtsb', function () {
                    that.s.topGroup.trigger('dtsb-redrawLogic');
                });
                return [];
            };
            Criteria.init2Date = function (that, fn, preDefined) {
                var _this = this;
                if (preDefined === void 0) { preDefined = null; }
                var searchDelay = that.s.dt.settings()[0].searchDelay;
                var i18n = that.s.dt.i18n('datetime', {});
                // Declare all of the date elements that are required using DataTables dateTime plugin
                var els = [
                    $$3('<input/>')
                        .addClass(Criteria.classes.value)
                        .addClass(Criteria.classes.input)
                        .dtDateTime({
                        attachTo: 'input',
                        format: that.s.dateFormat ? that.s.dateFormat : undefined,
                        i18n: i18n
                    })
                        .on('change.dtsb', searchDelay !== null ?
                        that.s.dt.settings()[0].oApi._fnThrottle(function () {
                            return fn(that, this);
                        }, searchDelay) :
                        function () {
                            fn(that, _this);
                        })
                        .on('input.dtsb keypress.dtsb', function (e) {
                        that.s.dt.settings()[0].oApi._fnThrottle(function () {
                            var code = e.keyCode || e.which;
                            return fn(that, this, code);
                        }, searchDelay === null ? 0 : searchDelay);
                    }),
                    $$3('<span>')
                        .addClass(that.classes.joiner)
                        .html(that.s.dt.i18n('searchBuilder.valueJoiner', that.c.i18n.valueJoiner)),
                    $$3('<input/>')
                        .addClass(Criteria.classes.value)
                        .addClass(Criteria.classes.input)
                        .dtDateTime({
                        attachTo: 'input',
                        format: that.s.dateFormat ? that.s.dateFormat : undefined,
                        i18n: i18n
                    })
                        .on('change.dtsb', searchDelay !== null ?
                        that.s.dt.settings()[0].oApi._fnThrottle(function () {
                            return fn(that, this);
                        }, searchDelay) :
                        function () {
                            fn(that, _this);
                        })
                        .on('input.dtsb keypress.dtsb', !that.c.enterSearch &&
                        !(that.s.dt.settings()[0].oInit.search !== undefined &&
                            that.s.dt.settings()[0].oInit.search["return"]) &&
                        searchDelay !== null ?
                        that.s.dt.settings()[0].oApi._fnThrottle(function () {
                            return fn(that, this);
                        }, searchDelay) :
                        function (e) {
                            var code = e.keyCode || e.which;
                            fn(that, _this, code);
                        })
                ];
                if (that.c.greyscale) {
                    els[0].addClass(Criteria.classes.greyscale);
                    els[2].addClass(Criteria.classes.greyscale);
                }
                // If there are and preDefined values then add them
                if (preDefined !== null && preDefined.length > 0) {
                    els[0].val(preDefined[0]);
                    els[2].val(preDefined[1]);
                }
                // This is add responsive functionality to the logic button without redrawing everything else
                that.s.dt.one('draw.dtsb', function () {
                    that.s.topGroup.trigger('dtsb-redrawLogic');
                });
                return els;
            };
            /**
             * Default function for select elements to validate condition
             */
            Criteria.isInputValidSelect = function (el) {
                var allFilled = true;
                // Check each element to make sure that the selections are valid
                for (var _i = 0, el_1 = el; _i < el_1.length; _i++) {
                    var element = el_1[_i];
                    if (element.children('option:selected').length ===
                        element.children('option').length -
                            element.children('option.' + Criteria.classes.notItalic).length &&
                        element.children('option:selected').length === 1 &&
                        element.children('option:selected')[0] === element.children('option')[0]) {
                        allFilled = false;
                    }
                }
                return allFilled;
            };
            /**
             * Default function for input and date elements to validate condition
             */
            Criteria.isInputValidInput = function (el) {
                var allFilled = true;
                // Check each element to make sure that the inputs are valid
                for (var _i = 0, el_2 = el; _i < el_2.length; _i++) {
                    var element = el_2[_i];
                    if (element.is('input') && element.val().length === 0) {
                        allFilled = false;
                    }
                }
                return allFilled;
            };
            /**
             * Default function for getting select conditions
             */
            Criteria.inputValueSelect = function (el) {
                var values = [];
                // Go through the select elements and push each selected option to the return array
                for (var _i = 0, el_3 = el; _i < el_3.length; _i++) {
                    var element = el_3[_i];
                    if (element.is('select')) {
                        values.push(Criteria._escapeHTML(element.children('option:selected').data('sbv')));
                    }
                }
                return values;
            };
            /**
             * Default function for getting input conditions
             */
            Criteria.inputValueInput = function (el) {
                var values = [];
                // Go through the input elements and push each value to the return array
                for (var _i = 0, el_4 = el; _i < el_4.length; _i++) {
                    var element = el_4[_i];
                    if (element.is('input')) {
                        values.push(Criteria._escapeHTML(element.val()));
                    }
                }
                return values;
            };
            /**
             * Function that is run on each element as a call back when a search should be triggered
             */
            Criteria.updateListener = function (that, el, code) {
                // When the value is changed the criteria is now complete so can be included in searches
                // Get the condition from the map based on the key that has been selected for the condition
                var condition = that.s.conditions[that.s.condition];
                that.s.filled = condition.isInputValid(that.dom.value, that);
                that.s.value = condition.inputValue(that.dom.value, that);
                if (!that.s.filled) {
                    if (!that.c.enterSearch &&
                        !(that.s.dt.settings()[0].oInit.search !== undefined &&
                            that.s.dt.settings()[0].oInit.search["return"]) ||
                        code === 13) {
                        that.s.dt.draw();
                    }
                    return;
                }
                if (!Array.isArray(that.s.value)) {
                    that.s.value = [that.s.value];
                }
                for (var i = 0; i < that.s.value.length; i++) {
                    // If the value is an array we need to sort it
                    if (Array.isArray(that.s.value[i])) {
                        that.s.value[i].sort();
                    }
                    // Otherwise replace the decimal place character for i18n
                    else if (that.s.type.includes('num') &&
                        (that.s.dt.settings()[0].oLanguage.sDecimal !== '' ||
                            that.s.dt.settings()[0].oLanguage.sThousands !== '')) {
                        var splitRD = [that.s.value[i].toString()];
                        if (that.s.dt.settings()[0].oLanguage.sDecimal !== '') {
                            splitRD = that.s.value[i].split(that.s.dt.settings()[0].oLanguage.sDecimal);
                        }
                        if (that.s.dt.settings()[0].oLanguage.sThousands !== '') {
                            for (var j = 0; j < splitRD.length; j++) {
                                splitRD[j] = splitRD[j].replace(that.s.dt.settings()[0].oLanguage.sThousands, ',');
                            }
                        }
                        that.s.value[i] = splitRD.join('.');
                    }
                }
                // Take note of the cursor position so that we can refocus there later
                var idx = null;
                var cursorPos = null;
                for (var i = 0; i < that.dom.value.length; i++) {
                    if (el === that.dom.value[i][0]) {
                        idx = i;
                        if (el.selectionStart !== undefined) {
                            cursorPos = el.selectionStart;
                        }
                    }
                }
                if (!that.c.enterSearch &&
                    !(that.s.dt.settings()[0].oInit.search !== undefined &&
                        that.s.dt.settings()[0].oInit.search["return"]) ||
                    code === 13) {
                    // Trigger a search
                    that.s.dt.draw();
                }
                // Refocus the element and set the correct cursor position
                if (idx !== null) {
                    that.dom.value[idx].removeClass(that.classes.italic);
                    that.dom.value[idx].focus();
                    if (cursorPos !== null) {
                        that.dom.value[idx][0].setSelectionRange(cursorPos, cursorPos);
                    }
                }
            };
            // The order of the conditions will make eslint sad :(
            // Has to be in this order so that they are displayed correctly in select elements
            // Also have to disable member ordering for this as the private methods used are not yet declared otherwise
            // eslint-disable-next-line @typescript-eslint/member-ordering
            Criteria.dateConditions = {
                '=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.equals', i18n.conditions.date.equals);
                    },
                    init: Criteria.initDate,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        value = value.replace(/(\/|-|,)/g, '-');
                        return value === comparison[0];
                    }
                },
                // eslint-disable-next-line sort-keys
                '!=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.not', i18n.conditions.date.not);
                    },
                    init: Criteria.initDate,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        value = value.replace(/(\/|-|,)/g, '-');
                        return value !== comparison[0];
                    }
                },
                '<': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.before', i18n.conditions.date.before);
                    },
                    init: Criteria.initDate,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        value = value.replace(/(\/|-|,)/g, '-');
                        return value < comparison[0];
                    }
                },
                '>': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.after', i18n.conditions.date.after);
                    },
                    init: Criteria.initDate,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        value = value.replace(/(\/|-|,)/g, '-');
                        return value > comparison[0];
                    }
                },
                'between': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.between', i18n.conditions.date.between);
                    },
                    init: Criteria.init2Date,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        value = value.replace(/(\/|-|,)/g, '-');
                        if (comparison[0] < comparison[1]) {
                            return comparison[0] <= value && value <= comparison[1];
                        }
                        else {
                            return comparison[1] <= value && value <= comparison[0];
                        }
                    }
                },
                // eslint-disable-next-line sort-keys
                '!between': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.notBetween', i18n.conditions.date.notBetween);
                    },
                    init: Criteria.init2Date,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        value = value.replace(/(\/|-|,)/g, '-');
                        if (comparison[0] < comparison[1]) {
                            return !(comparison[0] <= value && value <= comparison[1]);
                        }
                        else {
                            return !(comparison[1] <= value && value <= comparison[0]);
                        }
                    }
                },
                'null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.empty', i18n.conditions.date.empty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return value === null || value === undefined || value.length === 0;
                    }
                },
                // eslint-disable-next-line sort-keys
                '!null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.notEmpty', i18n.conditions.date.notEmpty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return !(value === null || value === undefined || value.length === 0);
                    }
                }
            };
            // The order of the conditions will make eslint sad :(
            // Has to be in this order so that they are displayed correctly in select elements
            // Also have to disable member ordering for this as the private methods used are not yet declared otherwise
            // eslint-disable-next-line @typescript-eslint/member-ordering
            Criteria.momentDateConditions = {
                '=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.equals', i18n.conditions.date.equals);
                    },
                    init: Criteria.initDate,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison, that) {
                        return moment()(value, that.s.dateFormat).valueOf() ===
                            moment()(comparison[0], that.s.dateFormat).valueOf();
                    }
                },
                // eslint-disable-next-line sort-keys
                '!=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.not', i18n.conditions.date.not);
                    },
                    init: Criteria.initDate,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison, that) {
                        return moment()(value, that.s.dateFormat).valueOf() !==
                            moment()(comparison[0], that.s.dateFormat).valueOf();
                    }
                },
                '<': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.before', i18n.conditions.date.before);
                    },
                    init: Criteria.initDate,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison, that) {
                        return moment()(value, that.s.dateFormat).valueOf() < moment()(comparison[0], that.s.dateFormat).valueOf();
                    }
                },
                '>': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.after', i18n.conditions.date.after);
                    },
                    init: Criteria.initDate,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison, that) {
                        return moment()(value, that.s.dateFormat).valueOf() > moment()(comparison[0], that.s.dateFormat).valueOf();
                    }
                },
                'between': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.between', i18n.conditions.date.between);
                    },
                    init: Criteria.init2Date,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison, that) {
                        var val = moment()(value, that.s.dateFormat).valueOf();
                        var comp0 = moment()(comparison[0], that.s.dateFormat).valueOf();
                        var comp1 = moment()(comparison[1], that.s.dateFormat).valueOf();
                        if (comp0 < comp1) {
                            return comp0 <= val && val <= comp1;
                        }
                        else {
                            return comp1 <= val && val <= comp0;
                        }
                    }
                },
                // eslint-disable-next-line sort-keys
                '!between': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.notBetween', i18n.conditions.date.notBetween);
                    },
                    init: Criteria.init2Date,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison, that) {
                        var val = moment()(value, that.s.dateFormat).valueOf();
                        var comp0 = moment()(comparison[0], that.s.dateFormat).valueOf();
                        var comp1 = moment()(comparison[1], that.s.dateFormat).valueOf();
                        if (comp0 < comp1) {
                            return !(+comp0 <= +val && +val <= +comp1);
                        }
                        else {
                            return !(+comp1 <= +val && +val <= +comp0);
                        }
                    }
                },
                'null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.empty', i18n.conditions.date.empty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return value === null || value === undefined || value.length === 0;
                    }
                },
                // eslint-disable-next-line sort-keys
                '!null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.notEmpty', i18n.conditions.date.notEmpty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return !(value === null || value === undefined || value.length === 0);
                    }
                }
            };
            // The order of the conditions will make eslint sad :(
            // Has to be in this order so that they are displayed correctly in select elements
            // Also have to disable member ordering for this as the private methods used are not yet declared otherwise
            // eslint-disable-next-line @typescript-eslint/member-ordering
            Criteria.luxonDateConditions = {
                '=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.equals', i18n.conditions.date.equals);
                    },
                    init: Criteria.initDate,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison, that) {
                        return luxon().DateTime.fromFormat(value, that.s.dateFormat).ts
                            === luxon().DateTime.fromFormat(comparison[0], that.s.dateFormat).ts;
                    }
                },
                // eslint-disable-next-line sort-keys
                '!=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.not', i18n.conditions.date.not);
                    },
                    init: Criteria.initDate,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison, that) {
                        return luxon().DateTime.fromFormat(value, that.s.dateFormat).ts
                            !== luxon().DateTime.fromFormat(comparison[0], that.s.dateFormat).ts;
                    }
                },
                '<': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.before', i18n.conditions.date.before);
                    },
                    init: Criteria.initDate,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison, that) {
                        return luxon().DateTime.fromFormat(value, that.s.dateFormat).ts
                            < luxon().DateTime.fromFormat(comparison[0], that.s.dateFormat).ts;
                    }
                },
                '>': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.after', i18n.conditions.date.after);
                    },
                    init: Criteria.initDate,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison, that) {
                        return luxon().DateTime.fromFormat(value, that.s.dateFormat).ts
                            > luxon().DateTime.fromFormat(comparison[0], that.s.dateFormat).ts;
                    }
                },
                'between': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.between', i18n.conditions.date.between);
                    },
                    init: Criteria.init2Date,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison, that) {
                        var val = luxon().DateTime.fromFormat(value, that.s.dateFormat).ts;
                        var comp0 = luxon().DateTime.fromFormat(comparison[0], that.s.dateFormat).ts;
                        var comp1 = luxon().DateTime.fromFormat(comparison[1], that.s.dateFormat).ts;
                        if (comp0 < comp1) {
                            return comp0 <= val && val <= comp1;
                        }
                        else {
                            return comp1 <= val && val <= comp0;
                        }
                    }
                },
                // eslint-disable-next-line sort-keys
                '!between': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.notBetween', i18n.conditions.date.notBetween);
                    },
                    init: Criteria.init2Date,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison, that) {
                        var val = luxon().DateTime.fromFormat(value, that.s.dateFormat).ts;
                        var comp0 = luxon().DateTime.fromFormat(comparison[0], that.s.dateFormat).ts;
                        var comp1 = luxon().DateTime.fromFormat(comparison[1], that.s.dateFormat).ts;
                        if (comp0 < comp1) {
                            return !(+comp0 <= +val && +val <= +comp1);
                        }
                        else {
                            return !(+comp1 <= +val && +val <= +comp0);
                        }
                    }
                },
                'null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.empty', i18n.conditions.date.empty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return value === null || value === undefined || value.length === 0;
                    }
                },
                // eslint-disable-next-line sort-keys
                '!null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.date.notEmpty', i18n.conditions.date.notEmpty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return !(value === null || value === undefined || value.length === 0);
                    }
                }
            };
            // The order of the conditions will make eslint sad :(
            // Has to be in this order so that they are displayed correctly in select elements
            // Also have to disable member ordering for this as the private methods used are not yet declared otherwise
            // eslint-disable-next-line @typescript-eslint/member-ordering
            Criteria.numConditions = {
                '=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.equals', i18n.conditions.number.equals);
                    },
                    init: Criteria.initSelect,
                    inputValue: Criteria.inputValueSelect,
                    isInputValid: Criteria.isInputValidSelect,
                    search: function (value, comparison) {
                        return +value === +comparison[0];
                    }
                },
                // eslint-disable-next-line sort-keys
                '!=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.not', i18n.conditions.number.not);
                    },
                    init: Criteria.initSelect,
                    inputValue: Criteria.inputValueSelect,
                    isInputValid: Criteria.isInputValidSelect,
                    search: function (value, comparison) {
                        return +value !== +comparison[0];
                    }
                },
                '<': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.lt', i18n.conditions.number.lt);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return +value < +comparison[0];
                    }
                },
                '<=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.lte', i18n.conditions.number.lte);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return +value <= +comparison[0];
                    }
                },
                '>=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.gte', i18n.conditions.number.gte);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return +value >= +comparison[0];
                    }
                },
                // eslint-disable-next-line sort-keys
                '>': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.gt', i18n.conditions.number.gt);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return +value > +comparison[0];
                    }
                },
                'between': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.between', i18n.conditions.number.between);
                    },
                    init: Criteria.init2Input,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        if (+comparison[0] < +comparison[1]) {
                            return +comparison[0] <= +value && +value <= +comparison[1];
                        }
                        else {
                            return +comparison[1] <= +value && +value <= +comparison[0];
                        }
                    }
                },
                // eslint-disable-next-line sort-keys
                '!between': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.notBetween', i18n.conditions.number.notBetween);
                    },
                    init: Criteria.init2Input,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        if (+comparison[0] < +comparison[1]) {
                            return !(+comparison[0] <= +value && +value <= +comparison[1]);
                        }
                        else {
                            return !(+comparison[1] <= +value && +value <= +comparison[0]);
                        }
                    }
                },
                'null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.empty', i18n.conditions.number.empty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return value === null || value === undefined || value.length === 0;
                    }
                },
                // eslint-disable-next-line sort-keys
                '!null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.notEmpty', i18n.conditions.number.notEmpty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return !(value === null || value === undefined || value.length === 0);
                    }
                }
            };
            // The order of the conditions will make eslint sad :(
            // Has to be in this order so that they are displayed correctly in select elements
            // Also have to disable member ordering for this as the private methods used are not yet declared otherwise
            // eslint-disable-next-line @typescript-eslint/member-ordering
            Criteria.numFmtConditions = {
                '=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.equals', i18n.conditions.number.equals);
                    },
                    init: Criteria.initSelect,
                    inputValue: Criteria.inputValueSelect,
                    isInputValid: Criteria.isInputValidSelect,
                    search: function (value, comparison) {
                        return Criteria.parseNumFmt(value) === Criteria.parseNumFmt(comparison[0]);
                    }
                },
                // eslint-disable-next-line sort-keys
                '!=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.not', i18n.conditions.number.not);
                    },
                    init: Criteria.initSelect,
                    inputValue: Criteria.inputValueSelect,
                    isInputValid: Criteria.isInputValidSelect,
                    search: function (value, comparison) {
                        return Criteria.parseNumFmt(value) !== Criteria.parseNumFmt(comparison[0]);
                    }
                },
                '<': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.lt', i18n.conditions.number.lt);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return Criteria.parseNumFmt(value) < Criteria.parseNumFmt(comparison[0]);
                    }
                },
                '<=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.lte', i18n.conditions.number.lte);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return Criteria.parseNumFmt(value) <= Criteria.parseNumFmt(comparison[0]);
                    }
                },
                '>=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.gte', i18n.conditions.number.gte);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return Criteria.parseNumFmt(value) >= Criteria.parseNumFmt(comparison[0]);
                    }
                },
                // eslint-disable-next-line sort-keys
                '>': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.gt', i18n.conditions.number.gt);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return Criteria.parseNumFmt(value) > Criteria.parseNumFmt(comparison[0]);
                    }
                },
                'between': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.between', i18n.conditions.number.between);
                    },
                    init: Criteria.init2Input,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        var val = Criteria.parseNumFmt(value);
                        var comp0 = Criteria.parseNumFmt(comparison[0]);
                        var comp1 = Criteria.parseNumFmt(comparison[1]);
                        if (+comp0 < +comp1) {
                            return +comp0 <= +val && +val <= +comp1;
                        }
                        else {
                            return +comp1 <= +val && +val <= +comp0;
                        }
                    }
                },
                // eslint-disable-next-line sort-keys
                '!between': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.notBetween', i18n.conditions.number.notBetween);
                    },
                    init: Criteria.init2Input,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        var val = Criteria.parseNumFmt(value);
                        var comp0 = Criteria.parseNumFmt(comparison[0]);
                        var comp1 = Criteria.parseNumFmt(comparison[1]);
                        if (+comp0 < +comp1) {
                            return !(+comp0 <= +val && +val <= +comp1);
                        }
                        else {
                            return !(+comp1 <= +val && +val <= +comp0);
                        }
                    }
                },
                'null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.empty', i18n.conditions.number.empty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return value === null || value === undefined || value.length === 0;
                    }
                },
                // eslint-disable-next-line sort-keys
                '!null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.number.notEmpty', i18n.conditions.number.notEmpty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return !(value === null || value === undefined || value.length === 0);
                    }
                }
            };
            // The order of the conditions will make eslint sad :(
            // Has to be in this order so that they are displayed correctly in select elements
            // Also have to disable member ordering for this as the private methods used are not yet declared otherwise
            // eslint-disable-next-line @typescript-eslint/member-ordering
            Criteria.stringConditions = {
                '=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.string.equals', i18n.conditions.string.equals);
                    },
                    init: Criteria.initSelect,
                    inputValue: Criteria.inputValueSelect,
                    isInputValid: Criteria.isInputValidSelect,
                    search: function (value, comparison) {
                        return value === comparison[0];
                    }
                },
                // eslint-disable-next-line sort-keys
                '!=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.string.not', i18n.conditions.string.not);
                    },
                    init: Criteria.initSelect,
                    inputValue: Criteria.inputValueSelect,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return value !== comparison[0];
                    }
                },
                'starts': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.string.startsWith', i18n.conditions.string.startsWith);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return value.toLowerCase().indexOf(comparison[0].toLowerCase()) === 0;
                    }
                },
                // eslint-disable-next-line sort-keys
                '!starts': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.string.notStartsWith', i18n.conditions.string.notStartsWith);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return value.toLowerCase().indexOf(comparison[0].toLowerCase()) !== 0;
                    }
                },
                // eslint-disable-next-line sort-keys
                'contains': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.string.contains', i18n.conditions.string.contains);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return value.toLowerCase().includes(comparison[0].toLowerCase());
                    }
                },
                // eslint-disable-next-line sort-keys
                '!contains': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.string.notContains', i18n.conditions.string.notContains);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return !value.toLowerCase().includes(comparison[0].toLowerCase());
                    }
                },
                'ends': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.string.endsWith', i18n.conditions.string.endsWith);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return value.toLowerCase().endsWith(comparison[0].toLowerCase());
                    }
                },
                // eslint-disable-next-line sort-keys
                '!ends': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.string.notEndsWith', i18n.conditions.string.notEndsWith);
                    },
                    init: Criteria.initInput,
                    inputValue: Criteria.inputValueInput,
                    isInputValid: Criteria.isInputValidInput,
                    search: function (value, comparison) {
                        return !value.toLowerCase().endsWith(comparison[0].toLowerCase());
                    }
                },
                'null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.string.empty', i18n.conditions.string.empty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return value === null || value === undefined || value.length === 0;
                    }
                },
                // eslint-disable-next-line sort-keys
                '!null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.string.notEmpty', i18n.conditions.string.notEmpty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return !(value === null || value === undefined || value.length === 0);
                    }
                }
            };
            // The order of the conditions will make eslint sad :(
            // Also have to disable member ordering for this as the private methods used are not yet declared otherwise
            // eslint-disable-next-line @typescript-eslint/member-ordering
            Criteria.arrayConditions = {
                'contains': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.array.contains', i18n.conditions.array.contains);
                    },
                    init: Criteria.initSelectArray,
                    inputValue: Criteria.inputValueSelect,
                    isInputValid: Criteria.isInputValidSelect,
                    search: function (value, comparison) {
                        return value.includes(comparison[0]);
                    }
                },
                'without': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.array.without', i18n.conditions.array.without);
                    },
                    init: Criteria.initSelectArray,
                    inputValue: Criteria.inputValueSelect,
                    isInputValid: Criteria.isInputValidSelect,
                    search: function (value, comparison) {
                        return value.indexOf(comparison[0]) === -1;
                    }
                },
                // eslint-disable-next-line sort-keys
                '=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.array.equals', i18n.conditions.array.equals);
                    },
                    init: Criteria.initSelect,
                    inputValue: Criteria.inputValueSelect,
                    isInputValid: Criteria.isInputValidSelect,
                    search: function (value, comparison) {
                        if (value.length === comparison[0].length) {
                            for (var i = 0; i < value.length; i++) {
                                if (value[i] !== comparison[0][i]) {
                                    return false;
                                }
                            }
                            return true;
                        }
                        return false;
                    }
                },
                // eslint-disable-next-line sort-keys
                '!=': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.array.not', i18n.conditions.array.not);
                    },
                    init: Criteria.initSelect,
                    inputValue: Criteria.inputValueSelect,
                    isInputValid: Criteria.isInputValidSelect,
                    search: function (value, comparison) {
                        if (value.length === comparison[0].length) {
                            for (var i = 0; i < value.length; i++) {
                                if (value[i] !== comparison[0][i]) {
                                    return true;
                                }
                            }
                            return false;
                        }
                        return true;
                    }
                },
                'null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.array.empty', i18n.conditions.array.empty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return value === null || value === undefined || value.length === 0;
                    }
                },
                // eslint-disable-next-line sort-keys
                '!null': {
                    conditionName: function (dt, i18n) {
                        return dt.i18n('searchBuilder.conditions.array.notEmpty', i18n.conditions.array.notEmpty);
                    },
                    init: Criteria.initNoValue,
                    inputValue: function () {
                        return;
                    },
                    isInputValid: function () {
                        return true;
                    },
                    search: function (value) {
                        return value !== null && value !== undefined && value.length !== 0;
                    }
                }
            };
            // eslint will be sad because we have to disable member ordering for this as the
            // private static properties used are not yet declared otherwise
            // eslint-disable-next-line @typescript-eslint/member-ordering
            Criteria.defaults = {
                columns: true,
                conditions: {
                    'array': Criteria.arrayConditions,
                    'date': Criteria.dateConditions,
                    'html': Criteria.stringConditions,
                    'html-num': Criteria.numConditions,
                    'html-num-fmt': Criteria.numFmtConditions,
                    'luxon': Criteria.luxonDateConditions,
                    'moment': Criteria.momentDateConditions,
                    'num': Criteria.numConditions,
                    'num-fmt': Criteria.numFmtConditions,
                    'string': Criteria.stringConditions
                },
                depthLimit: false,
                enterSearch: false,
                filterChanged: undefined,
                greyscale: false,
                i18n: {
                    add: 'Add Condition',
                    button: {
                        0: 'Search Builder',
                        _: 'Search Builder (%d)'
                    },
                    clearAll: 'Clear All',
                    condition: 'Condition',
                    data: 'Data',
                    "delete": '&times',
                    deleteTitle: 'Delete filtering rule',
                    left: '<',
                    leftTitle: 'Outdent criteria',
                    logicAnd: 'And',
                    logicOr: 'Or',
                    right: '>',
                    rightTitle: 'Indent criteria',
                    title: {
                        0: 'Custom Search Builder',
                        _: 'Custom Search Builder (%d)'
                    },
                    value: 'Value',
                    valueJoiner: 'and'
                },
                logic: 'AND',
                orthogonal: {
                    display: 'display',
                    search: 'filter'
                },
                preDefined: false
            };
            return Criteria;
        }());

        var $$2;
        var dataTable$2;
        /**
         * Sets the value of jQuery for use in the file
         *
         * @param jq the instance of jQuery to be set
         */
        function setJQuery$1(jq) {
            $$2 = jq;
            dataTable$2 = jq.fn.dataTable;
        }
        /**
         * The Group class is used within SearchBuilder to represent a group of criteria
         */
        var Group = /** @class */ (function () {
            function Group(table, opts, topGroup, index, isChild, depth, serverData) {
                if (index === void 0) { index = 0; }
                if (isChild === void 0) { isChild = false; }
                if (depth === void 0) { depth = 1; }
                if (serverData === void 0) { serverData = undefined; }
                // Check that the required version of DataTables is included
                if (!dataTable$2 || !dataTable$2.versionCheck || !dataTable$2.versionCheck('1.10.0')) {
                    throw new Error('SearchBuilder requires DataTables 1.10 or newer');
                }
                this.classes = $$2.extend(true, {}, Group.classes);
                // Get options from user
                this.c = $$2.extend(true, {}, Group.defaults, opts);
                this.s = {
                    criteria: [],
                    depth: depth,
                    dt: table,
                    index: index,
                    isChild: isChild,
                    logic: undefined,
                    opts: opts,
                    preventRedraw: false,
                    serverData: serverData,
                    toDrop: undefined,
                    topGroup: topGroup
                };
                this.dom = {
                    add: $$2('<button/>')
                        .addClass(this.classes.add)
                        .addClass(this.classes.button)
                        .attr('type', 'button'),
                    clear: $$2('<button>&times</button>')
                        .addClass(this.classes.button)
                        .addClass(this.classes.clearGroup)
                        .attr('type', 'button'),
                    container: $$2('<div/>')
                        .addClass(this.classes.group),
                    logic: $$2('<button><div/></button>')
                        .addClass(this.classes.logic)
                        .addClass(this.classes.button)
                        .attr('type', 'button'),
                    logicContainer: $$2('<div/>')
                        .addClass(this.classes.logicContainer)
                };
                // A reference to the top level group is maintained throughout any subgroups and criteria that may be created
                if (this.s.topGroup === undefined) {
                    this.s.topGroup = this.dom.container;
                }
                this._setup();
                return this;
            }
            /**
             * Destroys the groups buttons, clears the internal criteria and removes it from the dom
             */
            Group.prototype.destroy = function () {
                // Turn off listeners
                this.dom.add.off('.dtsb');
                this.dom.logic.off('.dtsb');
                // Trigger event for groups at a higher level to pick up on
                this.dom.container
                    .trigger('dtsb-destroy')
                    .remove();
                this.s.criteria = [];
            };
            /**
             * Gets the details required to rebuild the group
             */
            // Eslint upset at empty object but needs to be done
            // eslint-disable-next-line @typescript-eslint/ban-types
            Group.prototype.getDetails = function (deFormatDates) {
                if (deFormatDates === void 0) { deFormatDates = false; }
                if (this.s.criteria.length === 0) {
                    return {};
                }
                var details = {
                    criteria: [],
                    logic: this.s.logic
                };
                // NOTE here crit could be either a subgroup or a criteria
                for (var _i = 0, _a = this.s.criteria; _i < _a.length; _i++) {
                    var crit = _a[_i];
                    details.criteria.push(crit.criteria.getDetails(deFormatDates));
                }
                return details;
            };
            /**
             * Getter for the node for the container of the group
             *
             * @returns Node for the container of the group
             */
            Group.prototype.getNode = function () {
                return this.dom.container;
            };
            /**
             * Rebuilds the group based upon the details passed in
             *
             * @param loadedDetails the details required to rebuild the group
             */
            Group.prototype.rebuild = function (loadedDetails) {
                // If no criteria are stored then just return
                if (loadedDetails.criteria === undefined ||
                    loadedDetails.criteria === null ||
                    Array.isArray(loadedDetails.criteria) && loadedDetails.criteria.length === 0) {
                    return;
                }
                this.s.logic = loadedDetails.logic;
                this.dom.logic.children().first().html(this.s.logic === 'OR'
                    ? this.s.dt.i18n('searchBuilder.logicOr', this.c.i18n.logicOr)
                    : this.s.dt.i18n('searchBuilder.logicAnd', this.c.i18n.logicAnd));
                // Add all of the criteria, be it a sub group or a criteria
                if (Array.isArray(loadedDetails.criteria)) {
                    for (var _i = 0, _a = loadedDetails.criteria; _i < _a.length; _i++) {
                        var crit = _a[_i];
                        if (crit.logic !== undefined) {
                            this._addPrevGroup(crit);
                        }
                        else if (crit.logic === undefined) {
                            this._addPrevCriteria(crit);
                        }
                    }
                }
                // For all of the criteria children, update the arrows incase they require changing and set the listeners
                for (var _b = 0, _c = this.s.criteria; _b < _c.length; _b++) {
                    var crit = _c[_b];
                    if (crit.criteria instanceof Criteria) {
                        crit.criteria.updateArrows(this.s.criteria.length > 1);
                        this._setCriteriaListeners(crit.criteria);
                    }
                }
            };
            /**
             * Redraws the Contents of the searchBuilder Groups and Criteria
             */
            Group.prototype.redrawContents = function () {
                if (this.s.preventRedraw) {
                    return;
                }
                // Clear the container out and add the basic elements
                this.dom.container.children().detach();
                this.dom.container
                    .append(this.dom.logicContainer)
                    .append(this.dom.add);
                // Sort the criteria by index so that they appear in the correct order
                this.s.criteria.sort(function (a, b) {
                    if (a.criteria.s.index < b.criteria.s.index) {
                        return -1;
                    }
                    else if (a.criteria.s.index > b.criteria.s.index) {
                        return 1;
                    }
                    return 0;
                });
                this.setListeners();
                for (var i = 0; i < this.s.criteria.length; i++) {
                    var crit = this.s.criteria[i].criteria;
                    if (crit instanceof Criteria) {
                        // Reset the index to the new value
                        this.s.criteria[i].index = i;
                        this.s.criteria[i].criteria.s.index = i;
                        // Add to the group
                        this.s.criteria[i].criteria.dom.container.insertBefore(this.dom.add);
                        // Set listeners for various points
                        this._setCriteriaListeners(crit);
                        this.s.criteria[i].criteria.s.preventRedraw = this.s.preventRedraw;
                        this.s.criteria[i].criteria.rebuild(this.s.criteria[i].criteria.getDetails());
                        this.s.criteria[i].criteria.s.preventRedraw = false;
                    }
                    else if (crit instanceof Group && crit.s.criteria.length > 0) {
                        // Reset the index to the new value
                        this.s.criteria[i].index = i;
                        this.s.criteria[i].criteria.s.index = i;
                        // Add the sub group to the group
                        this.s.criteria[i].criteria.dom.container.insertBefore(this.dom.add);
                        // Redraw the contents of the group
                        crit.s.preventRedraw = this.s.preventRedraw;
                        crit.redrawContents();
                        crit.s.preventRedraw = false;
                        this._setGroupListeners(crit);
                    }
                    else {
                        // The group is empty so remove it
                        this.s.criteria.splice(i, 1);
                        i--;
                    }
                }
                this.setupLogic();
            };
            /**
             * Resizes the logic button only rather than the entire dom.
             */
            Group.prototype.redrawLogic = function () {
                for (var _i = 0, _a = this.s.criteria; _i < _a.length; _i++) {
                    var crit = _a[_i];
                    if (crit.criteria instanceof Group) {
                        crit.criteria.redrawLogic();
                    }
                }
                this.setupLogic();
            };
            /**
             * Search method, checking the row data against the criteria in the group
             *
             * @param rowData The row data to be compared
             * @returns boolean The result of the search
             */
            Group.prototype.search = function (rowData, rowIdx) {
                if (this.s.logic === 'AND') {
                    return this._andSearch(rowData, rowIdx);
                }
                else if (this.s.logic === 'OR') {
                    return this._orSearch(rowData, rowIdx);
                }
                return true;
            };
            /**
             * Locates the groups logic button to the correct location on the page
             */
            Group.prototype.setupLogic = function () {
                // Remove logic button
                this.dom.logicContainer.remove();
                this.dom.clear.remove();
                // If there are no criteria in the group then keep the logic removed and return
                if (this.s.criteria.length < 1) {
                    if (!this.s.isChild) {
                        this.dom.container.trigger('dtsb-destroy');
                        // Set criteria left margin
                        this.dom.container.css('margin-left', 0);
                    }
                    return;
                }
                this.dom.clear.height('0px');
                this.dom.logicContainer.append(this.dom.clear);
                // Prepend logic button
                this.dom.container.prepend(this.dom.logicContainer);
                for (var _i = 0, _a = this.s.criteria; _i < _a.length; _i++) {
                    var crit = _a[_i];
                    if (crit.criteria instanceof Criteria) {
                        crit.criteria.setupButtons();
                    }
                }
                // Set width, take 2 for the border
                var height = this.dom.container.outerHeight() - 1;
                this.dom.logicContainer.width(height);
                this._setLogicListener();
                // Set criteria left margin
                this.dom.container.css('margin-left', this.dom.logicContainer.outerHeight(true));
                var logicOffset = this.dom.logicContainer.offset();
                // Set horizontal alignment
                var currentLeft = logicOffset.left;
                var groupLeft = this.dom.container.offset().left;
                var shuffleLeft = currentLeft - groupLeft;
                var newPos = currentLeft - shuffleLeft - this.dom.logicContainer.outerHeight(true);
                this.dom.logicContainer.offset({ left: newPos });
                // Set vertical alignment
                var firstCrit = this.dom.logicContainer.next();
                var currentTop = logicOffset.top;
                var firstTop = $$2(firstCrit).offset().top;
                var shuffleTop = currentTop - firstTop;
                var newTop = currentTop - shuffleTop;
                this.dom.logicContainer.offset({ top: newTop });
                this.dom.clear.outerHeight(this.dom.logicContainer.height());
                this._setClearListener();
            };
            /**
             * Sets listeners on the groups elements
             */
            Group.prototype.setListeners = function () {
                var _this = this;
                this.dom.add.unbind('click');
                this.dom.add.on('click.dtsb', function () {
                    // If this is the parent group then the logic button has not been added yet
                    if (!_this.s.isChild) {
                        _this.dom.container.prepend(_this.dom.logicContainer);
                    }
                    _this.addCriteria();
                    _this.dom.container.trigger('dtsb-add');
                    _this.s.dt.state.save();
                    return false;
                });
                for (var _i = 0, _a = this.s.criteria; _i < _a.length; _i++) {
                    var crit = _a[_i];
                    crit.criteria.setListeners();
                }
                this._setClearListener();
                this._setLogicListener();
            };
            /**
             * Adds a criteria to the group
             *
             * @param crit Instance of Criteria to be added to the group
             */
            Group.prototype.addCriteria = function (crit) {
                if (crit === void 0) { crit = null; }
                var index = crit === null ? this.s.criteria.length : crit.s.index;
                var criteria = new Criteria(this.s.dt, this.s.opts, this.s.topGroup, index, this.s.depth, this.s.serverData);
                // If a Criteria has been passed in then set the values to continue that
                if (crit !== null) {
                    criteria.c = crit.c;
                    criteria.s = crit.s;
                    criteria.s.depth = this.s.depth;
                    criteria.classes = crit.classes;
                }
                criteria.populate();
                var inserted = false;
                for (var i = 0; i < this.s.criteria.length; i++) {
                    if (i === 0 && this.s.criteria[i].criteria.s.index > criteria.s.index) {
                        // Add the node for the criteria at the start of the group
                        criteria.getNode().insertBefore(this.s.criteria[i].criteria.dom.container);
                        inserted = true;
                    }
                    else if (i < this.s.criteria.length - 1 &&
                        this.s.criteria[i].criteria.s.index < criteria.s.index &&
                        this.s.criteria[i + 1].criteria.s.index > criteria.s.index) {
                        // Add the node for the criteria in the correct location
                        criteria.getNode().insertAfter(this.s.criteria[i].criteria.dom.container);
                        inserted = true;
                    }
                }
                if (!inserted) {
                    criteria.getNode().insertBefore(this.dom.add);
                }
                // Add the details for this criteria to the array
                this.s.criteria.push({
                    criteria: criteria,
                    index: index
                });
                this.s.criteria = this.s.criteria.sort(function (a, b) { return a.criteria.s.index - b.criteria.s.index; });
                for (var _i = 0, _a = this.s.criteria; _i < _a.length; _i++) {
                    var opt = _a[_i];
                    if (opt.criteria instanceof Criteria) {
                        opt.criteria.updateArrows(this.s.criteria.length > 1);
                    }
                }
                this._setCriteriaListeners(criteria);
                criteria.setListeners();
                this.setupLogic();
            };
            /**
             * Checks the group to see if it has any filled criteria
             */
            Group.prototype.checkFilled = function () {
                for (var _i = 0, _a = this.s.criteria; _i < _a.length; _i++) {
                    var crit = _a[_i];
                    if (crit.criteria instanceof Criteria && crit.criteria.s.filled ||
                        crit.criteria instanceof Group && crit.criteria.checkFilled()) {
                        return true;
                    }
                }
                return false;
            };
            /**
             * Gets the count for the number of criteria in this group and any sub groups
             */
            Group.prototype.count = function () {
                var count = 0;
                for (var _i = 0, _a = this.s.criteria; _i < _a.length; _i++) {
                    var crit = _a[_i];
                    if (crit.criteria instanceof Group) {
                        count += crit.criteria.count();
                    }
                    else {
                        count++;
                    }
                }
                return count;
            };
            /**
             * Rebuilds a sub group that previously existed
             *
             * @param loadedGroup The details of a group within this group
             */
            Group.prototype._addPrevGroup = function (loadedGroup) {
                var idx = this.s.criteria.length;
                var group = new Group(this.s.dt, this.c, this.s.topGroup, idx, true, this.s.depth + 1, this.s.serverData);
                // Add the new group to the criteria array
                this.s.criteria.push({
                    criteria: group,
                    index: idx,
                    logic: group.s.logic
                });
                // Rebuild it with the previous conditions for that group
                group.rebuild(loadedGroup);
                this.s.criteria[idx].criteria = group;
                this.s.topGroup.trigger('dtsb-redrawContents');
                this._setGroupListeners(group);
            };
            /**
             * Rebuilds a criteria of this group that previously existed
             *
             * @param loadedCriteria The details of a criteria within the group
             */
            Group.prototype._addPrevCriteria = function (loadedCriteria) {
                var idx = this.s.criteria.length;
                var criteria = new Criteria(this.s.dt, this.s.opts, this.s.topGroup, idx, this.s.depth, this.s.serverData);
                criteria.populate();
                // Add the new criteria to the criteria array
                this.s.criteria.push({
                    criteria: criteria,
                    index: idx
                });
                // Rebuild it with the previous conditions for that criteria
                criteria.s.preventRedraw = this.s.preventRedraw;
                criteria.rebuild(loadedCriteria);
                criteria.s.preventRedraw = false;
                this.s.criteria[idx].criteria = criteria;
                if (!this.s.preventRedraw) {
                    this.s.topGroup.trigger('dtsb-redrawContents');
                }
            };
            /**
             * Checks And the criteria using AND logic
             *
             * @param rowData The row data to be checked against the search criteria
             * @returns boolean The result of the AND search
             */
            Group.prototype._andSearch = function (rowData, rowIdx) {
                // If there are no criteria then return true for this group
                if (this.s.criteria.length === 0) {
                    return true;
                }
                for (var _i = 0, _a = this.s.criteria; _i < _a.length; _i++) {
                    var crit = _a[_i];
                    // If the criteria is not complete then skip it
                    if (crit.criteria instanceof Criteria && !crit.criteria.s.filled) {
                        continue;
                    }
                    // Otherwise if a single one fails return false
                    else if (!crit.criteria.search(rowData, rowIdx)) {
                        return false;
                    }
                }
                // If we get to here then everything has passed, so return true for the group
                return true;
            };
            /**
             * Checks And the criteria using OR logic
             *
             * @param rowData The row data to be checked against the search criteria
             * @returns boolean The result of the OR search
             */
            Group.prototype._orSearch = function (rowData, rowIdx) {
                // If there are no criteria in the group then return true
                if (this.s.criteria.length === 0) {
                    return true;
                }
                // This will check to make sure that at least one criteria in the group is complete
                var filledfound = false;
                for (var _i = 0, _a = this.s.criteria; _i < _a.length; _i++) {
                    var crit = _a[_i];
                    if (crit.criteria instanceof Criteria && crit.criteria.s.filled) {
                        // A completed criteria has been found so set the flag
                        filledfound = true;
                        // If the search passes then return true
                        if (crit.criteria.search(rowData, rowIdx)) {
                            return true;
                        }
                    }
                    else if (crit.criteria instanceof Group && crit.criteria.checkFilled()) {
                        filledfound = true;
                        if (crit.criteria.search(rowData, rowIdx)) {
                            return true;
                        }
                    }
                }
                // If we get here we need to return the inverse of filledfound,
                //  as if any have been found and we are here then none have passed
                return !filledfound;
            };
            /**
             * Removes a criteria from the group
             *
             * @param criteria The criteria instance to be removed
             */
            Group.prototype._removeCriteria = function (criteria, group) {
                if (group === void 0) { group = false; }
                // If removing a criteria and there is only then then just destroy the group
                if (this.s.criteria.length <= 1 && this.s.isChild) {
                    this.destroy();
                }
                else {
                    // Otherwise splice the given criteria out and redo the indexes
                    var last = void 0;
                    for (var i = 0; i < this.s.criteria.length; i++) {
                        if (this.s.criteria[i].index === criteria.s.index &&
                            (!group || this.s.criteria[i].criteria instanceof Group)) {
                            last = i;
                        }
                    }
                    // We want to remove the last element with the desired index, as its replacement will be inserted before it
                    if (last !== undefined) {
                        this.s.criteria.splice(last, 1);
                    }
                    for (var i = 0; i < this.s.criteria.length; i++) {
                        this.s.criteria[i].index = i;
                        this.s.criteria[i].criteria.s.index = i;
                    }
                }
            };
            /**
             * Sets the listeners in group for a criteria
             *
             * @param criteria The criteria for the listeners to be set on
             */
            Group.prototype._setCriteriaListeners = function (criteria) {
                var _this = this;
                criteria.dom["delete"]
                    .unbind('click')
                    .on('click.dtsb', function () {
                    _this._removeCriteria(criteria);
                    criteria.dom.container.remove();
                    for (var _i = 0, _a = _this.s.criteria; _i < _a.length; _i++) {
                        var crit = _a[_i];
                        if (crit.criteria instanceof Criteria) {
                            crit.criteria.updateArrows(_this.s.criteria.length > 1);
                        }
                    }
                    criteria.destroy();
                    _this.s.dt.draw();
                    _this.s.topGroup.trigger('dtsb-redrawContents');
                    return false;
                });
                criteria.dom.right
                    .unbind('click')
                    .on('click.dtsb', function () {
                    var idx = criteria.s.index;
                    var group = new Group(_this.s.dt, _this.s.opts, _this.s.topGroup, criteria.s.index, true, _this.s.depth + 1, _this.s.serverData);
                    // Add the criteria that is to be moved to the new group
                    group.addCriteria(criteria);
                    // Update the details in the current groups criteria array
                    _this.s.criteria[idx].criteria = group;
                    _this.s.criteria[idx].logic = 'AND';
                    _this.s.topGroup.trigger('dtsb-redrawContents');
                    _this._setGroupListeners(group);
                    return false;
                });
                criteria.dom.left
                    .unbind('click')
                    .on('click.dtsb', function () {
                    _this.s.toDrop = new Criteria(_this.s.dt, _this.s.opts, _this.s.topGroup, criteria.s.index, undefined, _this.s.serverData);
                    _this.s.toDrop.s = criteria.s;
                    _this.s.toDrop.c = criteria.c;
                    _this.s.toDrop.classes = criteria.classes;
                    _this.s.toDrop.populate();
                    // The dropCriteria event mutates the reference to the index so need to store it
                    var index = _this.s.toDrop.s.index;
                    _this.dom.container.trigger('dtsb-dropCriteria');
                    criteria.s.index = index;
                    _this._removeCriteria(criteria);
                    // By tracking the top level group we can directly trigger a redraw on it,
                    //  bubbling is also possible, but that is slow with deep levelled groups
                    _this.s.topGroup.trigger('dtsb-redrawContents');
                    _this.s.dt.draw();
                    return false;
                });
            };
            /**
             * Set's the listeners for the group clear button
             */
            Group.prototype._setClearListener = function () {
                var _this = this;
                this.dom.clear
                    .unbind('click')
                    .on('click.dtsb', function () {
                    if (!_this.s.isChild) {
                        _this.dom.container.trigger('dtsb-clearContents');
                        return false;
                    }
                    _this.destroy();
                    _this.s.topGroup.trigger('dtsb-redrawContents');
                    return false;
                });
            };
            /**
             * Sets listeners for sub groups of this group
             *
             * @param group The sub group that the listeners are to be set on
             */
            Group.prototype._setGroupListeners = function (group) {
                var _this = this;
                // Set listeners for the new group
                group.dom.add
                    .unbind('click')
                    .on('click.dtsb', function () {
                    _this.setupLogic();
                    _this.dom.container.trigger('dtsb-add');
                    return false;
                });
                group.dom.container
                    .unbind('dtsb-add')
                    .on('dtsb-add.dtsb', function () {
                    _this.setupLogic();
                    _this.dom.container.trigger('dtsb-add');
                    return false;
                });
                group.dom.container
                    .unbind('dtsb-destroy')
                    .on('dtsb-destroy.dtsb', function () {
                    _this._removeCriteria(group, true);
                    group.dom.container.remove();
                    _this.setupLogic();
                    return false;
                });
                group.dom.container
                    .unbind('dtsb-dropCriteria')
                    .on('dtsb-dropCriteria.dtsb', function () {
                    var toDrop = group.s.toDrop;
                    toDrop.s.index = group.s.index;
                    toDrop.updateArrows(_this.s.criteria.length > 1);
                    _this.addCriteria(toDrop);
                    return false;
                });
                group.setListeners();
            };
            /**
             * Sets up the Group instance, setting listeners and appending elements
             */
            Group.prototype._setup = function () {
                this.setListeners();
                this.dom.add.html(this.s.dt.i18n('searchBuilder.add', this.c.i18n.add));
                this.dom.logic.children().first().html(this.c.logic === 'OR'
                    ? this.s.dt.i18n('searchBuilder.logicOr', this.c.i18n.logicOr)
                    : this.s.dt.i18n('searchBuilder.logicAnd', this.c.i18n.logicAnd));
                this.s.logic = this.c.logic === 'OR' ? 'OR' : 'AND';
                if (this.c.greyscale) {
                    this.dom.logic.addClass(this.classes.greyscale);
                }
                this.dom.logicContainer.append(this.dom.logic).append(this.dom.clear);
                // Only append the logic button immediately if this is a sub group,
                //  otherwise it will be prepended later when adding a criteria
                if (this.s.isChild) {
                    this.dom.container.append(this.dom.logicContainer);
                }
                this.dom.container.append(this.dom.add);
            };
            /**
             * Sets the listener for the logic button
             */
            Group.prototype._setLogicListener = function () {
                var _this = this;
                this.dom.logic
                    .unbind('click')
                    .on('click.dtsb', function () {
                    _this._toggleLogic();
                    _this.s.dt.draw();
                    for (var _i = 0, _a = _this.s.criteria; _i < _a.length; _i++) {
                        var crit = _a[_i];
                        crit.criteria.setListeners();
                    }
                });
            };
            /**
             * Toggles the logic for the group
             */
            Group.prototype._toggleLogic = function () {
                if (this.s.logic === 'OR') {
                    this.s.logic = 'AND';
                    this.dom.logic.children().first().html(this.s.dt.i18n('searchBuilder.logicAnd', this.c.i18n.logicAnd));
                }
                else if (this.s.logic === 'AND') {
                    this.s.logic = 'OR';
                    this.dom.logic.children().first().html(this.s.dt.i18n('searchBuilder.logicOr', this.c.i18n.logicOr));
                }
            };
            Group.version = '1.1.0';
            Group.classes = {
                add: 'dtsb-add',
                button: 'dtsb-button',
                clearGroup: 'dtsb-clearGroup',
                greyscale: 'dtsb-greyscale',
                group: 'dtsb-group',
                inputButton: 'dtsb-iptbtn',
                logic: 'dtsb-logic',
                logicContainer: 'dtsb-logicContainer'
            };
            Group.defaults = {
                columns: true,
                conditions: {
                    'date': Criteria.dateConditions,
                    'html': Criteria.stringConditions,
                    'html-num': Criteria.numConditions,
                    'html-num-fmt': Criteria.numFmtConditions,
                    'luxon': Criteria.luxonDateConditions,
                    'moment': Criteria.momentDateConditions,
                    'num': Criteria.numConditions,
                    'num-fmt': Criteria.numFmtConditions,
                    'string': Criteria.stringConditions
                },
                depthLimit: false,
                enterSearch: false,
                filterChanged: undefined,
                greyscale: false,
                i18n: {
                    add: 'Add Condition',
                    button: {
                        0: 'Search Builder',
                        _: 'Search Builder (%d)'
                    },
                    clearAll: 'Clear All',
                    condition: 'Condition',
                    data: 'Data',
                    "delete": '&times',
                    deleteTitle: 'Delete filtering rule',
                    left: '<',
                    leftTitle: 'Outdent criteria',
                    logicAnd: 'And',
                    logicOr: 'Or',
                    right: '>',
                    rightTitle: 'Indent criteria',
                    title: {
                        0: 'Custom Search Builder',
                        _: 'Custom Search Builder (%d)'
                    },
                    value: 'Value',
                    valueJoiner: 'and'
                },
                logic: 'AND',
                orthogonal: {
                    display: 'display',
                    search: 'filter'
                },
                preDefined: false
            };
            return Group;
        }());

        var $$1$1;
        var dataTable$1;
        /**
         * Sets the value of jQuery for use in the file
         *
         * @param jq the instance of jQuery to be set
         */
        function setJQuery(jq) {
            $$1$1 = jq;
            dataTable$1 = jq.fn.DataTable;
        }
        /**
         * SearchBuilder class for DataTables.
         * Allows for complex search queries to be constructed and implemented on a DataTable
         */
        var SearchBuilder = /** @class */ (function () {
            function SearchBuilder(builderSettings, opts) {
                var _this = this;
                // Check that the required version of DataTables is included
                if (!dataTable$1 || !dataTable$1.versionCheck || !dataTable$1.versionCheck('1.10.0')) {
                    throw new Error('SearchBuilder requires DataTables 1.10 or newer');
                }
                var table = new dataTable$1.Api(builderSettings);
                this.classes = $$1$1.extend(true, {}, SearchBuilder.classes);
                // Get options from user
                this.c = $$1$1.extend(true, {}, SearchBuilder.defaults, opts);
                this.dom = {
                    clearAll: $$1$1('<button type="button">' + table.i18n('searchBuilder.clearAll', this.c.i18n.clearAll) + '</button>')
                        .addClass(this.classes.clearAll)
                        .addClass(this.classes.button)
                        .attr('type', 'button'),
                    container: $$1$1('<div/>')
                        .addClass(this.classes.container),
                    title: $$1$1('<div/>')
                        .addClass(this.classes.title),
                    titleRow: $$1$1('<div/>')
                        .addClass(this.classes.titleRow),
                    topGroup: undefined
                };
                this.s = {
                    dt: table,
                    opts: opts,
                    search: undefined,
                    serverData: undefined,
                    topGroup: undefined
                };
                // If searchbuilder is already defined for this table then return
                if (table.settings()[0]._searchBuilder !== undefined) {
                    return;
                }
                table.settings()[0]._searchBuilder = this;
                // If using SSP we want to include the previous state in the very first server call
                if (this.s.dt.page.info().serverSide) {
                    this.s.dt.on('preXhr.dtsb', function (e, settings, data) {
                        var loadedState = _this.s.dt.state.loaded();
                        if (loadedState && loadedState.searchBuilder) {
                            data.searchBuilder = _this._collapseArray(loadedState.searchBuilder);
                        }
                    });
                    this.s.dt.on('xhr.dtsb', function (e, settings, json) {
                        if (json && json.searchBuilder && json.searchBuilder.options) {
                            _this.s.serverData = json.searchBuilder.options;
                        }
                    });
                }
                // Run the remaining setup when the table is initialised
                if (this.s.dt.settings()[0]._bInitComplete) {
                    this._setUp();
                }
                else {
                    table.one('init.dt', function () {
                        _this._setUp();
                    });
                }
                return this;
            }
            /**
             * Gets the details required to rebuild the SearchBuilder as it currently is
             */
            // eslint upset at empty object but that is what it is
            // eslint-disable-next-line @typescript-eslint/ban-types
            SearchBuilder.prototype.getDetails = function (deFormatDates) {
                if (deFormatDates === void 0) { deFormatDates = false; }
                return this.s.topGroup.getDetails(deFormatDates);
            };
            /**
             * Getter for the node of the container for the searchBuilder
             *
             * @returns JQuery<HTMLElement> the node of the container
             */
            SearchBuilder.prototype.getNode = function () {
                return this.dom.container;
            };
            /**
             * Rebuilds the SearchBuilder to a state that is provided
             *
             * @param details The details required to perform a rebuild
             */
            SearchBuilder.prototype.rebuild = function (details) {
                this.dom.clearAll.click();
                // If there are no details to rebuild then return
                if (details === undefined || details === null) {
                    return this;
                }
                this.s.topGroup.s.preventRedraw = true;
                this.s.topGroup.rebuild(details);
                this.s.topGroup.s.preventRedraw = false;
                this._checkClear();
                this._updateTitle(this.s.topGroup.count());
                this.s.topGroup.redrawContents();
                this.s.dt.draw(false);
                this.s.topGroup.setListeners();
                return this;
            };
            /**
             * Applies the defaults to preDefined criteria
             *
             * @param preDef the array of criteria to be processed.
             */
            SearchBuilder.prototype._applyPreDefDefaults = function (preDef) {
                var _this = this;
                if (preDef.criteria !== undefined && preDef.logic === undefined) {
                    preDef.logic = 'AND';
                }
                var _loop_1 = function (crit) {
                    // Apply the defaults to any further criteria
                    if (crit.criteria !== undefined) {
                        crit = this_1._applyPreDefDefaults(crit);
                    }
                    else {
                        this_1.s.dt.columns().every(function (index) {
                            if (_this.s.dt.settings()[0].aoColumns[index].sTitle === crit.data) {
                                crit.dataIdx = index;
                            }
                        });
                    }
                };
                var this_1 = this;
                for (var _i = 0, _a = preDef.criteria; _i < _a.length; _i++) {
                    var crit = _a[_i];
                    _loop_1(crit);
                }
                return preDef;
            };
            /**
             * Set's up the SearchBuilder
             */
            SearchBuilder.prototype._setUp = function (loadState) {
                var _this = this;
                if (loadState === void 0) { loadState = true; }
                // Register an Api method for getting the column type
                $$1$1.fn.DataTable.Api.registerPlural('columns().type()', 'column().type()', function () {
                    return this.iterator('column', function (settings, column) {
                        return settings.aoColumns[column].sType;
                    }, 1);
                });
                // Check that DateTime is included, If not need to check if it could be used
                // eslint-disable-next-line no-extra-parens
                if (!dataTable$1.DateTime) {
                    var types = this.s.dt.columns().type().toArray();
                    if (types === undefined || types.includes(undefined) || types.includes(null)) {
                        types = [];
                        for (var _i = 0, _a = this.s.dt.settings()[0].aoColumns; _i < _a.length; _i++) {
                            var colInit = _a[_i];
                            types.push(colInit.searchBuilderType !== undefined ? colInit.searchBuilderType : colInit.sType);
                        }
                    }
                    var columnIdxs = this.s.dt.columns().toArray();
                    // If the types are not yet set then draw to see if they can be retrieved then
                    if (types === undefined || types.includes(undefined) || types.includes(null)) {
                        $$1$1.fn.dataTable.ext.oApi._fnColumnTypes(this.s.dt.settings()[0]);
                        types = this.s.dt.columns().type().toArray();
                    }
                    for (var i = 0; i < columnIdxs[0].length; i++) {
                        var column = columnIdxs[0][i];
                        var type = types[column];
                        if (
                        // Check if this column can be filtered
                        (this.c.columns === true ||
                            Array.isArray(this.c.columns) &&
                                this.c.columns.includes(i)) &&
                            // Check if the type is one of the restricted types
                            (type.includes('date') ||
                                type.includes('moment') ||
                                type.includes('luxon'))) {
                            alert('SearchBuilder Requires DateTime when used with dates.');
                            throw new Error('SearchBuilder requires DateTime');
                        }
                    }
                }
                this.s.topGroup = new Group(this.s.dt, this.c, undefined, undefined, undefined, undefined, this.s.serverData);
                this._setClearListener();
                this.s.dt.on('stateSaveParams.dtsb', function (e, settings, data) {
                    data.searchBuilder = _this.getDetails();
                    if (!data.scroller) {
                        data.page = _this.s.dt.page();
                    }
                    else {
                        data.start = _this.s.dt.state().start;
                    }
                });
                this.s.dt.on('stateLoadParams.dtsb', function (e, settings, data) {
                    _this.rebuild(data.searchBuilder);
                });
                this._build();
                this.s.dt.on('preXhr.dtsb', function (e, settings, data) {
                    if (_this.s.dt.page.info().serverSide) {
                        data.searchBuilder = _this._collapseArray(_this.getDetails(true));
                    }
                });
                this.s.dt.on('column-reorder', function () {
                    _this.rebuild(_this.getDetails());
                });
                if (loadState) {
                    var loadedState = this.s.dt.state.loaded();
                    // If the loaded State is not null rebuild based on it for statesave
                    if (loadedState !== null && loadedState.searchBuilder !== undefined) {
                        this.s.topGroup.rebuild(loadedState.searchBuilder);
                        this.s.topGroup.dom.container.trigger('dtsb-redrawContents');
                        // If using SSP we want to restrict the amount of server calls that take place
                        //  and this information will already have been processed
                        if (!this.s.dt.page.info().serverSide) {
                            if (loadedState.page) {
                                this.s.dt.page(loadedState.page).draw('page');
                            }
                            else if (this.s.dt.scroller && loadedState.scroller) {
                                this.s.dt.scroller().scrollToRow(loadedState.scroller.topRow);
                            }
                        }
                        this.s.topGroup.setListeners();
                    }
                    // Otherwise load any predefined options
                    else if (this.c.preDefined !== false) {
                        this.c.preDefined = this._applyPreDefDefaults(this.c.preDefined);
                        this.rebuild(this.c.preDefined);
                    }
                }
                this._setEmptyListener();
                this.s.dt.state.save();
            };
            SearchBuilder.prototype._collapseArray = function (criteria) {
                if (criteria.logic === undefined) {
                    if (criteria.value !== undefined) {
                        criteria.value.sort(function (a, b) {
                            if (!isNaN(+a)) {
                                a = +a;
                                b = +b;
                            }
                            if (a < b) {
                                return -1;
                            }
                            else if (b < a) {
                                return 1;
                            }
                            else {
                                return 0;
                            }
                        });
                        criteria.value1 = criteria.value[0];
                        criteria.value2 = criteria.value[1];
                    }
                }
                else {
                    for (var i = 0; i < criteria.criteria.length; i++) {
                        criteria.criteria[i] = this._collapseArray(criteria.criteria[i]);
                    }
                }
                return criteria;
            };
            /**
             * Updates the title of the SearchBuilder
             *
             * @param count the number of filters in the SearchBuilder
             */
            SearchBuilder.prototype._updateTitle = function (count) {
                this.dom.title.html(this.s.dt.i18n('searchBuilder.title', this.c.i18n.title, count));
            };
            /**
             * Builds all of the dom elements together
             */
            SearchBuilder.prototype._build = function () {
                var _this = this;
                // Empty and setup the container
                this.dom.clearAll.remove();
                this.dom.container.empty();
                var count = this.s.topGroup.count();
                this._updateTitle(count);
                this.dom.titleRow.append(this.dom.title);
                this.dom.container.append(this.dom.titleRow);
                this.dom.topGroup = this.s.topGroup.getNode();
                this.dom.container.append(this.dom.topGroup);
                this._setRedrawListener();
                var tableNode = this.s.dt.table(0).node();
                if (!$$1$1.fn.dataTable.ext.search.includes(this.s.search)) {
                    // Custom search function for SearchBuilder
                    this.s.search = function (settings, searchData, dataIndex) {
                        if (settings.nTable !== tableNode) {
                            return true;
                        }
                        return _this.s.topGroup.search(searchData, dataIndex);
                    };
                    // Add SearchBuilder search function to the dataTables search array
                    $$1$1.fn.dataTable.ext.search.push(this.s.search);
                }
                this.s.dt.on('destroy.dtsb', function () {
                    _this.dom.container.remove();
                    _this.dom.clearAll.remove();
                    var searchIdx = $$1$1.fn.dataTable.ext.search.indexOf(_this.s.search);
                    while (searchIdx !== -1) {
                        $$1$1.fn.dataTable.ext.search.splice(searchIdx, 1);
                        searchIdx = $$1$1.fn.dataTable.ext.search.indexOf(_this.s.search);
                    }
                    _this.s.dt.off('.dtsb');
                    $$1$1(_this.s.dt.table().node()).off('.dtsb');
                });
            };
            /**
             * Checks if the clearAll button should be added or not
             */
            SearchBuilder.prototype._checkClear = function () {
                if (this.s.topGroup.s.criteria.length > 0) {
                    this.dom.clearAll.insertAfter(this.dom.title);
                    this._setClearListener();
                }
                else {
                    this.dom.clearAll.remove();
                }
            };
            /**
             * Update the count in the title/button
             *
             * @param count Number of filters applied
             */
            SearchBuilder.prototype._filterChanged = function (count) {
                var fn = this.c.filterChanged;
                if (typeof fn === 'function') {
                    fn(count, this.s.dt.i18n('searchBuilder.button', this.c.i18n.button, count));
                }
            };
            /**
             * Set the listener for the clear button
             */
            SearchBuilder.prototype._setClearListener = function () {
                var _this = this;
                this.dom.clearAll.unbind('click');
                this.dom.clearAll.on('click.dtsb', function () {
                    _this.s.topGroup = new Group(_this.s.dt, _this.c, undefined, undefined, undefined, undefined, _this.s.serverData);
                    _this._build();
                    _this.s.dt.draw();
                    _this.s.topGroup.setListeners();
                    _this.dom.clearAll.remove();
                    _this._setEmptyListener();
                    _this._filterChanged(0);
                    return false;
                });
            };
            /**
             * Set the listener for the Redraw event
             */
            SearchBuilder.prototype._setRedrawListener = function () {
                var _this = this;
                this.s.topGroup.dom.container.unbind('dtsb-redrawContents');
                this.s.topGroup.dom.container.on('dtsb-redrawContents.dtsb', function () {
                    _this._checkClear();
                    _this.s.topGroup.redrawContents();
                    _this.s.topGroup.setupLogic();
                    _this._setEmptyListener();
                    var count = _this.s.topGroup.count();
                    _this._updateTitle(count);
                    _this._filterChanged(count);
                    // If using SSP we want to restrict the amount of server calls that take place
                    //  and this information will already have been processed
                    if (!_this.s.dt.page.info().serverSide) {
                        _this.s.dt.draw();
                    }
                    _this.s.dt.state.save();
                });
                this.s.topGroup.dom.container.unbind('dtsb-redrawContents-noDraw');
                this.s.topGroup.dom.container.on('dtsb-redrawContents-noDraw.dtsb', function () {
                    _this._checkClear();
                    _this.s.topGroup.s.preventRedraw = true;
                    _this.s.topGroup.redrawContents();
                    _this.s.topGroup.s.preventRedraw = false;
                    _this.s.topGroup.setupLogic();
                    _this._setEmptyListener();
                    var count = _this.s.topGroup.count();
                    _this._updateTitle(count);
                    _this._filterChanged(count);
                });
                this.s.topGroup.dom.container.unbind('dtsb-redrawLogic');
                this.s.topGroup.dom.container.on('dtsb-redrawLogic.dtsb', function () {
                    _this.s.topGroup.redrawLogic();
                    var count = _this.s.topGroup.count();
                    _this._updateTitle(count);
                    _this._filterChanged(count);
                });
                this.s.topGroup.dom.container.unbind('dtsb-add');
                this.s.topGroup.dom.container.on('dtsb-add.dtsb', function () {
                    var count = _this.s.topGroup.count();
                    _this._updateTitle(count);
                    _this._filterChanged(count);
                    _this._checkClear();
                });
                this.s.dt.on('postEdit.dtsb postCreate.dtsb postRemove.dtsb', function () {
                    _this.s.topGroup.redrawContents();
                });
                this.s.topGroup.dom.container.unbind('dtsb-clearContents');
                this.s.topGroup.dom.container.on('dtsb-clearContents.dtsb', function () {
                    _this._setUp(false);
                    _this._filterChanged(0);
                    _this.s.dt.draw();
                });
            };
            /**
             * Sets listeners to check whether clearAll should be added or removed
             */
            SearchBuilder.prototype._setEmptyListener = function () {
                var _this = this;
                this.s.topGroup.dom.add.on('click.dtsb', function () {
                    _this._checkClear();
                });
                this.s.topGroup.dom.container.on('dtsb-destroy.dtsb', function () {
                    _this.dom.clearAll.remove();
                });
            };
            SearchBuilder.version = '1.5.0';
            SearchBuilder.classes = {
                button: 'dtsb-button',
                clearAll: 'dtsb-clearAll',
                container: 'dtsb-searchBuilder',
                inputButton: 'dtsb-iptbtn',
                title: 'dtsb-title',
                titleRow: 'dtsb-titleRow'
            };
            SearchBuilder.defaults = {
                columns: true,
                conditions: {
                    'date': Criteria.dateConditions,
                    'html': Criteria.stringConditions,
                    'html-num': Criteria.numConditions,
                    'html-num-fmt': Criteria.numFmtConditions,
                    'luxon': Criteria.luxonDateConditions,
                    'moment': Criteria.momentDateConditions,
                    'num': Criteria.numConditions,
                    'num-fmt': Criteria.numFmtConditions,
                    'string': Criteria.stringConditions
                },
                depthLimit: false,
                enterSearch: false,
                filterChanged: undefined,
                greyscale: false,
                i18n: {
                    add: 'Add Condition',
                    button: {
                        0: 'Search Builder',
                        _: 'Search Builder (%d)'
                    },
                    clearAll: 'Clear All',
                    condition: 'Condition',
                    conditions: {
                        array: {
                            contains: 'Contains',
                            empty: 'Empty',
                            equals: 'Equals',
                            not: 'Not',
                            notEmpty: 'Not Empty',
                            without: 'Without'
                        },
                        date: {
                            after: 'After',
                            before: 'Before',
                            between: 'Between',
                            empty: 'Empty',
                            equals: 'Equals',
                            not: 'Not',
                            notBetween: 'Not Between',
                            notEmpty: 'Not Empty'
                        },
                        // eslint-disable-next-line id-blacklist
                        number: {
                            between: 'Between',
                            empty: 'Empty',
                            equals: 'Equals',
                            gt: 'Greater Than',
                            gte: 'Greater Than Equal To',
                            lt: 'Less Than',
                            lte: 'Less Than Equal To',
                            not: 'Not',
                            notBetween: 'Not Between',
                            notEmpty: 'Not Empty'
                        },
                        // eslint-disable-next-line id-blacklist
                        string: {
                            contains: 'Contains',
                            empty: 'Empty',
                            endsWith: 'Ends With',
                            equals: 'Equals',
                            not: 'Not',
                            notContains: 'Does Not Contain',
                            notEmpty: 'Not Empty',
                            notEndsWith: 'Does Not End With',
                            notStartsWith: 'Does Not Start With',
                            startsWith: 'Starts With'
                        }
                    },
                    data: 'Data',
                    "delete": '&times',
                    deleteTitle: 'Delete filtering rule',
                    left: '<',
                    leftTitle: 'Outdent criteria',
                    logicAnd: 'And',
                    logicOr: 'Or',
                    right: '>',
                    rightTitle: 'Indent criteria',
                    title: {
                        0: 'Custom Search Builder',
                        _: 'Custom Search Builder (%d)'
                    },
                    value: 'Value',
                    valueJoiner: 'and'
                },
                logic: 'AND',
                orthogonal: {
                    display: 'display',
                    search: 'filter'
                },
                preDefined: false
            };
            return SearchBuilder;
        }());

        /*! SearchBuilder 1.5.0
         * ©SpryMedia Ltd - datatables.net/license/mit
         */
        setJQuery($$1);
        setJQuery$1($$1);
        setJQuery$2($$1);
        var dataTable = $$1.fn.dataTable;
        // eslint-disable-next-line no-extra-parens
        DataTable.SearchBuilder = SearchBuilder;
        // eslint-disable-next-line no-extra-parens
        dataTable.SearchBuilder = SearchBuilder;
        // eslint-disable-next-line no-extra-parens
        DataTable.Group = Group;
        // eslint-disable-next-line no-extra-parens
        dataTable.Group = Group;
        // eslint-disable-next-line no-extra-parens
        DataTable.Criteria = Criteria;
        // eslint-disable-next-line no-extra-parens
        dataTable.Criteria = Criteria;
        // eslint-disable-next-line no-extra-parens
        var apiRegister = DataTable.Api.register;
        // Set up object for plugins
        DataTable.ext.searchBuilder = {
            conditions: {}
        };
        DataTable.ext.buttons.searchBuilder = {
            action: function (e, dt, node, config) {
                this.popover(config._searchBuilder.getNode(), {
                    align: 'container',
                    span: 'container'
                });
                var topGroup = config._searchBuilder.s.topGroup;
                // Need to redraw the contents to calculate the correct positions for the elements
                if (topGroup !== undefined) {
                    topGroup.dom.container.trigger('dtsb-redrawContents-noDraw');
                }
                if (topGroup.s.criteria.length === 0) {
                    $$1('.' + $$1.fn.dataTable.Group.classes.add.replace(/ /g, '.')).click();
                }
            },
            config: {},
            init: function (dt, node, config) {
                var sb = new DataTable.SearchBuilder(dt, $$1.extend({
                    filterChanged: function (count, text) {
                        dt.button(node).text(text);
                    }
                }, config.config));
                dt.button(node).text(config.text || dt.i18n('searchBuilder.button', sb.c.i18n.button, 0));
                config._searchBuilder = sb;
            },
            text: null
        };
        apiRegister('searchBuilder.getDetails()', function (deFormatDates) {
            if (deFormatDates === void 0) { deFormatDates = false; }
            var ctx = this.context[0];
            // If SearchBuilder has not been initialised on this instance then return
            return ctx._searchBuilder ?
                ctx._searchBuilder.getDetails(deFormatDates) :
                null;
        });
        apiRegister('searchBuilder.rebuild()', function (details) {
            var ctx = this.context[0];
            // If SearchBuilder has not been initialised on this instance then return
            if (ctx._searchBuilder === undefined) {
                return null;
            }
            ctx._searchBuilder.rebuild(details);
            return this;
        });
        apiRegister('searchBuilder.container()', function () {
            var ctx = this.context[0];
            // If SearchBuilder has not been initialised on this instance then return
            return ctx._searchBuilder ?
                ctx._searchBuilder.getNode() :
                null;
        });
        /**
         * Init function for SearchBuilder
         *
         * @param settings the settings to be applied
         * @param options the options for SearchBuilder
         * @returns JQUERY<HTMLElement> Returns the node of the SearchBuilder
         */
        function _init(settings, options) {
            var api = new DataTable.Api(settings);
            var opts = options
                ? options
                : api.init().searchBuilder || DataTable.defaults.searchBuilder;
            var searchBuilder = new SearchBuilder(api, opts);
            var node = searchBuilder.getNode();
            return node;
        }
        // Attach a listener to the document which listens for DataTables initialisation
        // events so we can automatically initialise
        $$1(document).on('preInit.dt.dtsp', function (e, settings) {
            if (e.namespace !== 'dt') {
                return;
            }
            if (settings.oInit.searchBuilder ||
                DataTable.defaults.searchBuilder) {
                if (!settings._searchBuilder) {
                    _init(settings);
                }
            }
        });
        // DataTables `dom` feature option
        DataTable.ext.feature.push({
            cFeature: 'Q',
            fnInit: _init
        });
        // DataTables 2 layout feature
        if (DataTable.ext.features) {
            DataTable.ext.features.register('searchBuilder', _init);
        }

    }());

    /*! Select for DataTables 1.7.0
     * © SpryMedia Ltd - datatables.net/license/mit
     */


    // Allow reassignment of the $ variable
    let $ = j;


    // Version information for debugger
    DataTable.select = {};

    DataTable.select.version = '1.7.0';

    DataTable.select.init = function (dt) {
    	var ctx = dt.settings()[0];

    	if (ctx._select) {
    		return;
    	}

    	var savedSelected = dt.state.loaded();

    	var selectAndSave = function (e, settings, data) {
    		if (data === null || data.select === undefined) {
    			return;
    		}

    		// Clear any currently selected rows, before restoring state
    		// None will be selected on first initialisation
    		if (dt.rows({ selected: true }).any()) {
    			dt.rows().deselect();
    		}
    		if (data.select.rows !== undefined) {
    			dt.rows(data.select.rows).select();
    		}

    		if (dt.columns({ selected: true }).any()) {
    			dt.columns().deselect();
    		}
    		if (data.select.columns !== undefined) {
    			dt.columns(data.select.columns).select();
    		}

    		if (dt.cells({ selected: true }).any()) {
    			dt.cells().deselect();
    		}
    		if (data.select.cells !== undefined) {
    			for (var i = 0; i < data.select.cells.length; i++) {
    				dt.cell(data.select.cells[i].row, data.select.cells[i].column).select();
    			}
    		}

    		dt.state.save();
    	};

    	dt.on('stateSaveParams', function (e, settings, data) {
    		data.select = {};
    		data.select.rows = dt.rows({ selected: true }).ids(true).toArray();
    		data.select.columns = dt.columns({ selected: true })[0];
    		data.select.cells = dt.cells({ selected: true })[0].map(function (coords) {
    			return { row: dt.row(coords.row).id(true), column: coords.column };
    		});
    	})
    		.on('stateLoadParams', selectAndSave)
    		.one('init', function () {
    			selectAndSave(undefined, undefined, savedSelected);
    		});

    	var init = ctx.oInit.select;
    	var defaults = DataTable.defaults.select;
    	var opts = init === undefined ? defaults : init;

    	// Set defaults
    	var items = 'row';
    	var style = 'api';
    	var blurable = false;
    	var toggleable = true;
    	var info = true;
    	var selector = 'td, th';
    	var className = 'selected';
    	var setStyle = false;

    	ctx._select = {};

    	// Initialisation customisations
    	if (opts === true) {
    		style = 'os';
    		setStyle = true;
    	}
    	else if (typeof opts === 'string') {
    		style = opts;
    		setStyle = true;
    	}
    	else if ($.isPlainObject(opts)) {
    		if (opts.blurable !== undefined) {
    			blurable = opts.blurable;
    		}

    		if (opts.toggleable !== undefined) {
    			toggleable = opts.toggleable;
    		}

    		if (opts.info !== undefined) {
    			info = opts.info;
    		}

    		if (opts.items !== undefined) {
    			items = opts.items;
    		}

    		if (opts.style !== undefined) {
    			style = opts.style;
    			setStyle = true;
    		}
    		else {
    			style = 'os';
    			setStyle = true;
    		}

    		if (opts.selector !== undefined) {
    			selector = opts.selector;
    		}

    		if (opts.className !== undefined) {
    			className = opts.className;
    		}
    	}

    	dt.select.selector(selector);
    	dt.select.items(items);
    	dt.select.style(style);
    	dt.select.blurable(blurable);
    	dt.select.toggleable(toggleable);
    	dt.select.info(info);
    	ctx._select.className = className;

    	// Sort table based on selected rows. Requires Select Datatables extension
    	$.fn.dataTable.ext.order['select-checkbox'] = function (settings, col) {
    		return this.api()
    			.column(col, { order: 'index' })
    			.nodes()
    			.map(function (td) {
    				if (settings._select.items === 'row') {
    					return $(td).parent().hasClass(settings._select.className);
    				}
    				else if (settings._select.items === 'cell') {
    					return $(td).hasClass(settings._select.className);
    				}
    				return false;
    			});
    	};

    	// If the init options haven't enabled select, but there is a selectable
    	// class name, then enable
    	if (!setStyle && $(dt.table().node()).hasClass('selectable')) {
    		dt.select.style('os');
    	}
    };

    /*

    Select is a collection of API methods, event handlers, event emitters and
    buttons (for the `Buttons` extension) for DataTables. It provides the following
    features, with an overview of how they are implemented:

    ## Selection of rows, columns and cells. Whether an item is selected or not is
       stored in:

    * rows: a `_select_selected` property which contains a boolean value of the
      DataTables' `aoData` object for each row
    * columns: a `_select_selected` property which contains a boolean value of the
      DataTables' `aoColumns` object for each column
    * cells: a `_selected_cells` property which contains an array of boolean values
      of the `aoData` object for each row. The array is the same length as the
      columns array, with each element of it representing a cell.

    This method of using boolean flags allows Select to operate when nodes have not
    been created for rows / cells (DataTables' defer rendering feature).

    ## API methods

    A range of API methods are available for triggering selection and de-selection
    of rows. Methods are also available to configure the selection events that can
    be triggered by an end user (such as which items are to be selected). To a large
    extent, these of API methods *is* Select. It is basically a collection of helper
    functions that can be used to select items in a DataTable.

    Configuration of select is held in the object `_select` which is attached to the
    DataTables settings object on initialisation. Select being available on a table
    is not optional when Select is loaded, but its default is for selection only to
    be available via the API - so the end user wouldn't be able to select rows
    without additional configuration.

    The `_select` object contains the following properties:

    ```
    {
    	items:string       - Can be `rows`, `columns` or `cells`. Defines what item 
    	                     will be selected if the user is allowed to activate row
    	                     selection using the mouse.
    	style:string       - Can be `none`, `single`, `multi` or `os`. Defines the
    	                     interaction style when selecting items
    	blurable:boolean   - If row selection can be cleared by clicking outside of
    	                     the table
    	toggleable:boolean - If row selection can be cancelled by repeated clicking
    	                     on the row
    	info:boolean       - If the selection summary should be shown in the table
    	                     information elements
    }
    ```

    In addition to the API methods, Select also extends the DataTables selector
    options for rows, columns and cells adding a `selected` option to the selector
    options object, allowing the developer to select only selected items or
    unselected items.

    ## Mouse selection of items

    Clicking on items can be used to select items. This is done by a simple event
    handler that will select the items using the API methods.

     */

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Local functions
     */

    /**
     * Add one or more cells to the selection when shift clicking in OS selection
     * style cell selection.
     *
     * Cell range is more complicated than row and column as we want to select
     * in the visible grid rather than by index in sequence. For example, if you
     * click first in cell 1-1 and then shift click in 2-2 - cells 1-2 and 2-1
     * should also be selected (and not 1-3, 1-4. etc)
     *
     * @param  {DataTable.Api} dt   DataTable
     * @param  {object}        idx  Cell index to select to
     * @param  {object}        last Cell index to select from
     * @private
     */
    function cellRange(dt, idx, last) {
    	var indexes;
    	var columnIndexes;
    	var rowIndexes;
    	var selectColumns = function (start, end) {
    		if (start > end) {
    			var tmp = end;
    			end = start;
    			start = tmp;
    		}

    		var record = false;
    		return dt
    			.columns(':visible')
    			.indexes()
    			.filter(function (i) {
    				if (i === start) {
    					record = true;
    				}

    				if (i === end) {
    					// not else if, as start might === end
    					record = false;
    					return true;
    				}

    				return record;
    			});
    	};

    	var selectRows = function (start, end) {
    		var indexes = dt.rows({ search: 'applied' }).indexes();

    		// Which comes first - might need to swap
    		if (indexes.indexOf(start) > indexes.indexOf(end)) {
    			var tmp = end;
    			end = start;
    			start = tmp;
    		}

    		var record = false;
    		return indexes.filter(function (i) {
    			if (i === start) {
    				record = true;
    			}

    			if (i === end) {
    				record = false;
    				return true;
    			}

    			return record;
    		});
    	};

    	if (!dt.cells({ selected: true }).any() && !last) {
    		// select from the top left cell to this one
    		columnIndexes = selectColumns(0, idx.column);
    		rowIndexes = selectRows(0, idx.row);
    	}
    	else {
    		// Get column indexes between old and new
    		columnIndexes = selectColumns(last.column, idx.column);
    		rowIndexes = selectRows(last.row, idx.row);
    	}

    	indexes = dt.cells(rowIndexes, columnIndexes).flatten();

    	if (!dt.cells(idx, { selected: true }).any()) {
    		// Select range
    		dt.cells(indexes).select();
    	}
    	else {
    		// Deselect range
    		dt.cells(indexes).deselect();
    	}
    }

    /**
     * Disable mouse selection by removing the selectors
     *
     * @param {DataTable.Api} dt DataTable to remove events from
     * @private
     */
    function disableMouseSelection(dt) {
    	var ctx = dt.settings()[0];
    	var selector = ctx._select.selector;

    	$(dt.table().container())
    		.off('mousedown.dtSelect', selector)
    		.off('mouseup.dtSelect', selector)
    		.off('click.dtSelect', selector);

    	$('body').off('click.dtSelect' + _safeId(dt.table().node()));
    }

    /**
     * Attach mouse listeners to the table to allow mouse selection of items
     *
     * @param {DataTable.Api} dt DataTable to remove events from
     * @private
     */
    function enableMouseSelection(dt) {
    	var container = $(dt.table().container());
    	var ctx = dt.settings()[0];
    	var selector = ctx._select.selector;
    	var matchSelection;

    	container
    		.on('mousedown.dtSelect', selector, function (e) {
    			// Disallow text selection for shift clicking on the table so multi
    			// element selection doesn't look terrible!
    			if (e.shiftKey || e.metaKey || e.ctrlKey) {
    				container
    					.css('-moz-user-select', 'none')
    					.one('selectstart.dtSelect', selector, function () {
    						return false;
    					});
    			}

    			if (window.getSelection) {
    				matchSelection = window.getSelection();
    			}
    		})
    		.on('mouseup.dtSelect', selector, function () {
    			// Allow text selection to occur again, Mozilla style (tested in FF
    			// 35.0.1 - still required)
    			container.css('-moz-user-select', '');
    		})
    		.on('click.dtSelect', selector, function (e) {
    			var items = dt.select.items();
    			var idx;

    			// If text was selected (click and drag), then we shouldn't change
    			// the row's selected state
    			if (matchSelection) {
    				var selection = window.getSelection();

    				// If the element that contains the selection is not in the table, we can ignore it
    				// This can happen if the developer selects text from the click event
    				if (
    					!selection.anchorNode ||
    					$(selection.anchorNode).closest('table')[0] === dt.table().node()
    				) {
    					if (selection !== matchSelection) {
    						return;
    					}
    				}
    			}

    			var ctx = dt.settings()[0];
    			var wrapperClass = dt.settings()[0].oClasses.sWrapper.trim().replace(/ +/g, '.');

    			// Ignore clicks inside a sub-table
    			if ($(e.target).closest('div.' + wrapperClass)[0] != dt.table().container()) {
    				return;
    			}

    			var cell = dt.cell($(e.target).closest('td, th'));

    			// Check the cell actually belongs to the host DataTable (so child
    			// rows, etc, are ignored)
    			if (!cell.any()) {
    				return;
    			}

    			var event = $.Event('user-select.dt');
    			eventTrigger(dt, event, [items, cell, e]);

    			if (event.isDefaultPrevented()) {
    				return;
    			}

    			var cellIndex = cell.index();
    			if (items === 'row') {
    				idx = cellIndex.row;
    				typeSelect(e, dt, ctx, 'row', idx);
    			}
    			else if (items === 'column') {
    				idx = cell.index().column;
    				typeSelect(e, dt, ctx, 'column', idx);
    			}
    			else if (items === 'cell') {
    				idx = cell.index();
    				typeSelect(e, dt, ctx, 'cell', idx);
    			}

    			ctx._select_lastCell = cellIndex;
    		});

    	// Blurable
    	$('body').on('click.dtSelect' + _safeId(dt.table().node()), function (e) {
    		if (ctx._select.blurable) {
    			// If the click was inside the DataTables container, don't blur
    			if ($(e.target).parents().filter(dt.table().container()).length) {
    				return;
    			}

    			// Ignore elements which have been removed from the DOM (i.e. paging
    			// buttons)
    			if ($(e.target).parents('html').length === 0) {
    				return;
    			}

    			// Don't blur in Editor form
    			if ($(e.target).parents('div.DTE').length) {
    				return;
    			}

    			var event = $.Event('select-blur.dt');
    			eventTrigger(dt, event, [e.target, e]);

    			if (event.isDefaultPrevented()) {
    				return;
    			}

    			clear(ctx, true);
    		}
    	});
    }

    /**
     * Trigger an event on a DataTable
     *
     * @param {DataTable.Api} api      DataTable to trigger events on
     * @param  {boolean}      selected true if selected, false if deselected
     * @param  {string}       type     Item type acting on
     * @param  {boolean}      any      Require that there are values before
     *     triggering
     * @private
     */
    function eventTrigger(api, type, args, any) {
    	if (any && !api.flatten().length) {
    		return;
    	}

    	if (typeof type === 'string') {
    		type = type + '.dt';
    	}

    	args.unshift(api);

    	$(api.table().node()).trigger(type, args);
    }

    /**
     * Update the information element of the DataTable showing information about the
     * items selected. This is done by adding tags to the existing text
     *
     * @param {DataTable.Api} api DataTable to update
     * @private
     */
    function info(api) {
    	var ctx = api.settings()[0];

    	if (!ctx._select.info || !ctx.aanFeatures.i) {
    		return;
    	}

    	if (api.select.style() === 'api') {
    		return;
    	}

    	var rows = api.rows({ selected: true }).flatten().length;
    	var columns = api.columns({ selected: true }).flatten().length;
    	var cells = api.cells({ selected: true }).flatten().length;

    	var add = function (el, name, num) {
    		el.append(
    			$('<span class="select-item"/>').append(
    				api.i18n(
    					'select.' + name + 's',
    					{ _: '%d ' + name + 's selected', 0: '', 1: '1 ' + name + ' selected' },
    					num
    				)
    			)
    		);
    	};

    	// Internal knowledge of DataTables to loop over all information elements
    	$.each(ctx.aanFeatures.i, function (i, el) {
    		el = $(el);

    		var output = $('<span class="select-info"/>');
    		add(output, 'row', rows);
    		add(output, 'column', columns);
    		add(output, 'cell', cells);

    		var exisiting = el.children('span.select-info');
    		if (exisiting.length) {
    			exisiting.remove();
    		}

    		if (output.text() !== '') {
    			el.append(output);
    		}
    	});
    }

    /**
     * Initialisation of a new table. Attach event handlers and callbacks to allow
     * Select to operate correctly.
     *
     * This will occur _after_ the initial DataTables initialisation, although
     * before Ajax data is rendered, if there is ajax data
     *
     * @param  {DataTable.settings} ctx Settings object to operate on
     * @private
     */
    function init(ctx) {
    	var api = new DataTable.Api(ctx);
    	ctx._select_init = true;

    	// Row callback so that classes can be added to rows and cells if the item
    	// was selected before the element was created. This will happen with the
    	// `deferRender` option enabled.
    	//
    	// This method of attaching to `aoRowCreatedCallback` is a hack until
    	// DataTables has proper events for row manipulation If you are reviewing
    	// this code to create your own plug-ins, please do not do this!
    	ctx.aoRowCreatedCallback.push({
    		fn: function (row, data, index) {
    			var i, ien;
    			var d = ctx.aoData[index];

    			// Row
    			if (d._select_selected) {
    				$(row).addClass(ctx._select.className);
    			}

    			// Cells and columns - if separated out, we would need to do two
    			// loops, so it makes sense to combine them into a single one
    			for (i = 0, ien = ctx.aoColumns.length; i < ien; i++) {
    				if (
    					ctx.aoColumns[i]._select_selected ||
    					(d._selected_cells && d._selected_cells[i])
    				) {
    					$(d.anCells[i]).addClass(ctx._select.className);
    				}
    			}
    		},
    		sName: 'select-deferRender'
    	});

    	// On Ajax reload we want to reselect all rows which are currently selected,
    	// if there is an rowId (i.e. a unique value to identify each row with)
    	api.on('preXhr.dt.dtSelect', function (e, settings) {
    		if (settings !== api.settings()[0]) {
    			// Not triggered by our DataTable!
    			return;
    		}

    		// note that column selection doesn't need to be cached and then
    		// reselected, as they are already selected
    		var rows = api
    			.rows({ selected: true })
    			.ids(true)
    			.filter(function (d) {
    				return d !== undefined;
    			});

    		var cells = api
    			.cells({ selected: true })
    			.eq(0)
    			.map(function (cellIdx) {
    				var id = api.row(cellIdx.row).id(true);
    				return id ? { row: id, column: cellIdx.column } : undefined;
    			})
    			.filter(function (d) {
    				return d !== undefined;
    			});

    		// On the next draw, reselect the currently selected items
    		api.one('draw.dt.dtSelect', function () {
    			api.rows(rows).select();

    			// `cells` is not a cell index selector, so it needs a loop
    			if (cells.any()) {
    				cells.each(function (id) {
    					api.cells(id.row, id.column).select();
    				});
    			}
    		});
    	});

    	// Update the table information element with selected item summary
    	api.on('draw.dtSelect.dt select.dtSelect.dt deselect.dtSelect.dt info.dt', function () {
    		info(api);
    		api.state.save();
    	});

    	// Clean up and release
    	api.on('destroy.dtSelect', function () {
    		// Remove class directly rather than calling deselect - which would trigger events
    		$(api.rows({ selected: true }).nodes()).removeClass(api.settings()[0]._select.className);

    		disableMouseSelection(api);
    		api.off('.dtSelect');
    		$('body').off('.dtSelect' + _safeId(api.table().node()));
    	});
    }

    /**
     * Add one or more items (rows or columns) to the selection when shift clicking
     * in OS selection style
     *
     * @param  {DataTable.Api} dt   DataTable
     * @param  {string}        type Row or column range selector
     * @param  {object}        idx  Item index to select to
     * @param  {object}        last Item index to select from
     * @private
     */
    function rowColumnRange(dt, type, idx, last) {
    	// Add a range of rows from the last selected row to this one
    	var indexes = dt[type + 's']({ search: 'applied' }).indexes();
    	var idx1 = $.inArray(last, indexes);
    	var idx2 = $.inArray(idx, indexes);

    	if (!dt[type + 's']({ selected: true }).any() && idx1 === -1) {
    		// select from top to here - slightly odd, but both Windows and Mac OS
    		// do this
    		indexes.splice($.inArray(idx, indexes) + 1, indexes.length);
    	}
    	else {
    		// reverse so we can shift click 'up' as well as down
    		if (idx1 > idx2) {
    			var tmp = idx2;
    			idx2 = idx1;
    			idx1 = tmp;
    		}

    		indexes.splice(idx2 + 1, indexes.length);
    		indexes.splice(0, idx1);
    	}

    	if (!dt[type](idx, { selected: true }).any()) {
    		// Select range
    		dt[type + 's'](indexes).select();
    	}
    	else {
    		// Deselect range - need to keep the clicked on row selected
    		indexes.splice($.inArray(idx, indexes), 1);
    		dt[type + 's'](indexes).deselect();
    	}
    }

    /**
     * Clear all selected items
     *
     * @param  {DataTable.settings} ctx Settings object of the host DataTable
     * @param  {boolean} [force=false] Force the de-selection to happen, regardless
     *     of selection style
     * @private
     */
    function clear(ctx, force) {
    	if (force || ctx._select.style === 'single') {
    		var api = new DataTable.Api(ctx);

    		api.rows({ selected: true }).deselect();
    		api.columns({ selected: true }).deselect();
    		api.cells({ selected: true }).deselect();
    	}
    }

    /**
     * Select items based on the current configuration for style and items.
     *
     * @param  {object}             e    Mouse event object
     * @param  {DataTables.Api}     dt   DataTable
     * @param  {DataTable.settings} ctx  Settings object of the host DataTable
     * @param  {string}             type Items to select
     * @param  {int|object}         idx  Index of the item to select
     * @private
     */
    function typeSelect(e, dt, ctx, type, idx) {
    	var style = dt.select.style();
    	var toggleable = dt.select.toggleable();
    	var isSelected = dt[type](idx, { selected: true }).any();

    	if (isSelected && !toggleable) {
    		return;
    	}

    	if (style === 'os') {
    		if (e.ctrlKey || e.metaKey) {
    			// Add or remove from the selection
    			dt[type](idx).select(!isSelected);
    		}
    		else if (e.shiftKey) {
    			if (type === 'cell') {
    				cellRange(dt, idx, ctx._select_lastCell || null);
    			}
    			else {
    				rowColumnRange(
    					dt,
    					type,
    					idx,
    					ctx._select_lastCell ? ctx._select_lastCell[type] : null
    				);
    			}
    		}
    		else {
    			// No cmd or shift click - deselect if selected, or select
    			// this row only
    			var selected = dt[type + 's']({ selected: true });

    			if (isSelected && selected.flatten().length === 1) {
    				dt[type](idx).deselect();
    			}
    			else {
    				selected.deselect();
    				dt[type](idx).select();
    			}
    		}
    	}
    	else if (style == 'multi+shift') {
    		if (e.shiftKey) {
    			if (type === 'cell') {
    				cellRange(dt, idx, ctx._select_lastCell || null);
    			}
    			else {
    				rowColumnRange(
    					dt,
    					type,
    					idx,
    					ctx._select_lastCell ? ctx._select_lastCell[type] : null
    				);
    			}
    		}
    		else {
    			dt[type](idx).select(!isSelected);
    		}
    	}
    	else {
    		dt[type](idx).select(!isSelected);
    	}
    }

    function _safeId(node) {
    	return node.id.replace(/[^a-zA-Z0-9\-\_]/g, '-');
    }

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * DataTables selectors
     */

    // row and column are basically identical just assigned to different properties
    // and checking a different array, so we can dynamically create the functions to
    // reduce the code size
    $.each(
    	[
    		{ type: 'row', prop: 'aoData' },
    		{ type: 'column', prop: 'aoColumns' }
    	],
    	function (i, o) {
    		DataTable.ext.selector[o.type].push(function (settings, opts, indexes) {
    			var selected = opts.selected;
    			var data;
    			var out = [];

    			if (selected !== true && selected !== false) {
    				return indexes;
    			}

    			for (var i = 0, ien = indexes.length; i < ien; i++) {
    				data = settings[o.prop][indexes[i]];

    				if (
    					(selected === true && data._select_selected === true) ||
    					(selected === false && !data._select_selected)
    				) {
    					out.push(indexes[i]);
    				}
    			}

    			return out;
    		});
    	}
    );

    DataTable.ext.selector.cell.push(function (settings, opts, cells) {
    	var selected = opts.selected;
    	var rowData;
    	var out = [];

    	if (selected === undefined) {
    		return cells;
    	}

    	for (var i = 0, ien = cells.length; i < ien; i++) {
    		rowData = settings.aoData[cells[i].row];

    		if (
    			(selected === true &&
    				rowData._selected_cells &&
    				rowData._selected_cells[cells[i].column] === true) ||
    			(selected === false &&
    				(!rowData._selected_cells || !rowData._selected_cells[cells[i].column]))
    		) {
    			out.push(cells[i]);
    		}
    	}

    	return out;
    });

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * DataTables API
     *
     * For complete documentation, please refer to the docs/api directory or the
     * DataTables site
     */

    // Local variables to improve compression
    var apiRegister = DataTable.Api.register;
    var apiRegisterPlural = DataTable.Api.registerPlural;

    apiRegister('select()', function () {
    	return this.iterator('table', function (ctx) {
    		DataTable.select.init(new DataTable.Api(ctx));
    	});
    });

    apiRegister('select.blurable()', function (flag) {
    	if (flag === undefined) {
    		return this.context[0]._select.blurable;
    	}

    	return this.iterator('table', function (ctx) {
    		ctx._select.blurable = flag;
    	});
    });

    apiRegister('select.toggleable()', function (flag) {
    	if (flag === undefined) {
    		return this.context[0]._select.toggleable;
    	}

    	return this.iterator('table', function (ctx) {
    		ctx._select.toggleable = flag;
    	});
    });

    apiRegister('select.info()', function (flag) {
    	if (flag === undefined) {
    		return this.context[0]._select.info;
    	}

    	return this.iterator('table', function (ctx) {
    		ctx._select.info = flag;
    	});
    });

    apiRegister('select.items()', function (items) {
    	if (items === undefined) {
    		return this.context[0]._select.items;
    	}

    	return this.iterator('table', function (ctx) {
    		ctx._select.items = items;

    		eventTrigger(new DataTable.Api(ctx), 'selectItems', [items]);
    	});
    });

    // Takes effect from the _next_ selection. None disables future selection, but
    // does not clear the current selection. Use the `deselect` methods for that
    apiRegister('select.style()', function (style) {
    	if (style === undefined) {
    		return this.context[0]._select.style;
    	}

    	return this.iterator('table', function (ctx) {
    		if (!ctx._select) {
    			DataTable.select.init(new DataTable.Api(ctx));
    		}

    		if (!ctx._select_init) {
    			init(ctx);
    		}

    		ctx._select.style = style;

    		// Add / remove mouse event handlers. They aren't required when only
    		// API selection is available
    		var dt = new DataTable.Api(ctx);
    		disableMouseSelection(dt);

    		if (style !== 'api') {
    			enableMouseSelection(dt);
    		}

    		eventTrigger(new DataTable.Api(ctx), 'selectStyle', [style]);
    	});
    });

    apiRegister('select.selector()', function (selector) {
    	if (selector === undefined) {
    		return this.context[0]._select.selector;
    	}

    	return this.iterator('table', function (ctx) {
    		disableMouseSelection(new DataTable.Api(ctx));

    		ctx._select.selector = selector;

    		if (ctx._select.style !== 'api') {
    			enableMouseSelection(new DataTable.Api(ctx));
    		}
    	});
    });

    apiRegisterPlural('rows().select()', 'row().select()', function (select) {
    	var api = this;

    	if (select === false) {
    		return this.deselect();
    	}

    	this.iterator('row', function (ctx, idx) {
    		clear(ctx);

    		ctx.aoData[idx]._select_selected = true;
    		$(ctx.aoData[idx].nTr).addClass(ctx._select.className);
    	});

    	this.iterator('table', function (ctx, i) {
    		eventTrigger(api, 'select', ['row', api[i]], true);
    	});

    	return this;
    });

    apiRegister('row().selected()', function () {
    	var ctx = this.context[0];

    	if (ctx && this.length && ctx.aoData[this[0]] && ctx.aoData[this[0]]._select_selected) {
    		return true;
    	}

    	return false;
    });

    apiRegisterPlural('columns().select()', 'column().select()', function (select) {
    	var api = this;

    	if (select === false) {
    		return this.deselect();
    	}

    	this.iterator('column', function (ctx, idx) {
    		clear(ctx);

    		ctx.aoColumns[idx]._select_selected = true;

    		var column = new DataTable.Api(ctx).column(idx);

    		$(column.header()).addClass(ctx._select.className);
    		$(column.footer()).addClass(ctx._select.className);

    		column.nodes().to$().addClass(ctx._select.className);
    	});

    	this.iterator('table', function (ctx, i) {
    		eventTrigger(api, 'select', ['column', api[i]], true);
    	});

    	return this;
    });

    apiRegister('column().selected()', function () {
    	var ctx = this.context[0];

    	if (ctx && this.length && ctx.aoColumns[this[0]] && ctx.aoColumns[this[0]]._select_selected) {
    		return true;
    	}

    	return false;
    });

    apiRegisterPlural('cells().select()', 'cell().select()', function (select) {
    	var api = this;

    	if (select === false) {
    		return this.deselect();
    	}

    	this.iterator('cell', function (ctx, rowIdx, colIdx) {
    		clear(ctx);

    		var data = ctx.aoData[rowIdx];

    		if (data._selected_cells === undefined) {
    			data._selected_cells = [];
    		}

    		data._selected_cells[colIdx] = true;

    		if (data.anCells) {
    			$(data.anCells[colIdx]).addClass(ctx._select.className);
    		}
    	});

    	this.iterator('table', function (ctx, i) {
    		eventTrigger(api, 'select', ['cell', api.cells(api[i]).indexes().toArray()], true);
    	});

    	return this;
    });

    apiRegister('cell().selected()', function () {
    	var ctx = this.context[0];

    	if (ctx && this.length) {
    		var row = ctx.aoData[this[0][0].row];

    		if (row && row._selected_cells && row._selected_cells[this[0][0].column]) {
    			return true;
    		}
    	}

    	return false;
    });

    apiRegisterPlural('rows().deselect()', 'row().deselect()', function () {
    	var api = this;

    	this.iterator('row', function (ctx, idx) {
    		ctx.aoData[idx]._select_selected = false;
    		ctx._select_lastCell = null;
    		$(ctx.aoData[idx].nTr).removeClass(ctx._select.className);
    	});

    	this.iterator('table', function (ctx, i) {
    		eventTrigger(api, 'deselect', ['row', api[i]], true);
    	});

    	return this;
    });

    apiRegisterPlural('columns().deselect()', 'column().deselect()', function () {
    	var api = this;

    	this.iterator('column', function (ctx, idx) {
    		ctx.aoColumns[idx]._select_selected = false;

    		var api = new DataTable.Api(ctx);
    		var column = api.column(idx);

    		$(column.header()).removeClass(ctx._select.className);
    		$(column.footer()).removeClass(ctx._select.className);

    		// Need to loop over each cell, rather than just using
    		// `column().nodes()` as cells which are individually selected should
    		// not have the `selected` class removed from them
    		api.cells(null, idx)
    			.indexes()
    			.each(function (cellIdx) {
    				var data = ctx.aoData[cellIdx.row];
    				var cellSelected = data._selected_cells;

    				if (data.anCells && (!cellSelected || !cellSelected[cellIdx.column])) {
    					$(data.anCells[cellIdx.column]).removeClass(ctx._select.className);
    				}
    			});
    	});

    	this.iterator('table', function (ctx, i) {
    		eventTrigger(api, 'deselect', ['column', api[i]], true);
    	});

    	return this;
    });

    apiRegisterPlural('cells().deselect()', 'cell().deselect()', function () {
    	var api = this;

    	this.iterator('cell', function (ctx, rowIdx, colIdx) {
    		var data = ctx.aoData[rowIdx];

    		if (data._selected_cells !== undefined) {
    			data._selected_cells[colIdx] = false;
    		}

    		// Remove class only if the cells exist, and the cell is not column
    		// selected, in which case the class should remain (since it is selected
    		// in the column)
    		if (data.anCells && !ctx.aoColumns[colIdx]._select_selected) {
    			$(data.anCells[colIdx]).removeClass(ctx._select.className);
    		}
    	});

    	this.iterator('table', function (ctx, i) {
    		eventTrigger(api, 'deselect', ['cell', api[i]], true);
    	});

    	return this;
    });

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Buttons
     */
    function i18n(label, def) {
    	return function (dt) {
    		return dt.i18n('buttons.' + label, def);
    	};
    }

    // Common events with suitable namespaces
    function namespacedEvents(config) {
    	var unique = config._eventNamespace;

    	return 'draw.dt.DT' + unique + ' select.dt.DT' + unique + ' deselect.dt.DT' + unique;
    }

    function enabled(dt, config) {
    	if ($.inArray('rows', config.limitTo) !== -1 && dt.rows({ selected: true }).any()) {
    		return true;
    	}

    	if ($.inArray('columns', config.limitTo) !== -1 && dt.columns({ selected: true }).any()) {
    		return true;
    	}

    	if ($.inArray('cells', config.limitTo) !== -1 && dt.cells({ selected: true }).any()) {
    		return true;
    	}

    	return false;
    }

    var _buttonNamespace = 0;

    $.extend(DataTable.ext.buttons, {
    	selected: {
    		text: i18n('selected', 'Selected'),
    		className: 'buttons-selected',
    		limitTo: ['rows', 'columns', 'cells'],
    		init: function (dt, node, config) {
    			var that = this;
    			config._eventNamespace = '.select' + _buttonNamespace++;

    			// .DT namespace listeners are removed by DataTables automatically
    			// on table destroy
    			dt.on(namespacedEvents(config), function () {
    				that.enable(enabled(dt, config));
    			});

    			this.disable();
    		},
    		destroy: function (dt, node, config) {
    			dt.off(config._eventNamespace);
    		}
    	},
    	selectedSingle: {
    		text: i18n('selectedSingle', 'Selected single'),
    		className: 'buttons-selected-single',
    		init: function (dt, node, config) {
    			var that = this;
    			config._eventNamespace = '.select' + _buttonNamespace++;

    			dt.on(namespacedEvents(config), function () {
    				var count =
    					dt.rows({ selected: true }).flatten().length +
    					dt.columns({ selected: true }).flatten().length +
    					dt.cells({ selected: true }).flatten().length;

    				that.enable(count === 1);
    			});

    			this.disable();
    		},
    		destroy: function (dt, node, config) {
    			dt.off(config._eventNamespace);
    		}
    	},
    	selectAll: {
    		text: i18n('selectAll', 'Select all'),
    		className: 'buttons-select-all',
    		action: function (e, dt, node, config) {
    			var items = this.select.items();
    			var mod = config.selectorModifier;
    			
    			if (mod) {
    				if (typeof mod === 'function') {
    					mod = mod.call(dt, e, dt, node, config);
    				}

    				this[items + 's'](mod).select();
    			}
    			else {
    				this[items + 's']().select();
    			}
    		}
    		// selectorModifier can be specified
    	},
    	selectNone: {
    		text: i18n('selectNone', 'Deselect all'),
    		className: 'buttons-select-none',
    		action: function () {
    			clear(this.settings()[0], true);
    		},
    		init: function (dt, node, config) {
    			var that = this;
    			config._eventNamespace = '.select' + _buttonNamespace++;

    			dt.on(namespacedEvents(config), function () {
    				var count =
    					dt.rows({ selected: true }).flatten().length +
    					dt.columns({ selected: true }).flatten().length +
    					dt.cells({ selected: true }).flatten().length;

    				that.enable(count > 0);
    			});

    			this.disable();
    		},
    		destroy: function (dt, node, config) {
    			dt.off(config._eventNamespace);
    		}
    	},
    	showSelected: {
    		text: i18n('showSelected', 'Show only selected'),
    		className: 'buttons-show-selected',
    		action: function (e, dt, node, conf) {
    			// Works by having a filtering function which will reduce to the selected
    			// items only. So we can re-reference the function it gets stored in the
    			// `conf` object
    			if (conf._filter) {
    				var idx = DataTable.ext.search.indexOf(conf._filter);

    				if (idx !== -1) {
    					DataTable.ext.search.splice(idx, 1);
    					conf._filter = null;
    				}

    				this.active(false);
    			}
    			else {
    				var fn = function (s, data, idx) {
    					// Need to be sure we are operating on our table!
    					if (s !== dt.settings()[0]) {
    						return true;
    					}

    					let row = s.aoData[idx];

    					return row._select_selected;
    				};

    				conf._filter = fn;
    				DataTable.ext.search.push(fn);

    				this.active(true);
    			}

    			dt.draw();
    		}
    	}
    });

    $.each(['Row', 'Column', 'Cell'], function (i, item) {
    	var lc = item.toLowerCase();

    	DataTable.ext.buttons['select' + item + 's'] = {
    		text: i18n('select' + item + 's', 'Select ' + lc + 's'),
    		className: 'buttons-select-' + lc + 's',
    		action: function () {
    			this.select.items(lc);
    		},
    		init: function (dt) {
    			var that = this;

    			dt.on('selectItems.dt.DT', function (e, ctx, items) {
    				that.active(items === lc);
    			});
    		}
    	};
    });

    $.fn.DataTable.select = DataTable.select;

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
     * Initialisation
     */

    // DataTables creation - check if select has been defined in the options. Note
    // this required that the table be in the document! If it isn't then something
    // needs to trigger this method unfortunately. The next major release of
    // DataTables will rework the events and address this.
    $(document).on('preInit.dt.dtSelect', function (e, ctx) {
    	if (e.namespace !== 'dt') {
    		return;
    	}

    	DataTable.select.init(new DataTable.Api(ctx));
    });

    /* src/Table.svelte generated by Svelte v3.59.2 */
    const file$1 = "src/Table.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[23] = i;
    	return child_ctx;
    }

    function get_each_context_5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    // (118:2) <Button onClick={showRowCreation} class="add-button" width={37} text="New Row" textHeight={20} fill={false}>
    function create_default_slot_1(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			attr_dev(path, "stroke-width", "4.726");
    			attr_dev(path, "d", "M25.056 66.016H43.96c15.754 0 22.055-6.301 22.055-22.055V25.056C66.016 9.302 59.715 3 43.961 3H25.056C9.302 3 3 9.302 3 25.056V43.96c0 15.754 6.302 22.055 22.056 22.055Zm-3.151-31.508H47.11M34.508 47.111V21.905");
    			attr_dev(path, "class", "svelte-1purbsm");
    			add_location(path, file$1, 119, 6, 4563);
    			attr_dev(svg, "class", "button-vector svelte-1purbsm");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "37");
    			attr_dev(svg, "height", "37");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 69 69");
    			add_location(svg, file$1, 118, 4, 4439);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(118:2) <Button onClick={showRowCreation} class=\\\"add-button\\\" width={37} text=\\\"New Row\\\" textHeight={20} fill={false}>",
    		ctx
    	});

    	return block;
    }

    // (123:2) <Button onClick={() => deleteSelectedRows()} class="delete-button" width={37} text="Delete" textHeight={20} fill={true} confirmation="Are you sure you want to delete those {selectedData.length} elements ? This action is irreversible." >
    function create_default_slot(ctx) {
    	let svg;
    	let path0;
    	let path1;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(path0, "d", "M27.647.583 7.127 8.269C3.208 9.76 0 14.388 0 18.604v30.22c0 3.023 1.977 7.015 4.403 8.806l20.52 15.334c3.62 2.724 9.551 2.724 13.17 0l20.52-15.334c2.426-1.828 4.403-5.783 4.403-8.805V18.604c0-4.179-3.208-8.843-7.126-10.298L35.37.62C33.28-.2 29.773-.2 27.647.583Z");
    			attr_dev(path0, "opacity", ".4");
    			attr_dev(path0, "class", "svelte-1purbsm");
    			add_location(path0, file$1, 124, 6, 5244);
    			attr_dev(path1, "d", "m41.526 41.063-5.933-5.932 5.783-5.783a2.815 2.815 0 0 0 0-3.955 2.815 2.815 0 0 0-3.954 0l-5.783 5.783-5.933-5.932a2.815 2.815 0 0 0-3.954 0 2.815 2.815 0 0 0 0 3.955l5.932 5.932-6.12 6.12a2.815 2.815 0 0 0 0 3.954c.56.56 1.27.82 1.978.82.71 0 1.418-.26 1.978-.82l6.119-6.119 5.932 5.932c.56.56 1.268.821 1.977.821a2.77 2.77 0 0 0 1.978-.82c1.082-1.12 1.082-2.873 0-3.956Z");
    			attr_dev(path1, "class", "svelte-1purbsm");
    			add_location(path1, file$1, 125, 6, 5539);
    			attr_dev(svg, "class", "button-vector svelte-1purbsm");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "37");
    			attr_dev(svg, "height", "37");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "viewBox", "0 0 64 76");
    			add_location(svg, file$1, 123, 4, 5120);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(123:2) <Button onClick={() => deleteSelectedRows()} class=\\\"delete-button\\\" width={37} text=\\\"Delete\\\" textHeight={20} fill={true} confirmation=\\\"Are you sure you want to delete those {selectedData.length} elements ? This action is irreversible.\\\" >",
    		ctx
    	});

    	return block;
    }

    // (134:8) {#each columnNames as column}
    function create_each_block_5(ctx) {
    	let th;
    	let t0_value = /*column*/ ctx[12] + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			th = element("th");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(th, "class", " svelte-1purbsm");
    			add_location(th, file$1, 134, 10, 6145);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, th, anchor);
    			append_dev(th, t0);
    			append_dev(th, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*columnNames*/ 4 && t0_value !== (t0_value = /*column*/ ctx[12] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(th);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5.name,
    		type: "each",
    		source: "(134:8) {#each columnNames as column}",
    		ctx
    	});

    	return block;
    }

    // (142:6) {#if tableData.length == 0}
    function create_if_block$1(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_3 = { length: 15 };
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_3.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(142:6) {#if tableData.length == 0}",
    		ctx
    	});

    	return block;
    }

    // (145:12) {#each {length: 3} as _, i}
    function create_each_block_4(ctx) {
    	let th;
    	let textinputskeleton;
    	let current;

    	textinputskeleton = new TextInputSkeleton$1({
    			props: { hideLabel: true },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			th = element("th");
    			create_component(textinputskeleton.$$.fragment);
    			attr_dev(th, "class", " svelte-1purbsm");
    			add_location(th, file$1, 145, 14, 6401);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, th, anchor);
    			mount_component(textinputskeleton, th, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(textinputskeleton.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(textinputskeleton.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(th);
    			destroy_component(textinputskeleton);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(145:12) {#each {length: 3} as _, i}",
    		ctx
    	});

    	return block;
    }

    // (143:8) {#each {length: 15} as _, i}
    function create_each_block_3(ctx) {
    	let tr;
    	let t;
    	let current;
    	let each_value_4 = { length: 3 };
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			attr_dev(tr, "class", "row svelte-1purbsm");
    			add_location(tr, file$1, 143, 10, 6330);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(tr, null);
    				}
    			}

    			append_dev(tr, t);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_4.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(143:8) {#each {length: 15} as _, i}",
    		ctx
    	});

    	return block;
    }

    // (155:10) {#each row as cell}
    function create_each_block_2(ctx) {
    	let th;
    	let t_value = /*cell*/ ctx[18] + "";
    	let t;

    	const block = {
    		c: function create() {
    			th = element("th");
    			t = text(t_value);
    			attr_dev(th, "class", " svelte-1purbsm");
    			add_location(th, file$1, 155, 12, 6645);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, th, anchor);
    			append_dev(th, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*tableData*/ 8 && t_value !== (t_value = /*cell*/ ctx[18] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(th);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(155:10) {#each row as cell}",
    		ctx
    	});

    	return block;
    }

    // (153:6) {#each tableData as row}
    function create_each_block_1(ctx) {
    	let tr;
    	let t;
    	let each_value_2 = /*row*/ ctx[15];
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			attr_dev(tr, "class", "row svelte-1purbsm");
    			add_location(tr, file$1, 153, 8, 6586);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(tr, null);
    				}
    			}

    			append_dev(tr, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*tableData*/ 8) {
    				each_value_2 = /*row*/ ctx[15];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tr, t);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(153:6) {#each tableData as row}",
    		ctx
    	});

    	return block;
    }

    // (165:8) {#each columnNames as column}
    function create_each_block(ctx) {
    	let th;
    	let div1;
    	let div0;
    	let t0_value = /*column*/ ctx[12] + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			th = element("th");
    			div1 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(div0, "class", "footer svelte-1purbsm");
    			add_location(div0, file$1, 167, 14, 6911);
    			attr_dev(div1, "class", " svelte-1purbsm");
    			add_location(div1, file$1, 166, 12, 6882);
    			attr_dev(th, "class", "footer-search svelte-1purbsm");
    			add_location(th, file$1, 165, 10, 6843);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, th, anchor);
    			append_dev(th, div1);
    			append_dev(div1, div0);
    			append_dev(div0, t0);
    			append_dev(th, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*columnNames*/ 4 && t0_value !== (t0_value = /*column*/ ctx[12] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(th);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(165:8) {#each columnNames as column}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let t0;
    	let div1;
    	let h1;
    	let t1_value = /*viewName*/ ctx[4].toLocaleUpperCase() + "";
    	let t1;
    	let t2;
    	let div0;
    	let t3;
    	let img;
    	let img_src_value;
    	let t4;
    	let div2;
    	let button0;
    	let t5;
    	let button1;
    	let t6;
    	let div3;
    	let table_1;
    	let thead;
    	let tr0;
    	let t7;
    	let tbody;
    	let t8;
    	let t9;
    	let tfoot;
    	let tr1;
    	let current;

    	button0 = new Button({
    			props: {
    				onClick: /*showRowCreation*/ ctx[1],
    				class: "add-button",
    				width: 37,
    				text: "New Row",
    				textHeight: 20,
    				fill: false,
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button1 = new Button({
    			props: {
    				onClick: /*func*/ ctx[9],
    				class: "delete-button",
    				width: 37,
    				text: "Delete",
    				textHeight: 20,
    				fill: true,
    				confirmation: "Are you sure you want to delete those " + /*selectedData*/ ctx[0].length + " elements ? This action is irreversible.",
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let each_value_5 = /*columnNames*/ ctx[2];
    	validate_each_argument(each_value_5);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks_2[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    	}

    	let if_block = /*tableData*/ ctx[3].length == 0 && create_if_block$1(ctx);
    	let each_value_1 = /*tableData*/ ctx[3];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_value = /*columnNames*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			t0 = space();
    			div1 = element("div");
    			h1 = element("h1");
    			t1 = text(t1_value);
    			t2 = space();
    			div0 = element("div");
    			t3 = space();
    			img = element("img");
    			t4 = space();
    			div2 = element("div");
    			create_component(button0.$$.fragment);
    			t5 = space();
    			create_component(button1.$$.fragment);
    			t6 = space();
    			div3 = element("div");
    			table_1 = element("table");
    			thead = element("thead");
    			tr0 = element("tr");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t7 = space();
    			tbody = element("tbody");
    			if (if_block) if_block.c();
    			t8 = space();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t9 = space();
    			tfoot = element("tfoot");
    			tr1 = element("tr");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h1, "class", "vue-tudiants-1re-anne valign-text-middle svelte-1purbsm");
    			add_location(h1, file$1, 112, 2, 3981);
    			attr_dev(div0, "class", "top-seperator svelte-1purbsm");
    			add_location(div0, file$1, 113, 2, 4072);
    			attr_dev(div1, "class", "frame-31 svelte-1purbsm");
    			add_location(div1, file$1, 111, 0, 3956);
    			attr_dev(img, "id", "search-vector");
    			attr_dev(img, "class", "vector svelte-1purbsm");
    			if (!src_url_equal(img.src, img_src_value = "https://anima-uploads.s3.amazonaws.com/projects/63f7f6d546da9210f99dd5aa/releases/64a3f5479ef0ce55861f0160/img/vector.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Vector");
    			add_location(img, file$1, 115, 0, 4113);
    			attr_dev(div2, "class", "table-buttons svelte-1purbsm");
    			add_location(div2, file$1, 116, 0, 4296);
    			attr_dev(tr0, "class", "row-1 svelte-1purbsm");
    			add_location(tr0, file$1, 132, 6, 6078);
    			attr_dev(thead, "class", "svelte-1purbsm");
    			add_location(thead, file$1, 131, 4, 6064);
    			attr_dev(tbody, "class", "svelte-1purbsm");
    			add_location(tbody, file$1, 140, 4, 6241);
    			attr_dev(tr1, "class", "svelte-1purbsm");
    			add_location(tr1, file$1, 163, 6, 6790);
    			attr_dev(tfoot, "class", "footer svelte-1purbsm");
    			add_location(tfoot, file$1, 162, 4, 6761);
    			attr_dev(table_1, "id", "table");
    			attr_dev(table_1, "class", "dataTable table hover order-column row-border svelte-1purbsm");
    			add_location(table_1, file$1, 130, 2, 5987);
    			attr_dev(div3, "class", "table-container svelte-1purbsm");
    			add_location(div3, file$1, 129, 0, 5955);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h1);
    			append_dev(h1, t1);
    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, img, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div2, anchor);
    			mount_component(button0, div2, null);
    			append_dev(div2, t5);
    			mount_component(button1, div2, null);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, table_1);
    			append_dev(table_1, thead);
    			append_dev(thead, tr0);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				if (each_blocks_2[i]) {
    					each_blocks_2[i].m(tr0, null);
    				}
    			}

    			append_dev(table_1, t7);
    			append_dev(table_1, tbody);
    			if (if_block) if_block.m(tbody, null);
    			append_dev(tbody, t8);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				if (each_blocks_1[i]) {
    					each_blocks_1[i].m(tbody, null);
    				}
    			}

    			append_dev(table_1, t9);
    			append_dev(table_1, tfoot);
    			append_dev(tfoot, tr1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(tr1, null);
    				}
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*viewName*/ 16) && t1_value !== (t1_value = /*viewName*/ ctx[4].toLocaleUpperCase() + "")) set_data_dev(t1, t1_value);
    			const button0_changes = {};
    			if (dirty & /*showRowCreation*/ 2) button0_changes.onClick = /*showRowCreation*/ ctx[1];

    			if (dirty & /*$$scope*/ 134217728) {
    				button0_changes.$$scope = { dirty, ctx };
    			}

    			button0.$set(button0_changes);
    			const button1_changes = {};
    			if (dirty & /*selectedData*/ 1) button1_changes.confirmation = "Are you sure you want to delete those " + /*selectedData*/ ctx[0].length + " elements ? This action is irreversible.";

    			if (dirty & /*$$scope*/ 134217728) {
    				button1_changes.$$scope = { dirty, ctx };
    			}

    			button1.$set(button1_changes);

    			if (dirty & /*columnNames*/ 4) {
    				each_value_5 = /*columnNames*/ ctx[2];
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5(ctx, each_value_5, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_5(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(tr0, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_5.length;
    			}

    			if (/*tableData*/ ctx[3].length == 0) {
    				if (if_block) {
    					if (dirty & /*tableData*/ 8) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(tbody, t8);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*tableData*/ 8) {
    				each_value_1 = /*tableData*/ ctx[3];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(tbody, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*columnNames*/ 4) {
    				each_value = /*columnNames*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tr1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button0.$$.fragment, local);
    			transition_in(button1.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button0.$$.fragment, local);
    			transition_out(button1.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div2);
    			destroy_component(button0);
    			destroy_component(button1);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div3);
    			destroy_each(each_blocks_2, detaching);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Table', slots, []);
    	let { showRowCreation } = $$props;
    	let { deleteRows } = $$props;
    	let { columnNames = [] } = $$props;
    	let { tableData = [] } = $$props;
    	let { selectedData = [] } = $$props;
    	let { showEditFrame } = $$props;
    	let { hideEditFrame } = $$props;
    	let { viewName = "View" } = $$props;
    	let newRow = [];
    	let table;

    	function deleteSelectedRows() {
    		deleteRows(selectedData);
    	}

    	onMount(async () => {
    		j('#table tfoot th').each(function () {
    			let title = j(this).text();
    			j(this).html('<input type="text" placeholder="Search ' + title + '" />');
    		});

    		table = new DataTable('#table',
    		{
    				search: { return: false },
    				responsive: true,
    				paging: true,
    				scrollCollapse: true,
    				scrollX: true,
    				ordering: true,
    				scrollY: "620px",
    				select: true,
    				pageLength: 200,
    				dom: 'Plfrtip',
    				searchPanes: { viewTotal: true },
    				buttons: ['add', 'delete']
    			});

    		table.on('select', function (e, dt, type, indexes) {
    			$$invalidate(0, selectedData = table.rows({ selected: true }).data().toArray());
    			if (selectedData.length == 1) showEditFrame(e); else hideEditFrame(e);
    		});

    		table.columns().every(function () {
    			const that = this;

    			j('input', this.footer()).on('keyup change', function () {
    				if (that.search() !== this.value) {
    					that.search(this.value).draw();
    				}
    			});
    		});

    		table.columns.adjust().draw();
    		j('.table').css({ "width": "100%" });

    		//Editing the datatable
    		j('#table_length')[0].remove();

    		j('#table_wrapper')[0].prepend(j('.table-buttons')[0]);
    		j('#table_filter')[0].prepend(j('#search-vector')[0]);

    		//Editing table filter (the searchbar)
    		j('#table_wrapper .table-buttons')[0].prepend(j('#table_filter')[0]);

    		j('#table_filter')[0].classList.add('lexenddeca-normal-oslo-gray-24px'); // Changing fonts (unnecessary)
    		j('#table_filter')[0].appendChild(j('#table_filter label input')[0]); // Moving input out of label
    		j('#table_filter label')[0].remove(); // Cringe useless label
    		j('#table_filter input')[0].classList.add('lexenddeca-normal-oslo-gray-24px'); // Unnecessary again
    		j('#table_filter input')[0].attributes.placeholder.value = 'Search'; // Ignore TS error

    		j('thead tr th').each((i, e) => {
    			const correspondingWidth = j(j(`#table tfoot tr th`)[i]).css('width');
    			j(e).css({ "width": correspondingWidth });
    		});

    		j(document).on('keyup', function (e) {
    			const target = e.target;
    			if (target instanceof HTMLElement) if (target.tagName === 'INPUT') return;

    			if (e.keyCode >= 48 && e.keyCode <= 57) {
    				// Number
    				table.search(e.key).draw();

    				j('#table_filter input').trigger('focus');
    			} else if (e.keyCode >= 65 && e.keyCode <= 90) {
    				// Alphabet upper case
    				table.search(e.key).draw();

    				j('#table_filter input').trigger('focus');
    			} else if (e.keyCode >= 97 && e.keyCode <= 122) {
    				// Alphabet lower case
    				table.search(e.key).draw();

    				j('#table_filter input').trigger('focus');
    			}
    		});
    	});

    	$$self.$$.on_mount.push(function () {
    		if (showRowCreation === undefined && !('showRowCreation' in $$props || $$self.$$.bound[$$self.$$.props['showRowCreation']])) {
    			console.warn("<Table> was created without expected prop 'showRowCreation'");
    		}

    		if (deleteRows === undefined && !('deleteRows' in $$props || $$self.$$.bound[$$self.$$.props['deleteRows']])) {
    			console.warn("<Table> was created without expected prop 'deleteRows'");
    		}

    		if (showEditFrame === undefined && !('showEditFrame' in $$props || $$self.$$.bound[$$self.$$.props['showEditFrame']])) {
    			console.warn("<Table> was created without expected prop 'showEditFrame'");
    		}

    		if (hideEditFrame === undefined && !('hideEditFrame' in $$props || $$self.$$.bound[$$self.$$.props['hideEditFrame']])) {
    			console.warn("<Table> was created without expected prop 'hideEditFrame'");
    		}
    	});

    	const writable_props = [
    		'showRowCreation',
    		'deleteRows',
    		'columnNames',
    		'tableData',
    		'selectedData',
    		'showEditFrame',
    		'hideEditFrame',
    		'viewName'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Table> was created with unknown prop '${key}'`);
    	});

    	const func = () => deleteSelectedRows();

    	$$self.$$set = $$props => {
    		if ('showRowCreation' in $$props) $$invalidate(1, showRowCreation = $$props.showRowCreation);
    		if ('deleteRows' in $$props) $$invalidate(6, deleteRows = $$props.deleteRows);
    		if ('columnNames' in $$props) $$invalidate(2, columnNames = $$props.columnNames);
    		if ('tableData' in $$props) $$invalidate(3, tableData = $$props.tableData);
    		if ('selectedData' in $$props) $$invalidate(0, selectedData = $$props.selectedData);
    		if ('showEditFrame' in $$props) $$invalidate(7, showEditFrame = $$props.showEditFrame);
    		if ('hideEditFrame' in $$props) $$invalidate(8, hideEditFrame = $$props.hideEditFrame);
    		if ('viewName' in $$props) $$invalidate(4, viewName = $$props.viewName);
    	};

    	$$self.$capture_state = () => ({
    		s: j,
    		onMount,
    		tick,
    		DataTable,
    		TextInputSkeleton: TextInputSkeleton$1,
    		Button,
    		showRowCreation,
    		deleteRows,
    		columnNames,
    		tableData,
    		selectedData,
    		showEditFrame,
    		hideEditFrame,
    		viewName,
    		newRow,
    		table,
    		deleteSelectedRows
    	});

    	$$self.$inject_state = $$props => {
    		if ('showRowCreation' in $$props) $$invalidate(1, showRowCreation = $$props.showRowCreation);
    		if ('deleteRows' in $$props) $$invalidate(6, deleteRows = $$props.deleteRows);
    		if ('columnNames' in $$props) $$invalidate(2, columnNames = $$props.columnNames);
    		if ('tableData' in $$props) $$invalidate(3, tableData = $$props.tableData);
    		if ('selectedData' in $$props) $$invalidate(0, selectedData = $$props.selectedData);
    		if ('showEditFrame' in $$props) $$invalidate(7, showEditFrame = $$props.showEditFrame);
    		if ('hideEditFrame' in $$props) $$invalidate(8, hideEditFrame = $$props.hideEditFrame);
    		if ('viewName' in $$props) $$invalidate(4, viewName = $$props.viewName);
    		if ('newRow' in $$props) newRow = $$props.newRow;
    		if ('table' in $$props) table = $$props.table;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		selectedData,
    		showRowCreation,
    		columnNames,
    		tableData,
    		viewName,
    		deleteSelectedRows,
    		deleteRows,
    		showEditFrame,
    		hideEditFrame,
    		func
    	];
    }

    class Table extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$1, create_fragment$1, safe_not_equal, {
    			showRowCreation: 1,
    			deleteRows: 6,
    			columnNames: 2,
    			tableData: 3,
    			selectedData: 0,
    			showEditFrame: 7,
    			hideEditFrame: 8,
    			viewName: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Table",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get showRowCreation() {
    		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showRowCreation(value) {
    		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get deleteRows() {
    		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set deleteRows(value) {
    		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get columnNames() {
    		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set columnNames(value) {
    		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tableData() {
    		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tableData(value) {
    		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get selectedData() {
    		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedData(value) {
    		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get showEditFrame() {
    		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set showEditFrame(value) {
    		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hideEditFrame() {
    		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hideEditFrame(value) {
    		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewName() {
    		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewName(value) {
    		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/App.svelte generated by Svelte v3.59.2 */
    const file = "src/App.svelte";

    // (106:6) {#key rerenderTable}
    function create_key_block_2(ctx) {
    	let table;
    	let updating_selectedData;
    	let current;

    	function table_selectedData_binding(value) {
    		/*table_selectedData_binding*/ ctx[17](value);
    	}

    	let table_props = {
    		showRowCreation: /*showRowCreation*/ ctx[12],
    		deleteRows: /*deleteRows*/ ctx[10],
    		columnNames: /*columnNames*/ ctx[0],
    		tableData: /*tableData*/ ctx[1],
    		showEditFrame: /*func*/ ctx[15],
    		hideEditFrame: /*func_1*/ ctx[16],
    		viewName: /*view_path*/ ctx[6]
    		? /*view_path*/ ctx[6].split(' > ')[/*view_path*/ ctx[6].split(' > ').length - 1]
    		: "view"
    	};

    	if (/*selectedData*/ ctx[3] !== void 0) {
    		table_props.selectedData = /*selectedData*/ ctx[3];
    	}

    	table = new Table({ props: table_props, $$inline: true });
    	binding_callbacks.push(() => bind(table, 'selectedData', table_selectedData_binding));

    	const block = {
    		c: function create() {
    			create_component(table.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(table, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const table_changes = {};
    			if (dirty & /*columnNames*/ 1) table_changes.columnNames = /*columnNames*/ ctx[0];
    			if (dirty & /*tableData*/ 2) table_changes.tableData = /*tableData*/ ctx[1];
    			if (dirty & /*showEditFrame*/ 16) table_changes.showEditFrame = /*func*/ ctx[15];
    			if (dirty & /*showEditFrame*/ 16) table_changes.hideEditFrame = /*func_1*/ ctx[16];

    			if (dirty & /*view_path*/ 64) table_changes.viewName = /*view_path*/ ctx[6]
    			? /*view_path*/ ctx[6].split(' > ')[/*view_path*/ ctx[6].split(' > ').length - 1]
    			: "view";

    			if (!updating_selectedData && dirty & /*selectedData*/ 8) {
    				updating_selectedData = true;
    				table_changes.selectedData = /*selectedData*/ ctx[3];
    				add_flush_callback(() => updating_selectedData = false);
    			}

    			table.$set(table_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(table.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(table.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(table, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block_2.name,
    		type: "key",
    		source: "(106:6) {#key rerenderTable}",
    		ctx
    	});

    	return block;
    }

    // (115:6) {:else}
    function create_else_block(ctx) {
    	let previous_key = /*tableData*/ ctx[1];
    	let key_block_anchor;
    	let current;
    	let key_block = create_key_block(ctx);

    	const block = {
    		c: function create() {
    			key_block.c();
    			key_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			key_block.m(target, anchor);
    			insert_dev(target, key_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*tableData*/ 2 && safe_not_equal(previous_key, previous_key = /*tableData*/ ctx[1])) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop);
    				check_outros();
    				key_block = create_key_block(ctx);
    				key_block.c();
    				transition_in(key_block, 1);
    				key_block.m(key_block_anchor.parentNode, key_block_anchor);
    			} else {
    				key_block.p(ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(key_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(key_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(key_block_anchor);
    			key_block.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(115:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (113:6) {#if createMode}
    function create_if_block(ctx) {
    	let creationframe;
    	let current;

    	creationframe = new CreationFrame({
    			props: {
    				addRow: /*addRow*/ ctx[9],
    				hideCreationFrame: /*func_2*/ ctx[19],
    				columnNames: /*columnNames*/ ctx[0]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(creationframe.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(creationframe, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const creationframe_changes = {};
    			if (dirty & /*showEditFrame, createMode*/ 48) creationframe_changes.hideCreationFrame = /*func_2*/ ctx[19];
    			if (dirty & /*columnNames*/ 1) creationframe_changes.columnNames = /*columnNames*/ ctx[0];
    			creationframe.$set(creationframe_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(creationframe.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(creationframe.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(creationframe, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(113:6) {#if createMode}",
    		ctx
    	});

    	return block;
    }

    // (117:10) {#key selectedData}
    function create_key_block_1(ctx) {
    	let editframe;
    	let current;

    	editframe = new EditFrame({
    			props: {
    				updateRow: /*updateRow*/ ctx[11],
    				deleteRows: /*deleteRows*/ ctx[10],
    				hideEditFrame: /*func_3*/ ctx[20],
    				columnNames: /*columnNames*/ ctx[0],
    				oldRow: /*selectedData*/ ctx[3][0]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(editframe.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(editframe, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const editframe_changes = {};
    			if (dirty & /*showEditFrame*/ 16) editframe_changes.hideEditFrame = /*func_3*/ ctx[20];
    			if (dirty & /*columnNames*/ 1) editframe_changes.columnNames = /*columnNames*/ ctx[0];
    			if (dirty & /*selectedData*/ 8) editframe_changes.oldRow = /*selectedData*/ ctx[3][0];
    			editframe.$set(editframe_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(editframe.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(editframe.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(editframe, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block_1.name,
    		type: "key",
    		source: "(117:10) {#key selectedData}",
    		ctx
    	});

    	return block;
    }

    // (116:8) {#key tableData}
    function create_key_block(ctx) {
    	let previous_key = /*selectedData*/ ctx[3];
    	let key_block_anchor;
    	let current;
    	let key_block = create_key_block_1(ctx);

    	const block = {
    		c: function create() {
    			key_block.c();
    			key_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			key_block.m(target, anchor);
    			insert_dev(target, key_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*selectedData*/ 8 && safe_not_equal(previous_key, previous_key = /*selectedData*/ ctx[3])) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop);
    				check_outros();
    				key_block = create_key_block_1(ctx);
    				key_block.c();
    				transition_in(key_block, 1);
    				key_block.m(key_block_anchor.parentNode, key_block_anchor);
    			} else {
    				key_block.p(ctx, dirty);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(key_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(key_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(key_block_anchor);
    			key_block.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_key_block.name,
    		type: "key",
    		source: "(116:8) {#key tableData}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let t0;
    	let div6;
    	let div1;
    	let login;
    	let t1;
    	let div0;
    	let viewselectionframe;
    	let t2;
    	let div3;
    	let div2;
    	let previous_key = /*rerenderTable*/ ctx[7];
    	let t3;
    	let div5;
    	let div4;
    	let current_block_type_index;
    	let if_block;
    	let div4_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	login = new Login({ $$inline: true });

    	viewselectionframe = new VueSelectionFrame({
    			props: {
    				viewTree: /*viewTree*/ ctx[2],
    				fetchViewData: /*fetchViewData*/ ctx[8]
    			},
    			$$inline: true
    		});

    	let key_block = create_key_block_2(ctx);
    	const if_block_creators = [create_if_block, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*createMode*/ ctx[5]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			t0 = space();
    			div6 = element("div");
    			div1 = element("div");
    			create_component(login.$$.fragment);
    			t1 = space();
    			div0 = element("div");
    			create_component(viewselectionframe.$$.fragment);
    			t2 = space();
    			div3 = element("div");
    			div2 = element("div");
    			key_block.c();
    			t3 = space();
    			div5 = element("div");
    			div4 = element("div");
    			if_block.c();
    			attr_dev(div0, "class", "view-selection-frame svelte-1fnpjk6");
    			add_location(div0, file, 99, 4, 3188);
    			attr_dev(div1, "class", "left-container svelte-1fnpjk6");
    			add_location(div1, file, 97, 2, 3141);
    			attr_dev(div2, "id", "table-frame");
    			attr_dev(div2, "class", "table-frame screen svelte-1fnpjk6");
    			add_location(div2, file, 104, 4, 3409);
    			attr_dev(div3, "class", "side-container svelte-1fnpjk6");
    			add_location(div3, file, 103, 2, 3376);
    			attr_dev(div4, "class", div4_class_value = "" + (null_to_empty(`edit-frame screen ${/*showEditFrame*/ ctx[4] ? 'unmoved' : 'toright'}`) + " svelte-1fnpjk6"));
    			add_location(div4, file, 111, 4, 3959);
    			attr_dev(div5, "class", "relative");
    			add_location(div5, file, 110, 2, 3932);
    			attr_dev(div6, "class", "app-container svelte-1fnpjk6");
    			add_location(div6, file, 96, 0, 3111);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div1);
    			mount_component(login, div1, null);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			mount_component(viewselectionframe, div0, null);
    			append_dev(div6, t2);
    			append_dev(div6, div3);
    			append_dev(div3, div2);
    			key_block.m(div2, null);
    			append_dev(div6, t3);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			if_blocks[current_block_type_index].m(div4, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler*/ ctx[14], false, false, false, false),
    					listen_dev(div0, "keypress", /*keypress_handler*/ ctx[13], false, false, false, false),
    					listen_dev(div2, "click", self$1(/*click_handler_1*/ ctx[18]), false, false, false, false),
    					listen_dev(div2, "keypress", keypress_handler_1, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const viewselectionframe_changes = {};
    			if (dirty & /*viewTree*/ 4) viewselectionframe_changes.viewTree = /*viewTree*/ ctx[2];
    			viewselectionframe.$set(viewselectionframe_changes);

    			if (dirty & /*rerenderTable*/ 128 && safe_not_equal(previous_key, previous_key = /*rerenderTable*/ ctx[7])) {
    				group_outros();
    				transition_out(key_block, 1, 1, noop);
    				check_outros();
    				key_block = create_key_block_2(ctx);
    				key_block.c();
    				transition_in(key_block, 1);
    				key_block.m(div2, null);
    			} else {
    				key_block.p(ctx, dirty);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div4, null);
    			}

    			if (!current || dirty & /*showEditFrame*/ 16 && div4_class_value !== (div4_class_value = "" + (null_to_empty(`edit-frame screen ${/*showEditFrame*/ ctx[4] ? 'unmoved' : 'toright'}`) + " svelte-1fnpjk6"))) {
    				attr_dev(div4, "class", div4_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(login.$$.fragment, local);
    			transition_in(viewselectionframe.$$.fragment, local);
    			transition_in(key_block);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(login.$$.fragment, local);
    			transition_out(viewselectionframe.$$.fragment, local);
    			transition_out(key_block);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div6);
    			destroy_component(login);
    			destroy_component(viewselectionframe);
    			key_block.d(detaching);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function areRowEquals(row1, row2) {
    	for (let i = 0; i < row1.length; i++) {
    		if (row1[i].toString() !== row2[i].toString()) {
    			return false;
    		}
    	}

    	return true;
    }

    const keypress_handler_1 = () => true;

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);

    	let columnNames = [
    		'----------------------------',
    		'----------------------------',
    		'----------------------------'
    	];

    	let tableData = [];
    	let viewTree;
    	let selectedData = [];
    	let showEditFrame = false;
    	let createMode = false;
    	let view_path;
    	let rerenderTable = false;

    	function fetchViewData(path) {
    		if (path) {
    			$$invalidate(6, view_path = path);

    			apiActionRequest('fetch_all', path, [], []).then(res => {
    				$$invalidate(0, columnNames = res.names);
    				$$invalidate(1, tableData = res.table);
    				$$invalidate(7, rerenderTable = !rerenderTable);
    			});
    		}
    	}

    	function addRow(keys, newRow) {
    		if (view_path) apiActionRequest('create', view_path, keys, newRow).then(res => {
    			if (res != undefined) {
    				fetchViewData(view_path);
    			}
    		});
    	}

    	function deleteRows(rowsToBeDeleted) {
    		if (view_path) for (let rowToBeDeleted of rowsToBeDeleted) {
    			apiActionRequest('remove', view_path, columnNames, rowToBeDeleted).then(res => {
    				if (res != undefined) {
    					$$invalidate(1, tableData = tableData.filter(row => !areRowEquals(row, rowToBeDeleted)));
    					$$invalidate(7, rerenderTable = !rerenderTable);
    					$$invalidate(4, showEditFrame = false);
    					$$invalidate(5, createMode = false);
    				}
    			});
    		}
    	}

    	function updateRow(oldRow, newRow) {
    		if (view_path) apiActionRequest('update', view_path, columnNames, newRow).then(res => {
    			if (res != undefined) {
    				for (let i in tableData) {
    					if (areRowEquals(tableData[i], oldRow)) {
    						$$invalidate(1, tableData[i] = newRow, tableData);
    					}
    				}

    				$$invalidate(7, rerenderTable = !rerenderTable);
    			}
    		});
    	}

    	function showRowCreation() {
    		$$invalidate(5, createMode = true);
    		$$invalidate(4, showEditFrame = true);
    	}

    	onMount(async () => {
    		await auth();
    		refreshToken();

    		apiTreeRequest().then(res => {
    			$$invalidate(2, viewTree = res);
    		});
    	});

    	let theme = "g100"; // "white" | "g10" | "g80" | "g90" | "g100"
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	function keypress_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	const click_handler = () => $$invalidate(4, showEditFrame = false);
    	const func = () => $$invalidate(4, showEditFrame = true);
    	const func_1 = () => $$invalidate(4, showEditFrame = false);

    	function table_selectedData_binding(value) {
    		selectedData = value;
    		$$invalidate(3, selectedData);
    	}

    	const click_handler_1 = () => $$invalidate(4, showEditFrame = false);

    	const func_2 = () => {
    		$$invalidate(4, showEditFrame = false);
    		$$invalidate(5, createMode = false);
    	};

    	const func_3 = () => $$invalidate(4, showEditFrame = false);

    	$$self.$capture_state = () => ({
    		onMount,
    		ViewSelectionFrame: VueSelectionFrame,
    		EditFrame,
    		CreationFrame,
    		Login,
    		Table,
    		auth,
    		apiActionRequest,
    		refreshToken,
    		apiTreeRequest,
    		getMeta,
    		j,
    		columnNames,
    		tableData,
    		viewTree,
    		selectedData,
    		showEditFrame,
    		createMode,
    		view_path,
    		rerenderTable,
    		areRowEquals,
    		fetchViewData,
    		addRow,
    		deleteRows,
    		updateRow,
    		showRowCreation,
    		theme
    	});

    	$$self.$inject_state = $$props => {
    		if ('columnNames' in $$props) $$invalidate(0, columnNames = $$props.columnNames);
    		if ('tableData' in $$props) $$invalidate(1, tableData = $$props.tableData);
    		if ('viewTree' in $$props) $$invalidate(2, viewTree = $$props.viewTree);
    		if ('selectedData' in $$props) $$invalidate(3, selectedData = $$props.selectedData);
    		if ('showEditFrame' in $$props) $$invalidate(4, showEditFrame = $$props.showEditFrame);
    		if ('createMode' in $$props) $$invalidate(5, createMode = $$props.createMode);
    		if ('view_path' in $$props) $$invalidate(6, view_path = $$props.view_path);
    		if ('rerenderTable' in $$props) $$invalidate(7, rerenderTable = $$props.rerenderTable);
    		if ('theme' in $$props) $$invalidate(21, theme = $$props.theme);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	document.documentElement.setAttribute("theme", theme);

    	return [
    		columnNames,
    		tableData,
    		viewTree,
    		selectedData,
    		showEditFrame,
    		createMode,
    		view_path,
    		rerenderTable,
    		fetchViewData,
    		addRow,
    		deleteRows,
    		updateRow,
    		showRowCreation,
    		keypress_handler,
    		click_handler,
    		func,
    		func_1,
    		table_selectedData_binding,
    		click_handler_1,
    		func_2,
    		func_3
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
        target: document.body,
        props: {},
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
